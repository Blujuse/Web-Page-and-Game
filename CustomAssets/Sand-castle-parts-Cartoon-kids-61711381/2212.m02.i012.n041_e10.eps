%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.2
%%For: Lenovo
%%CreationDate: 2/17/2023
%%BoundingBox: 0 0 1019 801
%%HiResBoundingBox: 0 0 1018.1089 800.7866
%%CropBox: 0 0 1018.1089 800.7866
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.2.1 x236 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c004 79.164570, 2020/11/18-15:51:46        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   dc:headline="Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set"
   xmp:MetadataDate="2023-02-17T18:08:30+02:00"
   xmp:ModifyDate="2023-02-17T18:08:32.59+02:00"
   xmp:CreateDate="2023-02-17T18:08:30+02:00"
   xmp:CreatorTool="Adobe Illustrator 25.2 (Windows)"
   xmpMM:InstanceID="xmp.iid:7f16e6a4-d750-0644-b9c1-cb4d511aa366"
   xmpMM:DocumentID="xmp.did:7f16e6a4-d750-0644-b9c1-cb4d511aa366"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set of element sculpt architecture illustration</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Lenovo</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>element</rdf:li>
     <rdf:li> sculpt</rdf:li>
     <rdf:li> architecture</rdf:li>
     <rdf:li> recreation</rdf:li>
     <rdf:li> sandbox</rdf:li>
     <rdf:li> construction</rdf:li>
     <rdf:li> tower</rdf:li>
     <rdf:li> generator</rdf:li>
     <rdf:li> summertime</rdf:li>
     <rdf:li> fantasy</rdf:li>
     <rdf:li> outdoor</rdf:li>
     <rdf:li> activities</rdf:li>
     <rdf:li> background</rdf:li>
     <rdf:li> preschool</rdf:li>
     <rdf:li> collection</rdf:li>
     <rdf:li> play</rdf:li>
     <rdf:li> sea</rdf:li>
     <rdf:li> illustration</rdf:li>
     <rdf:li> set</rdf:li>
     <rdf:li> object</rdf:li>
     <rdf:li> coast</rdf:li>
     <rdf:li> game</rdf:li>
     <rdf:li> isolated</rdf:li>
     <rdf:li> cartoon</rdf:li>
     <rdf:li> decorative</rdf:li>
     <rdf:li> city</rdf:li>
     <rdf:li> house</rdf:li>
     <rdf:li> build</rdf:li>
     <rdf:li> sandy</rdf:li>
     <rdf:li> fortress</rdf:li>
     <rdf:li> coastline</rdf:li>
     <rdf:li> castle</rdf:li>
     <rdf:li> vector</rdf:li>
     <rdf:li> sand</rdf:li>
     <rdf:li> design</rdf:li>
     <rdf:li> detail</rdf:li>
     <rdf:li> handmade</rdf:li>
     <rdf:li> building</rdf:li>
     <rdf:li> roughness</rdf:li>
     <rdf:li> color</rdf:li>
     <rdf:li> sandcastle</rdf:li>
     <rdf:li> figure</rdf:li>
     <rdf:li> simple</rdf:li>
     <rdf:li> stairs</rdf:li>
     <rdf:li> fragment</rdf:li>
     <rdf:li> piece</rdf:li>
     <rdf:li> casual</rdf:li>
     <rdf:li> diy</rdf:li>
     <rdf:li> creative</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="204"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAzAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYqxXzTqg&#xA;lm+oRGsce8x8W7L9GarXZ7PAOjtNFhocZ+CN8q6ubu2a0matzbbVPVo+gb6OhzI0WfjjwnmGnW4O&#xA;GXEORT3M1wXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqk3mXVPqlsLeI/v59tuqp3P8&#xA;Mw9Zn4Y0OZczR4eKVnkEp8rat6F4dPmb91P8UBPZ+6/7L9fzzF0WejwHkXK1uDijxjmObL82zqXY&#xA;q7FXYq7FXYq7FXYq7FUv1zVF06xaQbzP8MK+LHv9GY+pzeHG+rkabD4kq6MGq27Oasx5Ox7k5o3d&#xA;qcF7Np+pR3UXVSCV7Mp2IPzw48hhISCZ4xOHCXpFpdQ3VtHcQnlHKvJT/D6M6GExIAh56cDEkHmF&#xA;XJMEgOq3xJPqU9uK/wBM0p1mTvdn+Wh3NfpW/wD9+/8ACr/TH83k7/uT+Xh3JrpdzJPblpDV1Yiu&#xA;w2oD2zYaTKZxs87cLUYxGWyvcSGOCSQdVUkV8QNsvyS4Yk+TVCNyASP9K3/+/f8AhV/pmo/N5O/7&#xA;nZfl4dzQ1e9JIEwJHWgX+mD85k7/ALl/LQ7k6sJnmtUkcguahqexpm108zKAJ5uBmgIyIDV/O8Np&#xA;JIhAcUCk+5Ax1EzGBI5rhgJSAKS/pbUP9+/8Kv8ATNV+byd/3Of+Wh3NHV9Q/wB+/wDCr/TH83k7&#xA;/uT+Wh3J/bSGW3ikPV1BNPEjfNxjlxRB8nWzjUiEJrN5Na2qtCwWRnC1oDtQnofllGrymEbHO23T&#xA;YxOW6RNruqj/AHf/AMKn9M135zJ3/c5/5XH3fepHzDq6kH1qgdiiUP3DH85k7/uT+Ux9zMc3bp1O&#xA;5uIreB55TSOMVY5GcxEWWUImRoPP7u8lvbqS6k6yH4F8FHQZoMmQzkZF32PGIREQgrslSkiGjKdm&#xA;HUHqMqLdDuZ95e1ddS09ZGI+sR/BOv8AlfzfJs32mz+JG+vV0WqweHOunRM8yHGdirsVdirsVdir&#xA;sVaZlVSzGiqKknoAMBNKBbAdX1JtS1FpRX6vD8EK/wAc0WozeJK+jvsGHw4V1KFIBFDuMobULer9&#xA;g/RgLZAp75M1n0Jzp8zfupjWEns/h/sv15n6DPR4TyLg9oaexxjmGbZt3TMUznHdOxVcruv2WIr1&#xA;oaYQSOSCAXNK/E8nJXqaknEyPeoiFoIIBHQ7jAyaVFUkqACeuBbXB3XZWIHsaZISI5IoFzO7CjMS&#xA;Pc1xMieagALMCVJfV5NzpSvw08MAZGl/qyKKK5A8ASMkJEdWPCCpSO7faYtTpU1wEk80gAIeRQyk&#xA;EVB6jAzCg+wpiyD0POkeeYj5s1T17hdOhb93GeU5Hc+H0Zqddns8A6O20OHhHGfgkuYDmqNyg9E0&#xA;FKGuJZRO6poGrNpl+spqYH+CdR3U9/mOuW6bN4cr6dWGpweJCuvR6Sjq6K6EMrAFWG4IPQ5vwbee&#xA;IpvCh2KuxV2KuxV2Ksb83as0cQ0+A/vpt5SOy+H05rtdnocA6ux0OCzxnkGMxoEQKO2at2RNrsVU&#xA;Ltaw18CD/DAWUOaDVipDKaEGoI7HA2vR/LurjUtPV2P+kRUSce/Zv9lm+0ufxI+Y5vParB4c66Hk&#xA;g77TpbO2luXZWiiHIha8iPl0/HMDJo5QBNig5WLUCZA6lIv0/Z/ySfcv/NWYXE5vgF36fs/5JPuX&#xA;/mrHiXwC79P2f8kn3L/zVjxL4Bd+n7P+ST7l/wCaseJfALR8w2QIHCSp9h/XHiT4Enfp+z/kk+5f&#xA;+aseJfALv09Z/wAkn3L/AM1Y8S+AWv09Z/ySfcv9ceJfALR1y0/kk+5f648S+CWjrdr/ACSfcP64&#xA;8SfBKw6xbH9l/uH9ceJfBKxtVtz+y/3D+uPEnwinFl5fur23iuVkRIZQGFa8gPlSn45mY9HKYBsU&#xA;XDyauMCRRsJ9r2qrp1g0gP75/hhX38fozY6nN4cb6uBpsPiSrowSJX+J5DWRzVic0TvD3BUxQtde&#xA;SMviDioS3IOQzPyXrPqRHTZm+OMFrcnuvdfo/V8s22gz2OA/B0/aGno8Y+LKc2TrHYq7FXYq7FUN&#xA;qN9FY2klxJ0QfCvi3YZXlyCESS2YsZnIAMAkklnnkuZjWaU1PsPDNBKRkbPMu+AEQAOQdkUraPzB&#xA;r8NNx74q1KvKNh7YlI5pdkG9MdC1V9N1BJtzC3wTr4qe/wAx1y/T5vDlfRx9Tg8SFdej0kGKaKu0&#xA;kUi/MMrD+IzoNiPJ53cHzYTr+mW1lf8ApwqBG6CQKd6VJFK/Rmk1WEQnQ5O60uaU4WUt9OP+UfcM&#xA;xnIstelF/Iv3DGk2XejF/IPuxpeIu9GL+QfdjS8Ra9CH+QY0vEXGCGn2BjS8RWLbxGjceI7qcFJ4&#xA;iu+rQfy/icNI4io3NuqLyQUA6jAQzjK0NkWxNvLGmQajqfpXFTFGhkZBtyoQKVH+tmVpMIyTo8nE&#xA;1mY44WOb0T93FF2SONfkAqj+Gb3YDydBuT5sC1fUG1K/ab/dEfwwL7Dvmi1GbxJX0d7gxeHCuvVD&#xA;ZQ2rXDmnE03377YqF2KpbIvGRh4E5FvHJdbXEtvPHPC3GSNgyn3GGMjE2ETiJCjyenaXqMWoWUd1&#xA;HtyFHX+Vh1GdDhyicQQ83mxHHIxKKy1qdirsVdirDPMWpi9uhHG1baE/D4M3dv6ZpdXn45UOQdzp&#xA;MPBGzzKVZiOU1QVr36Yq3irVR44qlcsYJK1NAe3tkHIBbxVmPkzWwyfo2dvjWptmPcdSn0dRm10G&#xA;o/gPwdR2hp6PGPit83f8dKP/AIwr/wASbK9f9Y9362Wh+g+95D58+vNriyRXEsX1WFHgCMVCvViW&#xA;oO5pmDbutOBwvQ8XCeeeWPr3+LfrElxK/wBaaYTKzEqw4syinT4Sopjbm5QOBl/mZ5k0G9MLtHKY&#xA;+Kupow5EA0PyOLi4hcgkf5dpcRQ3tvJK8kSNG8auxbiX5BqV8eONt2pA2d+YiTzQWVukrxxO0jyK&#xA;hK8inELWnhyxtdMOaeeWXmfQbIzO0koj4s7GrHiSBU/IYtOUVIsQ8z/Xv8W/WI7mVPqzwiFVYhQO&#xA;Ksw49Pi5GuNuViA4HoTKGUqeh2xcIPNfJyXaauZZJ5JPrMTNMHYsGaqkGh8K4CXYZQKeteRf+OvN&#xA;/wAw7f8AE0zN7O+s+79Tp+0v7se/9ab+adUAT6hC3xNvOw7Dsv05ka3PtwD4uJosO/GfgxkCgoOm&#xA;at2bRANK9txireKtVHjiqBu1BlYV+0N6ZEt0OSiqhVAHbxwMk88ra0NPvPSmalrOQHJ6K3Zv4HMz&#xA;R5+CVH6S4Wt0/iRsfUHoIIIqOmbx0LsVdiqE1W1uLqxkggcJI9NzUAiu4qPHKc8DKBAbcExGQJYH&#xA;cpNbTvBLEwkjNGpQj9eaKcTE0XewIkLBUvWP++3+4f1yNsuFaZR3if8A4HG015teqn++m/4HBa15&#xA;u9aP/fTf8CMbXhPet+tQfyH7hjaeAu+tQfyH7hja8BR2kWcuo3JS1AR4gHMjfDx32O1TXLsGKWQ+&#xA;loz5BjFy6pt5pRvr0IY8mEChm6VPJt8yNd9Y9zjaI+k+95h5vhJ1V1I+KWFREO7GrCi+O+YEndac&#xA;+lmkkTMtAxU+IyThAsL0CEjzBFHQ+pE8vqL3WisN/pORHNzcp9DJfMMTNo10ACfgqQN9gQT+GSLi&#xA;4T6glfkyOovJF3jPpqGHQkciRX25DIxbtSeTvOcdBZyNtGPUUsegJ4kCvvxOMl0x5pp5eiZdGtQQ&#xA;R8FQDtsSSPwyQacx9RY1r8JPmCRKH1JXi9Ne7VVRt47jInm5WI+hm3A5NwbYL5Zt634WlHhgb1B3&#xA;UgqKN4b5WHYZjs9G8ko36TnCnixt3Ct1oeab5ndn/Wf6v6nUdon0D+t+tS1Wyu7G44XAMjSVYSKe&#xA;QbffrQ5VnxSgfUzwZIzGyC9Y/wC+3+4f1ym26mjMP99P92NprzW+qn++W/4HBa15u9aP/fTf8CMb&#xA;XhPetNzAOqEfQMbTwl31qD+Q/cMbXgKtacbu5jtoY6ySnioIAGShHiNBjP0gk8gz/SbSe0sI7eZw&#xA;7pUClaAV2G/hm+wQMIAF0OeYlMkIzLml2KuxVg2vn/cvc/6w/wCIjNHqv7wu70v92EvrmO5DiAaV&#xA;FabjArq4VaZqdie22+BaQ12h4hyBWtDTw7YC2QKFrkWxlPkL/ey6/wCMa/8AEs2PZ31H3Os7T+ke&#xA;9GeaFrqEf/GIf8SbHX/WPd+tr0X0H3pOYwSCRUjofDMJzLb4Yq16YBJA3PU/LFbdwNfbwxVwjCig&#xA;FB4DFbcYwwoRUeBxW2+GKtemCQSNx0PzxW2+GKqc0YEUhA3I3P0YCyid0f5KFNVl/wCMDf8AE0zM&#xA;7O+s+79Tjdo/3Y9/60X5w/3pt/8AUP68s7Q+oNWg+ksfrmA57jQihFQe2BXdNsKuJoK4FUZlMkZN&#xA;OgqvjiWUTRQNcg3Jr5Y/471p/rN/xE5k6T+9Djaz+6k9IzfvOuxV2KuxVg2vn/cxc/6w/wCIjNHq&#xA;v7wu70v92EurmO5Dq4q86138ytT+vSW+iW8bQQsVNxKC3MjuoBUAfPCA5kNMK9Sa+TvPU2rXJ0/U&#xA;oFt77iWiaOoSQLuRxapBA3674CGvNg4RY5MvYBlKnocDjgpcylWKnqDTIN4LJ/IX+9l1/wAY1/4l&#xA;mx7O+o+51vaf0j3pj5lFb6P/AIxD/iTYdf8AWPd+tq0X0H3pTxzBcxawcEcVqD1NemKhdxxV3HFX&#xA;ccVdxxV3HFVCOF43qSXDbfL3OCmRlavxwsVk6/uX+RwFMeaM8mimpy/8YG/4muZnZ31n3fqaO0Po&#xA;Hv8A1ojzh/vTb/6h/XlvaH1Bq0H0lj1c17nurirD/OPnqbSLkafpsC3F9xDStJUpGDuBxWhJI367&#xA;YgORhwcQs8kq0L8ytT+vR2+t28awTMFFxECvAnuwJYEfLCQ2T0wr0vRa4HDQNxHwkNOh3GQIbomw&#xA;j/K//HetP9Zv+InMjSf3oaNZ/dSek5v3nXYq7FXYqwTzAf8Acxc/6w/4iM0eq/vC7zS/3YS1VVSS&#xA;OrGpzGcgrZ2IgkINCFahHyxUc3lFlYqLWOg6ipwW7M80y0O0VPMOnSUowkYV9jG2NteT6S9GlDst&#xA;FbifHC4IQMpPqNUEH3+WRLaOTJ/IJ/0y6/4xr/xLNh2d9R9zre0/pHvTTzEK3qf8Yh/xJsOv+se7&#xA;9bTo/oPvSrjmC5buOKu44q7jiruOKu44q7jiruOKu44qsnX9y/yOJZR5orygKalL/wAYW/4muZfZ&#xA;31n3fqaO0PoHv/Wq+cj/AKTb/wCof15Z2h9Qa+z/AKSxzipcPT4gKA5r3YWurhV5trlor+YdRkpV&#xA;jIor7CNcjbn4/pCW3tiptZKjoKjG2wc3q0RZrZPiPIoPi71phdaeaGuOalVYk0r8WRLZFH+Vz/ue&#xA;s/8AWb/iJzI0n96GjWf3UnpWb9512KuxV2KsB8xH/czdf6w/4iM0eq/vC73S/wB2EtDg9DXMdyKW&#xA;zmsL7VPE0+7AkPO7IxC1jBYAgUIJyt2MuaO0sodasOJBIkY0BrtwbCObXk+ks55ZY4KBuW/ft9H6&#xA;sgW2PJk35fmt7d/8Y1/4lmx7O+o+513af0j3pn5lM4vo/TQMvpDcnvyb3wa/6x7v1tWirgN96U8r&#xA;z/fY+8f1zB3cyo97uV5/vsfeP647rUe93K8/32PvH9cd1qPe7lef77H3j+uO61HvdyvP99j7x/XH&#xA;daj3tepdcuPprU70qP642VqLfK8/32PvH9cd1qPe7lef77H3j+uO61HvdyvP99j7x/XHdaj3rJmu&#xA;/Rf92Oh7j+uJtMRG+aM8mtOdTl9RAo9Btx481zM7O/vD7v1OP2jXhiu/9ar50NLq2/1D+vLe0PqD&#xA;X2f9JY3zFaV38M17sKbJB64qwbVCg1q/5EAmRTQmm3BcrPNzsf0hA3piNrIAwJIoADgbI83okBpD&#xA;GDsQo/VljrjzUL1t0+nAWcEZ5Wb/AHP2f+s3/EDl+k/vA06z+6k9NzfvOOxVDHUbIEgyio+f9MoO&#xA;qx97b4E+536Ssf8Afo+4/wBMH5rH3p8CfcwHzJeRDWrk1PFipU02I4jcZqNRMGZId3pcZ8MJYl1E&#xA;SEQEkmiqB1Jym3IMSjfqV/8A74b8P64Wvij3qLaO5JY2IJO5JVK1wJ8Qd6BeextZ2Qw+lMmzAIFI&#xA;+7BYbRAyC+LUYppFiiV3kY0VQNz+OPEg4yBZXy2Gos5Y27Cvuv8AXFROPeyDyU/1C7uXvQYVeMBS&#xA;29Ty9q5m6HJGEjxbOB2hEziOHdM/MyyyX0TxElDCpBU7H4mx1+8xXd+tq0NCBvvSj0bv/K+/+3ML&#xA;dzOKLvRu/wDK+/8Atx3Xiit43HPhU8utK4N02F3o3f8Alff/AG4d0cUXGG7p+19+CivFFpbe7AA+&#xA;Ikdyd8aKeKLfo3f+V9/9uHdHFF3o3f8Alff/AG47rxRaEN7yNa8e2+/68FFeKK2aG79J/tdD3xNp&#xA;jKNo3yYskepzPKaILdiSTsPjTM3s41M3/N/U4/aNGAr+d+td5ruI7y5ga0PrKqEMV7GvvTJa3LGZ&#xA;FG2GigYA8WyRC1uq1ELVPU7f1zCc3iHeg5r+GGRopeSSLsylTUYOINgxkiwpLPY3UyoIRNM+yjgC&#xA;T9+NhkYSARo0iRSGWwoRuCFjrX78LV4g71X6rqFP95ZP+F/5qxRxR70our9Gk4MGUoSCpFCD3rkS&#xA;XIjjTHyndRnX7Vt+KFmc02A4kVOXaaYGQEtGsgfCL0z9JWP+/R9x/pm5/NY+95/wJ9zhqNkSAJRU&#xA;/P8AphGqx96PAn3MdzRu1diqV6tpdzdTJJAyCi8SHqOhJ6gHxwN+LIIiih7PRL6O5jkmaIIjBjwL&#xA;E7GvcDFlLNEjZPMLjKaSpJXj+z1wAsiKSHV9Avrq9e4geLjIBUSFgQQAOwbwwEOTizxjGi1pWg3t&#xA;reLPcPFxQHiIyxJJBHcL44gJy5xIUE5fC4wQ8mLIJh9bW5hhovEwxrCfcp3/ABy3Jk4q8hTTHHwk&#xA;+ZtqmVsnUxVrita038cCW6YUOpirqYq6mKupirqYqpzj9y/yOAso80NZXa2wuKqWM0LQr7F6b/hk&#xA;8OThvzFMs2PiryNqcZApU9cgkolMWBSfVdCvbq8ae3eLi4HISFgQQKdg3hgIcnFnERRb0jQb21vk&#xA;uJ3i4oDQRliSSCO4XxxARlzxlGgyEZJxXKwatOxocCkMav8Ay1qEt5NLBJCY5GLjmWDDkakbK2Ah&#xA;zIaiIABtF6Fol3Y3DzXDxnknBVjqepBqSQvhiA15swkKCd13p+OScd2KHYqt48VbgNzU08TgS5OR&#xA;AZxRvDFSuwodirVBilo4FUpQ5QhDxbscWQUyCFAJqe5xSoSVr7Ysgr2H903+sf1DFhPmicLFYhkL&#xA;NzAAr8NPDAk0vwodirsVdirsVdirsVWT/wBy/wAjgKY80rbt88iG8qixoxViKlemSYWikxYFVXFC&#xA;8YUNsoYUNfoNMCgrhhQ7FXYq03LieIBbsDgSG8KGvPlpepp8Vxp/KL05CbhotjxI2Jp2rmy1uEcN&#xA;xDT2dlBkRLfuYF9f1n/ltl/4I5q3dcEO531/Wv8Altl/4I4rwQ7mvr+tf8tkn/BNivBDud9f1v8A&#xA;5bJP+DbFeCHc19f1v/lrk/4M47rwQ7mvr+t/8tUv/BnFPBDuaN/rf/LTKf8AZnHdeCHcpHVdVrQ3&#xA;Mtf9Y4LZeHHuaOqaketzJ/wRxtfDj3Ms8pTTTabI0zl2EzAFjU04rkg4OqAEtu5O8LjOxV2KuxV2&#xA;KuxV2KuxVomhAoTXv4YE0tn/ALl/kcSmPNjPmCaaGzRonKMZACVNDTi2QDm4QCd0hGp6kOlxJ/wR&#xA;w25Hhx7m/wBLap/y1S/8EcbXwo9zf6X1b/lql/4I42vhQ7nfpjV/+WuX/gjjaPCh3Ki6lrhFfrMo&#xA;+bnDujgh3Bd+kNc/5a5f+DOO68EO5v6/rn/LZJ/wbYo4Idzvr+tf8tkn/BNivBDub+v6z/y2y/8A&#xA;BHFeCHcz3yHaXr6fLcahyl9SQG3aXc8QNyK9q5tNFhHDcg6XtHKBICO3eywgEUPTNi6t5PqlrHFq&#xA;d3FGvGNJpFRR2AcgDOfyipEDvenwzJgCe4IX0hlbZbvR9sVt3o+2K20sfIV4kexxSS36Ptii3ej7&#xA;YralPZ8xVR8Q/HAQyjOkGYaGhFCMi2Wy3ykvHTZB/wAXN/xFckHB1X1fBOhWm4phcd2FXYq7FVqO&#xA;WZgVKhTsT3wJIXYUOpvWv0YFdhV2KrJ/7l/kcBTHmxrX15WaD/iwf8RbIObh5sfMQArTFybcIgRW&#xA;mK236QxW0Tb2VDzcfIZIBrlNXERNarTw98LC2/R9sVt3o+2K270fbFbRWl2scup2kci8o3mjVx4g&#xA;uAcsxC5gebXmmRAkdxesAACg6Z0DzDsVeZ6uldVvf+M8v/EznP5vrl7y9FgPoj7ggI7VY2JG9cqp&#xA;vM7VfTwsbd6eK2708Vt3p4rbvTxW1ojfka049vHFNoe8iAKtTc7HIlnAph5c1nSorj9DvcKmpS1n&#xA;ityCC0dKVUkcSfgO1a4YtGogT6ujJck4qUa55t8u6EyLqt6lvJIKpHRncjpXhGGanvTFshilLkER&#xA;o2vaPrVsbnS7pLqJTRitQynwZWAZfpGKJ45RNEI4luYAX4e7V/hgYpTrfm3y5oZVdUvo7eRxVYqM&#xA;8lPHhGGanvTCzhilLkHaJ5t8ua4WXS76O4kQVaKjJJTx4SBWp70xWeKUeYTfFrQGs69o+i2wudUu&#xA;ktYmNELVLMfBVUFm+gYs4Y5SNAIfQ/Nvl3XWddKvUuJIxV46MjgdK8JArU96YpnilHmE0n/uX+Rw&#xA;FjHmxHVtW02S6OlJOrX8YE0kABJVOlSacR9obVrkKc3HE8+iB9JeXKnxdK4t1t8Bii1W2iDSio6b&#xA;4Qxkdkd6eSard6eK2708Vt3p4rbvTxW0VpCU1Wy/4zxf8TGWYfrj7w1Zz6Je4vTM6B512KvOtVX/&#xA;AHKXn/GeT/iZzn831y95egw/RH3BC8crbbdxxW2uOKuC7Yq3xxW3ccVt3HFbQ16uyfTkSzgWC+aY&#xA;5YPMVhqMBK3FqInQj/JlY0wguVAXEh7PknTvnm/jl1nUrrVLxi73MjMoqaBa0UD2A2GC3eRHCAAn&#xA;X5ftPpHm6zELH6tfcreePsaglfuYA/fjbVqYiUD5PZ7uf6vazT05ekjPx8eIJpi6mIs0+eZbW41S&#xA;6l1HUHaW4uWLuT7/AMOwHYY27wARFB0VrcaXdRajp7tFcWzB0I9v4eI7jG1IEhRfQ1pP9YtYZ6cf&#xA;VRX4+HIA0xdHIUaeMfmAZ9X83XgmY/VrHjbwR9hQAt97EnG3baaIjAeaS2Ecujala6pZsUe2kVmF&#xA;TQrWjA+xGxxttkBIEF9Bz/3L/I4l0sebxrynFJL5gvdQmJae5WVmJ/ypVNMiTs7fJtEBmPHA0W7j&#xA;itq1ov736DhDGZ2RvHJNVu44rbuOK20UqCK098VtwSgA6++K2i9KX/cpZ/8AGeP/AImMsw/XH3hq&#xA;zfRL3F6LnQPPuxV57qg/3J3f/GaT/iZzn831y95d/h+iPuCFplba6gxVw4kVBqPbArqYVaVWp8VC&#xA;fbArdMKu+GtKivhgVD3o2T6cBZwYh5miDXiHwjX/AIkci5eLk9Yy107wywgH1SPbsf1nKrd7Lmmm&#xA;hQhfMOlGnS5X/iLYQWrL9B9z1PUpEbT71AfiWCSv/AHJ26uA3Dxq0gH1aLb9kZXbuTzddwD6tLt+&#xA;ycbUc3tGl7aZaf8AGCP/AIgMsDpZ/UXlOuwhvMOqmnW5b/iK5Al2uL6B7krv4B9Uk27D9YwW2x5v&#xA;cJ/7l/kcsLpI83lPliLjdsfGJv8AiS5W7bLyZKykqQNiehxabU4ldDxclid69QPpxSSi7QfvfoOS&#xA;DXPkjKZJqdTFXUxV1MVdTFUVpY/3J2n/ABmj/wCJjLMP1x94as30S9xehZ0DoHYq8/1Mf7krv/jN&#xA;J/xM5z+b65e8u/w/RH3BC0ytscVBFD0PXArSRqgoooMUk23TCh1MVdTFWhGgYsB8R6nAm0PejZPp&#xA;wSZ42LeYByvI0UFnZFCqASSS5A6ZBysfJ6jlzqHi9tG0EIhmUxyxkrIjAgggmoOUu8JvcJnoMbS+&#xA;YNNESs5ScO9ASAqqak+GEc2rMagXpt/Gz2FyiLV3icKB1JKkDLC6qB3Dx+2okCI4KOg4srAggjY7&#xA;HKndF1zR4HRAXdxxVVBJJOw2GKh7Dp6PHYWyOOLrEisp6ghQCMtDpZncvMdejaLzBqQlVkLzl0qC&#xA;AVZRQjxys83a4TcAllzG08JhhUySyELGigkkkigGBtBrcvZZ/wC5f5HLS6WPN5h5dot26EEOqMGU&#xA;ihBDAHKg7bLyZBhaHYqr2f8Ae/QcIYT5IymTanUxV1MVdTFXUxVFaYP9yVp/xmj/AOJjLMP1x94a&#xA;830S9xegZ0DoHYqwDU/+Old/8ZpP+JHOfzfXL3l32H6B7ggXmCyCPiST3+eVW3iO1qlMLF1MVdTF&#xA;XUxV1MVdTFUNejZPpyJbMaa6B/vG/wDxkP8AxFcMWjPzTLJNLsVdirsVdirsVWS+rQenStd64CyF&#xA;dV+Fi7FVk/8Acv8AI4CyjzSLUf7hf9YfqOVuVDml1MW11MVVrMD1q96HfCGE+SNJoQKHfwyTU6mF&#xA;VkxkC1jFT3wFIrquTkVBYUbuMUFumFUVpn/HStP+M0f/ABIZZh+uPvDVm+g+4s/zoHQuxV5/qlTq&#xA;N3Q0PrSb/wCyOc/m+uXvLvsP0R9wQ1OncjvlTa3irsVdiqmPUZmDiig/CQd8U7KmKHYqhb3on04C&#xA;zxproH+8b/8AGQ/8RXDFpz80yyTS0Q1QQaAdR44Et4UOxVplDUr2NR88CbbwodirsVdiqyf+5f5H&#xA;AWUeaRaj/cL/AKw/UcrcqHNLsW1YyuXUq1FHUYpCKs/736DhDXPkjck1OxV2KuxVpQQKE1PjipRW&#xA;mf8AHStP+M0f/EhluH64+8NWb6D7iz/OgdCgLjWbeMsqKZWHQigUn5/2Zh5NbCOw3cmGlkeezE5r&#xA;O6lmeVuPKRi7UPdjXNRIkkl2sZAClP8AR1x/k/fgZcYd+jrj2+/FeMO/R1z/AJP34rxh36OuvBfv&#xA;/sxXjDX6PuvBf+C/sxXjDv0fd+C/8F/ZivGHfo+8/lT/AIL+zAnjChNo9/K1SUAHQVP9MBBZRyxC&#xA;Z6fZ/VLf0yeTE8mI6VO233ZIBpyT4jaJwsHYq7FXVFad/DFXYq7FXE0FTirsVWuvIFakV/aGBI2W&#xA;zAiAqAWNKeJxKY80ouYPWj41oQag++VuSDSD/R8/iv3/ANmLPjDX6Pn8V+/+zFeMLo7K5RgwK1Hu&#xA;f6YUGQKJCTd1H3/2YbYU3wl/lH3/ANmNrTvTk8B9+Nopv038MbWnem3hja0vhMkUySrTlGwda+Km&#xA;uSjOiCiUbFMutfMljMyI4aF22JanEH5g/wAM2+PXQkaOzqZ6KcRY3SnNS5zsVUo5naQqUIA74LZm&#xA;OyrhYOxV2KuBBFQajFXYq4EHoa4pdih2KuxV2KuxVaYkMgkP2h0wUm9qXYUOxV2KuxV2KuxVK5P7&#xA;xvmf15W5I5LcCXYq1y+LjQ9K17YrTeKuZgoJOwHXFWlYMoYbg9MVIbxVa3qcl4kcf2q4pFLsUOxV&#xA;N8tcVa4cgcSAa7132wJDeFDsVdirRDEghqAdRtvgS2AAKAUHgMKuIqKYoU4YEiqQSa+OABlKVqmF&#xA;i7FVrGQMoVQVP2j4YEil2FDsVdirsVdirsVca0NNz2GKuWtBy2PemKXYoSuQguxHQk5W5I5LcCVk&#xA;vqcP3f2sSkV1XR8+A5/a74oLeKuIBFDuPDFXAACg2GKuNaGnXtXFXCtN+vfFXYq2ASaDcnoMKGY3&#xA;P6I9U+tx9T9qnLr78c3eXwb9VW6XH4tbclL/AHBe3/JTK/8AB/xbP99+Kd/uC9v+SmP+D/i1/ffi&#xA;nf7gvb/kpj/g/wCLX99+Kd/uC9v+SmP+D/i1/ffinf7gvb/kpj/g/wCLX99+Kd/uC9v+SmP+D/i1&#xA;/ffinf7gvb/kpj/g/wCLX99+Kd/uC9v+SmP+D/i1/ffinf7gvb/kpj/g/wCLX99+KbX9B70p9PP+&#xA;OEfl/JB8Zd/uE/yP+Gw/4P5L++81p/Qdf2f+Gx/wfyX987/cH7f8Pj/g/kv753+4P2/4fH/B/Jf3&#xA;zv8AcH7f8Pj/AIP5L++d/uD9v+Hx/wAH8l/fNH9A9+P/AA2P+D+Sf3zv9wH+T/w2D/B/Jf3zv9wH&#xA;+T/w2P8Ag/kv75o/4foeXCnevLH/AAfyX9/5qT/4Xpv6f0cv4YD+W8mY/Meaz/nVf8n/AJKYP8G8&#xA;vtT/AIR+Kd/zqv8Ak/8AJTH/AAby+1f8I/FO/wCdV/yf+SmP+DeX2r/hH4p3/Oq/5P8AyUx/wby+&#xA;1f8ACPxTv+dV/wAn/kpj/g3l9q/4R+Kd/wA6r/k/8lMf8G8vtX/CPxTv+dV/yf8Akpj/AIN5fav+&#xA;Efinf86r/k/8lMf8G8vtX/CPxTv+dV/yf+SmP+DeX2r/AIR+KV7L/D31hfq3p+t+xXlWvty75Zi8&#xA;Di9NW15fGr1XT//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:f2b29506-bb3a-4358-9973-eb49c6d09137"
    stRef:documentID="xmp.did:f2b29506-bb3a-4358-9973-eb49c6d09137"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:df1b4794-538b-41ca-abb3-652f1acab45d"
      stEvt:when="2022-12-22T12:47:07+02:00"
      stEvt:softwareAgent="Adobe Illustrator 27.0 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:f2b29506-bb3a-4358-9973-eb49c6d09137"
      stEvt:when="2022-12-22T13:34:36+02:00"
      stEvt:softwareAgent="Adobe Illustrator 27.0 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:7f16e6a4-d750-0644-b9c1-cb4d511aa366"
      stEvt:when="2023-02-17T18:08:30+02:00"
      stEvt:softwareAgent="Adobe Illustrator 25.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="1018.108894"
    stDim:h="800.786540"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="29"
         xmpG:blue="27"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="29"
         xmpG:blue="27"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                         
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -800.787 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 800.787 li
1018.11 800.787 li
1018.11 0 li
cp
clp
714.68 375.244 mo
714.68 375.244 li
714.68 219.106 li
714.68 217.897 714.423 216.748 713.959 215.711 cv
862.845 219.887 li
874.31 220.209 883.849 228.798 885.367 240.167 cv
885.729 242.884 886.567 245.516 887.842 247.943 cv
903.374 277.526 li
905.134 280.879 906.053 284.609 906.053 288.396 cv
906.269 305.366 li
905.74 305.149 905.082 304.987 904.277 304.9 cv
904.277 304.9 896.591 305.855 901.537 309.86 cv
902.418 310.573 903.345 310.866 904.215 310.866 cv
904.99 310.866 905.72 310.633 906.331 310.26 cv
906.912 355.995 li
906.912 363.835 900.679 370.255 892.843 370.488 cv
838.775 372.266 li
714.68 372.266 li
714.68 375.244 li
743.724 347.469 mo
743.029 347.469 737.813 347.564 739.015 350.433 cv
739.86 352.45 741.4 353.193 743.021 353.193 cv
745.282 353.193 747.699 351.749 748.607 350.305 cv
749.513 348.861 748.91 347.418 745.13 347.418 cv
744.724 347.418 744.281 347.434 743.8 347.469 cv
743.8 347.469 743.773 347.469 743.724 347.469 cv
802.736 346.675 mo
802.736 346.675 li
802.736 349.393 804.939 351.597 807.657 351.597 cv
854.376 351.597 li
857.093 351.597 859.297 349.393 859.297 346.675 cv
859.297 294.199 li
859.297 294.199 li
859.297 278.581 846.635 265.919 831.016 265.919 cv
815.397 265.919 802.736 278.581 802.736 294.199 cv
802.736 346.675 li
802.736 346.675 li
791.247 318.073 mo
790.598 318.073 789.548 318.368 789.308 320.21 cv
789.231 320.804 789.616 321.035 790.195 321.035 cv
791.22 321.035 792.855 320.311 793.63 319.587 cv
794.405 318.862 794.318 318.138 791.9 318.138 cv
791.858 318.138 791.815 318.138 791.77 318.139 cv
791.77 318.139 791.553 318.073 791.247 318.073 cv
894.731 291.815 mo
891.045 291.815 880.856 292.596 888.441 301.788 cv
889.68 303.289 891.209 303.902 892.776 303.902 cv
899.385 303.904 906.691 293.007 895.969 291.848 cv
895.969 291.848 895.487 291.815 894.731 291.815 cv
748.797 286.119 mo
748.106 286.119 742.884 286.267 744.087 290.777 cv
744.931 293.946 746.471 295.112 748.093 295.112 cv
750.353 295.112 752.771 292.844 753.678 290.575 cv
754.585 288.307 753.981 286.038 750.201 286.038 cv
749.795 286.038 749.353 286.065 748.872 286.12 cv
748.872 286.12 748.846 286.119 748.797 286.119 cv
860.422 245.165 mo
860.422 245.165 850.087 245.165 857.638 249.181 cv
858.911 249.857 860.016 250.132 860.929 250.132 cv
864.818 250.132 865.244 245.165 860.422 245.165 cv
873.053 236.449 mo
873.053 236.449 865.28 236.449 870.226 240.454 cv
871.044 241.115 871.825 241.384 872.516 241.384 cv
875.305 241.384 876.64 237.015 873.053 236.449 cv
795.215 222.663 mo
795.215 222.663 787.441 222.663 792.388 226.667 cv
793.206 227.329 793.986 227.598 794.678 227.598 cv
797.466 227.598 798.801 223.229 795.215 222.663 cv
706.558 210.787 mo
706.557 210.787 706.557 210.787 706.556 210.787 cv
706.557 210.787 706.557 210.787 706.558 210.787 cv
706.481 210.786 mo
706.479 210.786 706.477 210.786 706.475 210.786 cv
706.477 210.786 706.479 210.786 706.481 210.786 cv
706.438 210.785 mo
706.438 210.785 li
706.438 210.785 706.438 210.785 706.438 210.785 cv
706.403 210.785 mo
706.4 210.785 706.397 210.785 706.394 210.785 cv
706.397 210.785 706.4 210.785 706.403 210.785 cv
955.825 210.785 mo
955.635 210.785 li
955.635 210.785 li
706.359 210.785 li
706.359 210.785 li
706.17 210.785 li
701.574 210.785 697.848 207.059 697.848 202.463 cv
697.848 199.909 698.998 197.625 700.808 196.099 cv
708.719 189.427 714.586 180.654 720.063 171.875 cv
825.36 3.13494 li
826.664 1.04485 828.838 6.37182e-05 831.011 6.37182e-05 cv
833.185 6.37182e-05 835.359 1.04536 836.663 3.13545 cv
836.663 3.13545 li
835.364 1.05301 833.206 .0249537 831.044 .0249537 cv
830.395 .0249537 829.746 .117257 829.12 .30126 cv
829.124 .300666 829.164 .295249 829.236 .295249 cv
829.962 .295249 833.956 .852972 837.155 12.6896 cv
840.222 24.0368 864.321 149.331 870.629 182.2 cv
871.422 186.333 868.306 190.151 864.101 190.251 cv
768.61 192.533 li
947.498 192.533 li
952.295 192.533 957.011 193.763 961.196 196.106 cv
960.548 195.558 959.913 194.995 959.291 194.42 cv
959.913 194.995 960.548 195.558 961.196 196.106 cv
963.001 197.633 964.146 199.914 964.146 202.463 cv
964.146 207.059 960.42 210.785 955.825 210.785 cv
823.01 15.8556 mo
723.75 174.923 li
772.296 110.782 li
823.01 15.8556 li
787.127 161.015 mo
787.127 161.015 779.353 161.015 784.3 165.019 cv
785.118 165.681 785.899 165.95 786.59 165.95 cv
789.379 165.95 790.713 161.581 787.127 161.015 cv
820.845 137.067 mo
818.422 137.067 811.728 137.581 816.712 143.621 cv
817.526 144.607 818.53 145.01 819.56 145.01 cv
823.902 145.011 828.704 137.85 821.659 137.089 cv
821.659 137.089 821.342 137.067 820.845 137.067 cv
834.275 62.0215 mo
834.275 62.0215 826.502 62.0215 831.448 66.0259 cv
832.265 66.6876 833.047 66.9562 833.738 66.9563 cv
836.528 66.9567 837.862 62.5881 834.275 62.0215 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.952941 .745098 .564706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.901961 .603922 .458824 ]
/N 4.97729 
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~oCDJCo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()ABo'u8?naZ/>naZ/>naZ/>naZ/>naZ/>nF5r:nF5r:nF5r:nF5r9
n*f`6n*f`6n*f`5mdBN2mdBN2mHs<.mHs<.m-O**m-O*)lg*m&lg!d#lK[Wul07Hrkih6okND$kk2tgg
~>
<~^:h4n]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m
]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tD"j
]Y(ni]Y(ni]Y(ni]Y(ni]=Y\e]=Y\e]=Y\e]"5Ja]"5Ja]",A^\[f8]\[]/Z\@B&X\$riU\$i`R[^NTO
[C*BK['[0GZa6sCZEga?Z*:I:YHP.4Y-+n/XfSV)X/i8#WMuhpVl-DhV59u`USFQXTqS-OT:VXFS=H(;
~>
<~OH5H`O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,f6\NfK-[NfK-[NfK-[NfK-[NK&pWNK&pWNK&pWNJrgTN/W^SN/W^RMi3LOMi3LNMMd:KMMd7I
M2@(GLkpkCLkgb@LPLV=L5(D9KnY25KS4u1K7ec-Jq8K(J:N0"It)orI=6NkI!g9fH?sj^G^+IWGBS.P
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
850.047 348.77 mo
811.984 348.77 li
809.769 348.77 807.974 346.975 807.974 344.761 cv
807.974 302.005 li
807.974 289.279 818.291 278.963 831.016 278.963 cv
843.742 278.963 854.057 289.279 854.057 302.005 cv
854.057 344.761 li
854.057 346.975 852.262 348.77 850.047 348.77 cv
level3{
gsave
clp
[4.55713e-15 -74.4237 74.4237 4.55713e-15 831.016 344.136 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.847059 .509804 .341176 ]
/C1 [.847059 .509804 .341176 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.847059 .509804 .341176 ]
/C1 [.690196 .321569 .219608 ]
/N 2.06553 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.690196 .321569 .219608 ]
/C1 [.690196 .321569 .219608 ]
/N 1 
>>
]
/Bounds [1.89999e-07 .998385 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.55713e-15 -74.4237 74.4237 4.55713e-15 831.016 344.136 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~f[na,f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX*f%/F'f%/F'f%/F'f%/F'e^`4#
e^`4#e^`4#e^W*ueC<!teC<!te'ldpe'ldpe'landaHRldaHRkdF$@hdF$=fd*U.dd*U+bcd0q`cd'h]
cHa_[c-=MXc-4DUbfn;SbKJ)PbK@uMb0%iJaiVZGaN2HDaN)?Aa2Z-=`l?!:`Pog7`5KU3_o'C0_SX1,
_83t(^qdb$^V@Ou^:q=q]tM+m]Y(ni]=Y\d]"5J`\[f5[\@B#W\$i`R[^ENN['[3HZa7!DZEga?Z*:I:
~>
<~Jq8K(JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'J:N0#J:N0#J:N0#J:N0"It)rtIt)rt
It)rsIXZ`pIXZ`pIXQWmI=6NlI=6KjI!g<hI!g9fH[C*dH[:!aH?sm`H$O[\H$OXZG^+IXGB\7TGB\4R
G'8%OF`hhLFEDVHFE;MEF)uABEcQ2?EH,u;E,]c7Df9Q4DJj?0D/F-,Ci!p(CMR^#C2.KtBk_9pBP;$k
B4kggAn>ObARo=^@q0"X@U`eT@:<PO?sd8J?=$rD?!U]?>[(E:>$>'3=]ed.='&I(<`W4#<)cgq;c6Lk
~>
<~=&r@&<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`N."<E3%!<E3%!<E3%!
<E3%!<)cgr<)cgr<)cgr<)cgq;c?Un;c?Un;c?Um;GpCj;GpCj;Gp@h;,L1f;,L1f:f'tb:f'tb:esk_
:JXb^:JOY[:/4PZ:/+GW9he>V9MA,R9MA,Q91qoN91qlL8kM]J8P)KF8P)HD84Z9B7n6'>7n6$<7Rfj:
77BX6779O36psC06UO4-6:+"*5s[e&5sR\#5X7Ou5<h=q5!D.n4Ztqj4?P_g4$,Mc3]];_3B9)[3&ilW
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
854.376 351.597 mo
807.657 351.597 li
804.939 351.597 802.736 349.393 802.736 346.675 cv
802.736 294.199 li
802.736 278.581 815.397 265.919 831.016 265.919 cv
846.635 265.919 859.297 278.581 859.297 294.199 cv
859.297 346.675 li
859.297 349.393 857.093 351.597 854.376 351.597 cv
831.016 278.963 mo
818.291 278.963 807.974 289.279 807.974 302.005 cv
807.974 344.761 li
807.974 346.975 809.769 348.77 811.984 348.77 cv
850.047 348.77 li
852.262 348.77 854.057 346.975 854.057 344.761 cv
854.057 302.005 li
854.057 289.279 843.742 278.963 831.016 278.963 cv
level3{
gsave
clp
[4.55713e-15 -74.4237 74.4237 4.55713e-15 831.016 344.136 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ
@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<
42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`*tgH@QMG:3lGJg`*k^E@62;73l>Ae_dGOB?ol/33l55a_-]4=
?TGo/35Ai[^g/q7>r]T(35/WW^0EV1>;s3!2S<3O]3.&(=Z3lp27cmI\Q:Vu<]%<e1q-I@[T#&k;_kaY
1:0q7ZV`H_:bf4N0X4D,YYHjT9J<PB0!.buX@b(F8M$l4/#c#hW(&;774P0&.A]B\Ud?K)5UW6j-_NXM
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~TKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q
4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd
-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OL
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 .998385 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.55713e-15 -74.4237 74.4237 4.55713e-15 831.016 344.136 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5BL1_o'C0_o'C0_o'C0_o'C0_ns:-_SX1,_SX1,
_SX1,_SO()_83t(_83t(_83q&^qdb$^qd_"^V@Ou^V@Ou^V@Ls^:q=q^:q:o]tM+m]tM(k]Y(kg]=Y\e
]=YYc]"5Ja]"5Ja]"5G_\[f8\\@B&Y\@B&X\$riT[^NWP[C*EM[C*EL['[3HZa7!DZEgd@Z*CR<Yct@9
Yct@8YHP.4Y-+q0Xf\_,XK8M(X/i;%WiE)!WMukrW2QYnVl-DhV5:#bV5:#bUnjf^USFTZU8"?TTV.sN
~>
<~@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:3JN?smAM?smAM?smAM
?sd8J?XI/I?XI,G?=$rE?=$rE?=$rE?=$rE?=$oC?!U]?>[1N=>[1K;>?b<9>?b<9>?b97>$>*5>$>'3
=]nj/=BJ[-=BJ[-=BJX+='&I(<`W7$<E3%!<E3$u<)cgq;c?Um;GpCi;,L1f;,L1e:f'ta:JXb]:/4PZ
:/4PY9h\5R91qoN91qoM8kM]I8P)KF84Z9B7n6'>7Rfj:77BX66psF26UO4.6:+"*5s[b$5<h@s5<h=q
~>
<~3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]T2\3B9)[3B9)[3B9)[3B9)[3B9)[3B9)[
3B9)[3B9)[3B9)[3B9&Y3&ilW3&ilW3&iiU2`EZS2`EZS2`EZS2`EZS2`EZS2`EWQ2E!HO2E!EM2)R6K
2)R6K2)R6K2)R3I1c.$G1c.$F1G^gC1G^gC1G^gB1,:U?1,:U>0ekC;0ekC;0ekC:0JG170JG160/"t2
/hSb//hSb//hSb./M/P*/1`>'/1`>'.k<,#.Olnt.Olnt.Olnt.4H\p-n$Jl-n$Jl-RU8h-71&d-71&d
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
748.171 375.244 mo
714.68 375.244 li
714.68 372.266 li
838.775 372.266 li
748.171 375.244 li
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9
I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I.""^m]([&WdF06Hg[n\m](X$WdF-5HgRh[mAbO#WI+$3HgReZmAP?tW-[g.
H0hGSm&#$oV0M=%GO)&Kl_AXgU35apFQoH?l(<(^Soa+cET`g1kF$8NQu;#OD<7!ujH=9<O(dO5BAnb[
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
mHs<.mHs<-m-O**m-O**m-O**m-O**m-O**m-O**m-O**m-O*)lg*m&lg*m&lg*m&lg*m&lg*m%lK[["
lK[["lK[["l07Hsl07Hskih6okih6okih6okND$kk2tggk2tggjlPUcjQ,C_jQ,C_j5]1[io8tWiSibS
~>
<~WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!
WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE%tWMukrWMukrWMukrWMukr
WMukrWMukrWMukrWMukrWMukrWMukqW2QYnW2QYnW2QYmVl-GjVl-GiVP^5fVP^5eV5:#aUnjf]USFTZ
USFTZU8"BVTqS0RTV.sNT:_aJSt;OFSXl:@S"#n:R[TY4R$a8.Q^=#(Q'ISuPEV/mOcb`dNfK-[NK&mT
~>
<~H[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*d
H[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C'bH?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm_H$O[\H$O[[G^+IXG^+IWGB\7TGB\7SG'8%P
G'8%PF`hhLFEDVHF)uDDF)uDDF)uDDEcQ/>E,]c8Df9Q4DJj?0D/F-,Ci!p(CMR["Bk_6oB4kjiAnGUc
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
713.959 215.711 mo
713.942 215.711 li
712.667 212.868 709.856 210.865 706.558 210.787 cv
709.859 210.865 712.685 212.865 713.959 215.711 cv
706.556 210.787 mo
706.531 210.786 706.506 210.786 706.481 210.786 cv
706.506 210.786 706.531 210.786 706.556 210.787 cv
706.475 210.786 mo
706.462 210.785 706.45 210.785 706.438 210.785 cv
706.451 210.785 706.462 210.785 706.475 210.786 cv
706.438 210.785 mo
706.426 210.785 706.415 210.785 706.403 210.785 cv
706.415 210.785 706.426 210.785 706.438 210.785 cv
706.394 210.785 mo
706.383 210.785 706.371 210.785 706.359 210.785 cv
706.359 210.785 li
706.371 210.785 706.383 210.785 706.394 210.785 cv
.980392 .901961 .862745 rgb
f
942.349 396.398 mo
895.543 396.398 li
895.033 395.257 894.749 393.993 894.749 392.663 cv
894.749 384.394 li
894.749 383.83 894.698 383.279 894.6 382.744 cv
943.293 382.744 li
943.195 383.279 943.144 383.831 943.144 384.395 cv
943.144 392.663 li
943.144 393.993 942.86 395.257 942.349 396.398 cv
818.988 396.398 mo
772.182 396.398 li
771.671 395.257 771.387 393.993 771.387 392.663 cv
771.387 384.394 li
771.387 383.83 771.336 383.279 771.239 382.744 cv
819.931 382.744 li
819.834 383.279 819.783 383.831 819.783 384.395 cv
819.783 392.663 li
819.783 393.993 819.499 395.257 818.988 396.398 cv
947.313 372.266 mo
838.775 372.266 li
892.843 370.488 li
900.679 370.255 906.912 363.835 906.912 355.995 cv
906.331 310.26 li
908.262 309.079 909.009 306.49 906.269 305.366 cv
906.053 288.396 li
906.053 284.609 905.134 280.879 903.374 277.526 cv
887.842 247.943 li
886.567 245.516 885.729 242.884 885.367 240.167 cv
883.849 228.798 874.31 220.209 862.845 219.887 cv
713.959 215.711 li
712.685 212.865 709.859 210.865 706.558 210.787 cv
706.557 210.787 706.557 210.787 706.556 210.787 cv
706.531 210.786 706.506 210.786 706.481 210.786 cv
706.479 210.786 706.477 210.786 706.475 210.786 cv
706.462 210.785 706.451 210.785 706.438 210.785 cv
706.438 210.785 706.438 210.785 706.438 210.785 cv
706.426 210.785 706.415 210.785 706.403 210.785 cv
706.4 210.785 706.397 210.785 706.394 210.785 cv
706.383 210.785 706.371 210.785 706.359 210.785 cv
955.635 210.785 li
951.04 210.785 947.313 214.51 947.313 219.106 cv
947.313 372.266 li
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
943.293 382.744 mo
894.6 382.744 li
893.823 378.478 890.088 375.244 885.597 375.244 cv
828.934 375.244 li
824.444 375.244 820.709 378.478 819.931 382.744 cv
771.239 382.744 li
770.462 378.478 766.728 375.244 762.237 375.244 cv
748.171 375.244 li
838.775 372.266 li
947.313 372.266 li
947.313 376.718 li
945.243 378.064 943.752 380.224 943.293 382.744 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/V
C[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%7&l'Z>OR;1uSC?_.$l'Z;MR;1rRC?V(#ka?2LQtkiPC?V%"ka6)IQtb`M
B]k^qkE]fEQ"]<EBBGFkk*'E=P%Ea;AE8h_jH!j4O(740@H*5Sieh.&M-o4s?K$TDi.P=lJQgo\=l"L-
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6o
kih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6o
kih6okih6nkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$jk2tggk2tggk2tggk2tggk2tgfjlPUc
jlPUcjlPUcjQ,C_jQ,C_j5]1[j5]1[j5]1[io8tWiSibSiSibSi8EPOi8EPOi8EPOhr!>KhVR,Gh;-oC
~>
<~R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2
R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0G0R$a8.R$a8.R$a8.R$a8.
R$a8.R$a8.R$a8.R$a8.R$a8.R$a8-Q^=&*Q^=&*Q^=&*Q^=&*Q^=&)QBmi&QBmi%Q'IW!Pa%DrPEV2o
PEV2oP*1ukOcbcgOH>QcO,o?_NfK-[NfK*YN/W^SMi3IMM2@(GLkphAL5(D9KS5#3K7ec,J:N0#It)oq
~>
<~C2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.Ku
C2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.HsBk_9qBk_9q
Bk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9pBP;'mBP;'lB4kjiB4kjiB4kjiB4kjhAnGXe
AnGXeAS#FaA7T4]@q0"Y@q0"Y@q0"Y@U`bS?smAM?smAM?XI/I?=$rE?!U`A>[1K;>$>*5=]nm1=BJX+
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
933.994 401.813 mo
903.899 401.813 li
900.176 401.813 896.972 399.589 895.543 396.398 cv
942.349 396.398 li
940.92 399.589 937.716 401.813 933.994 401.813 cv
810.632 401.813 mo
780.538 401.813 li
776.815 401.813 773.611 399.589 772.182 396.398 cv
818.988 396.398 li
817.56 399.589 814.356 401.813 810.632 401.813 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
959.291 194.42 mo
952.33 187.982 946.962 179.935 941.932 171.871 cv
836.663 3.13545 li
941.932 171.871 li
946.962 179.935 952.33 187.982 959.291 194.42 cv
.980392 .901961 .862745 rgb
f
961.196 196.106 mo
957.011 193.763 952.295 192.533 947.498 192.533 cv
768.61 192.533 li
864.101 190.251 li
868.306 190.151 871.422 186.333 870.629 182.2 cv
864.321 149.331 840.222 24.0368 837.155 12.6896 cv
833.956 .852972 829.962 .295249 829.236 .295249 cv
829.164 .295249 829.124 .300666 829.12 .30126 cv
829.746 .117257 830.395 .0249537 831.044 .0249537 cv
833.206 .0249537 835.364 1.05301 836.663 3.13545 cv
836.663 3.13545 li
941.932 171.871 li
946.962 179.935 952.33 187.982 959.291 194.42 cv
959.913 194.995 960.548 195.558 961.196 196.106 cv
891.721 161.493 mo
891.029 161.493 885.81 161.642 887.012 166.151 cv
887.857 169.32 889.397 170.486 891.018 170.486 cv
893.279 170.486 895.696 168.218 896.604 165.95 cv
897.511 163.681 896.907 161.413 893.126 161.413 cv
892.72 161.413 892.278 161.439 891.797 161.494 cv
891.797 161.494 891.77 161.493 891.721 161.493 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
723.75 174.923 mo
823.01 15.8556 li
772.296 110.782 li
723.75 174.923 li
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
892.776 303.902 mo
891.209 303.902 889.68 303.289 888.441 301.788 cv
880.856 292.596 891.045 291.815 894.731 291.815 cv
895.487 291.815 895.969 291.848 895.969 291.848 cv
906.691 293.007 899.385 303.904 892.776 303.902 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
904.215 310.866 mo
903.345 310.866 902.418 310.573 901.537 309.86 cv
896.591 305.855 904.277 304.9 904.277 304.9 cv
905.082 304.987 905.74 305.149 906.269 305.366 cv
906.331 310.26 li
905.72 310.633 904.99 310.866 904.215 310.866 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
906.331 310.26 mo
906.269 305.366 li
909.009 306.49 908.262 309.079 906.331 310.26 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
794.678 227.598 mo
793.986 227.598 793.206 227.329 792.388 226.667 cv
787.441 222.663 795.215 222.663 795.215 222.663 cv
798.801 223.229 797.466 227.598 794.678 227.598 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
833.738 66.9563 mo
833.047 66.9562 832.265 66.6876 831.448 66.0259 cv
826.502 62.0215 834.275 62.0215 834.275 62.0215 cv
837.862 62.5881 836.528 66.9567 833.738 66.9563 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
790.195 321.035 mo
789.616 321.035 789.231 320.804 789.308 320.21 cv
789.548 318.368 790.598 318.073 791.247 318.073 cv
791.553 318.073 791.77 318.139 791.77 318.139 cv
791.815 318.138 791.858 318.138 791.9 318.138 cv
794.318 318.138 794.405 318.862 793.63 319.587 cv
792.855 320.311 791.22 321.035 790.195 321.035 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
743.021 353.193 mo
741.4 353.193 739.86 352.45 739.015 350.433 cv
737.813 347.564 743.029 347.469 743.724 347.469 cv
743.773 347.469 743.8 347.469 743.8 347.469 cv
744.281 347.434 744.724 347.418 745.13 347.418 cv
748.91 347.418 749.513 348.861 748.607 350.305 cv
747.699 351.749 745.282 353.193 743.021 353.193 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
748.093 295.112 mo
746.471 295.112 744.931 293.946 744.087 290.777 cv
742.884 286.267 748.106 286.119 748.797 286.119 cv
748.846 286.119 748.872 286.12 748.872 286.12 cv
749.353 286.065 749.795 286.038 750.201 286.038 cv
753.981 286.038 754.585 288.307 753.678 290.575 cv
752.771 292.844 750.353 295.112 748.093 295.112 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
891.018 170.486 mo
889.397 170.486 887.857 169.32 887.012 166.151 cv
885.81 161.642 891.029 161.493 891.721 161.493 cv
891.77 161.493 891.797 161.494 891.797 161.494 cv
892.278 161.439 892.72 161.413 893.126 161.413 cv
896.907 161.413 897.511 163.681 896.604 165.95 cv
895.696 168.218 893.279 170.486 891.018 170.486 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
860.929 250.132 mo
860.016 250.132 858.911 249.857 857.638 249.181 cv
850.087 245.165 860.422 245.165 860.422 245.165 cv
865.244 245.165 864.818 250.132 860.929 250.132 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
819.56 145.01 mo
818.53 145.01 817.526 144.607 816.712 143.621 cv
811.728 137.581 818.422 137.067 820.845 137.067 cv
821.342 137.067 821.659 137.089 821.659 137.089 cv
828.704 137.85 823.902 145.011 819.56 145.01 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
872.516 241.384 mo
871.825 241.384 871.044 241.115 870.226 240.454 cv
865.28 236.449 873.053 236.449 873.053 236.449 cv
876.64 237.015 875.305 241.384 872.516 241.384 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
786.59 165.95 mo
785.899 165.95 785.118 165.681 784.3 165.019 cv
779.353 161.015 787.127 161.015 787.127 161.015 cv
790.713 161.581 789.379 165.95 786.59 165.95 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 830.997 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
122.565 396.398 mo
75.7598 396.398 li
75.249 395.257 74.965 393.993 74.965 392.663 cv
74.965 384.395 li
74.965 383.831 74.914 383.279 74.8165 382.744 cv
123.508 382.744 li
123.411 383.279 123.36 383.83 123.36 384.394 cv
123.36 392.663 li
123.36 393.993 123.076 395.257 122.565 396.398 cv
70.7945 376.717 mo
70.7945 376.717 li
70.7945 219.106 li
70.7945 217.897 70.5367 216.748 70.0729 215.711 cv
218.96 219.887 li
230.425 220.209 239.963 228.798 241.481 240.167 cv
241.843 242.884 242.681 245.516 243.955 247.943 cv
259.488 277.526 li
261.249 280.879 262.168 284.609 262.168 288.396 cv
262.384 305.366 li
261.855 305.149 261.196 304.987 260.391 304.9 cv
260.391 304.9 252.705 305.855 257.652 309.86 cv
258.533 310.573 259.46 310.866 260.329 310.866 cv
261.105 310.866 261.834 310.633 262.446 310.26 cv
263.026 355.995 li
263.026 363.835 256.794 370.255 248.958 370.488 cv
210.799 372.266 li
70.7945 372.266 li
70.7945 376.717 li
99.8385 347.469 mo
99.1436 347.469 93.9275 347.564 95.129 350.433 cv
95.9738 352.45 97.5143 353.193 99.1352 353.193 cv
101.396 353.193 103.813 351.749 104.721 350.305 cv
105.628 348.861 105.024 347.418 101.245 347.418 cv
100.838 347.418 100.396 347.434 99.9143 347.469 cv
99.9143 347.469 99.8876 347.469 99.8385 347.469 cv
158.85 346.675 mo
158.85 346.675 li
158.85 349.393 161.053 351.597 163.771 351.597 cv
210.489 351.597 li
213.207 351.597 215.411 349.393 215.411 346.675 cv
215.411 294.199 li
215.411 294.199 li
215.411 293.94 215.407 293.682 215.4 293.424 cv
214.99 278.164 202.49 265.919 187.13 265.919 cv
187.13 265.919 li
187.13 265.919 li
171.968 265.919 159.594 277.85 158.882 292.834 cv
158.861 293.287 158.85 293.742 158.85 294.199 cv
158.85 346.675 li
158.85 346.675 li
147.36 318.073 mo
146.711 318.073 145.662 318.368 145.423 320.21 cv
145.346 320.804 145.73 321.035 146.309 321.035 cv
147.333 321.035 148.969 320.311 149.744 319.587 cv
150.518 318.862 150.432 318.138 148.014 318.138 cv
147.971 318.138 147.928 318.138 147.884 318.139 cv
147.884 318.139 147.667 318.073 147.36 318.073 cv
250.846 291.815 mo
247.16 291.815 236.97 292.596 244.556 301.788 cv
245.794 303.289 247.323 303.902 248.89 303.902 cv
255.499 303.904 262.805 293.007 252.084 291.848 cv
252.084 291.848 251.601 291.815 250.846 291.815 cv
104.91 286.119 mo
104.219 286.119 98.9986 286.267 100.201 290.777 cv
101.045 293.946 102.586 295.112 104.207 295.112 cv
106.467 295.112 108.885 292.844 109.792 290.575 cv
110.699 288.307 110.095 286.038 106.314 286.038 cv
105.908 286.038 105.466 286.065 104.985 286.12 cv
104.985 286.12 104.959 286.119 104.91 286.119 cv
216.536 245.165 mo
216.536 245.165 206.201 245.165 213.752 249.181 cv
215.024 249.857 216.129 250.132 217.043 250.132 cv
220.932 250.132 221.358 245.165 216.536 245.165 cv
229.167 236.449 mo
229.167 236.449 221.394 236.449 226.341 240.454 cv
227.158 241.115 227.939 241.384 228.631 241.384 cv
231.419 241.384 232.754 237.015 229.167 236.449 cv
151.329 222.663 mo
151.329 222.663 143.556 222.663 148.502 226.667 cv
149.32 227.329 150.101 227.598 150.792 227.598 cv
153.581 227.598 154.915 223.229 151.329 222.663 cv
62.7103 210.788 mo
62.7102 210.788 li
62.7103 210.788 li
62.6746 210.787 mo
62.6727 210.787 62.6701 210.787 62.6682 210.787 cv
62.6702 210.787 62.6726 210.787 62.6746 210.787 cv
62.6319 210.786 mo
62.6314 210.786 62.6303 210.786 62.6297 210.786 cv
62.6305 210.786 62.6311 210.786 62.6319 210.786 cv
62.5972 210.786 mo
62.5938 210.786 62.5908 210.786 62.5874 210.786 cv
62.5905 210.786 62.5941 210.786 62.5972 210.786 cv
62.553 210.785 mo
62.5519 210.785 62.5509 210.785 62.5498 210.785 cv
62.5508 210.785 62.552 210.785 62.553 210.785 cv
62.5179 210.785 mo
62.5146 210.785 62.5114 210.785 62.508 210.785 cv
62.5113 210.785 62.5146 210.785 62.5179 210.785 cv
62.4737 210.785 mo
62.4734 210.785 62.4732 210.785 62.4729 210.785 cv
62.2833 210.785 li
57.6877 210.785 53.962 207.059 53.962 202.463 cv
53.962 199.909 55.1119 197.625 56.9215 196.099 cv
64.8328 189.427 70.7 180.654 76.178 171.875 cv
181.474 3.13494 li
182.779 1.04485 184.952 6.37182e-05 187.126 6.37182e-05 cv
189.231 6.37182e-05 191.338 .981157 192.652 2.94266 cv
191.343 .989477 189.253 .0249537 187.158 .0249537 cv
186.509 .0249537 185.861 .117257 185.234 .30126 cv
185.238 .300666 185.279 .295249 185.35 .295249 cv
186.077 .295249 190.071 .852972 193.27 12.6896 cv
196.336 24.0368 220.436 149.331 226.742 182.2 cv
227.535 186.333 224.42 190.151 220.215 190.251 cv
124.724 192.533 li
303.613 192.533 li
308.409 192.533 313.125 193.763 317.31 196.106 cv
317.032 195.871 316.756 195.633 316.484 195.393 cv
316.756 195.633 317.032 195.871 317.31 196.106 cv
319.115 197.633 320.261 199.914 320.261 202.463 cv
320.261 207.059 316.535 210.785 311.939 210.785 cv
311.75 210.785 li
311.75 210.785 li
62.4732 210.785 li
62.4734 210.785 62.4735 210.785 62.4737 210.785 cv
179.124 15.8556 mo
79.8639 174.923 li
128.41 110.782 li
179.124 15.8556 li
143.241 161.015 mo
143.241 161.015 135.468 161.015 140.415 165.019 cv
141.232 165.681 142.013 165.95 142.705 165.95 cv
145.493 165.95 146.827 161.581 143.241 161.015 cv
176.959 137.067 mo
174.536 137.067 167.842 137.581 172.826 143.621 cv
173.64 144.607 174.645 145.01 175.674 145.01 cv
180.017 145.011 184.818 137.85 177.773 137.089 cv
177.773 137.089 177.456 137.067 176.959 137.067 cv
190.389 62.0215 mo
190.389 62.0215 182.616 62.0215 187.563 66.0259 cv
188.38 66.6876 189.161 66.9562 189.852 66.9563 cv
192.641 66.9567 193.976 62.5881 190.389 62.0215 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
206.162 348.77 mo
168.098 348.77 li
165.884 348.77 164.088 346.975 164.088 344.761 cv
164.088 302.005 li
164.088 289.279 174.404 278.963 187.13 278.963 cv
199.857 278.963 210.172 289.279 210.172 302.005 cv
210.172 344.761 li
210.172 346.975 208.377 348.77 206.162 348.77 cv
level3{
gsave
clp
[4.55713e-15 -74.4237 74.4237 4.55713e-15 187.13 344.136 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.55713e-15 -74.4237 74.4237 4.55713e-15 187.13 344.136 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
215.4 293.424 mo
214.99 278.164 202.49 265.919 187.13 265.919 cv
202.49 265.919 214.99 278.164 215.4 293.424 cv
158.882 292.834 mo
159.594 277.85 171.968 265.919 187.13 265.919 cv
171.969 265.919 159.594 277.85 158.882 292.834 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-
@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,T
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm)Sh2c%$O($k*@GQuQh2c""O($h(@GHlOgl>dtNaUY&@,-cMgl5^rNF:M"
?e^NHgP]CmMdG+p?J:9Cg50+gLg8Vg>hOj:fnEY`KNd#\=kA7-f7@&TIok0L<RlIse9b-CGZ)t6;:0M^
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?
gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?
gt^]?gt^]>gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K:g=k97g=k97g=k97g=k97g=k96g"G'3
g"G'3g"G'3f\"j/f\"j/f\"j/f\"j/f\"j/f@SX+f%/F'f%/F'e^`4#eC<!teC<!te'ldpdaHRldF$@h
~>
<~O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o<]NfK-[NfK-[NfK-[NfK-[
NfK-[NfK-[NfK-ZNK&pWNK&pWNK&pWNK&pWNK&pWNK&pVN/W^SN/W^RMi3LOMi3LNMMd:KMMd:JM2@(G
M2@(GLkpkCLPLY?L5(G;KnY57KS5#3K7ef/JqAT+JUrB'J:N-!IXZ`pI=6KjH[C*dH?sj]GB\7TG'8"N
~>
<~@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<PO?smAM?smAM
?smAM?smAM?smAM?smAM?smAL?XI/I?XI/I?XI/I?XI/I?XI/I?XI/H?=$rE?=$rD?!U`A?!U`A?!U`A
?!U`A>[1N=>?b<9>?b<9>?b<9>$>*5=]nm1=BJ[-='&I)='&I)<`W4#<)cgr<)cdp;GpCj;,L1f:f'q`
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
210.489 351.597 mo
163.771 351.597 li
161.053 351.597 158.85 349.393 158.85 346.675 cv
158.85 294.199 li
158.85 293.742 158.861 293.287 158.882 292.834 cv
159.594 277.85 171.969 265.919 187.13 265.919 cv
187.13 265.919 li
187.13 265.919 li
202.49 265.919 214.99 278.164 215.4 293.424 cv
215.407 293.682 215.411 293.94 215.411 294.199 cv
215.411 346.675 li
215.411 349.393 213.207 351.597 210.489 351.597 cv
187.13 278.963 mo
174.404 278.963 164.088 289.279 164.088 302.005 cv
164.088 344.761 li
164.088 346.975 165.884 348.77 168.098 348.77 cv
206.162 348.77 li
208.377 348.77 210.172 346.975 210.172 344.761 cv
210.172 302.005 li
210.172 289.279 199.857 278.963 187.13 278.963 cv
level3{
gsave
clp
[4.55713e-15 -74.4237 74.4237 4.55713e-15 187.13 344.136 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.55713e-15 -74.4237 74.4237 4.55713e-15 187.13 344.136 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
123.508 382.744 mo
74.8165 382.744 li
74.3572 380.223 72.8651 378.063 70.7945 376.717 cv
70.7945 372.266 li
210.799 372.266 li
146.855 375.244 li
132.51 375.244 li
128.02 375.244 124.286 378.478 123.508 382.744 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
114.21 401.813 mo
84.1155 401.813 li
80.3927 401.813 77.1889 399.589 75.7598 396.398 cv
122.565 396.398 li
121.136 399.589 117.932 401.813 114.21 401.813 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
70.0729 215.711 mo
70.0567 215.711 li
68.786 212.879 65.9922 210.88 62.7103 210.788 cv
65.9955 210.88 68.8043 212.876 70.0729 215.711 cv
62.7102 210.788 mo
62.6983 210.788 62.6866 210.787 62.6746 210.787 cv
62.6866 210.787 62.6982 210.788 62.7102 210.788 cv
62.6682 210.787 mo
62.656 210.787 62.6441 210.786 62.6319 210.786 cv
62.6442 210.786 62.6559 210.787 62.6682 210.787 cv
62.6297 210.786 mo
62.6188 210.786 62.6081 210.786 62.5972 210.786 cv
62.6081 210.786 62.6188 210.786 62.6297 210.786 cv
62.5874 210.786 mo
62.5759 210.785 62.5646 210.785 62.553 210.785 cv
62.5645 210.785 62.5759 210.785 62.5874 210.786 cv
62.5498 210.785 mo
62.5391 210.785 62.5287 210.785 62.5179 210.785 cv
62.5283 210.785 62.5394 210.785 62.5498 210.785 cv
62.508 210.785 mo
62.4967 210.785 62.4851 210.785 62.4737 210.785 cv
62.4852 210.785 62.4965 210.785 62.508 210.785 cv
.980392 .901961 .862745 rgb
f
245.926 396.398 mo
199.12 396.398 li
198.609 395.257 198.325 393.993 198.325 392.663 cv
198.325 384.395 li
198.325 383.831 198.274 383.279 198.176 382.744 cv
246.869 382.744 li
246.771 383.279 246.72 383.83 246.72 384.394 cv
246.72 392.663 li
246.72 393.993 246.436 395.257 245.926 396.398 cv
303.428 372.266 mo
210.799 372.266 li
248.958 370.488 li
256.794 370.255 263.026 363.835 263.026 355.995 cv
262.446 310.26 li
264.376 309.08 265.123 306.49 262.384 305.366 cv
262.168 288.396 li
262.168 284.609 261.249 280.879 259.488 277.526 cv
243.955 247.943 li
242.681 245.516 241.843 242.884 241.481 240.167 cv
239.963 228.798 230.425 220.209 218.96 219.887 cv
70.0729 215.711 li
68.8043 212.876 65.9955 210.88 62.7103 210.788 cv
62.7102 210.788 li
62.6982 210.788 62.6866 210.787 62.6746 210.787 cv
62.6726 210.787 62.6702 210.787 62.6682 210.787 cv
62.6559 210.787 62.6442 210.786 62.6319 210.786 cv
62.6311 210.786 62.6305 210.786 62.6297 210.786 cv
62.6188 210.786 62.6081 210.786 62.5972 210.786 cv
62.5941 210.786 62.5905 210.786 62.5874 210.786 cv
62.5759 210.785 62.5645 210.785 62.553 210.785 cv
62.552 210.785 62.5508 210.785 62.5498 210.785 cv
62.5394 210.785 62.5283 210.785 62.5179 210.785 cv
62.5146 210.785 62.5113 210.785 62.508 210.785 cv
62.4965 210.785 62.4852 210.785 62.4737 210.785 cv
62.4735 210.785 62.4734 210.785 62.4732 210.785 cv
311.75 210.785 li
307.153 210.785 303.428 214.51 303.428 219.106 cv
303.428 372.266 li
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
246.869 382.744 mo
198.176 382.744 li
197.399 378.478 193.664 375.244 189.174 375.244 cv
146.855 375.244 li
210.799 372.266 li
303.428 372.266 li
303.428 375.244 li
255.871 375.244 li
251.381 375.244 247.646 378.478 246.869 382.744 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
237.57 401.813 mo
207.475 401.813 li
203.753 401.813 200.549 399.589 199.12 396.398 cv
245.926 396.398 li
244.497 399.589 241.293 401.813 237.57 401.813 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
316.484 195.393 mo
308.993 188.804 303.333 180.347 298.046 171.871 cv
192.777 3.13545 li
298.046 171.871 li
303.333 180.347 308.993 188.804 316.484 195.393 cv
192.777 3.13545 mo
192.736 3.07013 192.695 3.00594 192.652 2.94266 cv
192.695 3.00585 192.736 3.07019 192.777 3.13545 cv
.980392 .901961 .862745 rgb
f
317.31 196.106 mo
313.125 193.763 308.409 192.533 303.613 192.533 cv
124.724 192.533 li
220.215 190.251 li
224.42 190.151 227.535 186.333 226.742 182.2 cv
220.436 149.331 196.336 24.0368 193.27 12.6896 cv
190.071 .852972 186.077 .295249 185.35 .295249 cv
185.279 .295249 185.238 .300666 185.234 .30126 cv
185.861 .117257 186.509 .0249537 187.158 .0249537 cv
189.253 .0249537 191.343 .989477 192.652 2.94266 cv
192.695 3.00594 192.736 3.07013 192.777 3.13545 cv
192.777 3.13545 li
298.046 171.871 li
303.333 180.347 308.993 188.804 316.484 195.393 cv
316.756 195.633 317.032 195.871 317.31 196.106 cv
247.836 161.493 mo
247.143 161.493 241.924 161.642 243.126 166.151 cv
243.971 169.32 245.511 170.486 247.132 170.486 cv
249.393 170.486 251.811 168.218 252.718 165.95 cv
253.625 163.681 253.022 161.413 249.241 161.413 cv
248.835 161.413 248.393 161.439 247.911 161.494 cv
247.911 161.494 247.885 161.493 247.836 161.493 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
79.8639 174.923 mo
179.124 15.8556 li
128.41 110.782 li
79.8639 174.923 li
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
248.89 303.902 mo
247.323 303.902 245.794 303.289 244.556 301.788 cv
236.97 292.596 247.16 291.815 250.846 291.815 cv
251.601 291.815 252.084 291.848 252.084 291.848 cv
262.805 293.007 255.499 303.904 248.89 303.902 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
260.329 310.866 mo
259.46 310.866 258.533 310.573 257.652 309.86 cv
252.705 305.855 260.391 304.9 260.391 304.9 cv
261.196 304.987 261.855 305.149 262.384 305.366 cv
262.446 310.26 li
261.834 310.633 261.105 310.866 260.329 310.866 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
262.446 310.26 mo
262.384 305.366 li
265.123 306.49 264.376 309.08 262.446 310.26 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
150.792 227.598 mo
150.101 227.598 149.32 227.329 148.502 226.667 cv
143.556 222.663 151.329 222.663 151.329 222.663 cv
154.915 223.229 153.581 227.598 150.792 227.598 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
189.852 66.9563 mo
189.161 66.9562 188.38 66.6876 187.563 66.0259 cv
182.616 62.0215 190.389 62.0215 190.389 62.0215 cv
193.976 62.5881 192.641 66.9567 189.852 66.9563 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
146.309 321.035 mo
145.73 321.035 145.346 320.804 145.423 320.21 cv
145.662 318.368 146.711 318.073 147.36 318.073 cv
147.667 318.073 147.884 318.139 147.884 318.139 cv
147.928 318.138 147.971 318.138 148.014 318.138 cv
150.432 318.138 150.518 318.862 149.744 319.587 cv
148.969 320.311 147.333 321.035 146.309 321.035 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
99.1352 353.193 mo
97.5143 353.193 95.9738 352.45 95.129 350.433 cv
93.9275 347.564 99.1436 347.469 99.8385 347.469 cv
99.8876 347.469 99.9143 347.469 99.9143 347.469 cv
100.396 347.434 100.838 347.418 101.245 347.418 cv
105.024 347.418 105.628 348.861 104.721 350.305 cv
103.813 351.749 101.396 353.193 99.1352 353.193 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
104.207 295.112 mo
102.586 295.112 101.045 293.946 100.201 290.777 cv
98.9986 286.267 104.219 286.119 104.91 286.119 cv
104.959 286.119 104.985 286.12 104.985 286.12 cv
105.466 286.065 105.908 286.038 106.314 286.038 cv
110.095 286.038 110.699 288.307 109.792 290.575 cv
108.885 292.844 106.467 295.112 104.207 295.112 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
247.132 170.486 mo
245.511 170.486 243.971 169.32 243.126 166.151 cv
241.924 161.642 247.143 161.493 247.836 161.493 cv
247.885 161.493 247.911 161.494 247.911 161.494 cv
248.393 161.439 248.835 161.413 249.241 161.413 cv
253.022 161.413 253.625 163.681 252.718 165.95 cv
251.811 168.218 249.393 170.486 247.132 170.486 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
217.043 250.132 mo
216.129 250.132 215.024 249.857 213.752 249.181 cv
206.201 245.165 216.536 245.165 216.536 245.165 cv
221.358 245.165 220.932 250.132 217.043 250.132 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
175.674 145.01 mo
174.645 145.01 173.64 144.607 172.826 143.621 cv
167.842 137.581 174.536 137.067 176.959 137.067 cv
177.456 137.067 177.773 137.089 177.773 137.089 cv
184.818 137.85 180.017 145.011 175.674 145.01 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
228.631 241.384 mo
227.939 241.384 227.158 241.115 226.341 240.454 cv
221.394 236.449 229.167 236.449 229.167 236.449 cv
232.754 237.015 231.419 241.384 228.631 241.384 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
142.705 165.95 mo
142.013 165.95 141.232 165.681 140.415 165.019 cv
135.468 161.015 143.241 161.015 143.241 161.015 cv
146.827 161.581 145.493 165.95 142.705 165.95 cv
level3{
gsave
clp
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05723e-14 335.972 -335.972 2.05723e-14 187.112 94.4484 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
.06015 783.028 mo
.06015 783.028 li
.06015 739.264 li
.06015 729.456 8.0104 721.505 17.8179 721.505 cv
18.2219 721.505 li
28.0304 721.505 35.9817 713.554 35.9817 703.747 cv
35.9817 490.374 li
35.9817 482.666 31.0711 476.104 24.2076 473.649 cv
20.6315 472.369 18.1829 469.073 18.1388 465.274 cv
17.9678 450.209 li
17.968 450.209 li
18.0934 461.215 li
242.277 467.737 li
251.257 468.321 259.613 472.531 265.425 479.4 cv
278.893 495.314 li
280.942 497.736 283.327 499.85 285.977 501.592 cv
288.501 503.254 li
297.818 509.383 303.428 519.789 303.428 530.942 cv
303.428 696.781 li
303.428 702.559 301.018 708.075 296.778 712.001 cv
293.032 715.469 288.138 717.434 283.032 717.519 cv
44.2663 721.505 li
17.8179 721.505 li
8.0104 721.505 .06015 729.456 .06015 739.264 cv
.06015 783.028 li
202.078 680.637 mo
202.078 680.637 188.908 682.274 197.384 689.135 cv
198.893 690.357 200.482 690.858 201.972 690.858 cv
208.308 690.86 212.867 681.804 202.078 680.637 cv
63.3324 676.523 mo
61.8667 676.523 57.8153 676.833 60.8313 680.488 cv
61.3237 681.084 61.9314 681.328 62.5544 681.328 cv
65.1819 681.328 68.0873 676.997 63.8248 676.536 cv
63.8248 676.536 63.6329 676.523 63.3324 676.523 cv
217.352 672.836 mo
215.887 672.836 211.836 673.147 214.852 676.801 cv
215.345 677.398 215.952 677.642 216.576 677.642 cv
219.203 677.642 222.107 673.31 217.844 672.849 cv
217.844 672.849 217.652 672.836 217.352 672.836 cv
84.2307 654.735 mo
79.7703 654.735 67.4412 655.681 76.6207 666.802 cv
78.12 668.619 79.9691 669.36 81.8656 669.36 cv
89.8618 669.36 98.7021 656.177 85.7296 654.775 cv
85.7296 654.775 85.145 654.735 84.2307 654.735 cv
132.153 601.442 mo
132.153 601.442 118.757 601.442 125.598 609.137 cv
127.748 611.556 129.842 612.493 131.664 612.493 cv
137.924 612.495 140.984 601.442 132.153 601.442 cv
269.123 601.416 mo
266.192 601.416 258.092 602.037 264.123 609.345 cv
265.108 610.539 266.323 611.026 267.569 611.026 cv
272.824 611.027 278.633 602.363 270.108 601.442 cv
270.108 601.442 269.724 601.416 269.123 601.416 cv
196.57 584.054 mo
196.57 584.054 187.164 584.054 193.15 588.9 cv
194.139 589.701 195.084 590.026 195.921 590.026 cv
199.295 590.026 200.91 584.74 196.57 584.054 cv
159.808 563.445 mo
158.756 563.445 157.054 563.693 156.666 565.242 cv
156.541 565.741 157.164 565.936 158.104 565.936 cv
159.765 565.936 162.417 565.327 163.673 564.718 cv
164.928 564.109 164.788 563.5 160.866 563.5 cv
160.797 563.5 160.728 563.5 160.656 563.5 cv
160.656 563.5 160.305 563.445 159.808 563.445 cv
267.969 521.284 mo
267.127 521.284 260.818 521.399 262.272 524.872 cv
263.294 527.312 265.158 528.211 267.119 528.211 cv
269.855 528.211 272.78 526.464 273.878 524.716 cv
274.976 522.969 274.246 521.222 269.671 521.222 cv
269.18 521.222 268.644 521.242 268.062 521.285 cv
268.062 521.285 268.029 521.284 267.969 521.284 cv
74.7247 508.328 mo
70.2644 508.328 57.9355 509.274 67.1149 520.396 cv
68.6137 522.212 70.4637 522.954 72.3596 522.954 cv
80.3562 522.956 89.1972 509.77 76.2233 508.368 cv
76.2233 508.368 75.6389 508.328 74.7247 508.328 cv
164.155 496.338 mo
163.317 496.338 157.002 496.452 158.456 499.925 cv
159.478 502.366 161.342 503.265 163.304 503.265 cv
166.039 503.265 168.964 501.518 170.062 499.77 cv
171.16 498.023 170.43 496.276 165.855 496.276 cv
165.364 496.276 164.828 496.296 164.246 496.339 cv
164.246 496.339 164.214 496.338 164.155 496.338 cv
330.837 450.209 mo
330.837 450.209 li
330.836 437.097 li
330.837 437.097 li
330.837 450.209 li
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
313.077 721.505 mo
44.2663 721.505 li
283.032 717.519 li
288.138 717.434 293.032 715.469 296.778 712.001 cv
301.018 708.075 303.428 702.559 303.428 696.781 cv
303.428 530.942 li
303.428 519.789 297.818 509.383 288.501 503.254 cv
285.977 501.592 li
283.327 499.85 280.942 497.736 278.893 495.314 cv
265.425 479.4 li
259.613 472.531 251.257 468.321 242.277 467.737 cv
18.0934 461.215 li
17.968 450.209 li
74.965 450.209 li
123.36 450.209 li
198.325 450.209 li
246.72 450.209 li
330.836 450.209 li
330.837 450.209 li
330.837 533.172 li
330.829 533.172 330.822 533.172 330.814 533.172 cv
330.814 533.172 li
330.813 533.172 330.813 533.172 330.813 533.172 cv
330.813 548.663 li
330.813 548.663 330.813 548.663 330.814 548.663 cv
330.814 631.563 li
330.813 631.563 li
330.813 634.937 li
330.837 634.937 li
330.837 703.747 li
330.837 713.554 322.885 721.505 313.077 721.505 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1004.08 721.91 mo
1004.08 721.91 li
1002.86 721.645 1001.59 721.505 1000.29 721.505 cv
973.843 721.505 li
804.732 717.519 li
799.628 717.434 794.733 715.469 790.987 712.001 cv
786.748 708.075 784.338 702.559 784.338 696.781 cv
784.338 638.972 li
784.545 638.893 784.734 638.814 784.899 638.734 cv
785.846 638.274 785.999 637.815 784.338 637.617 cv
784.338 530.942 li
784.338 519.789 789.947 509.383 799.264 503.254 cv
801.789 501.592 li
804.438 499.85 806.824 497.736 808.873 495.314 cv
822.339 479.4 li
828.152 472.531 836.508 468.321 845.488 467.737 cv
1000.02 461.215 li
1000.06 457.681 li
999.969 465.274 li
999.925 469.073 997.477 472.369 993.901 473.649 cv
987.038 476.104 982.128 482.666 982.128 490.374 cv
982.128 703.747 li
982.128 713.554 990.079 721.505 999.886 721.505 cv
1000.29 721.505 li
1001.59 721.505 1002.86 721.645 1004.08 721.91 cv
927.751 676.715 mo
927.751 676.715 918.344 676.715 924.33 681.561 cv
925.319 682.362 926.264 682.687 927.101 682.687 cv
930.476 682.688 932.091 677.402 927.751 676.715 cv
817.798 658.071 mo
817.798 658.071 808.391 658.071 814.377 662.917 cv
815.366 663.717 816.311 664.042 817.148 664.042 cv
820.523 664.043 822.137 658.756 817.798 658.071 cv
888.206 647.549 mo
888.206 647.549 869.604 649.86 881.576 659.551 cv
883.708 661.277 885.952 661.984 888.056 661.985 cv
897.005 661.986 903.446 649.196 888.206 647.549 cv
923.73 547.599 mo
923.73 547.599 914.323 547.599 920.31 552.445 cv
921.299 553.245 922.244 553.57 923.081 553.57 cv
926.455 553.57 928.069 548.285 923.73 547.599 cv
837.558 494.749 mo
837.558 494.749 828.153 494.749 834.138 499.593 cv
835.128 500.394 836.073 500.719 836.909 500.719 cv
840.284 500.719 841.898 495.433 837.558 494.749 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1000.06 457.681 mo
1000.14 450.209 li
1000.14 450.209 li
1000.06 457.681 li
.980392 .901961 .862745 rgb
f
973.843 721.505 mo
705.032 721.505 li
696.758 721.505 689.806 715.847 687.833 708.191 cv
687.482 706.799 687.296 705.341 687.296 703.84 cv
687.296 634.937 li
687.296 631.563 li
687.296 548.663 li
687.296 548.663 li
687.296 533.172 li
687.296 533.172 li
687.296 533.172 li
687.296 450.209 li
771.387 450.209 li
819.783 450.209 li
894.749 450.209 li
943.144 450.209 li
1000.14 450.209 li
1000.06 457.681 li
1000.02 461.215 li
845.488 467.737 li
836.508 468.321 828.152 472.531 822.339 479.4 cv
808.873 495.314 li
806.824 497.736 804.438 499.85 801.789 501.592 cv
799.264 503.254 li
789.947 509.383 784.338 519.789 784.338 530.942 cv
784.338 637.617 li
783.795 637.552 783.059 637.515 782.093 637.515 cv
782.024 637.515 781.955 637.516 781.883 637.516 cv
781.883 637.516 781.532 637.461 781.036 637.461 cv
779.984 637.461 778.281 637.709 777.893 639.258 cv
777.769 639.757 778.391 639.952 779.33 639.952 cv
780.773 639.952 782.964 639.492 784.338 638.972 cv
784.338 696.781 li
784.338 702.559 786.748 708.075 790.987 712.001 cv
794.733 715.469 799.628 717.434 804.732 717.519 cv
973.843 721.505 li
753.382 675.457 mo
753.382 675.457 739.985 675.457 746.826 683.153 cv
748.976 685.572 751.07 686.509 752.892 686.509 cv
759.152 686.51 762.212 675.457 753.382 675.457 cv
749.72 593.304 mo
749.72 593.304 740.42 594.461 746.404 599.305 cv
747.47 600.168 748.592 600.522 749.644 600.522 cv
754.119 600.523 757.34 594.128 749.72 593.304 cv
738.168 577.47 mo
733.708 577.47 721.379 578.416 730.558 589.538 cv
732.057 591.354 733.907 592.095 735.803 592.096 cv
743.8 592.098 752.64 578.912 739.667 577.51 cv
739.667 577.51 739.082 577.47 738.168 577.47 cv
717.188 509.63 mo
717.188 509.63 704.682 509.63 713.819 514.491 cv
715.359 515.31 716.695 515.641 717.8 515.641 cv
722.507 515.641 723.023 509.63 717.188 509.63 cv
732.472 499.085 mo
732.472 499.085 723.066 499.085 729.052 503.93 cv
730.041 504.731 730.987 505.056 731.823 505.056 cv
735.198 505.056 736.811 499.77 732.472 499.085 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
330.836 450.209 mo
246.72 450.209 li
198.325 450.209 li
123.36 450.209 li
74.965 450.209 li
17.968 450.209 li
17.9678 450.209 li
9.15045 450.209 li
4.09734 450.209 .000254873 446.112 .000254873 441.058 cv
.000254873 384.394 li
.000254873 379.34 4.09734 375.244 9.15045 375.244 cv
65.8135 375.244 li
67.6506 375.244 69.3611 375.785 70.7945 376.717 cv
70.7945 376.717 li
72.8651 378.063 74.3572 380.223 74.8165 382.744 cv
74.914 383.279 74.965 383.831 74.965 384.395 cv
74.965 392.663 li
74.965 393.993 75.249 395.257 75.7598 396.398 cv
77.1889 399.589 80.3927 401.813 84.1155 401.813 cv
114.21 401.813 li
117.932 401.813 121.136 399.589 122.565 396.398 cv
123.076 395.257 123.36 393.993 123.36 392.663 cv
123.36 384.394 li
123.36 383.83 123.411 383.279 123.508 382.744 cv
124.286 378.478 128.02 375.244 132.51 375.244 cv
146.855 375.244 li
189.174 375.244 li
193.664 375.244 197.399 378.478 198.176 382.744 cv
198.274 383.279 198.325 383.831 198.325 384.395 cv
198.325 392.663 li
198.325 393.993 198.609 395.257 199.12 396.398 cv
200.549 399.589 203.753 401.813 207.475 401.813 cv
237.57 401.813 li
241.293 401.813 244.497 399.589 245.926 396.398 cv
246.436 395.257 246.72 393.993 246.72 392.663 cv
246.72 384.394 li
246.72 383.83 246.771 383.279 246.869 382.744 cv
247.646 378.478 251.381 375.244 255.871 375.244 cv
303.428 375.244 li
312.534 375.244 li
317.588 375.244 321.685 379.341 321.685 384.395 cv
321.685 392.663 li
321.685 397.717 325.782 401.813 330.836 401.813 cv
330.836 437.097 li
330.836 450.209 li
66.5502 428.163 mo
63.6192 428.163 55.5171 428.785 61.5485 436.093 cv
62.5339 437.286 63.7491 437.774 64.9955 437.774 cv
70.2503 437.774 76.059 429.11 67.5345 428.189 cv
67.5345 428.189 67.1509 428.163 66.5502 428.163 cv
252.868 421.037 mo
252.027 421.037 245.716 421.218 247.17 426.673 cv
248.192 430.508 250.056 431.919 252.017 431.919 cv
254.753 431.919 257.678 429.174 258.776 426.429 cv
259.874 423.685 259.144 420.94 254.57 420.94 cv
254.078 420.94 253.543 420.971 252.96 421.038 cv
252.96 421.038 252.928 421.037 252.868 421.037 cv
301.665 426.307 mo
300.88 426.307 299.609 426.664 299.32 428.894 cv
299.227 429.611 299.691 429.891 300.392 429.892 cv
301.632 429.892 303.611 429.015 304.549 428.138 cv
305.486 427.262 305.382 426.386 302.455 426.386 cv
302.404 426.386 302.352 426.386 302.298 426.386 cv
302.298 426.386 302.036 426.307 301.665 426.307 cv
40.8166 414.839 mo
40.8166 414.839 31.4108 414.839 37.3967 419.685 cv
38.3857 420.486 39.3306 420.811 40.1672 420.811 cv
43.5416 420.811 45.1563 415.525 40.8166 414.839 cv
80.6721 416.032 mo
79.8869 416.032 78.6163 416.39 78.3273 418.619 cv
78.2341 419.337 78.6986 419.617 79.3993 419.617 cv
80.6392 419.617 82.6184 418.741 83.5558 417.864 cv
84.4933 416.988 84.3888 416.111 81.4621 416.111 cv
81.4106 416.111 81.3584 416.111 81.3052 416.112 cv
81.3052 416.112 81.0427 416.032 80.6721 416.032 cv
168.665 404.098 mo
168.665 404.098 155.269 404.098 162.11 411.794 cv
164.26 414.213 166.354 415.149 168.176 415.15 cv
174.435 415.15 177.496 404.098 168.665 404.098 cv
level3{
gsave
clp
[330.836 0 0 330.836 0 412.726 ]ct
/6 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .85098 .658824 ]
/C1 [.952941 .745098 .564706 ]
/N 4.97729 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 0 412.726 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8N#srr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrVc]nrVc]nrVc]nrVc]nrVc]nrVc]mr;?Kjr;?Kjr;?Kj
r;?Hhqtp9fqtp9fqtp6dqYL'bqYL'aq>'j^q>'j]q"XXZq"XUXp\4FVp@e4Rp@e1Pp%A"Mo^qeJoCMSF
~>
<~g"=s0f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f[na,f@SX+f@SX+f@SX+f@SX+f%/F'f%/F'f%/F'f%&=$e^`4#e^`4"eC<!teC<!se'ldpe'lan
daHRldF$@hdEp7ed*U+bcd0n^cHa\Zc-=JVbfn8RbK@uMaiVZGaN2EB`l?$;`Pod6_o'@._83t'^q[Xu
~>
<~W2HPkVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVP^5fVP^5fVP^5fVP^5fVP^5fV5:#bV5:#bV5:#bV50o_Unjf^Unjf]USFTZUSFTYU8"BV
U8"?TTqS0RTV.sNTV.pLT:_aISt;OESXl=AS=H+=S"#n9R[TY4R@'A/Q^=&)QBmf$Q'@MsPEV/mOcb`e
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
1008.96 450.209 mo
1000.14 450.209 li
1000.14 450.209 li
943.144 450.209 li
894.749 450.209 li
819.783 450.209 li
771.387 450.209 li
687.296 450.209 li
687.296 401.813 li
692.338 401.8 696.422 397.709 696.422 392.663 cv
696.422 384.395 li
696.422 379.341 700.521 375.244 705.574 375.244 cv
714.68 375.244 li
748.171 375.244 li
762.237 375.244 li
766.728 375.244 770.462 378.478 771.239 382.744 cv
771.336 383.279 771.387 383.83 771.387 384.394 cv
771.387 392.663 li
771.387 393.993 771.671 395.257 772.182 396.398 cv
773.611 399.589 776.815 401.813 780.538 401.813 cv
810.632 401.813 li
814.356 401.813 817.56 399.589 818.988 396.398 cv
819.499 395.257 819.783 393.993 819.783 392.663 cv
819.783 384.395 li
819.783 383.831 819.834 383.279 819.931 382.744 cv
820.709 378.478 824.444 375.244 828.934 375.244 cv
885.597 375.244 li
890.088 375.244 893.823 378.478 894.6 382.744 cv
894.698 383.279 894.749 383.83 894.749 384.394 cv
894.749 392.663 li
894.749 393.993 895.033 395.257 895.543 396.398 cv
896.972 399.589 900.176 401.813 903.899 401.813 cv
933.994 401.813 li
937.716 401.813 940.92 399.589 942.349 396.398 cv
942.86 395.257 943.144 393.993 943.144 392.663 cv
943.144 384.395 li
943.144 383.831 943.195 383.279 943.293 382.744 cv
943.752 380.224 945.243 378.064 947.313 376.718 cv
948.747 375.785 950.458 375.244 952.296 375.244 cv
1008.96 375.244 li
1014.01 375.244 1018.11 379.34 1018.11 384.394 cv
1018.11 441.058 li
1018.11 446.112 1014.01 450.209 1008.96 450.209 cv
984.013 428.249 mo
984.013 428.249 974.608 428.249 980.593 433.095 cv
981.583 433.896 982.528 434.221 983.365 434.221 cv
986.739 434.221 988.353 428.935 984.013 428.249 cv
853.806 416.827 mo
853.806 416.827 841.301 416.827 850.439 421.687 cv
851.978 422.505 853.315 422.837 854.42 422.837 cv
859.127 422.838 859.642 416.827 853.806 416.827 cv
722.38 412.021 mo
719.449 412.021 711.346 412.642 717.379 419.951 cv
718.363 421.145 719.579 421.632 720.825 421.632 cv
726.079 421.633 731.889 412.969 723.364 412.048 cv
723.364 412.048 722.98 412.021 722.38 412.021 cv
869.092 406.28 mo
869.092 406.28 859.685 406.28 865.671 411.126 cv
866.661 411.927 867.605 412.252 868.442 412.252 cv
871.817 412.252 873.431 406.965 869.092 406.28 cv
967.307 404.534 mo
966.254 404.534 964.55 404.782 964.163 406.332 cv
964.038 406.831 964.66 407.025 965.599 407.025 cv
967.26 407.025 969.913 406.416 971.169 405.807 cv
972.425 405.198 972.284 404.589 968.36 404.589 cv
968.292 404.589 968.224 404.589 968.153 404.589 cv
968.153 404.589 967.802 404.534 967.307 404.534 cv
level3{
gsave
clp
[330.836 0 0 330.836 687.273 412.726 ]ct
/7 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.952941 .745098 .564706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .85098 .658824 ]
/C1 [.952941 .745098 .564706 ]
/N 4.97729 
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 687.273 412.726 ]ct
clp
/7 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~oCMSFoCV\Io^qhLp%A"Op@e4Rp@n=Up\4FWq"XXZq"X[\q>'j^q>'m`qYL'bqYL'cqtp9fqtp9fqtp9g
r;?Kjr;?Kjr;?Kjr;?NlrVc]nrVc]nrVc]nrVc]nrVc]nrVlfqrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
~>
<~^:q@s^qde&_8=(,_o0L4`Poj:`lH-@aN2KFai_cKbKJ)Qbfn;Uc-=MYcHa_]cd0qad*U.ddF$@hdF-Ik
daHRme'ldpe'lgreC<!teC<%!e^`4#e^`4#f%/F'f%/F'f%/F'f%8O*f@SX+f@SX+f@SX+f@SX+f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
~>
<~OH>QdOcklkPEV5qQ'IW#QBml(Q^F/-R@0J3R[T_8S"#q<S=H.@SXl@DSt;RHT:_aKTV.sNTV8'QTqS0S
U8"BVU8"EXUSFTZUSFW\Unjf^Unjf^V5:#bV5:#bV5:#bV5C,eVP^5fVP^5fVP^5fVP^5fVPg>iVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /7 /Gradient get_res exec grestore
}if
np
131.664 612.493 mo
129.842 612.493 127.748 611.556 125.598 609.137 cv
118.757 601.442 132.153 601.442 132.153 601.442 cv
140.984 601.442 137.924 612.495 131.664 612.493 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
854.42 422.837 mo
853.315 422.837 851.978 422.505 850.439 421.687 cv
841.301 416.827 853.806 416.827 853.806 416.827 cv
859.642 416.827 859.127 422.838 854.42 422.837 cv
level3{
gsave
clp
[330.836 0 0 330.836 687.273 412.726 ]ct
/8 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9
I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~qS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm
`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm_iX`4OSZkVqSSEk_iX]3OSQeUq8/6h_N4N0O86YRq8&*e_2e<+
NqgDLpqMg`^Q&!%NVC/GpUuO[]o2TsMY=]?ot-(R\qp!gL\/'2o<sDF[=n+WKCQ:"nZdZ7YCQ)DIdX7a
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 687.273 412.726 ]ct
clp
/8 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~mI'E1mdKW5n*oi9nF5r:nF?&=nac8Ao()ABo(2JEoCMSFoCV\Io^qeJo_%nMp%A"Np%J+Qp@e4Rp@e4R
p@e4Rp@e7Tp\4FVp\4FVp\4FVp\4IXq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"X[\q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
~>
<~WiN2%XKAV-Y-5%5Yd(I=ZEgdAZEpmE['d<L[C3NP[^W`T\%&rY\[oA`]">Sd]=Y\e]=beh]Y(ni]Y2"l
]tM+m]tM.o^:q=q^:q@s^V@Ou^V@S"^qdb$^qde&_83t(_83t(_83t(_84"*_SX1,_SX1,_SX1,_SX1,
_SX1,_SX1,_SX1-_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
~>
<~H[L3hI=?WpIt3'"J:W9&JV&K*JqJ].K7no3Knb>:L5(G;L51P>LPUbBLl$tFM2@(GM2I1JMMmCNMi3LO
Mi3OQN/W^SN/W^SN/W^SN/WaUNK&pWNK&pWNK&sYNfK-[NfK-[NfK0]O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?`OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /8 /Gradient get_res exec grestore
}if
np
267.569 611.026 mo
266.323 611.026 265.108 610.539 264.123 609.345 cv
258.092 602.037 266.192 601.416 269.123 601.416 cv
269.724 601.416 270.108 601.442 270.108 601.442 cv
278.633 602.363 272.824 611.027 267.569 611.026 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
64.9955 437.774 mo
63.7491 437.774 62.5339 437.286 61.5485 436.093 cv
55.5171 428.785 63.6192 428.163 66.5502 428.163 cv
67.1509 428.163 67.5345 428.189 67.5345 428.189 cv
76.059 429.11 70.2503 437.774 64.9955 437.774 cv
level3{
gsave
clp
[330.836 0 0 330.836 0 412.726 ]ct
/9 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~qS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm
`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm_iX`4OSZkVqSSEk_iX]3OSQeUq8/6h_N4N0O86YRq8&*e_2e<+
NqgDLpqMg`^Q&!%NVC/GpUuO[]o2TsMY=]?ot-(R\qp!gL\/'2o<sDF[=n+WKCQ:"nZdZ7YCQ)DIdX7a
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 0 412.726 ]ct
clp
/9 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j]q"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXYp\4FVp\4FVp\4FVp\4FUp@e4R
p@e4Rp@e4Rp@e4Rp%A"Np%A"No^qeJo^qeJoCMSFoCMSFo()ABo()ABnaZ/>nF5r:nF5r:n*f`6mdBN2
~>
<~_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'@._SX1,_SX1,
_SX1,_SX1,_SX1,_SX1,_SX1+_83t(_83t(_83t(_83t'^qdb$^qdb#^V@Ou^V@Ot^:q=q^:q=p]tM+m
]tM+m]Y(ni]Y(ni]=Y\e]=Y\e]"5Ja\[f5[\$riU[^NWQ[C*EM['[0GZEgdAZEga?Yct=7Y-+n/XK8J'
~>
<~OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>NaO,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?^NfK-[NfK-[NfK-ZNK&pWNK&pWNK&pVN/W^SN/W^SN/W^SN/W^R
Mi3LOMi3LOMMd:KM2@(GM2@(GLkpkCLPLY?L5(G;L5(G;KnY25K7ef/JqAT+JUrB'J:N0#It)orI=6Kj
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /9 /Gradient get_res exec grestore
}if
np
216.576 677.642 mo
215.952 677.642 215.345 677.398 214.852 676.801 cv
211.836 673.147 215.887 672.836 217.352 672.836 cv
217.652 672.836 217.844 672.849 217.844 672.849 cv
222.107 673.31 219.203 677.642 216.576 677.642 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
62.5544 681.328 mo
61.9314 681.328 61.3237 681.084 60.8313 680.488 cv
57.8153 676.833 61.8667 676.523 63.3324 676.523 cv
63.6329 676.523 63.8248 676.536 63.8248 676.536 cv
68.0873 676.997 65.1819 681.328 62.5544 681.328 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
735.803 592.096 mo
733.907 592.095 732.057 591.354 730.558 589.538 cv
721.379 578.416 733.708 577.47 738.168 577.47 cv
739.082 577.47 739.667 577.51 739.667 577.51 cv
752.64 578.912 743.8 592.098 735.803 592.096 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
72.3596 522.954 mo
70.4637 522.954 68.6137 522.212 67.1149 520.396 cv
57.9355 509.274 70.2644 508.328 74.7247 508.328 cv
75.6389 508.328 76.2233 508.368 76.2233 508.368 cv
89.1972 509.77 80.3562 522.956 72.3596 522.954 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
81.8656 669.36 mo
79.9691 669.36 78.12 668.619 76.6207 666.802 cv
67.4412 655.681 79.7703 654.735 84.2307 654.735 cv
85.145 654.735 85.7296 654.775 85.7296 654.775 cv
98.7021 656.177 89.8618 669.36 81.8656 669.36 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
888.056 661.985 mo
885.952 661.984 883.708 661.277 881.576 659.551 cv
869.604 649.86 888.206 647.549 888.206 647.549 cv
903.446 649.196 897.005 661.986 888.056 661.985 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
201.972 690.858 mo
200.482 690.858 198.893 690.357 197.384 689.135 cv
188.908 682.274 202.078 680.637 202.078 680.637 cv
212.867 681.804 208.308 690.86 201.972 690.858 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
749.644 600.522 mo
748.592 600.522 747.47 600.168 746.404 599.305 cv
740.42 594.461 749.72 593.304 749.72 593.304 cv
757.34 594.128 754.119 600.523 749.644 600.522 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
195.921 590.026 mo
195.084 590.026 194.139 589.701 193.15 588.9 cv
187.164 584.054 196.57 584.054 196.57 584.054 cv
200.91 584.74 199.295 590.026 195.921 590.026 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
40.1672 420.811 mo
39.3306 420.811 38.3857 420.486 37.3967 419.685 cv
31.4108 414.839 40.8166 414.839 40.8166 414.839 cv
45.1563 415.525 43.5416 420.811 40.1672 420.811 cv
level3{
gsave
clp
[330.836 0 0 330.836 0 412.726 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 0 412.726 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
868.442 412.252 mo
867.605 412.252 866.661 411.927 865.671 411.126 cv
859.685 406.28 869.092 406.28 869.092 406.28 cv
873.431 406.965 871.817 412.252 868.442 412.252 cv
level3{
gsave
clp
[330.836 0 0 330.836 687.273 412.726 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 687.273 412.726 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
927.101 682.687 mo
926.264 682.687 925.319 682.362 924.33 681.561 cv
918.344 676.715 927.751 676.715 927.751 676.715 cv
932.091 677.402 930.476 682.688 927.101 682.687 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
923.081 553.57 mo
922.244 553.57 921.299 553.245 920.31 552.445 cv
914.323 547.599 923.73 547.599 923.73 547.599 cv
928.069 548.285 926.455 553.57 923.081 553.57 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
158.104 565.936 mo
157.164 565.936 156.541 565.741 156.666 565.242 cv
157.054 563.693 158.756 563.445 159.808 563.445 cv
160.305 563.445 160.656 563.5 160.656 563.5 cv
160.728 563.5 160.797 563.5 160.866 563.5 cv
164.788 563.5 164.928 564.109 163.673 564.718 cv
162.417 565.327 159.765 565.936 158.104 565.936 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
752.892 686.509 mo
751.07 686.509 748.976 685.572 746.826 683.153 cv
739.985 675.457 753.382 675.457 753.382 675.457 cv
762.212 675.457 759.152 686.51 752.892 686.509 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
817.148 664.042 mo
816.311 664.042 815.366 663.717 814.377 662.917 cv
808.391 658.071 817.798 658.071 817.798 658.071 cv
822.137 658.756 820.523 664.043 817.148 664.042 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
784.338 638.972 mo
784.338 637.617 li
785.999 637.815 785.846 638.274 784.899 638.734 cv
784.734 638.814 784.545 638.893 784.338 638.972 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
779.33 639.952 mo
778.391 639.952 777.769 639.757 777.893 639.258 cv
778.281 637.709 779.984 637.461 781.036 637.461 cv
781.532 637.461 781.883 637.516 781.883 637.516 cv
781.955 637.516 782.024 637.515 782.093 637.515 cv
783.059 637.515 783.795 637.552 784.338 637.617 cv
784.338 638.972 li
782.964 639.492 780.773 639.952 779.33 639.952 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
300.392 429.892 mo
299.691 429.891 299.227 429.611 299.32 428.894 cv
299.609 426.664 300.88 426.307 301.665 426.307 cv
302.036 426.307 302.298 426.386 302.298 426.386 cv
302.352 426.386 302.404 426.386 302.455 426.386 cv
305.382 426.386 305.486 427.262 304.549 428.138 cv
303.611 429.015 301.632 429.892 300.392 429.892 cv
level3{
gsave
clp
[330.836 0 0 330.836 0 412.726 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 0 412.726 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
79.3993 419.617 mo
78.6986 419.617 78.2341 419.337 78.3273 418.619 cv
78.6163 416.39 79.8869 416.032 80.6721 416.032 cv
81.0427 416.032 81.3052 416.112 81.3052 416.112 cv
81.3584 416.111 81.4106 416.111 81.4621 416.111 cv
84.3888 416.111 84.4933 416.988 83.5558 417.864 cv
82.6184 418.741 80.6392 419.617 79.3993 419.617 cv
level3{
gsave
clp
[330.836 0 0 330.836 0 412.726 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 0 412.726 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
163.304 503.265 mo
161.342 503.265 159.478 502.366 158.456 499.925 cv
157.002 496.452 163.317 496.338 164.155 496.338 cv
164.214 496.338 164.246 496.339 164.246 496.339 cv
164.828 496.296 165.364 496.276 165.855 496.276 cv
170.43 496.276 171.16 498.023 170.062 499.77 cv
168.964 501.518 166.039 503.265 163.304 503.265 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
252.017 431.919 mo
250.056 431.919 248.192 430.508 247.17 426.673 cv
245.716 421.218 252.027 421.037 252.868 421.037 cv
252.928 421.037 252.96 421.038 252.96 421.038 cv
253.543 420.971 254.078 420.94 254.57 420.94 cv
259.144 420.94 259.874 423.685 258.776 426.429 cv
257.678 429.174 254.753 431.919 252.017 431.919 cv
level3{
gsave
clp
[330.836 0 0 330.836 0 412.726 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 0 412.726 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
168.176 415.15 mo
166.354 415.149 164.26 414.213 162.11 411.794 cv
155.269 404.098 168.665 404.098 168.665 404.098 cv
177.496 404.098 174.435 415.15 168.176 415.15 cv
level3{
gsave
clp
[330.836 0 0 330.836 0 412.726 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 0 412.726 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
717.8 515.641 mo
716.695 515.641 715.359 515.31 713.819 514.491 cv
704.682 509.63 717.188 509.63 717.188 509.63 cv
723.023 509.63 722.507 515.641 717.8 515.641 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
720.825 421.632 mo
719.579 421.632 718.363 421.145 717.379 419.951 cv
711.346 412.642 719.449 412.021 722.38 412.021 cv
722.98 412.021 723.364 412.048 723.364 412.048 cv
731.889 412.969 726.079 421.633 720.825 421.632 cv
level3{
gsave
clp
[330.836 0 0 330.836 687.273 412.726 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 687.273 412.726 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
983.365 434.221 mo
982.528 434.221 981.583 433.896 980.593 433.095 cv
974.608 428.249 984.013 428.249 984.013 428.249 cv
988.353 428.935 986.739 434.221 983.365 434.221 cv
level3{
gsave
clp
[330.836 0 0 330.836 687.273 412.726 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 687.273 412.726 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
731.823 505.056 mo
730.987 505.056 730.041 504.731 729.052 503.93 cv
723.066 499.085 732.472 499.085 732.472 499.085 cv
736.811 499.77 735.198 505.056 731.823 505.056 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
836.909 500.719 mo
836.073 500.719 835.128 500.394 834.138 499.593 cv
828.153 494.749 837.558 494.749 837.558 494.749 cv
841.898 495.433 840.284 500.719 836.909 500.719 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
965.599 407.025 mo
964.66 407.025 964.038 406.831 964.163 406.332 cv
964.55 404.782 966.254 404.534 967.307 404.534 cv
967.802 404.534 968.153 404.589 968.153 404.589 cv
968.224 404.589 968.292 404.589 968.36 404.589 cv
972.284 404.589 972.425 405.198 971.169 405.807 cv
969.913 406.416 967.26 407.025 965.599 407.025 cv
level3{
gsave
clp
[330.836 0 0 330.836 687.273 412.726 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 687.273 412.726 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
267.119 528.211 mo
265.158 528.211 263.294 527.312 262.272 524.872 cv
260.818 521.399 267.127 521.284 267.969 521.284 cv
268.029 521.284 268.062 521.285 268.062 521.285 cv
268.644 521.242 269.18 521.222 269.671 521.222 cv
274.246 521.222 274.976 522.969 273.878 524.716 cv
272.78 526.464 269.855 528.211 267.119 528.211 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
322.632 800.787 mo
317.688 800.787 li
17.8189 800.787 li
8.01142 800.787 .06015 792.836 .06015 783.028 cv
.06015 783.028 li
.06015 739.264 li
.06015 729.456 8.0104 721.505 17.8179 721.505 cv
44.2663 721.505 li
313.077 721.505 li
322.885 721.505 330.837 713.554 330.837 703.747 cv
330.837 703.747 li
330.837 634.937 li
345.779 634.937 li
346.348 634.937 346.881 634.653 347.34 634.159 cv
347.34 634.158 347.341 634.157 347.342 634.156 cv
347.343 634.155 347.345 634.153 347.346 634.152 cv
348.284 633.136 348.911 631.238 348.911 629.089 cv
348.911 629.089 li
348.911 566.792 li
348.911 558.778 347.41 551.425 344.898 545.652 cv
341.59 538.048 336.528 533.186 330.837 533.172 cv
330.837 150.298 li
330.837 142.589 325.925 136.029 319.063 133.573 cv
315.486 132.293 313.037 128.998 312.994 125.199 cv
312.876 114.863 li
313.093 114.863 li
313.211 125.184 li
313.227 126.586 313.662 127.87 314.269 129.058 cv
609.878 134.628 li
615.469 134.734 620.501 138.043 622.812 143.134 cv
636.956 174.283 li
636.956 213 li
636.956 213 li
636.956 218.509 641.421 222.974 646.93 222.974 cv
652.439 222.974 656.905 218.509 656.905 213 cv
656.905 196.521 li
659.214 198.809 li
661.963 201.533 663.51 205.243 663.51 209.114 cv
663.51 331.489 li
330.837 331.489 li
330.837 341.944 li
663.51 341.944 li
663.51 353.645 li
330.837 353.645 li
330.837 374.553 li
663.51 374.553 li
663.51 705.636 li
663.51 710.487 663.143 714.089 662.638 716.748 cv
662.384 718.089 662.399 719.426 662.652 720.705 cv
661.773 720.071 660.934 719.809 660.182 719.809 cv
656.807 719.809 655.194 725.094 659.533 725.78 cv
659.533 725.78 662.956 725.78 664.358 724.716 cv
664.942 725.564 665.65 726.342 666.468 727.025 cv
669.68 729.707 671.68 733.735 671.68 738.164 cv
671.68 784.197 li
671.68 792.171 665.241 798.653 657.265 798.702 cv
322.632 800.787 li
371.762 776.631 mo
366.507 776.631 360.697 785.295 369.222 786.216 cv
369.222 786.216 369.606 786.242 370.206 786.242 cv
373.137 786.242 381.24 785.621 375.209 778.312 cv
374.224 777.119 373.008 776.631 371.762 776.631 cv
606.649 777.943 mo
604.645 777.943 602.502 779.69 601.698 781.437 cv
600.894 783.184 601.428 784.931 604.78 784.931 cv
605.14 784.931 605.532 784.911 605.959 784.869 cv
605.959 784.869 605.982 784.869 606.026 784.869 cv
606.642 784.869 611.265 784.755 610.2 781.283 cv
609.451 778.842 608.085 777.943 606.649 777.943 cv
57.1642 773.885 mo
57.1642 773.885 47.8634 775.041 53.8493 779.886 cv
54.9153 780.749 56.0375 781.103 57.0895 781.103 cv
61.5637 781.104 64.7838 774.709 57.1642 773.885 cv
181.509 771.586 mo
181.509 771.586 169.003 771.586 178.141 776.447 cv
179.68 777.266 181.017 777.597 182.122 777.597 cv
186.828 777.598 187.344 771.586 181.509 771.586 cv
263.846 762.006 mo
259.386 762.006 247.054 762.951 256.234 774.073 cv
257.733 775.889 259.583 776.631 261.479 776.631 cv
269.476 776.631 278.315 763.447 265.343 762.045 cv
265.343 762.045 264.76 762.006 263.846 762.006 cv
196.794 761.04 mo
196.794 761.04 187.387 761.04 193.373 765.885 cv
194.362 766.686 195.307 767.011 196.144 767.011 cv
199.519 767.012 201.134 761.725 196.794 761.04 cv
77.005 746.949 mo
72.5444 746.949 60.2148 747.895 69.3943 759.017 cv
70.8931 760.833 72.7432 761.575 74.6391 761.575 cv
82.6359 761.577 91.4767 748.391 78.5037 746.989 cv
78.5037 746.989 77.9192 746.949 77.005 746.949 cv
462.29 729.989 mo
456.03 729.989 452.971 741.041 461.802 741.041 cv
461.802 741.041 475.198 741.041 468.357 733.345 cv
466.207 730.926 464.112 729.989 462.29 729.989 cv
570.028 728.215 mo
570.028 728.215 570.286 728.271 570.65 728.271 cv
571.421 728.271 572.669 728.022 572.952 726.474 cv
573.043 725.975 572.587 725.78 571.899 725.78 cv
570.682 725.78 568.739 726.389 567.819 726.998 cv
566.899 727.607 567.002 728.216 569.876 728.216 cv
569.926 728.216 569.976 728.216 570.028 728.215 cv
619.045 724.507 mo
619.045 724.507 619.307 724.587 619.678 724.587 cv
620.463 724.587 621.734 724.23 622.023 722.001 cv
622.116 721.282 621.651 721.002 620.95 721.002 cv
619.71 721.002 617.731 721.879 616.794 722.755 cv
615.856 723.632 615.961 724.508 618.889 724.508 cv
618.94 724.508 618.992 724.508 619.045 724.507 cv
635.354 702.846 mo
630.1 702.846 624.291 711.509 632.815 712.43 cv
632.815 712.43 633.199 712.456 633.801 712.456 cv
636.732 712.457 644.832 711.835 638.8 704.527 cv
637.815 703.333 636.6 702.846 635.354 702.846 cv
401.871 676.695 mo
398.496 676.695 396.881 681.981 401.221 682.667 cv
401.221 682.667 410.628 682.667 404.641 677.821 cv
403.652 677.02 402.707 676.695 401.871 676.695 cv
501.257 669.095 mo
497.882 669.095 496.268 674.381 500.607 675.067 cv
500.607 675.067 510.014 675.067 504.028 670.221 cv
503.039 669.421 502.094 669.095 501.257 669.095 cv
565.515 646.628 mo
559.255 646.628 556.195 657.68 565.025 657.68 cv
565.025 657.68 578.421 657.68 571.581 649.984 cv
569.431 647.565 567.337 646.628 565.515 646.628 cv
579.4 629.075 mo
579.4 629.075 li
579.4 632.303 581.58 634.919 584.27 634.919 cv
630.504 634.919 li
633.193 634.919 635.374 632.303 635.374 629.075 cv
635.374 566.758 li
635.374 566.758 li
635.374 548.21 622.844 533.173 607.386 533.173 cv
591.929 533.173 579.4 548.21 579.4 566.758 cv
579.4 629.075 li
579.4 629.075 li
481.335 634.919 mo
481.335 634.919 li
536.814 634.919 li
540.043 634.919 542.659 632.303 542.659 629.075 cv
542.659 566.758 li
542.659 566.758 li
542.659 548.21 527.623 533.173 509.075 533.173 cv
509.074 533.173 li
490.526 533.173 475.49 548.21 475.49 566.758 cv
475.49 629.075 li
475.49 629.075 li
475.49 629.1 475.49 629.125 475.49 629.15 cv
475.531 632.344 478.131 634.919 481.335 634.919 cv
382.735 629.075 mo
382.735 629.075 li
382.735 632.303 384.916 634.919 387.605 634.919 cv
433.839 634.919 li
436.529 634.919 438.71 632.303 438.71 629.075 cv
438.71 566.758 li
438.71 566.758 li
438.71 548.21 426.179 533.173 410.722 533.173 cv
395.265 533.173 382.735 548.21 382.735 566.758 cv
382.735 629.075 li
382.735 629.075 li
458.242 594.998 mo
455.506 594.998 452.581 597.743 451.483 600.488 cv
450.386 603.233 451.116 605.977 455.692 605.978 cv
456.183 605.978 456.718 605.946 457.3 605.879 cv
457.3 605.879 457.332 605.88 457.392 605.88 cv
458.23 605.88 464.545 605.701 463.09 600.245 cv
462.068 596.41 460.204 594.998 458.242 594.998 cv
464.379 524.716 mo
461.643 524.716 458.718 526.464 457.62 528.211 cv
456.523 529.958 457.253 531.705 461.829 531.705 cv
462.32 531.706 462.855 531.685 463.436 531.643 cv
463.436 531.643 463.468 531.644 463.528 531.644 cv
464.369 531.644 470.68 531.529 469.226 528.056 cv
468.204 525.615 466.34 524.716 464.379 524.716 cv
488.115 493.85 mo
485.379 493.85 482.454 496.595 481.356 499.339 cv
480.258 502.084 480.988 504.829 485.564 504.829 cv
486.055 504.829 486.59 504.798 487.173 504.731 cv
487.173 504.731 487.204 504.732 487.264 504.732 cv
488.102 504.732 494.417 504.552 492.963 499.096 cv
491.94 495.261 490.076 493.85 488.115 493.85 cv
354.975 499.259 mo
354.975 499.259 355.238 499.339 355.609 499.339 cv
356.395 499.339 357.665 498.982 357.954 496.753 cv
358.047 496.034 357.582 495.754 356.881 495.754 cv
355.642 495.754 353.663 496.631 352.725 497.507 cv
351.787 498.384 351.891 499.26 354.817 499.26 cv
354.869 499.26 354.922 499.26 354.975 499.259 cv
559.391 487.289 mo
559.391 487.289 559.743 487.344 560.24 487.344 cv
561.292 487.344 562.994 487.096 563.382 485.547 cv
563.506 485.048 562.883 484.853 561.944 484.853 cv
560.282 484.853 557.631 485.462 556.375 486.071 cv
555.119 486.68 555.259 487.289 559.182 487.289 cv
559.25 487.289 559.32 487.289 559.391 487.289 cv
625.313 465.07 mo
621.938 465.07 620.323 470.356 624.663 471.042 cv
624.663 471.042 634.069 471.042 628.084 466.196 cv
627.095 465.396 626.149 465.07 625.313 465.07 cv
392.204 426.429 mo
386.95 426.429 381.141 435.093 389.666 436.014 cv
389.666 436.014 390.05 436.04 390.65 436.04 cv
393.581 436.04 401.683 435.419 395.651 428.11 cv
394.666 426.917 393.451 426.429 392.204 426.429 cv
430.766 375.24 mo
427.837 375.24 419.732 375.861 425.765 383.17 cv
426.75 384.364 427.966 384.852 429.212 384.852 cv
434.466 384.852 440.275 376.189 431.75 375.266 cv
431.75 375.266 431.366 375.24 430.766 375.24 cv
527.869 345.238 mo
527.869 345.238 518.463 345.238 524.449 350.084 cv
525.438 350.884 526.383 351.209 527.22 351.209 cv
530.594 351.209 532.209 345.923 527.869 345.238 cv
595.261 273.1 mo
595.261 273.1 585.96 274.255 591.946 279.101 cv
593.012 279.964 594.134 280.317 595.186 280.318 cv
599.661 280.319 602.881 273.924 595.261 273.1 cv
403.18 270.026 mo
402.341 270.026 396.028 270.141 397.481 273.614 cv
398.503 276.055 400.367 276.953 402.329 276.953 cv
405.064 276.953 407.99 275.206 409.088 273.459 cv
410.186 271.711 409.456 269.964 404.881 269.964 cv
404.389 269.964 403.854 269.984 403.271 270.027 cv
403.271 270.027 403.239 270.026 403.18 270.026 cv
583.71 257.265 mo
579.25 257.265 566.92 258.211 576.099 269.333 cv
577.598 271.149 579.448 271.891 581.344 271.891 cv
589.342 271.893 598.183 258.707 585.209 257.305 cv
585.209 257.305 584.624 257.265 583.71 257.265 cv
460.685 234.456 mo
459.9 234.456 458.629 234.813 458.341 237.043 cv
458.247 237.761 458.712 238.041 459.412 238.041 cv
460.652 238.041 462.631 237.164 463.569 236.288 cv
464.506 235.411 464.403 234.535 461.477 234.535 cv
461.425 234.535 461.373 234.535 461.319 234.536 cv
461.319 234.536 461.056 234.456 460.685 234.456 cv
581.806 213 mo
581.806 213 li
581.806 218.509 586.271 222.974 591.78 222.974 cv
591.78 222.974 li
594.214 222.974 596.445 222.102 598.176 220.653 cv
600.363 218.824 601.755 216.075 601.755 213 cv
601.755 170.989 li
601.755 168.658 600.955 166.514 599.614 164.816 cv
597.788 162.501 594.958 161.015 591.78 161.015 cv
586.271 161.015 581.806 165.481 581.806 170.989 cv
581.806 213 li
581.806 213 li
536.63 222.974 mo
536.63 222.974 li
542.137 222.974 546.603 218.509 546.603 213 cv
546.603 170.989 li
546.603 170.989 li
546.603 165.481 542.137 161.015 536.63 161.015 cv
531.121 161.015 526.656 165.481 526.656 170.989 cv
526.656 213 li
526.656 213 li
526.656 213.032 526.656 213.065 526.656 213.097 cv
526.708 218.561 531.153 222.974 536.63 222.974 cv
471.505 213 mo
471.505 213 li
471.505 218.509 475.97 222.974 481.479 222.974 cv
486.988 222.974 491.453 218.509 491.453 213 cv
491.453 170.989 li
491.453 170.989 li
491.453 165.481 486.988 161.015 481.479 161.015 cv
475.97 161.015 471.505 165.481 471.505 170.989 cv
471.505 213 li
471.505 213 li
416.354 213 mo
416.354 213 li
416.354 218.509 420.82 222.974 426.329 222.974 cv
431.838 222.974 436.303 218.509 436.303 213 cv
436.303 170.989 li
436.303 168.408 435.323 166.056 433.714 164.286 cv
431.89 162.276 429.257 161.015 426.329 161.015 cv
420.82 161.015 416.354 165.481 416.354 170.989 cv
416.354 213 li
416.354 213 li
371.178 222.974 mo
371.178 222.974 li
376.686 222.974 381.152 218.509 381.152 213 cv
381.152 170.989 li
381.152 170.989 li
381.152 165.481 376.686 161.015 371.178 161.015 cv
365.67 161.015 361.205 165.481 361.205 170.989 cv
361.205 213 li
361.205 213 li
361.205 213.032 361.205 213.065 361.205 213.097 cv
361.257 218.561 365.702 222.974 371.178 222.974 cv
409.316 195.79 mo
408.477 195.79 402.164 195.97 403.618 201.425 cv
404.64 205.26 406.504 206.672 408.465 206.672 cv
411.201 206.672 414.127 203.927 415.224 201.182 cv
416.322 198.437 415.592 195.692 411.016 195.692 cv
410.525 195.692 409.99 195.724 409.408 195.791 cv
409.408 195.791 409.376 195.79 409.316 195.79 cv
544.391 146.232 mo
544.391 146.232 531.885 146.232 541.023 151.092 cv
542.563 151.911 543.899 152.243 545.004 152.243 cv
549.711 152.243 550.226 146.232 544.391 146.232 cv
559.677 135.686 mo
559.677 135.686 550.269 135.686 556.256 140.531 cv
557.245 141.332 558.19 141.657 559.026 141.657 cv
562.401 141.657 564.016 136.371 559.677 135.686 cv
1004.08 721.91 mo
1003 721.701 1001.89 721.59 1000.74 721.59 cv
705.045 721.59 li
696.744 721.59 689.773 715.891 687.833 708.191 cv
689.806 715.847 696.758 721.505 705.032 721.505 cv
973.843 721.505 li
1000.29 721.505 li
1001.59 721.505 1002.86 721.645 1004.08 721.91 cv
692.255 137.963 mo
694.135 136.01 696.458 134.486 699.062 133.554 cv
700.667 132.98 702.045 131.999 703.08 130.75 cv
702.043 132.009 700.659 132.996 699.046 133.573 cv
696.45 134.502 694.133 136.019 692.255 137.963 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
1000.74 800.787 mo
322.632 800.787 li
699.63 800.787 li
1000.29 800.787 li
1010.1 800.787 1018.05 792.836 1018.05 783.028 cv
1018.05 739.264 li
1018.05 739.264 li
1018.05 730.756 1012.07 723.646 1004.08 721.91 cv
1012.07 723.466 1018.11 730.505 1018.11 738.955 cv
1018.11 783.422 li
1018.11 793.011 1010.33 800.787 1000.74 800.787 cv
687.273 401.813 mo
687.272 401.813 687.273 401.813 687.272 401.813 cv
687.272 374.553 li
687.272 353.645 li
687.272 341.944 li
687.272 331.489 li
687.272 150.298 li
687.272 145.506 689.17 141.157 692.255 137.963 cv
689.184 141.154 687.296 145.491 687.296 150.269 cv
687.296 401.813 li
687.288 401.813 687.28 401.813 687.273 401.813 cv
.980392 .901961 .862745 rgb
f
687.833 708.191 mo
687.467 706.771 687.272 705.282 687.272 703.748 cv
687.272 634.937 li
687.296 634.937 li
687.296 703.84 li
687.296 705.341 687.482 706.799 687.833 708.191 cv
687.272 533.172 mo
687.272 450.209 li
687.296 450.209 li
687.296 533.172 li
687.288 533.172 687.28 533.172 687.272 533.172 cv
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 852.661 773.963 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
687.296 450.209 mo
687.272 450.209 li
687.272 401.813 li
687.273 401.813 687.272 401.813 687.273 401.813 cv
687.28 401.813 687.288 401.813 687.296 401.813 cv
687.296 450.209 li
level3{
gsave
clp
[330.836 0 0 330.836 687.273 412.726 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[330.836 0 0 330.836 687.273 412.726 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
703.08 130.75 mo
704.342 129.218 705.091 127.284 705.115 125.199 cv
705.232 114.863 li
705.246 114.863 li
705.128 125.184 li
705.105 127.276 704.351 129.216 703.08 130.75 cv
.980392 .901961 .862745 rgb
f
1000.29 800.787 mo
699.63 800.787 li
322.632 800.787 li
657.265 798.702 li
665.241 798.653 671.68 792.171 671.68 784.197 cv
671.68 738.164 li
671.68 733.735 669.68 729.707 666.468 727.025 cv
665.65 726.342 664.942 725.564 664.358 724.716 cv
665.28 724.017 665.329 722.857 662.954 720.935 cv
662.853 720.854 662.752 720.777 662.652 720.705 cv
662.399 719.426 662.384 718.089 662.638 716.748 cv
663.143 714.089 663.51 710.487 663.51 705.636 cv
663.51 374.553 li
687.272 374.553 li
687.272 401.813 li
687.272 450.209 li
687.272 533.172 li
686.478 533.174 685.695 533.271 684.928 533.456 cv
676.031 535.603 669.198 549.696 669.198 566.792 cv
669.198 566.792 li
669.198 566.793 669.198 566.793 669.198 566.793 cv
669.198 629.089 li
669.198 629.089 li
669.198 629.089 li
669.198 632.292 670.59 634.937 672.33 634.937 cv
672.331 634.937 li
672.331 634.937 li
687.272 634.937 li
687.272 703.748 li
687.272 705.282 687.467 706.771 687.833 708.191 cv
689.773 715.891 696.744 721.59 705.045 721.59 cv
1000.74 721.59 li
1001.89 721.59 1003 721.701 1004.08 721.91 cv
1012.07 723.646 1018.05 730.756 1018.05 739.264 cv
1018.05 739.264 li
1018.05 783.028 li
1018.05 792.836 1010.1 800.787 1000.29 800.787 cv
762.438 771.77 mo
754.441 771.77 745.6 784.954 758.574 786.356 cv
758.574 786.356 759.158 786.396 760.072 786.396 cv
764.533 786.396 776.861 785.45 767.682 774.328 cv
766.183 772.512 764.333 771.77 762.438 771.77 cv
922.606 775.604 mo
922.606 775.604 913.2 775.604 919.186 780.45 cv
920.175 781.25 921.12 781.575 921.957 781.575 cv
925.332 781.576 926.946 776.289 922.606 775.604 cv
859.075 756.614 mo
858.232 756.614 851.922 756.794 853.377 762.25 cv
854.398 766.084 856.262 767.496 858.224 767.496 cv
860.959 767.496 863.885 764.751 864.983 762.006 cv
866.081 759.261 865.351 756.516 860.776 756.516 cv
860.285 756.516 859.749 756.548 859.167 756.615 cv
859.167 756.615 859.134 756.614 859.075 756.614 cv
779.987 752.242 mo
775.513 752.242 772.292 758.636 779.912 759.459 cv
779.912 759.459 789.213 758.304 783.227 753.458 cv
782.161 752.596 781.039 752.242 779.987 752.242 cv
944.628 742.436 mo
941.698 742.436 933.595 743.058 939.628 750.366 cv
940.612 751.559 941.828 752.046 943.074 752.047 cv
948.328 752.048 954.138 743.384 945.613 742.463 cv
945.613 742.463 945.229 742.436 944.628 742.436 cv
687.272 353.645 mo
663.51 353.645 li
663.51 341.944 li
687.272 341.944 li
687.272 353.645 li
687.272 331.489 mo
663.51 331.489 li
663.51 209.114 li
663.51 205.243 661.963 201.533 659.214 198.809 cv
656.905 196.521 li
656.905 170.989 li
656.905 170.989 li
656.905 165.481 652.439 161.015 646.93 161.015 cv
641.421 161.015 636.956 165.481 636.956 170.989 cv
636.956 174.283 li
622.812 143.134 li
620.501 138.043 615.469 134.734 609.878 134.628 cv
314.269 129.058 li
313.662 127.87 313.227 126.586 313.211 125.184 cv
313.093 114.863 li
361.497 114.863 li
409.891 114.863 li
484.856 114.863 li
509.054 114.863 li
533.252 114.863 li
608.217 114.863 li
656.612 114.863 li
705.232 114.863 li
705.115 125.199 li
705.091 127.284 704.342 129.218 703.08 130.75 cv
702.045 131.999 700.667 132.98 699.062 133.554 cv
696.458 134.486 694.135 136.01 692.255 137.963 cv
689.17 141.157 687.272 145.506 687.272 150.298 cv
687.272 331.489 li
465.486 119.004 mo
465.486 119.004 456.081 119.004 462.066 123.849 cv
463.055 124.65 464 124.975 464.837 124.975 cv
468.212 124.975 469.826 119.689 465.486 119.004 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
722.426 114.863 mo
705.246 114.863 li
705.232 114.863 li
656.612 114.863 li
608.217 114.863 li
533.252 114.863 li
509.054 114.863 li
484.856 114.863 li
409.891 114.863 li
361.497 114.863 li
313.093 114.863 li
312.876 114.863 li
295.682 114.863 li
290.629 114.863 286.531 110.767 286.531 105.712 cv
286.531 49.0493 li
286.531 43.9952 290.629 39.8981 295.682 39.8981 cv
352.346 39.8981 li
357.399 39.8981 361.497 43.9952 361.497 49.0493 cv
361.497 57.3174 li
361.497 62.3712 365.593 66.4678 370.647 66.4678 cv
400.741 66.4678 li
405.794 66.4678 409.891 62.3712 409.891 57.3174 cv
409.891 49.0493 li
409.891 43.9952 413.989 39.8981 419.042 39.8981 cv
475.706 39.8981 li
480.759 39.8981 484.856 43.9952 484.856 49.0493 cv
484.856 57.3174 li
484.856 62.3712 488.954 66.4678 494.007 66.4678 cv
509.054 66.4678 li
524.101 66.4678 li
529.155 66.4678 533.252 62.3712 533.252 57.3174 cv
533.252 49.0493 li
533.252 43.9952 537.349 39.8981 542.402 39.8981 cv
599.066 39.8981 li
604.12 39.8981 608.217 43.9952 608.217 49.0493 cv
608.217 57.3174 li
608.217 62.3712 612.314 66.4678 617.367 66.4678 cv
647.462 66.4678 li
652.514 66.4678 656.612 62.3712 656.612 57.3174 cv
656.612 49.0493 li
656.612 43.9952 660.709 39.8981 665.763 39.8981 cv
722.426 39.8981 li
727.48 39.8981 731.578 43.9952 731.578 49.0493 cv
731.578 105.712 li
731.578 110.767 727.48 114.863 722.426 114.863 cv
414.951 88.8849 mo
414.951 88.8849 405.545 88.8849 411.531 93.7295 cv
412.52 94.5302 413.465 94.8553 414.302 94.8554 cv
417.677 94.8559 419.291 89.5699 414.951 88.8849 cv
582.266 74.0578 mo
581.428 74.0578 575.112 74.2374 576.567 79.6939 cv
577.589 83.5287 579.453 84.9401 581.415 84.9402 cv
584.15 84.9403 587.076 82.1953 588.173 79.4503 cv
589.271 76.7055 588.541 73.9604 583.966 73.9604 cv
583.475 73.9604 582.94 73.992 582.357 74.0587 cv
582.357 74.0587 582.325 74.0578 582.266 74.0578 cv
699.24 63.9703 mo
699.24 63.9703 689.834 63.9703 695.82 68.816 cv
696.809 69.6167 697.754 69.9417 698.591 69.9418 cv
701.965 69.9423 703.579 64.6561 699.24 63.9703 cv
455.752 59.906 mo
452.821 59.906 444.719 60.5273 450.751 67.8355 cv
451.737 69.0291 452.952 69.5164 454.198 69.5164 cv
459.452 69.5165 465.261 60.8534 456.737 59.9321 cv
456.737 59.9321 456.353 59.906 455.752 59.906 cv
level3{
gsave
clp
[445.046 0 0 445.046 286.531 77.3805 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[445.046 0 0 445.046 286.531 77.3805 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
74.6391 761.575 mo
72.7432 761.575 70.8931 760.833 69.3943 759.017 cv
60.2148 747.895 72.5444 746.949 77.005 746.949 cv
77.9192 746.949 78.5037 746.989 78.5037 746.989 cv
91.4767 748.391 82.6359 761.577 74.6391 761.575 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
261.479 776.631 mo
259.583 776.631 257.733 775.889 256.234 774.073 cv
247.054 762.951 259.386 762.006 263.846 762.006 cv
264.76 762.006 265.343 762.045 265.343 762.045 cv
278.315 763.447 269.476 776.631 261.479 776.631 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
57.0895 781.103 mo
56.0375 781.103 54.9153 780.749 53.8493 779.886 cv
47.8634 775.041 57.1642 773.885 57.1642 773.885 cv
64.7838 774.709 61.5637 781.104 57.0895 781.103 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
182.122 777.597 mo
181.017 777.597 179.68 777.266 178.141 776.447 cv
169.003 771.586 181.509 771.586 181.509 771.586 cv
187.344 771.586 186.828 777.598 182.122 777.597 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
196.144 767.011 mo
195.307 767.011 194.362 766.686 193.373 765.885 cv
187.387 761.04 196.794 761.04 196.794 761.04 cv
201.134 761.725 199.519 767.012 196.144 767.011 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
858.224 767.496 mo
856.262 767.496 854.398 766.084 853.377 762.25 cv
851.922 756.794 858.232 756.614 859.075 756.614 cv
859.134 756.614 859.167 756.615 859.167 756.615 cv
859.749 756.548 860.285 756.516 860.776 756.516 cv
865.351 756.516 866.081 759.261 864.983 762.006 cv
863.885 764.751 860.959 767.496 858.224 767.496 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/10 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/V
C[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~os&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<
Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Y^H,JI.a^korri:Y^H)II.XXjoWNZ7YC#oFHh=LgoWEQ5Y']cB
Hh4@co;m90XEsH<HLe+^nu@!+Wd+'6GO_\Wn>UU#W-.R+FRQ&Jm\FsmUN5aqEU9B<m%A:_So3h`D<[L)
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/10 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kiq?rl0@R!lKdd%lg*m&lg4!)m-X3-mHs<.mI'E1mdBN2mdKW5n*f`6n*oi9nF5r:nF?&=naZ/>naZ/>
naZ/>naZ2@o()ABo()ABo()ABo()DDoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMVHo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
<~R@9S6S"-">SXuFFT:hjMTV.sNTV8'RU8+KYUSO]]UnsoaV5C,fVl6PmW2ZbqWMukrWMukrWMukrWN)tu
WiE)!WiE,#X/i;%X/i>'XK8M)XK8P+Xf\_-Xf\b/Y-+q1Y-+q1Y-+q1Y-+t3YHP.5YHP.5YHP.5YHP.5
YHP.5YHP.5YHP.6Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
~>
<~C27U$Ci+$+D/O6/DJsH3DfBZ7E,fl;EH6)@F)uDDF)uDDF*)MGFEM_KF`qqOG'8%PG'A.SGBe@WG^+IX
G^+LZH$O[\H$O[\H$O[\H$O^^H?sm`H?sm`H?sm`H?sm`H?sm`H?spbH[C*dH[C*dH[C*dH[C*dH[C*d
H[C*dH[C*dH[C*eI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /10 /Gradient get_res exec grestore
}if
np
943.074 752.047 mo
941.828 752.046 940.612 751.559 939.628 750.366 cv
933.595 743.058 941.698 742.436 944.628 742.436 cv
945.229 742.436 945.613 742.463 945.613 742.463 cv
954.138 743.384 948.328 752.048 943.074 752.047 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
429.212 384.852 mo
427.966 384.852 426.75 384.364 425.765 383.17 cv
419.732 375.861 427.837 375.24 430.766 375.24 cv
431.366 375.24 431.75 375.266 431.75 375.266 cv
440.275 376.189 434.466 384.852 429.212 384.852 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
581.344 271.891 mo
579.448 271.891 577.598 271.149 576.099 269.333 cv
566.92 258.211 579.25 257.265 583.71 257.265 cv
584.624 257.265 585.209 257.305 585.209 257.305 cv
598.183 258.707 589.342 271.893 581.344 271.891 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
595.186 280.318 mo
594.134 280.317 593.012 279.964 591.946 279.101 cv
585.96 274.255 595.261 273.1 595.261 273.1 cv
602.881 273.924 599.661 280.319 595.186 280.318 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
527.22 351.209 mo
526.383 351.209 525.438 350.884 524.449 350.084 cv
518.463 345.238 527.869 345.238 527.869 345.238 cv
532.209 345.923 530.594 351.209 527.22 351.209 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
464.837 124.975 mo
464 124.975 463.055 124.65 462.066 123.849 cv
456.081 119.004 465.486 119.004 465.486 119.004 cv
469.826 119.689 468.212 124.975 464.837 124.975 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
698.591 69.9418 mo
697.754 69.9417 696.809 69.6167 695.82 68.816 cv
689.834 63.9703 699.24 63.9703 699.24 63.9703 cv
703.579 64.6561 701.965 69.9423 698.591 69.9418 cv
level3{
gsave
clp
[445.046 0 0 445.046 286.531 77.3805 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[445.046 0 0 445.046 286.531 77.3805 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
459.412 238.041 mo
458.712 238.041 458.247 237.761 458.341 237.043 cv
458.629 234.813 459.9 234.456 460.685 234.456 cv
461.056 234.456 461.319 234.536 461.319 234.536 cv
461.373 234.535 461.425 234.535 461.477 234.535 cv
464.403 234.535 464.506 235.411 463.569 236.288 cv
462.631 237.164 460.652 238.041 459.412 238.041 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
402.329 276.953 mo
400.367 276.953 398.503 276.055 397.481 273.614 cv
396.028 270.141 402.341 270.026 403.18 270.026 cv
403.239 270.026 403.271 270.027 403.271 270.027 cv
403.854 269.984 404.389 269.964 404.881 269.964 cv
409.456 269.964 410.186 271.711 409.088 273.459 cv
407.99 275.206 405.064 276.953 402.329 276.953 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
408.465 206.672 mo
406.504 206.672 404.64 205.26 403.618 201.425 cv
402.164 195.97 408.477 195.79 409.316 195.79 cv
409.376 195.79 409.408 195.791 409.408 195.791 cv
409.99 195.724 410.525 195.692 411.016 195.692 cv
415.592 195.692 416.322 198.437 415.224 201.182 cv
414.127 203.927 411.201 206.672 408.465 206.672 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
581.415 84.9402 mo
579.453 84.9401 577.589 83.5287 576.567 79.6939 cv
575.112 74.2374 581.428 74.0578 582.266 74.0578 cv
582.325 74.0578 582.357 74.0587 582.357 74.0587 cv
582.94 73.992 583.475 73.9604 583.966 73.9604 cv
588.541 73.9604 589.271 76.7055 588.173 79.4503 cv
587.076 82.1953 584.15 84.9403 581.415 84.9402 cv
level3{
gsave
clp
[445.046 0 0 445.046 286.531 77.3805 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[445.046 0 0 445.046 286.531 77.3805 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
545.004 152.243 mo
543.899 152.243 542.563 151.911 541.023 151.092 cv
531.885 146.232 544.391 146.232 544.391 146.232 cv
550.226 146.232 549.711 152.243 545.004 152.243 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
454.198 69.5164 mo
452.952 69.5164 451.737 69.0291 450.751 67.8355 cv
444.719 60.5273 452.821 59.906 455.752 59.906 cv
456.353 59.906 456.737 59.9321 456.737 59.9321 cv
465.261 60.8534 459.452 69.5165 454.198 69.5164 cv
level3{
gsave
clp
[445.046 0 0 445.046 286.531 77.3805 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[445.046 0 0 445.046 286.531 77.3805 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
559.026 141.657 mo
558.19 141.657 557.245 141.332 556.256 140.531 cv
550.269 135.686 559.677 135.686 559.677 135.686 cv
564.016 136.371 562.401 141.657 559.026 141.657 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
414.302 94.8554 mo
413.465 94.8553 412.52 94.5302 411.531 93.7295 cv
405.545 88.8849 414.951 88.8849 414.951 88.8849 cv
419.291 89.5699 417.677 94.8559 414.302 94.8554 cv
level3{
gsave
clp
[445.046 0 0 445.046 286.531 77.3805 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[445.046 0 0 445.046 286.531 77.3805 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
921.957 781.575 mo
921.12 781.575 920.175 781.25 919.186 780.45 cv
913.2 775.604 922.606 775.604 922.606 775.604 cv
926.946 776.289 925.332 781.576 921.957 781.575 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
461.802 741.041 mo
452.971 741.041 456.03 729.989 462.29 729.989 cv
464.112 729.989 466.207 730.926 468.357 733.345 cv
475.198 741.041 461.802 741.041 461.802 741.041 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
390.65 436.04 mo
390.05 436.04 389.666 436.014 389.666 436.014 cv
381.141 435.093 386.95 426.429 392.204 426.429 cv
393.451 426.429 394.666 426.917 395.651 428.11 cv
401.683 435.419 393.581 436.04 390.65 436.04 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
633.801 712.456 mo
633.199 712.456 632.815 712.43 632.815 712.43 cv
624.291 711.509 630.1 702.846 635.354 702.846 cv
636.6 702.846 637.815 703.333 638.8 704.527 cv
644.832 711.835 636.732 712.457 633.801 712.456 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
760.072 786.396 mo
759.158 786.396 758.574 786.356 758.574 786.356 cv
745.6 784.954 754.441 771.77 762.438 771.77 cv
764.333 771.77 766.183 772.512 767.682 774.328 cv
776.861 785.45 764.533 786.396 760.072 786.396 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
779.912 759.459 mo
772.292 758.636 775.513 752.242 779.987 752.242 cv
781.039 752.242 782.161 752.596 783.227 753.458 cv
789.213 758.304 779.912 759.459 779.912 759.459 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
624.663 471.042 mo
620.323 470.356 621.938 465.07 625.313 465.07 cv
626.149 465.07 627.095 465.396 628.084 466.196 cv
634.069 471.042 624.663 471.042 624.663 471.042 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
659.533 725.78 mo
655.194 725.094 656.807 719.809 660.182 719.809 cv
660.934 719.809 661.773 720.071 662.652 720.705 cv
662.936 722.138 663.519 723.499 664.358 724.716 cv
662.956 725.78 659.533 725.78 659.533 725.78 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
664.358 724.716 mo
663.519 723.499 662.936 722.138 662.652 720.705 cv
662.752 720.777 662.853 720.854 662.954 720.935 cv
665.329 722.857 665.28 724.017 664.358 724.716 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
401.221 682.667 mo
396.881 681.981 398.496 676.695 401.871 676.695 cv
402.707 676.695 403.652 677.02 404.641 677.821 cv
410.628 682.667 401.221 682.667 401.221 682.667 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
560.24 487.344 mo
559.743 487.344 559.391 487.289 559.391 487.289 cv
559.32 487.289 559.25 487.289 559.182 487.289 cv
555.259 487.289 555.119 486.68 556.375 486.071 cv
557.631 485.462 560.282 484.853 561.944 484.853 cv
562.883 484.853 563.506 485.048 563.382 485.547 cv
562.994 487.096 561.292 487.344 560.24 487.344 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
355.609 499.339 mo
355.238 499.339 354.975 499.259 354.975 499.259 cv
354.922 499.26 354.869 499.26 354.817 499.26 cv
351.891 499.26 351.787 498.384 352.725 497.507 cv
353.663 496.631 355.642 495.754 356.881 495.754 cv
357.582 495.754 358.047 496.034 357.954 496.753 cv
357.665 498.982 356.395 499.339 355.609 499.339 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
619.678 724.587 mo
619.307 724.587 619.045 724.507 619.045 724.507 cv
618.992 724.508 618.94 724.508 618.889 724.508 cv
615.961 724.508 615.856 723.632 616.794 722.755 cv
617.731 721.879 619.71 721.002 620.95 721.002 cv
621.651 721.002 622.116 721.282 622.023 722.001 cv
621.734 724.23 620.463 724.587 619.678 724.587 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
461.829 531.705 mo
457.253 531.705 456.523 529.958 457.62 528.211 cv
458.718 526.464 461.643 524.716 464.379 524.716 cv
466.34 524.716 468.204 525.615 469.226 528.056 cv
470.68 531.529 464.369 531.644 463.528 531.644 cv
463.468 531.644 463.436 531.643 463.436 531.643 cv
462.855 531.685 462.32 531.706 461.829 531.705 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
455.692 605.978 mo
451.116 605.977 450.386 603.233 451.483 600.488 cv
452.581 597.743 455.506 594.998 458.242 594.998 cv
460.204 594.998 462.068 596.41 463.09 600.245 cv
464.545 605.701 458.23 605.88 457.392 605.88 cv
457.332 605.88 457.3 605.879 457.3 605.879 cv
456.718 605.946 456.183 605.978 455.692 605.978 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
485.564 504.829 mo
480.988 504.829 480.258 502.084 481.356 499.339 cv
482.454 496.595 485.379 493.85 488.115 493.85 cv
490.076 493.85 491.94 495.261 492.963 499.096 cv
494.417 504.552 488.102 504.732 487.264 504.732 cv
487.204 504.732 487.173 504.731 487.173 504.731 cv
486.59 504.798 486.055 504.829 485.564 504.829 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
565.025 657.68 mo
556.195 657.68 559.255 646.628 565.515 646.628 cv
567.337 646.628 569.431 647.565 571.581 649.984 cv
578.421 657.68 565.025 657.68 565.025 657.68 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
370.206 786.242 mo
369.606 786.242 369.222 786.216 369.222 786.216 cv
360.697 785.295 366.507 776.631 371.762 776.631 cv
373.008 776.631 374.224 777.119 375.209 778.312 cv
381.24 785.621 373.137 786.242 370.206 786.242 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
500.607 675.067 mo
496.268 674.381 497.882 669.095 501.257 669.095 cv
502.094 669.095 503.039 669.421 504.028 670.221 cv
510.014 675.067 500.607 675.067 500.607 675.067 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
570.65 728.271 mo
570.286 728.271 570.028 728.215 570.028 728.215 cv
569.976 728.216 569.926 728.216 569.876 728.216 cv
567.002 728.216 566.899 727.607 567.819 726.998 cv
568.739 726.389 570.682 725.78 571.899 725.78 cv
572.587 725.78 573.043 725.975 572.952 726.474 cv
572.669 728.022 571.421 728.271 570.65 728.271 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
604.78 784.931 mo
601.428 784.931 600.894 783.184 601.698 781.437 cv
602.502 779.69 604.645 777.943 606.649 777.943 cv
608.085 777.943 609.451 778.842 610.2 781.283 cv
611.265 784.755 606.642 784.869 606.026 784.869 cv
605.982 784.869 605.959 784.869 605.959 784.869 cv
605.532 784.911 605.14 784.931 604.78 784.931 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
481.335 634.919 mo
478.131 634.919 475.531 632.344 475.49 629.15 cv
475.531 632.344 478.132 634.919 481.335 634.919 cv
531.676 631.563 mo
486.473 631.563 li
483.842 631.563 481.711 629.431 481.711 626.801 cv
481.711 576.027 li
481.711 560.914 493.962 548.663 509.074 548.663 cv
509.075 548.663 li
524.187 548.663 536.437 560.914 536.437 576.027 cv
536.437 626.801 li
536.437 629.431 534.306 631.563 531.676 631.563 cv
level3{
gsave
clp
[5.76333e-15 -94.1225 94.1225 5.76333e-15 509.075 629.167 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.76333e-15 -94.1225 94.1225 5.76333e-15 509.075 629.167 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
626.221 631.563 mo
588.551 631.563 li
586.36 631.563 584.584 629.431 584.584 626.801 cv
584.584 576.027 li
584.584 560.914 594.793 548.663 607.386 548.663 cv
619.98 548.663 630.19 560.914 630.19 576.027 cv
630.19 626.801 li
630.19 629.431 628.413 631.563 626.221 631.563 cv
level3{
gsave
clp
[5.76333e-15 -94.1225 94.1225 5.76333e-15 607.387 629.167 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.76333e-15 -94.1225 94.1225 5.76333e-15 607.387 629.167 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
672.331 634.937 mo
672.33 634.937 li
670.59 634.937 669.198 632.292 669.198 629.089 cv
669.198 632.292 670.59 634.937 672.331 634.937 cv
687.296 631.563 mo
675.105 631.563 li
673.687 631.563 672.553 629.408 672.553 626.799 cv
672.553 576.05 li
672.553 560.912 679.13 548.663 687.296 548.663 cv
687.296 631.563 li
684.928 533.456 mo
685.695 533.271 686.478 533.174 687.272 533.172 cv
687.28 533.172 687.288 533.172 687.296 533.172 cv
687.296 533.172 li
686.493 533.172 685.703 533.269 684.928 533.456 cv
level3{
gsave
clp
[5.76333e-15 -94.1223 94.1223 5.76333e-15 678.247 629.167 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.76333e-15 -94.1223 94.1223 5.76333e-15 678.247 629.167 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
429.556 631.563 mo
391.887 631.563 li
389.695 631.563 387.919 629.431 387.919 626.801 cv
387.919 576.027 li
387.919 560.914 398.129 548.663 410.722 548.663 cv
423.316 548.663 433.525 560.914 433.525 576.027 cv
433.525 626.801 li
433.525 629.431 431.749 631.563 429.556 631.563 cv
level3{
gsave
clp
[5.76333e-15 -94.1225 94.1225 5.76333e-15 410.722 629.167 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.76333e-15 -94.1225 94.1225 5.76333e-15 410.722 629.167 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
347.34 634.159 mo
347.34 634.158 347.341 634.157 347.342 634.156 cv
347.341 634.157 347.34 634.158 347.34 634.159 cv
347.346 634.152 mo
348.284 633.136 348.911 631.238 348.911 629.089 cv
348.911 631.238 348.284 633.136 347.346 634.152 cv
343.004 631.563 mo
330.814 631.563 li
330.814 548.663 li
338.979 548.665 345.556 560.913 345.556 576.05 cv
345.556 626.799 li
345.556 629.408 344.422 631.563 343.004 631.563 cv
344.898 545.652 mo
341.586 538.038 336.514 533.173 330.814 533.172 cv
330.814 533.172 li
330.822 533.172 330.829 533.172 330.837 533.172 cv
330.837 533.172 li
336.528 533.186 341.59 538.048 344.898 545.652 cv
level3{
gsave
clp
[5.76333e-15 -94.1223 94.1223 5.76333e-15 339.862 629.167 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.76333e-15 -94.1223 94.1223 5.76333e-15 339.862 629.167 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
536.814 634.919 mo
481.335 634.919 li
481.335 634.919 li
478.132 634.919 475.531 632.344 475.49 629.15 cv
475.49 629.125 475.49 629.1 475.49 629.075 cv
475.49 566.758 li
475.49 548.21 490.526 533.173 509.074 533.173 cv
509.075 533.173 li
527.623 533.173 542.659 548.21 542.659 566.758 cv
542.659 629.075 li
542.659 632.303 540.043 634.919 536.814 634.919 cv
509.074 548.663 mo
493.962 548.663 481.711 560.914 481.711 576.027 cv
481.711 626.801 li
481.711 629.431 483.842 631.563 486.473 631.563 cv
531.676 631.563 li
534.306 631.563 536.437 629.431 536.437 626.801 cv
536.437 576.027 li
536.437 560.914 524.187 548.663 509.075 548.663 cv
509.074 548.663 li
level3{
gsave
clp
[5.76333e-15 -94.1225 94.1225 5.76333e-15 509.075 629.167 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.76333e-15 -94.1225 94.1225 5.76333e-15 509.075 629.167 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
630.504 634.919 mo
584.27 634.919 li
581.58 634.919 579.4 632.303 579.4 629.075 cv
579.4 566.758 li
579.4 548.21 591.929 533.173 607.386 533.173 cv
622.844 533.173 635.374 548.21 635.374 566.758 cv
635.374 629.075 li
635.374 632.303 633.193 634.919 630.504 634.919 cv
607.386 548.663 mo
594.793 548.663 584.584 560.914 584.584 576.027 cv
584.584 626.801 li
584.584 629.431 586.36 631.563 588.551 631.563 cv
626.221 631.563 li
628.413 631.563 630.19 629.431 630.19 626.801 cv
630.19 576.027 li
630.19 560.914 619.98 548.663 607.386 548.663 cv
level3{
gsave
clp
[5.76333e-15 -94.1225 94.1225 5.76333e-15 607.387 629.167 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.76333e-15 -94.1225 94.1225 5.76333e-15 607.387 629.167 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
687.272 634.937 mo
672.331 634.937 li
672.331 634.937 li
687.272 634.937 li
669.198 566.792 mo
669.198 566.792 li
669.198 549.696 676.031 535.603 684.928 533.456 cv
676.031 535.603 669.198 549.696 669.198 566.793 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/11 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,U
JQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R
<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5
P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-*s4P@<L8@H3P[j-!g1P$m:3
@,d;VifRX.O^R.0@,[2SiK%@)O'^b)?JpiMhi;""NEk=u>i(BDh25FmM-A\i=ke^6gP/haKNHiZ<S;q&
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/11 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~f\"j/f\+s2g"P06g=k97g=tB:gYCT>gt^]?gtgfBh;-oCh;7#FhVR,GhV[5Jhr!>Khr*GNi8EPOi8EPO
i8EPOi8ESQiSibSiSibSiSibSiSieUio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tW
io8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tW
io8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tW
~>
<~J:W9'JqJ].K7no3Knb>:L5(G;L51P?Ll$tFM2I1JMMd:KMMmCON/`gVNK&pWNK&pWNK0$ZNfK-[NfT6^
O,o?_O,oBaOH>QcOH>QcOH>QcOH>TeOcbcgOcbfiP*1ukP*1ukP*1ukP*2#mPEV2oPEV2oPEV2oPEV2o
PEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2o
PEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2o
~>
<~;cH^q<)lq!<``@(='&I)='/R,=BSd0=^#!4>$G38>?b<9>?b<9>?kE<>[:W@?!U`A?!U`A?!^iD?=$rE
?=$uG?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI2K?smAM?smAM?smDO@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /11 /Gradient get_res exec grestore
}if
np
687.296 634.937 mo
687.272 634.937 li
672.331 634.937 li
670.59 634.937 669.198 632.292 669.198 629.089 cv
669.198 629.089 li
669.198 566.792 li
669.198 549.696 676.031 535.603 684.928 533.456 cv
685.703 533.269 686.493 533.172 687.296 533.172 cv
687.296 548.663 li
679.13 548.663 672.553 560.912 672.553 576.05 cv
672.553 626.799 li
672.553 629.408 673.687 631.563 675.105 631.563 cv
687.296 631.563 li
687.296 634.937 li
level3{
gsave
clp
[5.76333e-15 -94.1223 94.1223 5.76333e-15 678.247 629.167 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.76333e-15 -94.1223 94.1223 5.76333e-15 678.247 629.167 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
433.839 634.919 mo
387.605 634.919 li
384.916 634.919 382.735 632.303 382.735 629.075 cv
382.735 566.758 li
382.735 548.21 395.265 533.173 410.722 533.173 cv
426.179 533.173 438.71 548.21 438.71 566.758 cv
438.71 629.075 li
438.71 632.303 436.529 634.919 433.839 634.919 cv
410.722 548.663 mo
398.129 548.663 387.919 560.914 387.919 576.027 cv
387.919 626.801 li
387.919 629.431 389.695 631.563 391.887 631.563 cv
429.556 631.563 li
431.749 631.563 433.525 629.431 433.525 626.801 cv
433.525 576.027 li
433.525 560.914 423.316 548.663 410.722 548.663 cv
level3{
gsave
clp
[5.76333e-15 -94.1225 94.1225 5.76333e-15 410.722 629.167 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.76333e-15 -94.1225 94.1225 5.76333e-15 410.722 629.167 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
330.837 634.937 mo
330.813 634.937 li
330.813 631.563 li
330.814 631.563 li
330.814 634.937 li
330.837 634.937 li
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/12 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,U
JQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R
<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,U
JQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ(6Q;qZ_#fn!)SJQ(3P;qQY"fRZuRJ5b*N;qQV!fRHiOIoFsJ
;V-@qf7$TKI8SRC;:^+lepC6DHV`1<:XjYce9Fd=GYZ_2:""/XdWA.0F%al#9$hNKcYlA#Ce)cd7a5X9
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/12 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f\"j.f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX*f%/F'f%/F'f%/F'f%/F'f%/F&e^`4#
e^`4#e^`4#eC<!teC<!te'ldpe'ldpe'ldpdaHRldF$@hdF$@hd*U.dcd0q`cd0q`cHa_\cHa_\c-=MX
~>
<~J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#
J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#
J:N0#J:N0#J:N0#J:N0#J:N0#J:N0"It)rtIt)rtIt)rsIXZ`pIXZ`oI=6NlI=6NlI=6NkI!g<gH[C*d
H[C*dH?sm`H?sm`H$O[\G^+IXGB\7TGB\4RF`hhLFEDVHF)uDDEcQ2@EH,r:Df9Q4DJj<-CMR^$C2.Hs
~>
<~;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un
;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Rl;GpCj;GpCj
;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCi;,L1f;,L1e:f'tb:f'tb:f'tb
:f'tb:JXb^:/4PZ:/4PZ:/4PZ:/4PZ9he>V9MA,R91qoN8kM]J8kM]J8P)KF84Z9B7n6'>7Rfj:77BX6
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /12 /Gradient get_res exec grestore
}if
np
345.779 634.937 mo
330.837 634.937 li
345.778 634.937 li
346.348 634.937 346.881 634.653 347.34 634.159 cv
346.881 634.653 346.348 634.937 345.779 634.937 cv
347.342 634.156 mo
347.343 634.155 347.345 634.154 347.346 634.152 cv
347.345 634.153 347.343 634.155 347.342 634.156 cv
348.911 629.089 mo
348.911 629.089 li
348.911 566.793 li
348.911 558.778 347.41 551.425 344.898 545.652 cv
347.41 551.425 348.911 558.778 348.911 566.792 cv
348.911 629.089 li
348.911 629.089 li
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/13 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-
@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,T
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_
UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UN,LmETj0;kbE.]UN,IlETa*:kG*%[UN,IlETa*:kFuqYU2]7g
E9<j4k+HYTTPrqbDrmX0je$GPSo*PZD<.7)j.1#HS87/RCZCjuigFN?QtYHFBAf(fi07g1P@WO4A)35U
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/13 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~gtgfBh;7#FhV[5Jhr!>Khr*GNi8NYRiSibSiSrkVio8tWio8tWio8tWioB(Zj5]1[j5f:^jQ,C_jQ,C_
jQ,C_jQ,FajlPUcjlPUcjlPUcjlPXek2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tjikND$kkND$k
kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
~>
<~O-#HbOHGZgP*;)nPE_;sQ'R`%QC!r)Q^F/-R$jA1R@0J2R@9S6S"-"=S=H+>S=H+>S=Q4ASXuFEStDXI
T:_aJT:_aJT:_aJT:_dLTV.sNTV/!PTqS0RTqS3TU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BWUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZ
USFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZ
~>
<~@:E\T@UinX@q9+\A7]=`AS,OdAnPahB4tslBPD0pBkhBtC2.KuC27U#CM[g'Ci!p(Ci!p(Ci+$+D/F-,
D/F0.DJj?0DJj?0DJj?0DJjB2Df9Q4Df9Q4Df9T6E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8
E,]c8E,]c8E,]c9EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /13 /Gradient get_res exec grestore
}if
np
330.814 548.663 mo
330.813 548.663 330.813 548.663 330.813 548.663 cv
330.813 533.172 li
330.813 533.172 330.813 533.172 330.814 533.172 cv
330.814 548.663 li
level3{
gsave
clp
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
/12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.87097e-14 -305.554 305.554 1.87097e-14 165.448 773.963 ]ct
clp
/12 /Gradient get_res exec grestore
}if
np
345.778 634.937 mo
330.837 634.937 li
330.814 634.937 li
330.814 631.563 li
343.004 631.563 li
344.422 631.563 345.556 629.408 345.556 626.799 cv
345.556 576.05 li
345.556 560.913 338.979 548.665 330.814 548.663 cv
330.814 533.172 li
336.514 533.173 341.586 538.038 344.898 545.652 cv
347.41 551.425 348.911 558.778 348.911 566.793 cv
348.911 629.089 li
348.911 629.089 li
348.911 631.238 348.284 633.136 347.346 634.152 cv
347.345 634.154 347.343 634.155 347.342 634.156 cv
347.341 634.157 347.34 634.158 347.34 634.159 cv
346.881 634.653 346.348 634.937 345.778 634.937 cv
level3{
gsave
clp
[5.76333e-15 -94.1223 94.1223 5.76333e-15 339.862 629.167 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[5.76333e-15 -94.1223 94.1223 5.76333e-15 339.862 629.167 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
371.178 222.974 mo
365.702 222.974 361.257 218.561 361.205 213.097 cv
361.257 218.561 365.703 222.974 371.178 222.974 cv
371.178 220.936 mo
366.726 220.936 363.118 217.328 363.118 212.877 cv
363.118 175.815 li
363.118 171.364 366.726 167.755 371.178 167.755 cv
375.629 167.755 379.239 171.364 379.239 175.815 cv
379.239 212.877 li
379.239 217.328 375.629 220.936 371.178 220.936 cv
361.205 213 mo
361.205 213 li
361.205 170.989 li
361.205 165.481 365.67 161.015 371.178 161.015 cv
376.686 161.015 381.152 165.481 381.152 170.989 cv
381.152 170.989 li
381.152 165.481 376.686 161.016 371.178 161.016 cv
365.671 161.016 361.205 165.481 361.205 170.989 cv
361.205 213 li
level3{
gsave
clp
[3.39428e-15 -55.4329 55.4329 3.39428e-15 371.178 215.301 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.39428e-15 -55.4329 55.4329 3.39428e-15 371.178 215.301 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
426.329 220.936 mo
421.877 220.936 418.268 217.328 418.268 212.877 cv
418.268 175.815 li
418.268 171.364 421.877 167.755 426.329 167.755 cv
430.78 167.755 434.388 171.364 434.388 175.815 cv
434.388 212.877 li
434.388 217.328 430.78 220.936 426.329 220.936 cv
416.354 213 mo
416.354 213 li
416.354 170.989 li
416.354 165.481 420.82 161.015 426.329 161.015 cv
429.257 161.015 431.89 162.276 433.714 164.286 cv
431.89 162.277 429.257 161.016 426.329 161.016 cv
420.82 161.016 416.354 165.481 416.354 170.989 cv
416.354 213 li
level3{
gsave
clp
[3.39428e-15 -55.4329 55.4329 3.39428e-15 426.328 215.301 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.39428e-15 -55.4329 55.4329 3.39428e-15 426.328 215.301 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
481.479 220.936 mo
477.028 220.936 473.42 217.328 473.42 212.877 cv
473.42 175.815 li
473.42 171.364 477.028 167.755 481.479 167.755 cv
485.93 167.755 489.539 171.364 489.539 175.815 cv
489.539 212.877 li
489.539 217.328 485.93 220.936 481.479 220.936 cv
471.505 213 mo
471.505 213 li
471.505 170.989 li
471.505 165.481 475.97 161.015 481.479 161.015 cv
486.988 161.015 491.453 165.481 491.453 170.989 cv
491.453 170.989 li
491.453 165.481 486.988 161.016 481.479 161.016 cv
475.97 161.016 471.505 165.481 471.505 170.989 cv
471.505 213 li
level3{
gsave
clp
[3.39428e-15 -55.4329 55.4329 3.39428e-15 481.479 215.301 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.39428e-15 -55.4329 55.4329 3.39428e-15 481.479 215.301 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
536.63 222.974 mo
531.153 222.974 526.708 218.561 526.656 213.097 cv
526.708 218.561 531.154 222.974 536.63 222.974 cv
536.63 220.936 mo
532.177 220.936 528.569 217.328 528.569 212.877 cv
528.569 175.815 li
528.569 171.364 532.177 167.755 536.63 167.755 cv
541.082 167.755 544.69 171.364 544.69 175.815 cv
544.69 212.877 li
544.69 217.328 541.082 220.936 536.63 220.936 cv
526.656 213 mo
526.656 213 li
526.656 170.989 li
526.656 165.481 531.121 161.015 536.63 161.015 cv
542.137 161.015 546.603 165.481 546.603 170.989 cv
546.603 170.989 li
546.603 165.481 542.137 161.016 536.63 161.016 cv
531.122 161.016 526.656 165.481 526.656 170.989 cv
526.656 213 li
level3{
gsave
clp
[3.39428e-15 -55.4329 55.4329 3.39428e-15 536.63 215.301 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.39428e-15 -55.4329 55.4329 3.39428e-15 536.63 215.301 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
591.78 222.974 mo
594.214 222.974 596.444 222.102 598.176 220.653 cv
596.445 222.102 594.214 222.974 591.78 222.974 cv
591.78 220.936 mo
587.328 220.936 583.719 217.328 583.719 212.877 cv
583.719 175.815 li
583.719 171.364 587.328 167.755 591.78 167.755 cv
596.231 167.755 599.839 171.364 599.839 175.815 cv
599.839 212.877 li
599.839 217.328 596.231 220.936 591.78 220.936 cv
581.806 213 mo
581.806 213 li
581.806 170.989 li
581.806 165.481 586.271 161.015 591.78 161.015 cv
594.958 161.015 597.788 162.501 599.614 164.816 cv
597.788 162.501 594.957 161.016 591.78 161.016 cv
586.271 161.016 581.806 165.481 581.806 170.989 cv
581.806 213 li
level3{
gsave
clp
[3.39428e-15 -55.4329 55.4329 3.39428e-15 591.78 215.301 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.39428e-15 -55.4329 55.4329 3.39428e-15 591.78 215.301 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
646.93 220.936 mo
642.479 220.936 638.871 217.328 638.871 212.877 cv
638.871 175.815 li
638.871 171.364 642.479 167.755 646.93 167.755 cv
651.382 167.755 654.99 171.364 654.99 175.815 cv
654.99 212.877 li
654.99 217.328 651.382 220.936 646.93 220.936 cv
636.956 213 mo
636.956 213 li
636.956 174.283 li
636.956 170.989 li
636.956 165.481 641.421 161.015 646.93 161.015 cv
652.439 161.015 656.905 165.481 656.905 170.989 cv
656.905 170.989 li
656.905 165.481 652.439 161.016 646.93 161.016 cv
641.421 161.016 636.956 165.481 636.956 170.989 cv
636.956 213 li
level3{
gsave
clp
[3.39428e-15 -55.4329 55.4329 3.39428e-15 646.93 215.301 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.39428e-15 -55.4329 55.4329 3.39428e-15 646.93 215.301 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
646.93 222.974 mo
641.421 222.974 636.956 218.509 636.956 213 cv
636.956 170.989 li
636.956 165.481 641.421 161.016 646.93 161.016 cv
652.439 161.016 656.905 165.481 656.905 170.989 cv
656.905 196.521 li
656.905 213 li
656.905 218.509 652.439 222.974 646.93 222.974 cv
646.93 167.755 mo
642.479 167.755 638.871 171.364 638.871 175.815 cv
638.871 212.877 li
638.871 217.328 642.479 220.936 646.93 220.936 cv
651.382 220.936 654.99 217.328 654.99 212.877 cv
654.99 175.815 li
654.99 171.364 651.382 167.755 646.93 167.755 cv
level3{
gsave
clp
[3.39428e-15 -55.4329 55.4329 3.39428e-15 646.93 215.301 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.39428e-15 -55.4329 55.4329 3.39428e-15 646.93 215.301 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
598.176 220.653 mo
600.363 218.824 601.754 216.075 601.754 213 cv
601.754 170.989 li
601.754 168.658 600.954 166.514 599.614 164.816 cv
600.955 166.514 601.755 168.658 601.755 170.989 cv
601.755 213 li
601.755 216.075 600.363 218.824 598.176 220.653 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
591.78 222.974 mo
586.271 222.974 581.806 218.509 581.806 213 cv
581.806 170.989 li
581.806 165.481 586.271 161.016 591.78 161.016 cv
594.957 161.016 597.788 162.501 599.614 164.816 cv
600.954 166.514 601.754 168.658 601.754 170.989 cv
601.754 213 li
601.754 216.075 600.363 218.824 598.176 220.653 cv
596.444 222.102 594.214 222.974 591.78 222.974 cv
591.78 222.974 li
591.78 167.755 mo
587.328 167.755 583.719 171.364 583.719 175.815 cv
583.719 212.877 li
583.719 217.328 587.328 220.936 591.78 220.936 cv
596.231 220.936 599.839 217.328 599.839 212.877 cv
599.839 175.815 li
599.839 171.364 596.231 167.755 591.78 167.755 cv
level3{
gsave
clp
[3.39428e-15 -55.4329 55.4329 3.39428e-15 591.78 215.301 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.39428e-15 -55.4329 55.4329 3.39428e-15 591.78 215.301 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
536.63 222.974 mo
536.63 222.974 li
531.154 222.974 526.708 218.561 526.656 213.097 cv
526.656 213.065 526.656 213.032 526.656 213 cv
526.656 170.989 li
526.656 165.481 531.122 161.016 536.63 161.016 cv
542.137 161.016 546.603 165.481 546.603 170.989 cv
546.603 213 li
546.603 218.509 542.137 222.974 536.63 222.974 cv
536.63 167.755 mo
532.177 167.755 528.569 171.364 528.569 175.815 cv
528.569 212.877 li
528.569 217.328 532.177 220.936 536.63 220.936 cv
541.082 220.936 544.69 217.328 544.69 212.877 cv
544.69 175.815 li
544.69 171.364 541.082 167.755 536.63 167.755 cv
level3{
gsave
clp
[3.39428e-15 -55.4329 55.4329 3.39428e-15 536.63 215.301 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.39428e-15 -55.4329 55.4329 3.39428e-15 536.63 215.301 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
481.479 222.974 mo
475.97 222.974 471.505 218.509 471.505 213 cv
471.505 170.989 li
471.505 165.481 475.97 161.016 481.479 161.016 cv
486.988 161.016 491.453 165.481 491.453 170.989 cv
491.453 213 li
491.453 218.509 486.988 222.974 481.479 222.974 cv
481.479 167.755 mo
477.028 167.755 473.42 171.364 473.42 175.815 cv
473.42 212.877 li
473.42 217.328 477.028 220.936 481.479 220.936 cv
485.93 220.936 489.539 217.328 489.539 212.877 cv
489.539 175.815 li
489.539 171.364 485.93 167.755 481.479 167.755 cv
level3{
gsave
clp
[3.39428e-15 -55.4329 55.4329 3.39428e-15 481.479 215.301 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.39428e-15 -55.4329 55.4329 3.39428e-15 481.479 215.301 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
426.329 222.974 mo
420.82 222.974 416.354 218.509 416.354 213 cv
416.354 213 li
416.354 218.509 420.82 222.974 426.329 222.974 cv
431.838 222.974 436.302 218.509 436.302 213 cv
436.302 170.989 li
436.302 168.408 435.323 166.057 433.714 164.286 cv
435.323 166.056 436.303 168.408 436.303 170.989 cv
436.303 213 li
436.303 218.509 431.838 222.974 426.329 222.974 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
426.329 222.974 mo
420.82 222.974 416.354 218.509 416.354 213 cv
416.354 170.989 li
416.354 165.481 420.82 161.016 426.329 161.016 cv
429.257 161.016 431.89 162.277 433.714 164.286 cv
435.323 166.057 436.302 168.408 436.302 170.989 cv
436.302 213 li
436.302 218.509 431.838 222.974 426.329 222.974 cv
426.329 167.755 mo
421.877 167.755 418.268 171.364 418.268 175.815 cv
418.268 212.877 li
418.268 217.328 421.877 220.936 426.329 220.936 cv
430.78 220.936 434.388 217.328 434.388 212.877 cv
434.388 175.815 li
434.388 171.364 430.78 167.755 426.329 167.755 cv
level3{
gsave
clp
[3.39428e-15 -55.4329 55.4329 3.39428e-15 426.328 215.301 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.39428e-15 -55.4329 55.4329 3.39428e-15 426.328 215.301 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
371.178 222.974 mo
371.178 222.974 li
365.703 222.974 361.257 218.561 361.205 213.097 cv
361.205 213.065 361.205 213.032 361.205 213 cv
361.205 170.989 li
361.205 165.481 365.671 161.016 371.178 161.016 cv
376.686 161.016 381.152 165.481 381.152 170.989 cv
381.152 213 li
381.152 218.509 376.686 222.974 371.178 222.974 cv
371.178 167.755 mo
366.726 167.755 363.118 171.364 363.118 175.815 cv
363.118 212.877 li
363.118 217.328 366.726 220.936 371.178 220.936 cv
375.629 220.936 379.239 217.328 379.239 212.877 cv
379.239 175.815 li
379.239 171.364 375.629 167.755 371.178 167.755 cv
level3{
gsave
clp
[3.39428e-15 -55.4329 55.4329 3.39428e-15 371.178 215.301 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.39428e-15 -55.4329 55.4329 3.39428e-15 371.178 215.301 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
663.51 374.553 mo
330.837 374.553 li
330.837 353.645 li
663.51 353.645 li
663.51 374.553 li
618.501 361.794 mo
618.501 361.794 609.095 361.794 615.081 366.64 cv
616.07 367.441 617.015 367.766 617.852 367.766 cv
621.227 367.766 622.841 362.48 618.501 361.794 cv
512.585 355.784 mo
512.585 355.784 500.079 355.784 509.216 360.645 cv
510.755 361.463 512.091 361.795 513.197 361.795 cv
517.904 361.796 518.42 355.784 512.585 355.784 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
687.272 374.553 mo
663.51 374.553 li
663.51 353.645 li
687.272 353.645 li
687.272 374.553 li
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
513.197 361.795 mo
512.091 361.795 510.755 361.463 509.216 360.645 cv
500.079 355.784 512.585 355.784 512.585 355.784 cv
518.42 355.784 517.904 361.796 513.197 361.795 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
617.852 367.766 mo
617.015 367.766 616.07 367.441 615.081 366.64 cv
609.095 361.794 618.501 361.794 618.501 361.794 cv
622.841 362.48 621.227 367.766 617.852 367.766 cv
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
663.51 341.944 mo
330.837 341.944 li
330.837 331.489 li
663.51 331.489 li
663.51 341.944 li
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
687.272 341.944 mo
663.51 341.944 li
663.51 331.489 li
687.272 331.489 li
687.272 341.944 li
level3{
gsave
clp
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.48573e-14 569.264 -569.264 3.48573e-14 509.055 197.06 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 
/10 /11 /12 /13 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.2.1
%%For: (Lenovo) ()
%%Title: (2212.m02.i012.n041_e10.eps)
%%CreationDate: 2/17/2023 6:08 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3Q<He+NT`YA=0U#RgoIM9,dg,S>u0119.$#>'H)Oqm?<qr.A<Dk6/"XU'.V&Q[,E'r@=YeYap?c-/kahPh75[F8CZInNC;
%dp48:)33^&R\JR!hg`np]I`N:>.qC*);R1ZghUObc#`+M2<1-k9huWEf="sI\l(2'WhimG[okAK>-31c;K'"0Pl,I7VJQ(+oSp&%
%-rhbi?V7K\(XD95m"TYi<j%\<lHQ?d<pYdf7,s(FIbUTpVuV3W\oY5U-.77Ah58b#fslHBD`oIL8Q<Fd54+V1bH5s:DjTdt0Cu\2
%]4$VlpIbs&HpNH<.2lK5oVJik3q5:s[]!,]n"Pm1Gm-Vf-p%l7>5XUZ'kr&p_'T*/gkZMJBat*]\+P6fB3d5+;q/.c]7N(cEJ(AC
%VF=kX_#mkJ"ea(Z,;FcTV.udb[nAi=L9"s/_fhs^1kdcQq>aFg+O*D1nRb6l>u+%]VOk&7gJT$3aZ,lHNdDYm0s'<$Gj7pdbGAQ=
%b0,rT/2`%tc8OGSjaUqj2-"]R)N&W:2<23T(#6(GWK`iiCZRI6Wm*@rbgTV+=K9`#ECjp\T4_IK"TBFsESrcO95W\IHDQ7.>!c6*
%GMA\RVZ472VUU2iFrI4262_h53GhZl>b0O%0W^55CPJQq4R+O.')hD9:NaO2V4K(RDM[I?W!"E@]W`^fPIX=k]@/='Q>9--Qh\AI
%[=Ft&S)n,'c]50<iYV><j%B?an6aOa)MiRK<"&StkstP$Bk=62XaO0^=tAb$<D6-qJ*(E=e7cBllDMJ-nK7ZL("$^uI::"?G+B[&
%f21toIr1,4gnW[tLV@#3eiSkNg.D83^ZMi@qJf)P=":TC9q(LEZ?,r7rg6dLGh"8K9trr)d,356)8Fso^S!jWB="CiDs:F(1]78a
%Su3l/kRn[SW2m=uV+SEE'eJdb9SpA<Ymotbq.KK4_Dao;O17LPl;CVjNghn;[90:<)cGG3HhMsbmD@Ogq7(RHqC6s=Dt[/7ao1^c
%"ldqHNMZ@GbESFh/!][>dr1bA$VISTBq6[Xom.o6I_b\T2=bth'qQCN.1O>N8\%=[U[33Im8@1b^"U9AVX0rN%?TU3pTH7e4#K,Z
%W$C7ho^m]"90@:;%bsHhd8P[4U+bt5/c,\mR6bt;IhgKIODePZ@^%>Y>-SeW0E-pR`UX_M9==Y@ose<W\#OFh--ECJCmPNpdf/]9
%]6"&j$5?Q"C(+c@Sn;9MG?XB['pBNor5^rXG)q*PY'Q>gd*8?cg#eF"WOh@DTB?K>Q0a7"e"=ddEm6L,cc>FXNbIU=GG]KYn%VOB
%=-Ij2oql(Ie&Jkmbe:./r$lPTVZB@DFb<:)9W,!o=)u9ps8)B^?Vg\#9D,67Nb\)qdU`OtR\oUnr*N]qpn8>(q"+5ecaY9u@p7Bt
%2.OVH)d1(Tb:u\CA2h(VC=!l)X)tJjQ)?,O>TR2(k]4T,n%[l.Qb1,#30n&6WkE$-m2TE7mF_3=Cm-KB0#Q7VPqL<bj(jp`Q(BKJ
%?@VtiJ%j^W/Q'&5CW;f7F\ll)S2HWcO01$>3P+dt[1Z`F4kG3+.e/B\iNVBDo.#a3RCDc_hTKR'\U6TU8sQH!Bf%=sF"8SCke0]W
%'3oG,jb;=DJ&S$5F2]a$<17mWZUfOf4jV;sH2;iPL..q3@m2TP-=7Nq2IB5*jbDCEJ&S$5Es4-MQ'nCPP?/CX=j:t=&oZ;/Z%lh)
%6?^\bQKgcQ[4U"\9j2lZ"Deg66A.M5qNEq&Fk)FcOGZB^lAf?l\D=M3e$E2_p+.+'ctH"-15L.2US2&R)([koMjoer@;&YY--!,"
%T.Z1-ee$'2qCjGYT:j+6j`Ch+68Sg#$B0'40>3GZYDP$^PoYNb<$ID5#R@.M`1tI47R2U1cs]nt&jEH0.d2PP:=t`1,)gX:iYJ:,
%Q,qSn+rt)5O:MV10cE*+Ma5<FiK?fXBuua-`/fR]<$M;`U0NM#5X6G8&/!"I0M5N%QUWqc=$r@XWuJGJ/>Ei/C`"NB*=u!olluY/
%#-ALZjp2bd_FL)7;U;DSeZ^?$6^Y$W(Uk7+W'l2R!p:!S*t8KH_m)fSa:g1PKT?W%Ue*\Gp0lOE0)JrXqj6CuSm<B@>t=]8o]537
%2+kFA@$Dj]^LWVn-'ai,IV4:/T(KLbKqEC5jnW@<jkm+\X_G]b"F$<3j-$4BA1lk%)ALn/nN47nkfWF\k6ieSc!2RbF3W,aSM%f8
%/^'lVZTR7:4CceX@upk0XR-VfX?)e[8eP>`(Re+G7O?d9"hOI@Iu>D80$!MWs7i.-EcgF-hhna4P+##C1kp>"-)gb=0=in(k3-"9
%QL5C!U_<?OQR6"<\,qa,5:_*nPca*3b,uB3Xa7&9.eRN+N[;MpXqbqb9h&2J]#7C10*3qg*QFIi*K)O+BB8]TQ;_K*=O"!Zo5n3&
%dF-1c3"R".KS+P'.nP_W?.a%.9%UYW<Tt.N7\28N3((7>iWhSU'3gjVc&"_C@[:#')\W%IHQFu/2#sa!g@6%c9qWN/&5@9N`f^<+
%i60cQiTWD\1ITsp=/GgFaV4H=R,f\4p2;\AZLi^8%XJY_lfsR)lac'u,J)+WZGMMlZud(bFGDLLL=`9Lk(66l$No(DV*i=Z>#57u
%r;@F)MAH5uq/V(F\]sX=MALt1n1o<m(qQj-Z@g?ZbN4Y2W5P3mV(9ka):Yrln[hFS1BQZ3W+@$PN@_:)4C9V7h.#EmW8lAP?L/FZ
%I$\7AOH:]3==*oIc"jDD>59#*S:MIaX#W,M6Fmt=XopUgoU-J+!(7tU$()>*"rVM_Cp2>$Ziq6Pke+=VI*nh,3.N0'GXs-DTX[>?
%C7mVg/4:C-<8sNEfKoPS*XuVj^<7@=RGgR\L7bT>$c9Uk>V9C>ZA"Ae+rLG["Cqe$,ToU-'hus$BWK]tHe&JU1f);03K:VJX_Nt"
%h]lD#M:p9f9383hR)*>:!]Wb)4G'"5`E=%530"C,S7fZ#a396?^hbt]Ut_sPR64uH3=Rd$3TWtQ-(+:Cq[m'IDEYZ.KKU6Jk%QuF
%)IC]mE30>2kV+q'Ce7i^OS6@Q`eYoP+fA^>"#;RWYZ7gYX#s(mAsMJs.9irg*APp&50"Eh@@t])I-!YC->CXIWQVLi8T:JuAG9C#
%O""@(E)F.Hk\7jZ9TEn9Xn!d8'h_'<LB*/rNhd'")&,m]M]_5HBeZ2pCq,/JZUu&#LO"NLLgUGFjn<Vh3fTYe/VHUCp>C1;WMS6j
%1;q0^J$=2_KNb'bQAp65qO@1Nh@;\%6YL4+4'?T8MJZCh\`I9OL\;D<"uY.U4Poj01tUZa(>hLVUM?N2;^3TEb&aouBmnR*4ZDVg
%0=(ZiFL5e_pi?DjqHCGXL/34PqQ)6q?gkH^\*M!G4tDQgD(=ICRJU@!;BoWh^OH$E:2+$[9_W.g:&js[5IDKg;E-1.MTo%Yn!H0c
%*H[ajSP#k^TP"Ip#K_O8es+,_&fnQtD#\AUFfgl9E8197^1PZuWJVjQ?`C<T;QE`1?dqdJ$I+g8o%R.-EMm)WnW!08=P`!<h&/4^
%=6c#`g6fGc59tGD:SJr=:3EJ]p4&gB1%e#=ZF<W;qL6'3/t=68[2,*^n=&n?XfKb(c4N*?8Ta=ODjAnBV&p^ek20\7>#28]8)O=@
%)DI3S$<eEYE(uG'?gffZV0*CMOMk,7@6CF_.G"c6?8C=R"ub)\&&#_&6c\^hh5E8)9tstPNiasSKblD/iJc*ga0kHMVQ)FD%.78t
%I!R]bD*G&(%qH@<bkPT=GCLElRZUt=@XHa&RX@VWg3PiEh)NPX)JB&3Q3\$:a+m%$lXI$sNNE`klgI02K1)Plo-AW-+Gp8Ya4@`&
%3\Q$8`Kel.Z92"GmYNE;de$+^W,1)/Xo"j:R1j0"XsnFKChOJfDPG<KFLd5\QOM29FL_FCRHS[JlZ.hQ.hc3+U<D@O?#JKeZs%%U
%QE,,1&*8LU_^k6ua>M#UL[$MWVMRQJX'JsZr@IP;pbAd1Eht^f'C;6ZZq;.[i#aVA6tW;U5&$`N5b(A[Z/"i;:M))r\+^XCD8+5r
%,CocRT\$TQo#.eA[pH5F2_Uqkr%UC2q)%?,f/V3);Vh+\Cu+l!5W>ctH80:DrJsYTV>Wl_d&He7Aol8QED;sP:Nd>?Eo6*i",&`;
%^Kj"&">cZ&E+YqRB>Y1S=-P(^=2sF^#\r\m>U$FKX\SK+09l/<r]!!h<G?BdZp\<%'eK@7s#')L;JgfofO&W*#F"L]^0YT_r>Xs-
%>k&9%2V7Ec8.Z1WYb!PM-Z6/VG]9h?K6%80+;'u)2o[`rW+tfo\N`jD6pu\!@HN_gQkOP&:tk&BFS?'&P?BBq6fIV;+IqYMJ&<3t
%1<X4\XBrelB`3AKS)s?H[F@qU\*i5;R.uuY<GJ+k:u\m"WQEk=a1iFM>KFAS)+ej)\omUadE!XpWjaj;ah1[e9POGh`%WJo-atCV
%.9H@KWpHAR`VQcbE@N7`-G*!DP$8sgZW1p%cB-$D_IY`anIZ%i8`[*:OuRR'(R5b:f-fh?,>C-8m^cR!/!f_bNJZ5/$XmiQ?FLBV
%maF23ABr(d_!<V)f/3ekVXHs\kWM2gj$Y`2gB(K$<8APgiZ?""pk5O(L)3?8P0*)n*;Ar%IkpV:_\,QcEI3o!"Guj>K%'p[Yhadd
%28MnqeYr7s'&MTWjYnMJd&7su=Lc`.<mZ)dGmB,p*[fC$>I'SB[.2pn>Y$VkEl7e;?6[+Or0^omPq)[-$GY;5I'/pPML55e9uOkn
%;uQ$cp]e/Hna9t\$G+RhpZL:*12H-/'qRh;1:IC^X.q$>Y,OJPHdS+mO':/U,Wa..O&+O@X1KEr]I3ECKMg.#Q)heSj0p:=rhN]#
%Nc">TAUWk>Y[qc29D-:"8s1u1G6USMM-(YLp$n_`I/jHu1)7j+dkU9r6#F;@3GFdOs!2'.4"45\j'*^4=`7sNatNd=,'-+UH/!7t
%<HJfFold<;@N.`KII`<8EkD6jHic]@@;i>!j]]c%,hAE+r5)M5i]uSC3Yb`KgSnAiQHVH+$CtpEKX^^pAkK)/[p,3?;0956Ksbi?
%2oaCcmTM90NCIT$@nHZbON;^bC0Vspr@Ln,P3L1")l\u\j$-+>Fq'Q^mN`G,<e+605"21ke!YPl\[^<`P_>pnL)7lU''3/`B9SaU
%Rhem7YoQV,;%f20-EfPE[d@^4Ypf?U%n]5d^(mn$L&2RBP0hd$e$1=CbfM+Gj^7Xn&rSN"/S?'.-jd#P)ch52Ypd(\fsr4*jaP4D
%,f>Z:hkDnB024csEPhd#T=d#&FQTG0+;6EQa?JLtKOtP\jk,])gou5*1Qdb@G;9j3eZ9pD*]Z!tmWUUrq^'a_S'CB!h660oq0K`;
%9.YD^VGm@pM9O6*/YraW(Z1:_P`@>FiVc@/T8Z/"G,,-8O//;W.3XK?TG8O,UH@`qRc)nL#M8;KY"`m&Wjn?#dnF^tJnl$Fm4u1P
%C=\.YgEs.j!3E;3J1&e!"P%BOWnf%:D1ZM46+)QN2I9?%96a#Pd3Wu\%c@QCO$&UrpFs*lZAb<q1)fa>8n>jfbNP)kFmUWbP"Bn?
%j12'E79e>C7C23eWmJLlqFporVD"0\'I%pcnl%D=eb[XW7?dXK@uRi:S=cfd/!`rQ[GgSd^LFYj-,7,K7\#QTlt=$/R!Pg`5k;$&
%3]0LBFks%+K[@.dF@Wm&H+34=L2jt7j*@0AMpQCaOcZBMF2K_aruE]b)U>op)thd$+XM\,"\J7:%3G`]#AU.mCu*r:"Ln[9cjaV:
%(s46#a/*e];';!BHfr9deB(JkWk*'R\7%cujQQ@60XnhT9SkcU9(#Vu_IStUplP8u!"^M1q;:\]P0A4i2RD!h-X)!Ar+<Kf<\:_C
%g$A+c-@#jBMC+@7PB3LKdZeNk,OUlt=/tUfr81"g1ir&6j%N_P4'bh)8n?hhaP_>LrS!GF2@d?Air?^`ra4edG^spZ3AI+rpjE+O
%0,'uH`905Pq-Lh^GOi>AM9gD*o1`C<ReV8KZ"\4;oDMJ[I.*LJF\c?'qR]_+e:0'B2G9n#1+fo^1<G42e,&X]EkP@c0/lPCja,CZ
%%5h<`1ouOg2:8WT)V.<oRV5g`f!$VpnjmUg([qW^M44,#C=Z"Fn>k-s]M+L65F7en7*N%;5NQWmN/9'[qKgi@:8BtJ$JdpIJR5AH
%@TFGi1aaZA<bX?lKp.>:d<^(8%+dX?bnKHk%;Y-`,SG$<RO9?lm>q!iA6kJop+*rrZgi4>X3PMF<PZ9CHB#DJnYtK\oaY$EPN_#&
%jJ1d_fN[`caYOTod>aNP!X"Q=)$T^Y[N&"87MD!5p%;p+1A\n+9h\"iPL7<Z1bfkB9L^sZ19-9MXh1A^s49tPqi+L)&>hImI9k.l
%eI'=^IN:o/m]G.jR>qH7^A>SK#npf*Z1M,Qf>0lE/$*CM2Pg>0q^(W<)oT[HF=HbBqN%!kN/84$^BTA+DeFYLaX1mM&gVNrqdu$d
%gpb6#pEA9ZV;0r#b<tBS]*QL"9Zt[-RRkkDIa]6.15S4B8L>dRj*f4kPU$f9p;OuD`CU92gU/a_Xq=Gb0MOIG8Hu'+/N$E'Rq,n&
%PGX9nqpI/0]M&7D8bSuPp8)b:mj-`)PnemtQ>RfW[(OHBoLCI(SWf7<l2"k?&p^0Xn\SAZ-5SfCqt_)O%BoS<VIJ1)ILT6G^B#M^
%F";dT=Xka&`]&Z^'BS@;kOmD?3HoFSmX^:8U3^-4p"Ve'MtLG@XM;5In!n')'+O?sa>VkZk7\<l:D_>7CM<-(6b=pc5+/C;BP8%g
%D5*^u1pm-9.2*/-:,CCf,j+g%FIAnrM9Ts@?10D.euV9N1Hr'RJCL9\aiql1EcI&Y>_CaV3tn(`mXsgc.K16X/2]t_Rb0?4_N&WV
%1)-^U7*^4P2!`]^0a(S/bO>0NeWQ@m,].q@5.5@%Wnq&U&e5@L6mi:r-4,H^G&*7[kg/DUFsS+hp04B$B'Dg`<%AAU1%&PcTb31U
%6)T"`WR,lpT-R@FUS5rgSOc.s\g:[PPGV]#qj$Pp3LQ(lU2f4VC8-KHT:[''Dj/:r;X7;+BR5/g1#c<<Z@=O\DjT44@@!!*H4!Nt
%6+Jbj^3.uZY7r7VV-R\C\qZ`Nh6gS%O5.PbWsRb%c#,_/bU8%SEN@Ehh3:8-p>36Mcj@N[^t4(`:jTJ%6CY!b8"t2(U(P"QJp&?S
%//&V<S0FsoO\p&)N1(IA9r-9qP^59a<)(&-@5#`Ek%96P&t4s;'(cf0W^jtT:#.*q.%/2FKY:'d\VW4'EL\;'I!h[7NDlHBABH7a
%ghk*EM)tCoh3k3_'6S2ecJ;-9/eMUU7%KgGF8&D")e1d\4+/UK53HEHm)8hHiaX/Nc6TO126?gLikJ\"?'E3V[iC@mUR'mkLZ<Bl
%elnnV^T`oO*X/"^$`7hKB:WG;`![HLN[oS;Hs%&WHG_D#gV9'f1(q%L^W6-k<)Hk<B+pcIqnJ$.&5SkLADHP6q&e76P#(@a_\V#C
%-aLhN>r_V_fqWJB@:Z4Y04s(RN,eZ#AF`=10^8U9Y'.fuEfKAMAP[dBo6iStB.%_uY#M+la(e2-C:nefNT>P;_rYM")XhHG!;Am^
%:@Nt1[mV-*neJ&]]9EspfN+nqiYP5a"b3&B9in1)rCZS8LZ@c&=.RskX+5Keoc!;Xj"ja/f%\rk?Y9],BW2-MS0"M1-/ZPqC+%Hb
%]pImL_%,sA(ZtFD\$Ac)\][Qc$,=IQQ:Q,l<Xq`4Fbb%PqS,M5<Z7aWcsQ=NLdYZ/A!`&K/"R#8GL2#8pm\rE#bO)n:P,bTFlOM]
%]5JAi'%q0KLRkVBIQC<Ui0A>4!YU]bP@<>JCR>cVOL?UpBn)0D3LOS!*t"VN!9#14_)K'$,U,gP%kH`[k!SJ'KAS5hc`3gpP''JW
%a+R0;pL&&9&r7q4iacE//f_UYI5,_qpkJO_A<tAKDnOVIA)]T8jB[D)h3Z,5lWjJ6ghf(1ceW<qIa-eV9]:'-hS4KtJDEX;llN#M
%R_0!dY2psuUm_1J#)u6g\`HaU(S8_G@jk+gr,*@nf;X2#&]"j!&]h#Jk5W^m\=s2ZTMH.GM;IgJj28^;\f60V0dc_+0-]::4leQD
%On$JMkaHR'U_=>nDE(5-h)Ef)ccLUVQEbMW%P?R&VdZ;dkm]9`N#$[*i-sd,^7Ic8j%c4<K\\3pVNY=U[g3`:dlVQWADZBmNs4h0
%F$=_]KtV8+GA[@>R;M^7Qr8#P&T]oBah.)s9"O<#!K78IX\Y>N&knU2'NLR*fq5TRDSg"P@5I:8"(i@KU,XECd.D+UPA<k;J)=5R
%pG>ufjlRS-qqOEb8()I"$Wp-u61-qC?2&oLM<X&DRQg.I,\$>fmQV_QfJU*BHF?_^gL0`qUO18S5dKh.4-7nEI<Z,t6?@0OhL]iO
%Y8:!(IPUfV%;0]RMSUVm5t[kiJ+=5JRI#[**j+"NdE@W=Aq>'2?*EWn_`=,W3hYY.VraBFc/4"f2u#I9I(*>Ed-htr<,d5iIU#ck
%btdRug%&qXBrS)u1lDLr(O`9=DtAFS;EbhYDK+o-]j=j;hjqX;J?KdPPt]OIl9oi;Y+]Vug4p^XCZ.A\enI2FVlKYj\rq!H-bdb^
%g\XOfh]fd\?*""*nR&p74qU$SZo`a\DVZYbADZ&o<u[E&FH``ki)^`uM!M_bar^N(31=9CVP7[=bHNN.+)K9a&!$%UQ;&GXc#@d*
%l[rr_Y-,F`U7<pAnGR;'onkq]-e^3l+(\+@oL2c;J('a2f\iao,.3LC]RZ&SLA!;f;I;'uZsCFEC:?j1GItoN*Rf(O%D?^Cc/X75
%.adI4VeW*j"Ds_,ZpuFLg.cbGd.!_Jn,L4cG(9&V?b;"X_`)e\q3HW9s5bs2*;&8-c@b]MnkWudkhcXAp\H<n>4BLK/fp@XpK-CL
%:$Pt"kO];!\E+6hQ>h\qh#CYCY#eHLs-)uQLH;MkT[>:_6Dn"e[9*8aNR>tt@RpK/j3K?F-%`KkbT'oq+jg28QLNdYG1\-$F#<X?
%DjFgL]l4XT3>s?R&"''L],SJ2I%?g3CA@j!nBudMiXPnPIHteGgha*8<9U^Cp$2+%ZH8qi!W"+25#OGPo!F(X%[\=*-1OVYkrp`u
%]U<*#hT(uDe4V?drJQ;6s#$S%lEuPp24#B_9"f1M\kk[aI.5$g#P$GdR>(QscRW6(iFli3\Mn$dW*FJNN&D_J]8jjZUO[O4>LGBG
%B<=e:E5+;EmZB1gZW_kGm-L_tS\)>,/FJf$b.hiojiiL:Za++2m-S371@,G66#K"P][3C?GisMdm$FSa/h'T!QVbFLARnKIDm?RP
%Dr*>,alp0A,h0R:%<]eQlem%e(3B0F^[KKg]hMDtB'H,)dk%+tlt&f%Hi4D`m5rEI@J6bXeb-=rZg(o0PRD82s7:`ej<#DW;JqO;
%b+a1en:@%T_Pl"oW9Vg0p[h`u#J2K.,f`]anP=2BA+eu1>92POUh6u54Y@I.o(h*RrM4i2gB&#VAmbMg#j[I^rNo^B[E:_Shp8I:
%YHa/]7_;nWs)S8L[T)j+ISE5[^roBV<>+300*oa$-_OSNrT7gn9klQ0datX[,db+)2gStFm$#fRJ3b-jKjqqAF<0jm=]$I':<QWb
%^j3agAIm;`n__)sA*`4-=KG4rc[X3l1eQUR[JciW*d2An`jfHg)#32FDO?dWfLe"cmac3[)k*Wlr^'dYSVFFNJ^d^N23hJ$lq;1a
%1;dj=d'>qJDYgciNdk51G3b,_,9C><'CZZ?@e45(3@Oj0XfN;]D?%*s8c5T1\#Prd/LaZA%AcmVC[-CAZZJg1DoIcj/Wu`>qQ4q?
%RJp>=[-LHJfWY(?<_?&>DIrI!CahTpDQIt1Q*<XE9$J,jV&d^\Q5f5i]C]B]8gPWo]ics/mD6*8qS.29]\8HB1r@PiJ!QN4pi9RT
%FM$CD=3@q6dV:`,kL#6KBFM98Y-naJQ,mB-?S18K:ea,4P&8TW[pGE<\VR0;$[De`ogYlnb%BmNWH-,S[qW8UghKKkqR(KLTosh<
%9LKtDPu=T+:iF"1TWJ#`Sc\`RIaIG9^AUskV;J.ifW5ne$M_6P2[fo5k\_<!;KH?ElX'Da!t6ESmUo8mBYRD_M^3'1io"_8fO,ot
%,I4n`=6d`@H_j30dL$N4Ftq_Mg7a\M+uuSPfk1,kmPg%k#G[WYfoG+VRM@[rV7f"Dg/N*AiV^%h6aIu;EGB^:I-]Nf8_L%Oq.Ep[
%Es!Ot;!Hu]>sC+<Bbr]tfl-b)a[%cYelXmK4;qsa7H#JK#d`cY>0KjQ2uE_/84&A\RJ?(<:V<bfbQ$(-mH>F)^]6k8D:AoX:(^!.
%Y_iZn8H0q#ohC#D"L"$)FBg8#jr'W7r;Q]bl%j4>=?2&"p8)S8+$$?qe#V"gqffbRWJ!F]7m+]eZ/mpK@,(2Y(fa<*aMB95WgBBj
%>p\pVh4h!5kfUN1&flm/:oa(h<V:np\_t$V)>eI#d"mfV)@hpU`<I61qOmY^%pC.&GZT8hlWq]OLLf>AYB1]T!+CKO8?R'ss"$[]
%e[)Jhd+[q.T@>BIcQ'eO4d/<g&t09sNB(MX/pM3bA6n\l'0`:"l*53?Fo=pn\NNjU78Jp(h[A_T#NF&u:T4F.jeA[F5AR"Da0ifT
%+r!;ci&Or^&l85*U+CR#g:(TfN[jVSb$hh]XT'3E0uu:kq1ZZN6GD]$Xo,rj/kY#fLC*J*+gG#rn$dIqa=R#(ms\soWe\VK(see5
%I!Hk"pO4Ql..Rg1m1`GPKVs(<ZRsA),T55F`%$IJ^8YeALD8dsKUdeo[S!YXAWPB&^cnIYQ!3iQVgI<a[%^A[;p'2$i/;bl%d*"c
%@o$h!4EeV\+q_&"8i"00MAMVUS'hMlf480%nqFb=D3dd12#"X`0:\5bY@-o>QS%uWJ/F=dG<5*qQ$'pa?._TVh&"p![7.D2f8/i(
%q'PR^IekW&^UcjWkZ]8HO(dTF[;#:dJJP3f!R6E_GK!$3',']:ZA)]p-S>NLl9_+&?M.Ocnd84!ST[.7d/d.;V_n;U!DTV"m8RW4
%8fKg+;>J_K6G6MQ'aJhd=kp0h]>+@^VM"i9h`*_C-s13[^Z&h0Qn*s"AbYd8)m6S82&83fIjUFQX`hA5=1P*ULM+qlQ,T;\hX[+"
%dsRV=5M;L^1mYULWTKnCRPeI?]ia!6dIt^u>G(q8G<U,oen3Mm)uoj-:F\7%D'bHnoPc:FRX6n\`OaX_lHVWa%onhA?SpYVB_:7L
%'7V'6SM-lUqCqMqISIB=\JM)bdA#;MggIg?pZ9FXI<bOKs'5M'fQ`*7Qhesti@[@8T0)&pK9(^4r)qrBZgJd-5p,6d;#$6U]DMP[
%50Z=2T*J??qSQ##1&^VJG>7J,c^\nmo]bm(*ad0Y>6g)]PFH<hAG4G'qN0;'gU2F.q#c,\`LlDFDpNmViIaq@4=d>%*B3did2S/#
%Am<g\L:-s$Q`'l9+77)$lLBEd[J".-PKar6cQ=%8`Un'Ai(%QpD)M&YVt$AUZ?lFVl-mes_j</0Y<0a**]5!7K8Sh0=NF78cLdA2
%@nU0Sn7bJmp.jB>kF^GIKB<QrIT8S>&(2O`lDpn+DXjh)Ca#;^H5utFM8g7D4UJ"TdJ69uPeMRmUsYU%_H8H20bKH[r=sJJiTm[8
%5;.dN:G$"4G)kdUNP2j<%PpiIc2Me9pq30FeoMosmUc-McY%="Mpj#^BJ+B&j6OS)Zh()qZh='ReoRJNDn5J9io:h>5*U+$8&`I8
%JDX2/1^(eNo,lY#rNrp)A8Phs[U0j-ji^G,/hO/BD/(_Q4>/Z%X.*nZ[dg"hpue9go2i+o$d[O$-Q&]6X/51^ito+Nq6Yt<$VpBd
%Zcl%@p"W^KGd<W^Z*aK.I.?mOK'?6!BlA@PZaIHnHF^A.X?Q&_?[nG,U&"W#O@sq=5-8W82]bk:\]ThfOfMS?a,[LY3\dqb_M5L<
%mX;o<R<nI^lJAUTpH,@\L"r\WZC]U8l%KrLLW<OVSXEYA8UiX!Ea)boH7(V<d=7OOs%,r2C['@@@\K6Z._bhP9!')%`4X?B.eW^>
%)_ITf->`\/Q`8L4pA5r27n_\`Ap,o@FA&iakJ#lXl*\(5X8ZTNVCN$->4\XE^.O%";mWI&fe6!tl,P=/W<`::EGELe<BU/#a20<N
%\>6:*k+5X<V<1kRl`!CXQSYUp2cI9:j*+kfV:(u;^S`j-l1rigC&)I8XmWnpBe?6I18`e:;F]iOS[)k"]Lpk<Vn])KmAQFn?YgT/
%Dp<Zt>'c\7RT_?5dAYRDfg@.[m+JG1eFRl[:K&o]g-R9uoOoP9s"o.g>+KLo8?M:YG`d;4e+fHefP+$W?Dfm<e>>HOPhLT#0V@'i
%[5V!%NjIisrl17lHE4c0RsN]^5*^G$J%V6HGkCV:eU2iGek(:<;u)s[G$mI.*P^@`:DMbG*i)PgcSe^7FhaJ.T2f6qW_4F_V!:%0
%p!f&>iK$t8Z2Sbn[Gc>,VAm(JWS-)!m*shDqmTK3q<.$B\i'(r9&9')V[RFC9%?U<hj7YD\_@YXVO!Q`T;S8DoUegjBR]_2Ps=$X
%T3D-gg76mlZ;I%Dr;:SJC8\RQ:@2'<e>D*2h]5C=:oU,6fuhgod=1@olF9GdT.FpE;rtJf5]s[.AZE$$DP3Hl_mf@3e:.#*oW7ld
%CjNgCHoR\R[pMmG`Wp_ARPbkX?.q$2T6sj,R=;F8rT!Omp8abKQi$(%o]G-.e*5]7Dp7Humn_E]+/\3C:4MdP;q(`Khjc<imT6=$
%l`\'%2:JtHr7Q1-2LG:.C?PE7K85NZV[jQWY+IjRQX>5l@&;^\+*aE=IQVlK\rh<#?dToYG\L^;&%35`XTs36>>H=\AsV!iHsV30
%qnQR-rq,,Zlh/q`o5CbVK1:2N1Qu#14Jce)B&@NFc7F&YI\+rqrS!4dc7[='fq*UMP>b9NB@bDcSBYl`IQB^"mpobKI$eZ`TD;YN
%s"RIM?FFL\++;n7Bq,m;Z`0[;c9=?D^7!6i<ZABB1UT?W[&\VDI8S;8;)P]Gp:Jq_>OTmRZNmgtT?_n5Z[P%&X(?AGZt+TRXfWRT
%Aio8Q_hYS#_t:igC%;-hoA,bW_rWi#T-*3%f?K'i48[!P]:Y]YIs>(eCHVOK3SSk)@XhL)=P_alHItE2nJl6;nCc:?>irtO5A,?:
%dbN=?DL68DD>F.c(1H:Z6#D*pmdk)+0NWYPfUT#'<-td=HTa7d0NTaJ0BO'okFKlBBCjHa[PII?5?:tZ]:&9Mr;0Rk_te6DeEcr$
%ZNF/_s.eRWO(MFA/3M)!I[Y^rIp)U;kkRmCr6\0t60Zddft.4I6bW-bd;d/*r91fkjjTuJrTM_Ir;>fG"l6:&/M+Z,3aPqaVOf>T
%5@1<?*,`H.0)/AIR>(*6DJ#S*[HC@DO6;P#F-$"%NU=b^de-Cs='KJ%a#f"+o]$HhG)aOrDoV)&lLF[YHE).-SkdTo>=^hKl"iDm
%rSoU1\oL\E^U$*Cl#31)\'jH-]sDhDoV7jXaF2dbfX&V`b_re3Wl_o&2g:X7\,#)N`dds\AZ#$u<`tr=ANX*hn*M,K]#AB!1#I9P
%F`D&nD(L-`qs*JkZ(n`%A,#;o3]ECRU)IsJcdh3E^S\_[mnTqP:0.qUj#;^heu3%pAn,_BWmS3@q*j]8rqr1miN$2:gUa.qa'-3[
%eR%[Xdq=,oZb$/.iI_'1^08okkJ)Jmh`o8blc%;dU]8u:IV?s/m+2[#SH!3^X`&-;>poBhpu4G]@=6rpFj6o'*L3WZ(Ye`hoB?p$
%epR.!@ENutkX!rSI<a*o>K2;][;c,DD0^o^PdR+/cWG*%GNQ"oqGakO4FZADNumDSgTL8;V7i1!gp[gfp5eS#b$;pbiI.)9*doq`
%a."`b@>A(eqYInsm[8Ol'V"bc:902qAo$SVIIcr?_gS*%RI8+.bM-q1oo&:qoZdj#dn?lg^"htdLA,<Qm"tJ=oRKuVqrI:qU[j1!
%91s&!.>"bdlUr<lB8rbY_:'.!B)0:/8q#C:YHKO]X?:;N+09kC>V7)3HFVc(e\`d"gpHb87K.Z0amN;?j,*5RSq$=kjQ!_Il/s/Z
%:S0d"c9L.YcO*I/hE?,^[.29oSipD0h0ep<jnR$*mFRCWSfN77!Xh,+PT-sTe*6f+o4Qh&0@+h\S%I#F[DsfDRgn8%Z+.-Sp`f#@
%%q"\Lc(nY[X65IYlKaf.XPnXYB31!5::#_RLF:dD&,iii_^FX)F5EB]2>=\U2KN5HldNC6Z`l^Fj>5PON-n[`I$WZ.[pS5mNn<0j
%4F#a4XuJMtXd)sLREWg?_mA]%j4i/alJh0:nnQHu1r&n\F"4e*IT69Mp@.QuCMe@ebZigSS\JGlhJ'IM;bQ^Xf<)FWFa[bK)qD$>
%R42sSs&bY,^/Vetq3NVDc1@:jcW6[OX?NYSDEL+-rG3]?5Q?/lmAE:"j1DeWHo9g/[pM9K9eX055</Q2lKhg@g$?2>:T`5E5CS%T
%RZo+Z^pDhQS9(/A2P2&T3"*=.s"O=`oBb;2mp#BelJ:$tE\>+Ln@#E:IEsLC[MPI_ZgFj-qJ#iRRblo(55DjsPM',DhHBZSl8tW8
%3feK6XI_Z3e^+0Xh2UTi41e#MYO+9J0.3;LmTP&(c&O_A6e/h0=g7)`jq`0k^$!CZBCDD'pjB9VrV"e@@VPQ'rqbX2nc%.2q8P^8
%lLVlDHgpsT_=#b,cG=5ljS8,;_Ro'A\PKDqhL=70n`F][@/9_kp%><XDX6ZBf"7.!eaJ:b\UB[A3R"(d]KQ2Vc:f6::S+]&[pOU[
%rdJKgDYa7qq,ZIl_RBcqLQsN2O$A$fUq7^IIei'bdb3dSNsC`4l6!(-o:)AZPLcL)YDq#7T8I!:T7*;\>"F(ec]gYCrd<LGp*KAX
%1J?8G=l*IGrpod-roTRD6,iY7qY'R5S^b]DY@ZnEgS<!I\#W"<F../LG^m0kD;O(3I*:-Ko5@u#[0utdNT8@ao,$j*rJrUTp\iCW
%m[N7u^"qN)GK"d<a3@,pHNeW*rJmm,m'j>tL&1*E^M#hqrEakM:n,Gh]2/#Eo9F'UG+X6-Pq)Uk]bBGfO2B#aiVUpBq8j$)eBj27
%e"-HjUXSg84`tALW@ab0/lpl#<R.)YZMAcp\btUWd\h,&HP;"qGC-g'nU:H/6M5]cFQ;Vr2d7`&^K\f@kH41^^[bq.NEc5*d7Vrg
%pXNp,(Jjb*eZ\i'X4kHOmpU)+U%Z#t=B(pD+$5m6rRFR$Y^Ucnlq'QGGGZ=kqa]N^onCmGWof*6m@!Y-E5S;_VMn3Jq',Fl?1[9B
%Zeh.C3V!+;=eqF#HE7,P;1m!ua".M8?Sa!FH,.,!5uf\7K_L0A^_U0,UbG.nNubj<DVq4E2uMAPV_6L32kg/a;J!>e4=Tt!3IAHe
%=oPp8nS=tp.fEBg`kA-Jl#__;9=$7N4#5mm5>,4O9"WlWPbJa,A=+6FSHug2(roE'_GIMLZ??od/SnB9*Bs+%D^'4QR[s0l,(?4j
%C<_eja@&>D&%3C9^6S#;D&&b1e;p1em^`2rGPe="G/>qd?IRJuRj3"+,mkF^Q><0G.Q2ABgoYWRf^>*0f.a(a!D9ifOi(+s2t<V$
%Gp/,o!bj!.*gf#KUPW"K-B6Y\8L]P7r^n\_+T=DPeWc@R55R2@dm)1)"\bTY;Y42g;C'JZMB_A"L7LtSY+d56lRM[R]q[DtBdiYC
%;A/?7bn,T#qW4/DY)2<UM=Vc=<,kl&N<WR#f25A<Um0X+LuKp"?Te'%[TU?gS78_"[ZIl6LBj5hrpjbT/kjb7e42XJTiTc@iWbZP
%8uHim`#>'>dF1Z5(RjH?D!]I2egT*1BU5]'Ie3J6Fs(-KQf/">C0m6B`R0Ts)b/;m#o&1'@N4=G4MNhjX$%"?r6s(`mA/TKVB*+T
%HQ=K/f$cZ\\)/eYS9:jP28<D\FaoDie^gQ4+jCpF+EPYJIt6=Y8Q[-b&.&H73>c%!O?)C2<6M4H"G'&JP1S_LF+JTh2:6ioq`fru
%W.IM!,%U*^WSKV;X:$A:T@n/[[:1,<1U=oIX*n)2ITJ0#\ho>&^nFEYISarfU*0rM3PQGKD!It2pH-EKRqq\#HOiJbW?%#A+36^B
%l65k`R<lrV,6Q+AgfF\IMe3D9fun[=/gFb7$dJOQhqn!TQ^S`3',O.FZ:AVJHS=Pr)hh[(oif%JeuVqG,6mIscuGnUlCFS,>mJAk
%h7>_hZ*QT?>`TB$>XhCQ#[jbTLuAu$fqVT=Gbr_)%2XkB^Zkqod0dP?F-i-+in53Z^5S1)H-jHW;fj=BDPK`i<^%s&Yr/;SWLH!G
%Ang\^(5Y\TWl2,KL5R>J-:6UJLusV>\4ag_Rj6T+,<;JC=.B'"DV=4\:Nl+8UNWVED:O)mki_BiD.HFh<`U<S3()j*Z2r^T>!6D%
%?@$N"T&E5*rbc(L$LL<W\PJC4Y"0Go#4ZE$?E'.r4gNZpl-h.uJmn8u%@:%,#>GuuA!L(V;s6FC`SUBLg:;f_@u:u54B,<.dIjRo
%PbD1Oa$W3%g+W5a#lZ3".9&*31jtp:PidedP&;jNItoMQ52a`d2);:/KBMhB'%`*WPFBI&.oWGki`hQaqj/Vd(NOe:Ph\UU6WRVm
%,p&UC?(sCg]M.'hb9(#'E3!dh(q>st<h/UE#uhh;]/<?ak8D^8+aD'g)?pr#pN@(t5gcCS/7riXU>e*e5=aPN"Wg$qXe2+oNb*SW
%#`X4]'k/EUYJcpo-13tbOf\l_XsrI"*&2Hh%4</XZj?=FH5QXGeGMtph2[kI0_Fkj+p"0TFEqOa)mkBc@jUldBfs$*5W:@CZVP?'
%9X3#ZT%(BrKGP)J>jR7ipg-1&QeTmf$l4t=Kf&[-a<eFK*f2.O$F#.(a4f+[)dA^s]\e[^OZ!Z!NW_@p45XdS16"c.=tc0kdK-]e
%2[e0I2HkO,iQN:.gJu#9O!k*UL0ur]<Y+&6bkDPZ)8KGRRZP],pT(@)_5ou4E@C5Y;hXQQfjZ;3n3MC,mc5NP%^Iksq8^rS=+;C9
%7-47s0s6l/QAft?"`:b_!FkO)mi,p4k!.f135]X82p3J-q%p%>?mu+@`.]Ft'DDY7g<8A%=ERT0.a:Y/)"3iUb760cRK>Lk6W\Hi
%9?VLrg(Ni=NHuQohV)2[.3#=5>OuYmh0j+E:X5qH#/gno$T80S=o;I*4rQEV2DKKP-'3GJfGQ97<T>lT"/VrNOJ*pZ)e.Y(oUYfs
%;R:HGP#epk>@B2%>FP!6a:W8$cp;igB[i(hcd/gqdjd1(Z@R)<k1VrBN0:XerA[RM@Z7rbFQ:JY7EeN>:@_^g3W?.^1eH28%cKhj
%IDHC:jPiod3e/o/5/jJqPu8k>%ROI\+>!2+D3T02'NM*>7a=#kWeFr4QYk?qR@lEC*H9f?J*W;(+!YreY5>A0$))XW?p8h4$_^re
%:gp8+]%-?pl_.??p"OJHQsmj:X)gCD.PSg.$[jnkK(q?8k+Mq*`YB]<&3u?&1Cks'aIgms%N]?N&d)#?oM/r$7:!Pb?`75W4^AmE
%lLaEF;6o/OZ>)%$-f;MH]2.^AXb;nUMI.lke+nX_ZI1054L>c(T(fiJc]Y+e\oYRL(EjB0n\SVh>C:XqF="P=R7:Jd#bhN^b%fkQ
%k>d,GKkYr)SM3OpHAtcb_nZM\o7;U7YKK6\hoo@EFg'=S!1+N\\afUA-/7i:[<e@"!06)+r!pG6%P?9kC1P5i[Rk<C6SbB`2r1G5
%0T]H4C9lY"&@H]b6`)s/O)g$oZT#cgh`M<Zh<lWK!6k[!l<X^JRj@:bD:+uC]`9[eo5]IOe_6if<PMELJK;8&=b=2n<,WOB>1)CD
%rLVZ1iBS7:8[?G%`NT[/Jpcac-:=Ts3VX]Th5gB,SFA;f/Ir\'l"q>%Y>:P%$Q'E_osaQ+#PQ5qGB7H6X$#n+nJ"]A(#?1Z%h$n3
%j1kV_j1B<@G-f1%9oRtrEFIeq6h0*HEXPD0]+6-HHD'RnU^)4XYsKufg2TOJ&4<67;+'20Wt.R:KXZ-oqaoZEqYRHkpOC"@;(hh0
%&m'95QE;#s>'$6nASA5E'i`*8U/jN:16,kt'%PO_N,!oOA6dYC@Y3WOFA90.!hNnjBkA>hF[SfQiaiPA2AK(CIB\Zhl=un7lIVfG
%$W9>Zg*Y2U,GSC:r0Uo*>TtX5rEj^?Qsa\I;`-s/&^ACA(:Df!1(Ge?m>Pp"Ne1.lI.*`A5nE=@W`+J/R5)sZS!rSVF>J&<UFp4l
%`jT/Gn[+8<=XK_\<9g+=R>Pm_<!D)X!R]1P*Y"ZXRi)`t3_7gqUEKn(28jPl.d;r/F$u_=/5N0-WOf$YE/r)HBH$+#TG>&9=>'9q
%U)?9Z%BA*%N/V>:Y3:fp8oca<e[2j(-9Z3+C;t9g>Dri)9ede4[YP]ZX[R@LR]8fOD`M^T;_9pPjRJI)?'/gUC*R5`#LS1R%9%>T
%L`^(m^bQ)@=/H;T;EZrYJUkl_8;fMY53C:d'q.PM*X1ru@e-I%o&E$fdi&\0:1N!HZ8/Ro\6WU/ehoO!fW+.R9I6k3/=P5$&mZm!
%EHQ!f@Znt.0sqYcI8#Te3j(goKoM5*5Ak_BRi:oQW^BtUI8E35k)KJIF)PiUT8Uj+./TC73KFsWd7Vh]_On35inZo'A!<W$UTpi[
%:'"4+K9i4oB]p.iQgVD/Toj-#U0X5Td6,%<o"N7j;_`/Zf:=(o]:RtlC`;kL5q^s,T^^a5$;YHEE%Ho2U%B!\P05TT3\'*UV5"r\
%2_"i1g.s!TZ<]Da)29(DD9'ed%^#C\+ULH<-W(:06_e=)6,c5.GX.8FlloUNW_0%!WW*IE&9W^C4)p_V;B_W"TY_])a_7+adl'M`
%1;m$b9I'b`W!4tZ<4YI()M,aL@bBI1R2GY?d6'\+(AGIkJF^V2b-H,nQ0LC[D<._6>ijZl-G,nN!/!<u3oR"@*)UEXN,Y_/Ao03^
%-l:p=COl@LpC[gE9UD1p(^eGf26;r%jt9L`EM[O"VU<@RO#lM$$=:HC3\INM\FWD3G4ECkZ&ht7l^-e7GVL$%a=_=$GTiGi)WE&L
%>*f@GiQK17P%SJ4c+u;UMYSU/nT[T7,(V+9T&L;HH_(HLI8Hn0)NG6NP8."MHM#n<8_/]R4;W=`P%ba_7oR+2G_m'?JdVsC"t#OO
%gQ[OUc&"oO9RA&,1_(k`K".LI*=aNDR8$!lL6$KldrA[Xfr44Fq(X137Xi^gD=X&XHMdGDoUi&*bq&5n),)n6gYar^EEDB,%A`%R
%bN2F<$Pn:die];EJ`k])@tF'pk[G,lZD^76m8-TZ>lmAah<^l9/n?kP\`iiT2!O7g@1'okRB'S^p)_81F%5rdV'XQ9g8%SG8kVhQ
%&tC-6HYmI[G@g<Zd*bOV/\PMbkKZH:0Vtb96Z'o8?&?C&!a@-skfoii+"h5=^>>rVRX9_KS^u4eQo/SqU\<0?FM0ZBkIJ:a<N(]\
%?<YeVn2]N$Xj\q/Mg2D:NmNC+F6c;tN)5Wq*?WFHT9F>,K="sUZM/7LB'NGX2Z$j\iS'RNUAj*cr989P2Aq#<PT!aSE#1;!m@X4L
%B%Ltte]>Y[<CBX1dR,\d>-Ut?G)(lrh:&LZ8,-PVEho\JQk`N20oM@1"nbd5Va30(krXl-hPDo!_p7ABmKBjCQo2^]EF>),@_54t
%\/Vb@C,]a-G/gu8DL<?jPFhb,?l!H?Sn^qQCP#\&bdpQn;H^WE[.e)%'&F/BlM#bgqn+#?=8..PZD04Cl3&Z0.G<+N%.n@o'RM`k
%gNZl6Y*c#7_^WC@&1^,oBaT]K*hJ'@D`ScdZsD$pW^rgYdS6Oee'4o[Ot(D/V1aT+TV\Z'Y]GG1-Jbi?hX'Mch;lC#VCSG[)]&)\
%2D`OMp1RLH,Ilh2*BU$)?q<PZaug_Ja)OY:<ae^qQ>"c/H7Is"Wi;enFN;mRR:9bZh(qH5Um7Cu^pL"P2#(]A]80e5j6"89VU5C-
%-?!N*Qdf-X`]12fT1HDnZ)Pf6?W8q?BGq>V/PIP'NXfK$4bmXl&K=\c?7.a3FUYaK)OT-'M-$sb$Zf7UB?A_YmB5'IKT<+_3]N@G
%S,*L^E)[`+a"Z2SACq*69cCF^(ACq>,qNRpACgns*SjQMUnRq/K,P.]W6o1c'lfRp0`V_tHH*9Rn-'coLij,p5q7_[6%,u:,[r7@
%L7:o4?J'jPBJ!n>PCn=QE2jMf,3L>uPG;8/Ka*Kj*s>d]S86SJL1q<*dJjY31</O4l#tO3BamdpB[eYD+VY.(O^SLo4o!\3#@IJq
%%R+;?46\Y,fd<`M*Fa8p85gpTSt.U@Qs;T16'/(mNPlbG<h)oX;q3]jm!H=l=$rn;[u6)`*J9>r->]eBlEmNcbA_<T$<Bu39I:B(
%>^ZC)#pf3VG!&t6#[hn"RS*?=UhBQS&Y6B;+>fY&?o42g4jUMTCe;V5KMX^'R'[njN[pWD>/nFDg*Y%u)AXXs@ue>0RjLcQ3(8J8
%;@]4[I?j`kg)V-&keb,+6BeR/Q!qT#"5>O>VaE<j%WS(1,>JU]DB=*DmN"f/B+R@q-@j3i6.c4#3bs=/qhboaFT>=X7qo1ZZ'_JU
%qMa!WkdaeL`(<!A#B#>fr5RdA:-NdRKK)Sfi5"pL0niZ*"((CG?OSh$e<XiY^pn0g0KEofk%YM@[TT(b&1"7YOFio%UfbBGAhT2S
%['U<.0Sr/6_bgWf&6/%bn,p#Lm_Q.ZWlG%4EsX"TC7qQ50iu.5qVf#Bh/,pq4D-K)<0[^[WF.h>1b`6c,ls@[P^4+)5E1H$$;8!j
%V[26JP&3"=\-gKG#%7@cHY='N>XtL\mSa"jhJ'mWWE7#aVFTFo=)uYn'f,h4"^7@\-IrltVT2(U.?+<.]7Oguba,VoAI&NX+qakg
%gaJO4'<I8X1h8-)00\a#$%"m2S-@KkJr\:Aj'bTTBsS7:.:Ah^TVcFi2GD"(>pXT(ZT8PdC9aOf[PBoq%$97OHr-pLYco_Q.bJKd
%+Ac6TeM>O*S_aRG=`C(_Zs*[p>VF>$4H8-%GSRH54kelQK!Aa]mk6o(=/RsWm-c9_0Z5)4H$$737$Y2KI[UBb?BuWaI]aF<Csgn4
%JM`r.N1_fVBErtIWebNU/NoJ)$j+pD:"98B(,I_(1-3l8':p9R>6a%6p3TM-XGorGp*Ps-F@'uK;OV)oJX)&p.c<a6d6X%:4#q7U
%_H5'YbI]$n'Q'&P[Cjfdp8F5pO9pWGHiW:9#jaVR1(++5\>d)NJPX2h1ao`;C[e`n^r6D6Bf'rDC"(TeT.V]NoMNLQMXFtb4iC*W
%m&8<"+?fh_*t?,jdC)YfN7)'Zcq>L9l]F0J)SR%i"1oM*NIXK]*&4:O,L$4T+FM%e!h%^&Z%r@Dp`&=9GYE%t!W14`\PU'rgoeWS
%DZdqkLdKN=!@VqM^]kE:YYp:$>_Okg\CokQ@2RuIJiu6H;fK6?+DY?e-"2o?bht,-._m'OSZY:GVb42P>7cn[7Oe]S8)0qfH4ZY+
%Ld$?qFjjf+-e+qLWXPidk6SE7>ad"[,d]BR]dT5j((-Vt?G5YE:S@BnmI^nZs,5Bo:r;FY2?l[9Bs_U-h5X:O:eeEW8eMP3+kQBL
%M5iiJY^)iI_o<sb'K?k*V9lK7(8t#+"ech[g*,]Z"f]J(rhRpKclFR09Hu.+j!bC'S0EP!#8P]Up_ZDF(Ut<:O(k0m8]m4V`ukY%
%VJ\i^-$l9>ZlVU)&jd._%4QZ5.Z-\!b0a]%rglaO*X.UuWL@J<_.*Ih:$W-,91'kE/P?Qo_sUsd/.INaYr!24)RM38d'5F8Lu`2Q
%%NS3k%]WsT$q&(`,bZ0aR73fZ0d.UDL_c"dRW`;Sfnr6_NRj:e+KN/JOiD%WTjqeQqjn\GS=plKYV5'lQk5%57C95E0o6gKmnrU0
%Y=>YX$@7T`gVrGT\"q'^Y/dQ79Su3X@]CD/-;h[bY.0WCpa^6A*'+ig;E8hM@euH1EHGHB7$;$"@]CD0-<#OL`g+JX^)o,54*V/X
%(cSNLG`2cjN5;b+"7E$00u,j4aPa?&_K2%mI!FupmlHQUU_'(\)PNIRNPUms<"'5U)CphYM$R"(:.1;?F(/;a5!q(1D7"1#@7+e>
%V4uL<C_#r$[uIQC*%Cr_:ddV]Oi]@d:i]6cj)Q?4'UBE[U8T%>>Da*g[Vn^>0ij6$fjK?A6cDTn&B`k&>;_5KhXEe8^-ZlW(HSEI
%Yq*(%$TS/((:;?6//X+q\_*OZVasZn0eJ48E]".";?W@Snu2l]71'>G*S$GD_.^BTDo2\rdU4EN/LfI+-H+kN&P\,eMeHP'Q3f46
%lGW3t;(&2:YW`t\jUns0V-VHBhM+Hh"=Xb\Dj[[^$;;'aV)U/CpQm)7,cVRM-'^0ORSYQ&$6>$c22ML+pa@LRb))0W65V-i9Yr2,
%SkGeMO^CumK;f/GK\\V.9d7G$a>H8dgPB*49ULK1;H/uNQ/]QS&dD8JM@7$Ha>Je^Rip;c\],@#G%h3%k+s%;E2`Fk3:[.k*1MH=
%i!?IHY1FC2Q=_)KD+N5u='/CQ#dLbuA9?A1j9RINSn*rB!&9:(R]T$K@@BXsk>>MnHl/T+FDA9)+3"mXDA4)qLSBW0_WW]+a_Xc)
%jQJ9'WCSfs#D[#Leq"bm$4bMnQp48'%M"[NEH%;"F8`Q8Fp3Xm`#q$5K9a^>i3P*s9[h[aDKZ8?+ZP':I<'.+)Ql/S>:7CE$'Vmd
%G/o?V<%0_!-=4f?/rWPVgW5Y4_ts:#Lgbq")Sp`.BUI',F=3(W,?F:Re`dDL,Bcq,<K#nSi$7f7-OpNjm>S&C[;o66m8944@3Z0f
%o8%f7h2I!'B^GQeTG/':W@BrG7mUQ?S=8PQ;+qhH$(`Ln,V0Ci"q*d*s2+%Ub\e'[D/ck:1sNF9+Gp6;qE/rs.sUF9&HQ==f;:=a
%Gd+R>^k?7?nR+1uXpq;"'Fr^glm8CBi#Qn[X#h0BU;^m3Epsjh]oIPcKn@]G]#'OF7Y9<,TWZBIp6@<-S9>KW`%EVj%P3U$&5tN`
%3%um^Pmt]@(g*4D;a\bt<u;bn?Z!iJ_S?B*+ai;giI^Iu25Do[%7gUiMo*7d"=(F(Z8i0mK;6H:&Omt`J\f4$Z"5`t"7%U(W"os`
%3isYf$k,uG-@A$d'UT*J1+^%8&/[)ljl"H=#Y[$_\n"DE"P-q+&8#>_pUa1E%%*%L,>/O$EqG;8YY#B+Z\@j-NW=-/:,NJ@"K\g)
%!,!jO*/u=6M?'E.,60X`O=cIE)mNFL!FQf_SFJTH!!<JRJ4T3;"0)oTdkhZ_fQ-a'673=?&X!ER3Gq0@rh>f7#\(^(01=D9/2.M2
%l7Fh$BV\Mg>q6E_Z;;+WImh3F6.=r*0>^(T6YK43p4Y1g22Le^W3<q0K?gI#l!%FJ?aN7")/^/ZV1BpU].;m!\C+@hV&9Jb&J*>3
%DoD0PI3f,6Q#7jte@WT2dPOXpY"IYZC"eG%J>F7RQ)7E#<Efh)8os3Y.tr?CQQOdO(k@]W3Sk,Id`k6$mtJer6ZK[=^=$-."un^R
%pe#nOVm[<.eR*^>\/5G6GB1J8Da]U*nHJH9[KKB`psLueZDi-enV&8\Ee56#I.`gH6u4+-fCbqi0AZ^Abn\0DdJg?8`9LbV([q.1
%gD0*Ek\CHL8_ha"VuRtl)2'feTjBQD"FNraks[,U6J(9`07j@o*t7/ALl6?qb;'@pl74h29o]oHjWH59":a?h8Fj"^$W/S`nRD%9
%j0^!r]NEO$4?Eo?l7Fp4*0Ni47h5$/M7$&&->A2?8!*kc!7s+\Y;!\K.Q+=NRZ$4<HA`6bP@iF$%+#aG"jElMd?MM[GlLfM6ON:6
%B?Lp3`Sk*1AD?2$,n05\:rc:bG?l]J.h0>=0Z4/iOq2r@<@/A1R]]=2)HJ3jof>W;`>^sR,,.QI#?Pa16m_WdEJ9G4#^lkee`AMQ
%`1._efrtpG^/1N:+NOX)7J_omVT!O4%^J]RUc=2Z4&Sms"!Q$QWEJi?Z&ZILMJe>s=>VG#RLiYBj(9*medIDZBoW6QYb+!rK"7V2
%.cR75>1c7W3$4?pMo7H`KqKHc"<D4oQcd?H3(cE4d@P0!:/G[n[K'*ZE8Bk-';Bf(?^#9baC.?5(UTGdjd;@S*X)#iOGKA=0q."E
%_;)8?@2KM(5RqYM@/u%]66,<L^G'?D/ITAsUs0L'i.3_lZ`q1U<f!TH+:Qu?Bu_05]5-Ae$$HLbL_5m>?;u7=;Pi\==CVR"J>.jY
%J*!Np>'9An]=&!^Ws1,OHS"B7jD`Z=Wpm7a$<7brGg-s!VsC9JUHlJA!+mLZ=Fb`#Mp_tK(L(#c-^+nQJS5>/2E:1:&tH)q7W$M(
%"kKD9#Uk'g65O[.!b8?I6[mAo29"7V8BGfn)\Iob='Yqsg5sr,-5&SR[O;Y9J0ji4L2Yb0U0B;c_#+e.C]k8Q:04MF/R_OU#jT$r
%7>^;A3-ku?V8X.eZ!`Tc@ot;SRjP$tZ:#B'W$p#I!<I4qM'5`)I3=*fKhP,bkfs[&2VdC#MJ\266U^JfHZgP6$)/\31CI*uFFcRE
%MM.e+l.l_FRf&?M>+gdU9[2i,C_tfqU$<9@FeI"d;?5<BdLEl/Y!I20bNhW5:i2]N,DBOm3h5NYQ*?]hQFc>uh,*J_^trM)/VIkB
%Yf&i)(.5JtOe=b4b"sZe6`?m$7B.Z[?T?irADQH=C6uq-KeV(8/M=nnN:*T,./^/FL+k3A,a==g1.Y'f&>MZ??#V>uK/cXETe0_.
%<V?!%LlSGi)#$i+FWiRc1G.787*BlVg4<.VS5oa\p4+@l;?73Gk94F"/lVIOF<2W:>uem:%cjJNP>E;_l8fn7.]mbuK#3BYUV*?F
%9d-\a$0H5*;eNokJpClDFeLq90TRH7Wl&7^'$T+7aGDX9@%R!OKHs/DO#1aC_^R0)R("*'?EJ+4a,)<Hj_/-1k&H'rG&]>kJpBP[
%iUC"]@9t-L0HX5)R$XcRk&H92Qs5b^hR3HhL=m%-"/lrSk0-58Adn:pMd[R-"S3H7drsPbS9I[I!:b@8"c$MkhXP-LQPOb'oE,q?
%PaD",H:$MT!OIKZoBAL\i6.W='5:h)"mel]R.MC=SKVN"TKU;lEL9jN8!QY"Y#4/dasJ1OL(:bIG(!)6S8cs<j3aS2?)!.`#\..6
%'Wp5VC#Du.,#F#&M_jNk`\ZRO+ZqJY>:'B[Z$Wal1F-kD`Jl,[:Ehh<M)^r/6VIg?!W>0Y`Ies?_m-!(dBcP?l8qR,Su,]I,A/1Z
%<nFnfNW\?bFqfU/@KfObTX$s1-]t3uPGus^8]7iKBn.ZWR,e1`4/5tKcf!3n_h%(?_+U9EfXZ^`e!?#mGZ1ai-H5!m'B9+XW8S#f
%<Qnt182LZmI'Hd(O!2PXC4+U/bCp&tdg2/u!a)/%q8e"ANY5&-8;YQ'!lZ(Dafp5`4NDG9iPLm"("0[?08o\sr(,>)W?brc$m_PY
%+a&2]PpaZd"aI7<b'YkEI*A+WoV9E^@!kn^jo`QLqIBuOi+Qbm$#,d@Ct%\gEL7=l1[k.tZ&(io[aT:Z[D7uD`U86OJoeg;Q3Kl4
%4-D."m$aLl1Jfr$7,W60RnNA4+XolSF^]W=<>cMs;TSdO-]&bD=c!uu-Po9qh6$qH,3ub4apTpWZ>nNOe[&p0ph!c*VW(Rgl!!YP
%Pt2PO8]5"nCj&[n`J!9YZn]]jL/YSd+.SH0/TOeBNnUgOOl1al?J]"%dg*Y1qiX@17T$$PUF6_l%O)Xjaauf8$og[kYZ)a+U.ou!
%M0NA$-mIc(Y&!SRfJ#n$]G=Q]PN#H(M=Dude8Q*^LP"s:gB(,:HVW1)RMVsK%<a2AUPS"#]&h!eBp$goHk"IO8gJ*bASO&Z&lBd)
%AKsN,QNp1sDF1_P%hj5a0$DahY%/6*R7rp9j4,;Oh8mFi7C@.#>Ga`"F%tNA64fJS+l!;P?U0mR9VR8?-<1\\s*j_[M5/'jEE!i]
%)+In)pB8/?7U78k*eL6>^qtGlF@bB=L^\sb[hg,X(.RS=TnT<TFhhWi%?mVfE@*n@6"E7\^o9Kj0k1)"`2=B@Z=\i[%mtP/ag:Hj
%;W2SNW<4UU;MW&J@5=W\3!h5>\fK%kNP^s[8BmhOgAm?U32o=f%FW@?S*.a[8;kH$!X/)4:\Id#GZ.9VIRd[Y-TeCAeKT<rZlq-,
%iGak^O@/>.)In"li6_2m'G'FqNbXG.2290ML4Kk1li&@8k6fEr/E.f+7+XjM"Il%U0NSNT"^<C1D9I_;&tZ*[B9<hmN<%X`&8W!'
%\;Vp0LhZ0!mmVF0U1Oq>?GNq:V"f6qm98WCA"Kn)_FfLf)$JL"0)OP*;=IZbjC_'TB4nrL;)&V%[NciHP7?rs^@HmtF.<[_+I?cr
%Xs^eSltY8U<G,r'.0(^?Blbl7:-79-n[QcN2,iPJKeCD`Bf;HL1tZrDP4Vfg\?SV5d?3t=+;oiV:X6(n@qY-r77J<92V>SkS7?78
%3YFPV2O.fnE/9&f/COl"I_eX38'u5"V:&Gac_0<g2[MAKS1rR.i628ecFd$=*&3-F#of/M7KjGQk96lM/BqQEZADg4,46rJ^dZTF
%HV=p,0U)U'"LX^)a22L-*iJR<-AOY?YRX$qL@7tS>dlai-"bpFrbX?nQjXf9<l,Ep_.Ehe'0Ms;"6p/$1T4<F.K"`$N`M&`(a]Zj
%N%?U%J07c/hYs4T4.?H#%C5&6g_Ssq;`-@kV'9msU,OVr4H&gU"6p.A2\APi$T<#,9LDht<]j&R1/&N]&b:U20']EiN%#r$&a=PA
%LRA9!2KI@;+\5A&";?urnI&oSaq%TKVia<9#VcCT2M>#]B#cHtMCMl+2CtOaNl6;ld#JdM_"`oFfe=NaCQMm7$g!6n9afnqrA=^X
%,N##a;m0G'1Z<l)#Nd8*%1,;T#(bP@YqXfBbb.WEGn:s+i9,[A3?&i!fN3M=m:7FeN:S+<Cqss"-=_#Qi5LeHG58p!hah)u<tLbC
%2.;FOdO)Mp@g@D-;)B2CSQo_k(#_"0%WV7K/8>=`A<>G7Q\_k(R4>6T-E0%lLl()$CbD2?/@[SE0T^cQ2oDse3ipa3l3QAf<4i?$
%,e4!)M_%\LNI\(o1"#M&_SP(>%Db:Vmi\dUH&M/G%5<A[>i\XWg%#?*(ug2ECC%M2,\daX\r0Ar&[gW.W(<XCSfn12Ld]>P\3]s?
%KJBd#'PeQR$Pu)g][Cp=@B)j2fO'?2)dsg.(oM^?pF)%Wk[<#(W'Y_2Dt5.l.YKd><u0e,$pfPpcpe9mEHgml-V*MV52^=sS(bI+
%!H^7+mF4-'!W.iW&I=+rCpf_T6UnkE0FHMn#jFeI=?qI=5pP[![4&boYDt;jOGY/S/-aFZF)E.]P!M4)&m4'?1Y)iO_=S_070mUP
%Gk^4e=6MXcc=_L4J34PN[/lNq4XYK])5IZDH_O>sC;i(B;DhjF%1kH$$/QI1[f`XF$S#I@_PpZh0hM;EKg]&G.L@>7JJ+91Yt3+N
%EIGnJ`r#nY,m6e9<(ga_Zf&*.7.?%f?j.*I7#<&'LSIO:;4_JE2-=2p!NmP7d,Hnjl]3J=:eV?'$^Rm9C$SI&o'@KnPJ%%1G7e*5
%,/G5g])ao!Y$=m7A3jt.aGSST8&41DU_b^LTELQM_;r$q`l2h)\6CdX=Km#$`[p\2';4[8J?\1jconYgX6^^WPK0E"]taJ!4:A.I
%"<t[YTG\q;b737Tn0`RQY5re[&\SIbSe.mSUWjB1d)A,!IE8Cf-HbA!F'TY[KrEaZ09\[8=dLu-1*,LP&P<oP8PF+u*c)M[T+43q
%M'iK4L1%*"GcWJRMW5nt#Q'Ap[1_e(1$lSCLa=#JfXB^0crd"KWCYph&Ze%G>j$EiFf@DsCPMUU*Q_Y#.'3lN.=/;'MP+iTaJ`nZ
%J?OS*=JY3de?WL!RfQ@7K']O@6(Vs/YH-X9/Ync\`>f^#cEe+RA+JQ0rt+9KTTW^[TV>Pi&OO&Ze,U<T<$k9:+k;9Y@AlKaYHEf^
%"6Q<0fa5J7*o=]&C*Q3/p5f2&6AZO3C.S-2?rnL%=I:ou-5(-****2aQrYn]5SP']3#WZTWQOZ6e9Fa4?mRdedU,AGFWmY!#Ar\O
%T1OhO$!d"g"#!!@aKd74[,=1_S!Sm%;J$IgiE2VD'=+8H39_DRc3#O&`n]X$!]FQiLD:s*>?QQX\bm42`.*--%"SOt5=O^<6Pi^X
%C:KC6a9W7ddhp`i:&?FIF\X3Q'QUc0ZK+tRjL!$s"@8l$#=gg+&T0u4JHl'<.%SjtQ$3M0d\4q.k4fQ`J.9a%.eM9j8tnlS.n%8a
%Lj^3R)%\?!L\Gc@]k;=78Pb?JMp3kO9S,Z!n,a"sZLNj];VI1!>?XRNY8aL0`@8MT#eC+>,$msaL0gFgb]P26.\M1q=@T)7ZE#rE
%ftjr12BS,+8_=Rg963)FLScc2&W5%"(36@@N\D'n&k;^3XE_e(+X@\b\M0KTjDD=9Wm]dMi?P^O%ZLdNRj.HgKsMs8&Pb[AOp_N6
%i]-5-%=Ail0BcB;\@%e,&I3*G:2)<hXuJ-JoG\$M*$jj37gEo@gBQDcK,DVY7,o7!_V(#<jQ)ttQl++%%eePd-:dh#@2$oL#s,Ui
%iIPt:P,d:VI)>;j]:0Y@QnE+f9,!)k$j_UPO.,<jV277e'h]3qiX?+Fl!M1A)HLkA#I^]fkEr<]#]CfHEt!H"F$+uMl?q@h[RY(i
%BGm1B-+"/'NgUZaVaG@A@YCft]s'7?g_j8)*T\7[=a8XuTg8pW2V/MBLiG=Y/`:1FnRE_;\hZ!n8]NV4.Kc4RTVR5$_(gYG!oi]B
%8E<d-eo"):l8A267S$J.`8ZMaK+TlW!!=*>6\L,_b".))1(8tbE44,9D*brd35uriL]Gj4Z&(B/&0D>aaofL3,\.$A_CHa:%]:uU
%5TH.>U]_6#>B`aK&CSt&-\39`GNa&20c#M'#QW;*I55VTJ<-;HpkV(6"VALG%_"#VG*#T=B*hS`erF(;U+d5c3Q1G9:3b"=1kDbY
%K'/9Qf-#pooF)>IaX798H^T]"2oRM(:jkggQAsX-@)\O%$lPQTI#uVd8Y@UDV^E%\B8VYT#`sTQKp-\[3.#&\9R1Ht6$lH9!l%]8
%G(nNZd"3)K#ioYooJ]aF^ks"kLsn26B8Td=`'dh*f<PfeN52,:2AH.[_rHQI6b!bI;5OQE!bH>%78,YN8r]sb3*iLL">CBAbS8@c
%b7CmU"h#FZ(PHW=LPO4XS99Gt/g;En35XP!plK1RLplil=N3a"`tfSO"m.Kkj$YT9*?1.E/=.Ik7V[MU&Ja?;r;\I9E]8M9NE=pW
%!9['=%7cHp3Q=D`[OfUX*Fg7AX0,R7&eu100On?XKF@s%,p*+hGM5*9L>>[JBS3Z$1\ecbjWS>W8E?biOYf]TU?r-naaBD,"DaD,
%Ml/9*`C(Ht'i-CZQq3YeOsXD;WU_P3*0DQVF%)k#`>#C-004=B7+oMW+C]1fHId2#N76/6ng-oT$sp+\0l6>k(GY-?l+j?PF(/S8
%9a?IEE)&?fTJW/D_F>u8Ru-?%lm2,-0\sQ[(7-+Aic0m5d^VleY[=WS0k?#e2a"_Q_X/7";RhjGea485"6Tu1OJ\KQLT2hj8,U8=
%lCp<c8j&Co;&W)a)"c@_E(E_B%UoM[qfKE(;MY&3\9?J#l>Zcd%NQ4*i%7^%8&\,cGUR'r1mAV-kS@n$n7]d(fD/^i:A7TMC^2kW
%Y#-FjK[q_>Mlc2g8T%d\9Sl7k-;($[&]8Ju$u#u*M7X7M4KLm?YebA"8t8"[n.6MB?U[B8c?6cc,:l#*`.JiR@&;8D6uU4)j@f]?
%KOr&QTd%NLe:`W%pG*r8'-Ir5L?TmOga`u3V9hX>f<.f+^o!#,!1urkEK2*/>tD;%31D$XKH6@,_6C^9*"q@)P_d.(LW.:>g'bWE
%)?OO1od?W=FiOkXZ`76(GRdtDa9edI_S;fa+mWI?bhUQ#irP7"Q(o)*+qsrM:]fL8@_n"9,+5>M*;L2E2B[<rIn[rY#RIZfKRfaD
%fq,=\0R@eD@+mu(,rm#4LRAF/RXfiW),Nh2Vr=uP.+&cD*NJ+$]r//%"(83Nb't3f,&@jPc\Y$A8n/*E(;[_'_tF5F1u4+JOCj,P
%CsZBT@.SPdXMPNu:"2m9R=PhSO#816IXdP!*/@B7I^"mg$!`YGAM(?qF&iYi"V!(ApltY+aG38u7@66V:J4f5g`Xp!Wc8VDKK)jf
%[p&]I-)=VY_+dsA6ON:NE+<YRD*=_NIMJXs_/-u%lNgQ)I+^Q9Q%qaH##m6PggK.<.=s\XS@,1;(r=+ZPn6cgM'8^Dgedj*%nr&r
%Scp-X(?#tJS&n*N"GB^AG[V5sNS(*n,oWp-"J#P$4V>,?\rJ4EL-^_tGdJKf^P9Q%aOslBqr*40(hL5U<)6&<E"CsY:bX27g'%16
%Z1Yp+8.9/<'*eku_[u5mO4,Ai0oirCYCaQ\JN'8GQ3'Q94Tl,O@'gRg#RZCgAWP_cmdW#E*bduP"5t6((j,Tm^42'%Zc5f7<ZimC
%4[/TSfN/J]ph/:W-dq>G3,Clr(',4$]*=Bla21,N6fk[=@5shp=IsI;<P5;;j4jgF1\Olop^8Gd>kZem/B/IY"JD@=(Aj920f7:T
%K7e]Mo-"&:"r?4+LR4mr%:kb9"EB5"enBi6,Ok]DhQhbpU!`JJBW-j#nA:[A_M$6(jM*Bc:,^G$..N`/GYrEbbiPdH`&TejR?K@*
%%^8>ZCD)F"M[u=:Zk:t@PVO'C<g!'mnDKqUapEn/<eAN(ft;<u>+>^c7m&sG&,?kls3`l^!J_]g(EQPuF2<iE?P)fbOP/_ThiLC0
%"C!;K?AFfo(.[eTPTr<=m(ug4A@4Gs`cFR$RJn*k-T$dOf]l3$EYA![bCMf]+jj[\hI)PWWep?:LobQ#[e2u>E9Jq8EFRBB]GXPM
%qaqAAP!I(*0h*'[>'Mr0mk$LN*EH,@,4QG16tbh`MVLrk7;SrW6p.]jWiT7]O<NuDlm\gDqMPm]C>s=o]@:PKLm`sn7b+b7#TN#/
%&?+ha70N47=Ln(#D'=t#Jb*5*qj^Cb![^gZ^mWeYFKfL#"=:l7$3d"bYq+159<eRC_5g#1"WqYN6l<[9:?RZ&%Njg,R#0de`Iaqc
%JPo8A7(T/mie(u+a,oO0duGo@2kW"?aakj$;C16u"!M;r*XDKTF;J_MYQpaU0&M:C#N?(<>V_Q#JckGK!5-[D&=3Gk(:]\<ED/Gb
%JcnpUAiPF^?l)D+K_Gr=Rg=\clOHnHi3@N$"<_*(!?4X\q4XDq-Z2)2o7f8c8.L:q&/U+NODr6n4CdBa#mOW/?jfE9V$>Nubj$@*
%F\5T"fVR>Kb887<iBhJq^eX>1f/"WpXA`2o17@,aQ@V^ESG%kA,JQ8.Vc[03c8IHM`<%]$I%^.@9m\-nop6cm(G9S7ffXBO5D;bb
%Ufp`HdnN@i+\f4k#Mr2fJ7^"Y)2o[>fEm+Z_]09lPGWo4p\i'dguRrD1)(1\JK),g*AA,(U^MtaGgUBB%3)pS$'rGr6!K^)2.UsJ
%9/&3h^3Gb)`e1tdLTrk\"C^L\k].)o?ep9U%jrf8.O'R/>rRIbAKb1HV[2Z5JQN^tSBVr3<P5HLeH>%B#20*Cr;ZJnY.'GGLqX,8
%J'^i=]Vnsc5BbY,Z@ioH+LHtET^>Zt@9qMP*@[)8"SqfJF3#6EmS^d)Eg8<Q.FBl:TB?\E_jOpF(:`k+GQ^Q9c=&?bJd2G^T1?&h
%j'-m>>V%&"d17"E!<@?AN'XBG[ga<9Ba<]-e'@L/R\GJ`a3Xcm4:F8AH)+O]RIgPe-F4CP?8acYE`^5t4CQ=b4d%cZ*X_W`Zgc^-
%E82$n`pWOH;Ej*o!ZM<Kiknqm_gXiX+fns[$tR00EQmi;375TrIMt>?*\+&JY2^+6?4aind:hS<W.RX"8*1s9%YnQffM-J!60D\f
%f.G=9Mr88-jVrJJ?6l>uB"V12T]s_u!8b$InVdm54WgNK8Y_7i%g'l0!hI/8NM!Ka.c*;2c;t#Y>DU9pZ!7g`7rEX'7rb*jI.].^
%,N5I6Ho[;HgP?i&NCJpiMNA9DbUgOhj/eeo71H@Ik*jTcV\%"bc\`ll2<NQ&M6AX'*il0#Bdl;*BP<ApN]W,SA<sUf];u'D$j"aL
%dA"-V8EIRp93JjA@\5eGYjZbJlGko?IN\E+?5e4%C>cW#LZNK4]YM\s)92"c"`%7a">4AKK3c4UF7cQ[a!-<dH5_"s7`%'?F(4jR
%L2A)eP=?3UAeMD:d@h?LWK99'!oC^&!`!\L$sl%COfU"j@;,)K#s7"2;a'ZaAK4odr_%ra(YH09jE9Zp;d_p->XV<>h&+_m54N20
%hE$Y'Y9pt_"s:HsbU3b-#WW,3W?1JT3E[D`gWZt_)3k>/l_]YOs.ir2%#0TCmdO>7M'p"l;g>H`52>("2!3G97cPll7FO7L+O(-5
%Cdeb&iZl"TEf*g-gEqqB"9ce*"p-"k!L$::UbU%_qJ[(<i*;3S_j'@cL,>kU^Eu9VVO[0'6BKLbLL9ioF,dD?oLLpJC#mpA^m-p-
%6N_-tI3->^2[1B*SEVc#G&[`oVcLe@q&r6/iE.tSKM3b=AutTO-40Ue9FNAeUNt\6ObZ1DIm3QEkf1pl,e1DVpOE>bcHna@ZK>[5
%aL@Lai-@=>jBlkmPE>T*+)k8:bAX2)g9bj9_#u,@.$oDRfft:)'3@M\'Lh^&:Eue[+eqrlicqp_NmApR;gG:eI(F1TaH?itO&J'a
%bfYC#9G-]RI5s(UL`u3hjZUp`\Dtm>;,$])XJZZ6-G*tELo_gR4"@f=;IcJa,LZs;/2E&2r8M#8kPPUHM_5lh4pB4&ajX*WXZZV1
%k^uAe/C,G0@09*J:TP.HB_#<k9d<.T'N23ucGB*0jPt#`r#lR`$'$UT$'6uAQ6lf'A9VX#IDp7.l.rR6Fu8LE_pC,,q5/ij%q1"9
%0UB]H@-sY5NW+ZB7NL"],gu7:*'?FFPc]d@[VsP#5Bb"j(^=`F1Nsg6m>XSq4,Up^Vt]=WKK4A&NkLB7b#W;0$q2ZhDn$C[PI%&s
%cnjII),Wo<5<0V&,Ltn?SUq<>kcpX"i\TdXWsEs-%sJik^LL*Q_kC`*r4EfJ2\7PrE;*J-F;fZaAhkKV$Z_sOD8S]:1W9ZoT[N?<
%Ms:RVVtH/_T?9!,VXQbCOn(\H9X@VHaff<!VAi^lYE7r^m\TMo*;jE[H%M6J8e8q,gfIfgf5277p*sl-g"1/:aX=a9hQmI:gEXHn
%+orI'PdjJ39Nc(#[08;$YgFi<HP@%j:+f%ek`dT.8S(^c.Z;H$1\<D);GlsmW_Z9fM"jlf:KUN2$8=3e5uHthI%e22@\LpoK,Rcj
%Zjm[O/b@ud4D^n\kcDXH@mCqgGb*Ba[%u^?GF8-M7bMe"@0S0?Q_\q7[:b8qD,X(*1\5G$*(;%o<sH4Vkb!V-&%^PR_O*I<Z;?K-
%c[\]j@LmB,"6'#UGYq<@me5>C]V9ZdnS3.[=*s>r[bhU!`\`Zt)8js@I2?E3i<Fl.4T#Rls(_;q3l4U-^o^D5n2TFA"O++YH(a0'
%#?8pDKR;%]Hjd5?6.HK>I:X\E(;._tSs,(5%Qe3/MNckV'O#<C't)eY6"N,E>.YKNR.,&]!co0@"4(<#KPL_r6:2Ak";Jg82'CjD
%D8S\?E#@(1Nf**-TuD.TDJU]dl/Y;EV_meQj]`fE_sLZ>a+V&[>`IPa2]C5<*Nlh&2ia,RO^T'2>KNLp>#Ea)QTg$q/W*6c%'(2+
%AtSu8YfImo<V^-$,C_2Cnu$[?%WSA4NK-5s!.r[+R?/.,i:lUP4VP;Y`sD9SRdQG*NI&nl:iBS;*/P=&Lp?eEG0(WnfQXWNO!f"@
%:B'`1F*TZ*0SOZ-DiG'*Z58?`nV4l]5)3:K@rd<&.+tpNLSiu3hbOG;cUOY#:/m,!23Y""H\5ei!adb87P%Mb_\s84E$4E9ngKB"
%G\2e`:NBpI*)+BQ2]+msJ^,(5&em4_6Bpn<MUmX27a0XYDpFjDGbHd+l`]7XU(Rkb2ZNbV!hj\rer[b3c5&!*Mg-6h9FEoA/B+E$
%QHh1GpWSt:ko:nr6!+h"kP;&RrQQ1Xdb1:Jc5!HT96`s;$C6`qn:o3toV/iY\\Y"_,.%q<2hoV;H)u+jVg599]9[2`"`:1>%>A5e
%=leWg%5$XMM;l%\32;4+"79a*LQD'('I<q-o#<AJMp*K98mXhQd83'lU;KdJ6C>@>F9ODBq'T=]]Ge:]jb%*e2;?@Kq#c8NO1#@E
%J3L8!Lc5h0gJe(AXDan8;cVI"'H>!n14H:!5fPaIR>/kjeW#k5P7^t-Kkm`S2>%On>3K\HM]<tJ$n.Si]i;,P69"aT6!gR"+U@!Y
%a@hSZ78_94U0EO6@A,0T$u,oG79,ZGRbUKFC'JS>gH_a^VS"*bqj(B`Hb@X^&Qd^)XO;u=s"K.jXjRgtZB\%?6R'1^!0DtOiiuC1
%U_T%7o6Jo2$<VcN(JCugLE<U@d4PpW^^lNZb>m%%/lo6O)dOtsd=]#2(`oVkL$8\^XlXr2^fnEt[)n&_n>M0eYk@+WSdDfdX.Wik
%KhlW%qT?\`;ZS6700qr/_hfDUV(N/lR&An2CW8dfS2[;;o(OYVBS+=W'!n1S$t<+er%5$IO;1H8F($ffEiE-\Zl]"CKBamP([AmM
%'-Hf".&RWKN!7,?&Ji9B^,u^3IVi&#'aWp:,u16!l,]YnnGUSBBr"O4Z`I,QG.:^<-H3%BKjr3;?:_bB3A>`)($]n#;\&KOq,G.+
%5VPh3_.3R>`Nm5+G%CZL/ok,0"T(]UT6A-Hnu#W?J^![8<-g';l>Y<AI_+'"i&Sim>5\KLm7>'u/UBIp8Hk-9pFcHVf!E9%[ML#X
%?'"o;B(;RM&(!lNK@`@1k1s,%;h;OVMOE!r9NFr(QGo-?c13[(Bi#]+ZXZQQJGa7%+IK!U@a\ng=@]b?qGWJ`N4c[cb;:bA^birb
%5i.fs3Ikb!OC5"QJp+8/#A\0t@'rcqZhEm+0pFqH]9/LjAF_'2:MD5NJ>%X(Q4ee7p!fGRH>Di3&cm!@;"^Xj>h!Klq(G*jJf$6K
%;YmC.b%N\#IM-pV>h,F[R/N<X,<YP;e1,c*_J=ug[9E^+=mao$C>39L*@*j>Al^"r2tMUAHpp4\'^L]-:fh!YZhfR$i^qD#[*lNg
%I=sKOYnk/3eHgGe.cbNk!5U2k'U(^R`B($ld%>,UJ8H]1_ib2Ef&>Q!dO7/_@,dY^rn_L#;si8sC>1:IHn.nNL';O0RLdhh(QJ$i
%-6`2]b\./0$PYBJ:ol4Aem+MC>H]TnKqC_oSeQa6B;ju#rS+PA0uJU#8Y;hg*S#K":U2S1QO)cF4:NeVb\ER?PA_1!*>ukME/iG_
%d&cs-E4(H[L=X&UdHhmSf><h(OJ@\6luW/%8O)Cir,Z[]c)j,N*(,en;MsWk7D\I1QY.e6!"Ud%R3A@iR/n$&,=9TYO'YuqYC@]N
%<N6Wrg,dOtNJNSS?b5Gja`9cXTu2]Ze>eWP'2Ggd^&X\NdRc#9_pE-$OLEFRj)<WKQX[T1V(K/1kC8+I/;3++k*B5=g[8He]7INC
%rY5ia[Nd`\#m6o);mb%O9\)<OVPmEke?N!8^i?YI>_ElM$-<YR>)NB83Jn^:-mhTi<=:7_ID[&hUR%$.BIs9&ibV*A+q@D".4pCo
%oBGHgGiYXgka"`rP^^THY;<:=8HZ.p>YA2I#c>f4i,_%\nPTU$=OW!%L1)Ze9QmDd;Z=+p.?LB"JTS#j>%N>nD&FQ=e3YnnX[W:`
%RJ#2OPZd74R5-;kg%dk/!q#nhK3hF\<nSNUS"YjOZKOJ-c`*)%Ni+YQ,?Z5=n7j-AE5N6i[0U0MUR33c@^>?([1G^[2scYjC)InB
%efoVfcXueYnuSohc>P:QcN!U8[p`ip)]H`*Tj`?gmP2I:^UCnZLk?hh55GG&"OeZPdG&P4FZ>XH4`Z??+&!iT>b8;@"UoGd1X&]i
%em,6k<bVAr3RUKqNXS:S,ClW9HMfA[d!Ql4Ouh:/DRTRT>OM/XU[A*8Q@!8uDNP0tj3nQd9-2&oeRp>BfUqGJ%!as%\U?V0,ID2R
%.#_1OJ0g7aQ99aJH),1$O0iiHURfn$1(:9S!(3@&pa^Vjg78/W4*gi(0?`Qj?<oo6e1hDYj2Y6V"hZN3'#4ueoa'L=:!e?<DtM0g
%#D!I)%gK\:nAWTLmd8-Z];oSj?LD1VmB0g2h*6704tH:&gOC#X]C)7gcgdW*"tipWGu33`s)iI0pSJYl0laOSfe3*Nrp'0G]2B?r
%Nfj>h^:0a73RH+DS(m9-mE=>IeIV,?4nGNBk:`ufgqCD41sUiVmp=lKE.'bH_m_j[5QBgdq47PYhXqCs-%EC?_k2>HiqdOkoYpLR
%h::r\2a?X]Dg0fW+4MGOp.UaXS!un3[l:MipX@[)rM)FA5,^-j,F@>nh`Yj3*qtrlnZTLQ`RU%HJ%jUp?bYCQm_4#qPqK(=<Gaqr
%C3P+%G(9D`h08aC.UJr':_A>%f>A.8;G/\o[,;cDISor]'/X(r;.UM`INXorK4GahI#m+\qtX*$I?[kVA_&Mu=n^csJZ+1`0B.Jr
%]Y;&2rOfm.4e7/M^>?Q[Is\f>R]HDZPLo8H5OM<jf@L9TfRH-ce&gq1rO]\2g\o7+2`Er%_+4@<B:jVJO2$,>ao;AWa!66~>
%AI9_PrivateDataEnd
