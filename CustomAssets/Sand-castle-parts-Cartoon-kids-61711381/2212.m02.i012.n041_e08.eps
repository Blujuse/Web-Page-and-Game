%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.2
%%For: Lenovo
%%CreationDate: 2/17/2023
%%BoundingBox: 0 0 842 813
%%HiResBoundingBox: 0 0 841.2657 812.0985
%%CropBox: 0 0 841.2657 812.0985
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.2.1 x236 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c004 79.164570, 2020/11/18-15:51:46        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   dc:headline="Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set"
   xmp:MetadataDate="2023-02-17T18:08:11+02:00"
   xmp:ModifyDate="2023-02-17T18:08:13.696+02:00"
   xmp:CreateDate="2023-02-17T18:08:11+02:00"
   xmp:CreatorTool="Adobe Illustrator 25.2 (Windows)"
   xmpMM:InstanceID="xmp.iid:71d17b0b-9e6e-0a41-a608-15452d7c3218"
   xmpMM:DocumentID="xmp.did:71d17b0b-9e6e-0a41-a608-15452d7c3218"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set of element sculpt architecture illustration</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Lenovo</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>element</rdf:li>
     <rdf:li> sculpt</rdf:li>
     <rdf:li> architecture</rdf:li>
     <rdf:li> recreation</rdf:li>
     <rdf:li> sandbox</rdf:li>
     <rdf:li> construction</rdf:li>
     <rdf:li> tower</rdf:li>
     <rdf:li> generator</rdf:li>
     <rdf:li> summertime</rdf:li>
     <rdf:li> fantasy</rdf:li>
     <rdf:li> outdoor</rdf:li>
     <rdf:li> activities</rdf:li>
     <rdf:li> background</rdf:li>
     <rdf:li> preschool</rdf:li>
     <rdf:li> collection</rdf:li>
     <rdf:li> play</rdf:li>
     <rdf:li> sea</rdf:li>
     <rdf:li> illustration</rdf:li>
     <rdf:li> set</rdf:li>
     <rdf:li> object</rdf:li>
     <rdf:li> coast</rdf:li>
     <rdf:li> game</rdf:li>
     <rdf:li> isolated</rdf:li>
     <rdf:li> cartoon</rdf:li>
     <rdf:li> decorative</rdf:li>
     <rdf:li> city</rdf:li>
     <rdf:li> house</rdf:li>
     <rdf:li> build</rdf:li>
     <rdf:li> sandy</rdf:li>
     <rdf:li> fortress</rdf:li>
     <rdf:li> coastline</rdf:li>
     <rdf:li> castle</rdf:li>
     <rdf:li> vector</rdf:li>
     <rdf:li> sand</rdf:li>
     <rdf:li> design</rdf:li>
     <rdf:li> detail</rdf:li>
     <rdf:li> handmade</rdf:li>
     <rdf:li> building</rdf:li>
     <rdf:li> roughness</rdf:li>
     <rdf:li> color</rdf:li>
     <rdf:li> sandcastle</rdf:li>
     <rdf:li> figure</rdf:li>
     <rdf:li> simple</rdf:li>
     <rdf:li> stairs</rdf:li>
     <rdf:li> fragment</rdf:li>
     <rdf:li> piece</rdf:li>
     <rdf:li> casual</rdf:li>
     <rdf:li> diy</rdf:li>
     <rdf:li> creative</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="248"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA+AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FUn803Rh08RKaNO3Hb+Ubn+GYeunUK73M0ULnfcxOyu/qWpWtzX&#xA;iocLKf8AIbZq/Rmrwz4Jgu0yY+OBi9EzoHn3Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqxbzHL6996Y3SEcR/rHc5p9bkuddztdHHhhfekd5bj0a0&#xA;6EZhFzYHdm2hXf1rS4JCauq8JP8AWXb8eub3TZOPGC6TU4+HIQj8yGh2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KqdxMsEDyt9lATkMkxGJJ6MoR4iAxFg&#xA;zszvu7ksx9zvnPkkmy7obbBSuY6wP8q/dgLKJ3R/lO79OeS0Y/DKOaf6y9fvH6szuz8tEx73G1+O&#xA;wJdzKM2zqnYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;qk+vXVTHaKdz8cnyHQZrdfl5QDnaPHzklIUCvvmuc22pFrGw8Qf1YCkHdLba4MNyskZ/eREN92Rh&#xA;MxII6N84cUaPVntvOlxAk0f2JACP6Z0cJiUQR1eenAxJBVMmxdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdiqncTxwQvLIaKgqchkmIRJLKEDI0GL+pJPLJcSfalN&#xA;QPAds0EpmRJPV3IiIgRHRx2BPYYFcNxXscCpUUAb3GVuTafeWdQ4sbOQ7N8UNfHuPpzZ6DPR4D8H&#xA;Xa7DfqHxZHm1dY7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;Ug1W8+tSekh/cRn/AIJv6Zp9Xn4zQ+kOz0+LgFnmUHmI3uxV2KpZLQSuP8o/rysuSOTSMyMHUlWU&#xA;1UjqCMQaNhSL2ZjpOppfW4JoJ02lX+I9jm+02oGSPm6TUYDjl5I7Mlx3Yq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWnYKpY9FBJ+jATQtIFmklvdVadPTiBRD9onqfbNVn1&#xA;ZmKGwdhi03CbPNLzsNhWnbMJynYoaLexOBNLHeXj8CEnsSRT9eKQAgza3BNSu/zH9cjRbeMO+qT/&#xA;AMv4jGivGF0MtzZTrKh4OOncEeByUJygbCJRjMUWUaXrMV+xj4GOVV5EdQRWhofpzc6fVDJtVF1G&#xA;fTHHv0THMtxnYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq4gEEEVB2IxIt&#xA;WM+ZdKure0mvrG59JIVBa3KKwO+5DHcZrNRpAAZRdnpNQJSEZC76sLOuax/v/wD4RP6ZrnbeDDua&#xA;/Tes/wDLR/wif0xXwodzv01rX/LR/wAIv9MU+FDuaOta1/y0/wDCL/TFfCh3NHWdbptc7+6LgXwo&#xA;dyHPmHXUNGn3/wBVf6YGfgQPRG6Hc6xrOqw2RuhH6nImQoGoFBY0G3hluHF4khFq1HBigZU9K0vS&#xA;bewjAUmScqFkmbYt9A2GbrDp44+XN57PqJZDvyR2XtDsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirHfzDuLu28l6rPZkC5SIGMsKivNQdj7Zj6r+7Ll6EA5o28uGq08ujVm&#xA;j+L0PVaIfz0+z8uW2aN6Lh9VMV0vzV5i/ScP19Y3tJ3EbRovEx8zQEHrsfGuFvljFbMn8zarLpWn&#xA;CW3jEt1K4igVvshiCeTU7ADA0448RYzo/mrzBHfwpqfpzWsziNmVQrRljQHYDavXC2yxitmS+aNU&#xA;n0vTRJbIHupnEUIboCQSWPyAwNWOPEUl8r65q13enT9VCSGVWeCdFCkMu5UgADpiWycQBYZT5Nv7&#xA;xfzH02wiAFt6Uz3DEbkmKTio+XGuZGi/vB+Ojh9oD9xI+773tGbx5l2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpD58Xl5R1JfGMf8TXMbV/3RcvQf30Xk7Qj/B5Xt6f&#xA;/MzNFez0f+USJLVRNCadJY/+JjI23nkn3m2ENFZg/wC/j/ybbJSLRgPNj0lqoCmn7af8SGRtyGRe&#xA;bIQ8NoD/AL9P/EGyUi4+A7lLNEtlXWbUgb/vP+TbYAWzJ9JZN5NiH/KxLV+4jf8A5NSZlaI/vR8f&#xA;ucPX/wCLn4feHsOb15l2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;pb5jjhl0O8SZVeNo/iVwCp3HUHKNT/dlyNKSMkaedmGyMH1crH6FOPpbcePhTpmhd/Zu1FNN0dGV&#xA;kt7dWUgqwRKgjoQaY7JM5eatPDZTpwnWKVQahXCsK+NDigEjkojTtGRlYW9urAgqQiAgjpTbHZPF&#xA;LzVp4bK4QJOscqA1CuFYV8aHFAJHJTistNhcSQRQRP05IqK1D2qKY7JMpHnaP8mxWreZ7eXijTBZ&#xA;AslAWA4N0PXvmRov70NGvJ8E/B6Xm9eedirsVdiqxJoXZkR1Z02dQQSPmMAkDySYkc1+FDsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdiq15EjXk7BVHc7ZGUgBZSIk7BT+vWf8Av5PvGV+PDvDP&#xA;wZ9yC1qWC40e8VHDfBvxPvlefJGWOVG23TxMckbDAVsEYhV5EnoB/tZpKd74ip+iJP5H+7+zHhR4&#xA;q19MKCrq6jxP+1jSjKsFjGSACxJ6D/MY0nxCv/RT1p6cnzpt+rGkeK5tM4CrK4Hif9rGl8VX8m28&#xA;cfmGBwTssnX/AFDmRoh+9Hxa9fK8R+DPzqWnjrcR/wDBDNv48O8Oj8GfcW49RsZHEaXEbO2yqGFT&#xA;khmgTQIQcMwLIKIyxrS/XNTFhZF1/v5PghX/ACvH6Mx9Tm8OPm5Gmw+JLy6sOsNUk06/iuiS0bHh&#xA;cD+ZTvX5jrmow5jjnfzdvlwjJAx+TP45EkjWRGDI4DKw6EHcHN8DYsOhIINFdhQ7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FUFrH+8R/1hmJrf7tyNL9aQ5p3ZNsz+hNEpA9ZeBJFaCoOTjMgEd6&#xA;DGyD3IODT/SlWT1OXGu1KdRTxyttM7CKflxPEgN2r0xYBTuIPWi4E0Oxr74piaKHi04RyK5krxNa&#xA;Up/HFkZoomgr4YsFGQLPAQCQG6GngcWQ2KF06yewuxcrIHIDLxK0+0pXx98ljkYGwzyyE40qSVoa&#xA;de2RQF2mV/SdrXr6i1+/LcH95H3sM/0H3M3dlRS7GiqCWJ6ADN8TTpALYFqupNqN88/+6U+CBf8A&#xA;JHU/Tmi1GbxJX06O8wYfDjXXql90tYT7UOUFyIc2R+S9Z5IdNmb4kq1uT3HVl+jqM2Wgz/wH4Ou7&#xA;Q09esfFlebN1bsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQ2owST2pSMVaoIHTpmPqcZnCg3&#xA;YJiMrLGb65hsZvRum9OWgbjQtsfdajNNkgYGpc3a4xxi48kP+mNO/wB/f8K39MhYZ+FLuabVtNYU&#xA;Mu3+q/8ATBYT4Uu5v9Mad/v7/hW/phsI8KXc0NZ00iomqP8AVb+mDiCfBl3O/S+nf79/4Vv6Y2F8&#xA;KXc1+l9P/wB+/wDCt/TGwvhS7lp1Ww/37/wrf0xsL4UljanYn/dv/Ct/TG0+HJTbULM9JPwb+mNs&#xA;vDkmuj6Xey3FreKg+rchIJCRuAfCtfwzN02nmZCVbOHqM8QDHqiPN2qlUGmwN+8l3nI/ZTw+nL9d&#xA;nocA+LVocFnjPTkxtQFAA6Dpmrdk068kZfEEYqEDBPLBMk0TcZIyGVh4jBGRibDdKIkKL0zSdSi1&#xA;GxjuU2JFJE/lcdRnQ4coyRBDzmfCccjEozLWl2KuxV2KuxV2KuxV2KuxV2KrZJY4l5yMFXxORlMR&#xA;FlMYkmgo/pCy/wB/LlX5nH3tngz7ldHV1DIQyncEZdGQIsNZBGxU5bq3iYLJIFY70OQnljHYllHH&#xA;KXILVvrRmCrKpY7AZEaiBNApOGQ6K+XNaQeZI9MubR5uStdQ0CMNyRXdT7b5rtWcco3fqDsNJ4kZ&#xA;V/CWG3d1ptmgkvJYbdGPFXmZEBPgC1N81dO1FnkrenDSvFada0HTGkWVC0uNMvIzJaSw3ManizxM&#xA;rgN4EqTvjSTxDm09xpaXSWjzQrdyDlHbl1EjDfcJXkemNL6qtfctY20LT3LxwQp9qWRgiippuxIG&#xA;NKCS1AlrPGk8ZV45FqjI3JCD0IYdcaUyI2WQTaXcSywwTRSywHjNHG4ZkPSjAGq9O+NJJkEHeXNn&#xA;aTJFcTxxPKeMKyOqlz4KCRU79sjTZHcJpoNlDe6vb20wJicsXA2qFUtT6aZdpsYnkAPJo1OQwxkj&#xA;m9Bvru30zTzJxCpEoWKMbVPRVGbvLkGOF9zoscDknXewJ3llleeY8ppTyc/wzRSkSbPN3gAAocg0&#xA;dxsfpyKXKCAATU9ziqXTAI7A7AHIlvG4TjytrP6PvhHK1LW4IWSvRW/Zb+uZWjz8EqPIuJrdP4kb&#xA;H1B6Fm9dA7FXYq7FXYq7FXYq7FXYq7FUv1v/AHkT/jIP1HMLX/QPf+tytJ9XwSSu9Ppr2zUuxRdt&#xA;qVxbx+mgVlrUcgdvuIzIxaqUBQaMmCMjZULid5pWlf7TdhlWTIZmy2QgIigsBIII6jcZAFkjm1m7&#xA;ZCtEFRTkAa/rpmWdbMitnHGljdpReNW3kA7de3cZhuXHm888/wBnHdfUEkXkq+saHx+AYCadhpuq&#xA;eNxXy+FPe14j/kXjbSB6/ik3kGyjtYLxI1ChmQkD5EYg226k7hB6xYxv50t7kr+8Wa3AbvsV/rgt&#xA;lD+7+acedrZLjRhE45KZkND7AnCS1af6kR5ShEPl+0iUUVPUAHt6jYhGf6yx/wAl2SQa7dSKtGki&#xA;k5Hx/eqcALfqPpDvPdhHc6nbM68ikJ417fGTiSumOxZ15T28wWtf+LP+TbZkaL+9Hx+5wNb/AHR+&#xA;H3phr2q/X7kBKi3i2jB7nuxyeqz+JLbkGnTYOAb8ylmYrktVP8p/D+uKtcm/lP4YqhZraSRy3EUP&#xA;Y+2AhsjIBb9Um8B9+Ck8YZv5V1aW4gFlcA+vAvwSdeSDbf3GbnRZ+IcJ5h02twCJ4hyKf5nOA7FX&#xA;Yq7FXYq7FXYq7FXYqo3dqlzF6bEjeoI7HKs2IZI0WzHkMDYeayeadQikaOTT+LoSrKXoQR1HTNAb&#xA;GxeiGniRYkt/xdef8sA/4M/0xtP5WPe7/F95/wAsH/Dn+mC1/Kjva/xfef8ALB/wx/5pxtfyo73f&#xA;4xu/+WH/AIY/8042v5Ud6+DzLcXky2zWnprJsX5E0pv4e2NolpxEXazWNCj1NIg0rQvETR0AOzUq&#xA;KH5DEi0Y8vCjPqcf1b6tv6fD0/fjTjiw4t7QmkaImmxyKsrTNIQSzADYCgFBiBTPJl4lO48vQz6p&#xA;HqDSupQqxh2oWT7Jr1HbGkjMRHhRGqaUmoWht2do/iDK60JBHscSGOPJwm1TT9PSys47VGLrGD8b&#xA;UqSSSTt7nEInPiNoPTPLsFhdzXKSu5kBVEalFVm5EbdemIDOeYyFO1Xy9DqM8MryvGYxxYLT4lrW&#xA;m/TEi1x5jEUm/llKeYrc+8n/ACbbMjR/3o+P3OPrP7k/D70X5qs7ePUwY14erGHcKSAWLMCafRlm&#xA;ugBPbqGrRZCYb9Ck/oJ4t/wRzDpy+Jr0F/mb7zjSeJ31df52+/Gl4lCeNowGV2I6GpwEMom1H1H/&#xA;AJj9+BnTP/KFvCmjRTqv76YuZHO5PFyo+igzd6GAGMHqXRa+ZOQjoE7zMcJ2KuxV2KuxV2KuxV2K&#xA;uxV2KsK87W8Z1KJwoDNEOR8aMRvmp149Y9zuOz5HgPvY99XHhmC5/E01tUEDY9jSuK8TYthTfc+O&#xA;K8Tvq48MV4lazgAuUPv/AAxYylsmvDFpaINQKEg9/DFW+GKu4Yq7hirTI3E8dm7YqFsSyUKybsO9&#xA;NsASa6L+GFDfl1aeYIPnJ/xBsv0f96Pj9zHWf3R+H3ozzd/x0o/+MK/8SbLtf9Y9362jQfQfeklc&#xA;wXNS/XNbs9G05766qUUhUjWnJ3PRVrTCzhAyNBiun/mlbzXiQ32mvZ28h4i49T1AK9Cy8EoPHc40&#xA;3y0xA2LN3RWQp0FNsFOMCl5BBIPUbHIN9vRfKX/KP2n/AD0/5ONm+0X90Pj97z+u/vT8PuTfMpxH&#xA;Yq7FXYqoxXlvLK8Ub8pE3Yb9K028crhmjIkA7hslilEWQrZY1uxV2KsQ1bz6bLUZ7SKzEiwMULs/&#xA;EkjrsAcwMut4ZEAcnaYezuOAkTzQn/Kyp/8AlgX/AJGH/mnK/wCUD3Nv8lD+d9iFu9cbWnE7QiEx&#xA;j0+IblXvXoPHMXPm8Q3VN2PT+EKu1Dj7ZjtrqA9MVdxGKHcRiqpaK31gVpSu1PCmKy5JlxwtLuOK&#xA;u44q7jiruOKu44q7jiruOKteXxTXofnJ/wAQbL9H/ej4/cjV/wB0fh96v5wNNTi/4wr/AMTbLtf9&#xA;Y9362nQfQff+pIRxFadzU/PMFzmM+e4lntrJCKgTk09xGxGJLkabmWIXWnobaWo6KT9wrkbcsF6h&#xA;EC1rGoYr8K7j5ZJ1vVCyk+o1etciW0cnovlH/lHrT/np/wAnWze6L+6Hx+90Gu/vT8PuTfMpxHYq&#xA;7FUDq179Xg4If30uy+w7nMTV5uCNDmXI02LiNnkGPm4ktJobiPrGaEeKnqDmphkMJCQdmYCYMSyu&#xA;CeOeFJozVHFQc38JiQBDppxMTRX5JilF/wCatHsrlraZ2MqfbCKWAJ7VzHyaqETRcrHo8kxY5PON&#xA;VlS81G5uUUhJ5GdVNK0Y9802WXFInvd/hjwwA7ghBDxFApoPlkGy000peML7U+L+GLTl5o3FraCq&#xA;vQUrvgW28KuxVdHQOKkqPEdcCERyi/37J9+BaPcHcov9+yffitHuDuUX+/ZPvxWj3B3KL/fsn34r&#xA;R7gt9SMmglk2PxVqPuxtaPcF3KL/AH7J9+K0e4NF4QKmaQD54rR7nc4v9/SffitHuX+W2Q+YYKSO&#xA;xrJsen2GzI0X96Pj9zDWA+Cfh96K85tTVIv+MC/8TfL9f9Y9363H7P8AoPv/AFJAHNN9j4ZhOfSV&#xA;6/p9xfRQCDiWhk5lWNKgqV2ND45EhtxTETuksvlzVJInQLEOYK1Lnau38uR4S3DNFlkfwxqta8QB&#xA;9wyxxCgp3/et88gW2I2ej+TzXy5af89P+TrZvdF/dD4/e8/rv74/D7k5zKcR2KrZJEjRnc0VRUnI&#xA;ykIiymMSTQYxNcPdTvcN0baMeCjNDlyGcuIu4hAQjwqF0tYW9t/uystkDui/Leo+nJ9TkPwSGsRP&#xA;ZvD6czdBno8B6uNrcNjiHRkUk8EZpJIqE7gMQP15tjIDm60RJ5Bg729le6xqExAlj5j02BNDWtTt&#xA;8s0WeQMyQ7uBlHHEclX9Ead/vkfef65UnxZd6WappfCVTawtwK7hQWFfxwNuPJtuVXR7FwG+sRFR&#xA;4EEb/TijLPuTI2lqP2B95xauIoW8tQvEwoe/KlT8sWUZd6lbwM0tJEYKBU1BA+/FkTsrPBEOi4sQ&#xA;SpJEhnRabE7j6MU3sjPqcH8n4nBQY8Zd9Tg/k/E40F4ytWyhFajlU7ddsaU5Cu+pwfyficaC8Zd9&#xA;Tg/k/E40F4y76nB/J+JxoLxl31O3/k/E40F4y76nb/yficaC8ZUNLFva6qLg0T0/VIYk0rwYD8cs&#xA;00hHID7/ALk6i5Y6933tXLtfyia7JkkC8Qem1SafDTxxnklM2UQiICooe806E2cphVhMFJQqzE1H&#xA;gK5WWyGQ2LY4LbVyQAlzv/xW4/hkd3M4oeTLY9HsRGoZGJAAJLvUn78nTgHLK2p9GsmgkCIwcqeJ&#xA;DvUGm3U40kZTbEPqGpf75uf+RUn9MhTn8ce8M90ma5stNt7aORlVE3U0J5N8Tdf8onMmGecRQOzq&#xA;c2OM5EkIwanfA19U/cP6ZP8ANZO9q/Lw7mQ5u3VpHrt4ZXFlGfhHxTkfgM1euzWeAfF2GkxUOM/B&#xA;AAACg6DMBymmHJSviKYEhKwWVgQaMDsR2IyDkIfU7iS6vHnkNXYKD9CgZbPIZmyjFAQjQROiCnrf&#xA;7H+ORY5eiaUPKtdqUp2wtS1CzCpBX/JNMCldhQtdEYgsKlTUYEguOFVKXnx+CnL36YGQpSkxSFGH&#xA;/ehK+P8ADFJ5Jhha1qliWBWgHQ+OBJXYUOxV2KuxV2KuxVKpvtv/AKx/XkBzcgcl8S1YNU7du2SY&#xA;EotMWBVVxYriCRQGh8cVbVQK0FKmp+eFS3ih2KuBJG4ofDFLIr+7Frbs/VztGvixzeajN4cb6upw&#xA;4+OVdGOAGpZjV2NXbxJzRu2b6imKHKKADw8cUpNeF0uJFU0AOw+e+RpvidkPQnc9e+LJrlKpKxsy&#xA;Fh9tTT9WKpNLJq8blGvbgEf8WN/XFyRwHoFn1jVf+W24/wCRj/1xpNR7g19Y1b/lun/5GP8A1xpa&#xA;h3B31jV/+W6f/kY//NWNLUO4Nevq/wDy2zf8jH/rjS1DuDRn1in+9kx/56P/AFxpNQ7goNfaoCQ1&#xA;zNUdf3jf1wMuCPcEf5fur2TWLZZZpHQlqqzMR9k9icIas8YiBoM4yTrnYq7FXYq7FXYq7FWhWm4A&#xA;PtvgVj+uvIljcNGxVwRRlND9sdxkHLwjcWxgX2pDpcyj/Zt/XC5nBHuDf6R1T/lqm/5GN/XFHBHu&#xA;Dv0lqv8Ay1z/APIx/wCuNr4ce4KyXWssKm8nH/PR/wCuFiYw7gu+sax/y3T/APIx/wCuNIqHcG/r&#xA;Grf8t0//ACMf/mrGlqHcG/rGq/8ALbcf8jH/AK40tR7gzjyHpepcJb3UHeWGVQLZZmLnY1LgNWmb&#xA;PRYP4pD3On7Rzx2jHmOdI7ULtprg+p8HDZUPUZi6jKZy32pGHGIx2Q3NP5h9+Y7dTXNf5hitIS4v&#xA;3jlKKAwFN/nv44sxC0BK7SyM7fabFsApTo3iPu/twJaKuAaEV+R/rinZAylpiGYCo22xBbRsoonJ&#xA;mXiRTucbZFf6GFFtGA1FDQDqPHFeJv0MVt3oYrajLZpICVpyG39hwFkJ0qaFFx1e3NOhb/iJwBGY&#xA;+gszoa5N17eKuxVaysxUq1ADU964EgrsKGqb174q3irsVY/rS1s7ge4/4mMrcvFzDGjCSaAU98XL&#xA;tv0cUWibeyBAdht2GEBhKaI9Dev4ZJhxN+hitu9DFbd6GK29S0cU0ixHhbxf8QGb/D9EfcHms/8A&#xA;eS95S/XI4zcoSoqU3NB4nNdrwOMe5zNITwlLfSh/kX7hmDTlcRQ80tnE/FkqetABtjTMWUuupo+b&#xA;SKKJ2A7YGyIKG+tw+/3YLZ8Bd9bi9/uxteAu+txU718MNrwFRhUEHcE+2AM5L+AyTG3cBitu4Dpi&#xA;tu4DFbdwGK24RgdBitpDr019baddT2Epgu4xWKVeoPIeNe2RHNviAdiy/wApatPq/l2x1CdQtxKh&#xA;EwGw9SNjG5A7VZa5Nwc0OGRDzLzf52803mt3UGlXbWNhZyNDGI6BnZDxZ2ahO56DpT3xtz8OniIg&#xA;kWSzP8t/NGo63p1zBqdGv7FlWSYAL6iSAlGIFBX4T0xcXVYRAiuRQ/5j+btR0WO303RwEvrpS7Tk&#xA;A+nGDSqqairGvXAy02ETsy5ME03zx530u7S5uL1r+2BHr28tGBXvQ0BU+4w25ctNCQqqe3WlzFdW&#xA;sN1CaxTossZP8rgMPwOLqZCjTxjXvPXm7U9Tln028ax0+NitrFHQclU7Mxoalvuxt2uPTQiNxZej&#xA;fl/5mutd0VnvlC39o/o3BUUD7Aq9BsOVe3fFwdTiEJbcixvXta1ObzzHpcMhj063B+sxin7yR42c&#xA;VP8Ak1XbIdHLxQHBfVMeGRW3cMVtHwoPST5DJhpkd1/AYUW7gMVtxTcbbdzgW3cBhW3pGlf8cuz/&#xA;AOMEf/EBm/w/RH3B57P9cveUv1z/AHoj/wBT+JzX6/6h7nL0n0lLAymtDWmxzActKtVkjhmLyuI0&#xA;egVmIAJp0FcW7HuEHICbcgHnUVB8e+Atg5oLi3gfuyDatPKmw+/FLsVV7VlDMCaV6VyQYTCJFD0N&#xA;flha3HiOpp88Vb44q1xNT4dsVb44VaHE9DWnWmBUk1qPlY3K+IP68i5EOYT7yIgTytZqOzT/APJ+&#xA;TJhxdV/eH8dHml1bA312adbmf/k62Qt2ceQ9zLfyzRYbjVydhxtif+SuSBcPWC+H4/oQf5ixLL5h&#xA;tW6j6mKH/nq2AlnpPoPvYxLaL6T7fsn9WC3KD17y0KeXNKHhZ24/5JLkw6fN9Z95ePWlqv1aLb9k&#xA;ZC3cnmz38sohHFqYApWWP/iGSi4Gt5hKr6IHz1eP39Qf9Qy5Elvh/dj8dU1dX4nh9rtXAwDkBK/F&#xA;9obHFSmUK/uk+QyYaJc1/HCh3HFXccVdxxV6Hpf/ABzLT/jDH/xAZv8AD9EfcHn831y95S3Xf96I&#xA;/wDU/ic1+v8AqHuczR/Sfelu2YLlsM/M2MSWOnqR0uT/AMm2yMi5mj5n3L/LdV0W2UkkgON/AO1M&#xA;QnN9RR1y37hvo/XiWEeaXhq17U23yDc3XFXd6128MVRVial/oyQa8iJZFYUYVwsLXUwodTFXUxVo&#xA;Ko6Cld9sCpTe21xcxzQW8ZlmeoSMFQTTfqxUfjkaciMgNyyDyvZXVlodvbXUfpToZS8dQ1OcrMN1&#xA;JHRsmOTiZ5CUyQwu58qeYvrdyUsWkRppXR1khAKu5YH4nU9D3GQ4S50dRChv97IPJOi6np8t/JfW&#xA;/oCcQrGpZGJ9Pny+wzD9sYYhxtVljKqKH85aBq99qsF1ZW/1iJYPScK6KVYOW6OybGvbGQZ6bNGM&#xA;SCeqQv5T8ysjAac9SCBWW3/6qZHhLkfmMff970TR7WW00mytZaerBbxRSU3HJECmh+YywOsySuRP&#xA;m86i8oeZYo1iOnsxQceSywUNO4rID+GV8JdmdTj7/vZX5J0fUdOhvDew+g08imOMsrGirSp4Fh+O&#xA;TiHD1WSMiKSm/wBMv18zXN76JNo7hhMGSg/dCPda8vtDwyB5uRCY4AOqJxQ7FUwgoYU+QyYaJc1S&#xA;mFDqYq6mKupir0DTP+Obaf8AGGP/AIiM3+H6I+4OgzfXL3lK9fYC5j3/AGP4nNfr/qHuc3R/Sfel&#xA;att8TAn22zAcukp8x6Gus20MQuPq7wSeoj8eYPwlSCtV8fHARbdhy8BurSqHydqUEZjh1kRo25Cw&#xA;EfSKynBwtx1MTzj9v7ExuY0ikMVSyqAKt1Ow60yTXE3ugplT0SwTgwORIbIndC8sDY7ka+2KrllZ&#xA;TVSQfEYqQjbCZ5A4Y140pX3rhDTkFIvCwaLKDSu/WnfFabxV2KqOl/8AHVT5v/xE4I82eT6GR5Nw&#xA;3VFQO56Ypdih2KuBJFSKHwxStaNWKk1qu4pgUFdhQ7FUl1L+6m+f/G2VlyodEowN60OrEgHdeuK0&#xA;mUVfRWmxp1yYaJc1TFCySIPT4iKeGNJBpcSBSvfpihvFWf6Z/wAc20/4wx/8RGdBh+iPuDoM31n3&#xA;lIvNPD65FyiZz6fUV/mPhmt7Q+se52Gh+k79Ul/df8s7/jmA52/e791/yzv+OK797v3P/LO344rv&#xA;3qMsCO3JY5E8QBX9eG0g+aAnUVaNq7GngcWwISSJUQsWJ9sFNglahzGBnTXPFaVba8eEkrQhuoPt&#xA;iGMoWmlhPLdK5EZJQivEEjfJBonERRJt5eVTC/IdDwb+mLC3elN/vp/+Ab+mK2GjHMB/dSH5I39M&#xA;V2W6XaXQv1leJkReRJYEdQR3+eAc2WSQ4aT7JuK7FXYq7FXYq7FXYqtDNyNQOHZq4EpRfKZI5Qm5&#xA;JqPoNcg5MNkr+r3H++n/AOBOBu4g76tcf76f/gTivEEZB6gjCtG4I2+yf6ZIFqkN1Sjfyt/wJ/ph&#xA;Yt8W/lb7jiruD/yn7jiruD/yn7sUM30i+tHsbaMSqJVRYzGxAbkop0ObzT5omIF706XPikJE1sk/&#xA;mdxJfII5aFEo4G9DUnMHXkGYruc3RCobjqkxWYEUlJr16bZg05tjub4S/wC/j92NIsdzXpyVJ9Zt&#xA;8aWx3N8Jf9/H7saWx3JVdQyG4Y8uW9anbBbfE7IOfkyMnRsLOKEkiYLViAPmcFNgKnz98Cad6mKa&#xA;TXQ9agsPVWZGZZKEFKEgivYkeOEFozYTLkybTtTtr+JpIKjiaMrChH3E5IFw8mMxO6K6bnC1uBBF&#xA;QajxGKXYodirsVcdxTFWkTgoWpanc9cCSbbwocQD1xV2KuxVAXYAmNO4GQLfDkoZFm4mgrirgagG&#xA;lK9jiriQASeg64q5WDAEbg9MVdirSc+Px0B9sVK4Eg1GxHQ4UKk1rqKM/O3lZwTyopNT8++XyxTv&#xA;cFqjkgeoW/V7wdYJP+Ab+mDw5dxTxx7w16F3/viX/gG/pj4cu4rxx7w70rv/AHxL/wAi3/pj4cu4&#xA;rxx7x82vTuv+WeX/AJFv/TB4cu4/JeKPePmgpbTUHkZhazUPT9239MicUu4twyQA5j5pfPYamJWP&#xA;1SanWvpt0+7JDHLuLYMsO8Ia4stSaMgWsx/2Df0wGB7mcckb5hCfUNT/AOWSb/kW/wDTBwHubPEh&#xA;3h31DU/+WSb/AJFv/THgPcviQ7w0LHVN62cw8P3bf0wcB7l8SHeGV+UbK9itJmmgePm44clIJAHg&#xA;cmIS7nB1WSJIop80LspUo1Dsdjh8OXc43GO9qO3ZF4qjAfI4+HLuUzB6rvSk/kb7jjwS7ivEO9p7&#xA;e5I+FWBr1Kk7Y+HLuKice9d6E3++2+44fDl3FHGO9r0Zv99v/wACf6Y+HLuK8Y73elN/vt/+BP8A&#xA;THw5dxTxDvd6U3++3/4E/wBMfDl3FeId7vSm/wB9v/wJ/pj4cu4rxDvaMM9RRGA7/CcHhy7ivHHv&#xA;d6cv++3/AOBb+mPhy7ivEO8IK6t7lpSwhk47CvFv6ZE45dxbYTjXMKP1a4/30/8AwJyPhy7iz449&#xA;6m1neGQMFcKOq8Tj4cu4svEjXNU+rXH++n/4E4+HLuLHjj3u+rXH++n/AOBOPhy7ivHHvd9WuP8A&#xA;fT/8CcfDl3FeOPe19Vuag+m9PDif6Y+HLuK+JHvDf1a4/wB9P/wJx8OXcV44966Oyu5HCJC5ZjQf&#xA;CclHDMmgCiWWIFkv/9k="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:f2b29506-bb3a-4358-9973-eb49c6d09137"
    stRef:documentID="xmp.did:f2b29506-bb3a-4358-9973-eb49c6d09137"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:df1b4794-538b-41ca-abb3-652f1acab45d"
      stEvt:when="2022-12-22T12:47:07+02:00"
      stEvt:softwareAgent="Adobe Illustrator 27.0 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:f2b29506-bb3a-4358-9973-eb49c6d09137"
      stEvt:when="2022-12-22T13:34:36+02:00"
      stEvt:softwareAgent="Adobe Illustrator 27.0 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:71d17b0b-9e6e-0a41-a608-15452d7c3218"
      stEvt:when="2023-02-17T18:08:11+02:00"
      stEvt:softwareAgent="Adobe Illustrator 25.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="841.265710"
    stDim:h="812.098500"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="29"
         xmpG:blue="27"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="29"
         xmpG:blue="27"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                        
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -812.099 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 812.099 li
841.266 812.099 li
841.266 0 li
cp
clp
33.0371 812.098 mo
5.46281 812.098 li
2.44572 812.098 0 809.653 0 806.635 cv
0 793.172 li
0 790.155 2.44572 787.709 5.46281 787.709 cv
5.58727 787.709 li
8.60436 787.709 11.0507 785.263 11.0507 782.246 cv
11.0507 635.21 li
11.0507 634.416 10.8813 633.662 10.5768 632.981 cv
86.1796 635.102 li
86.1796 643.543 li
86.1796 646.472 83.8057 648.846 80.8769 648.846 cv
112.737 648.846 li
112.737 648.846 li
65.8603 648.846 li
62.9321 648.846 60.5576 651.22 60.5576 654.149 cv
60.5576 676.194 li
60.5576 679.123 62.9321 681.496 65.8603 681.496 cv
69.1015 681.496 li
68.9416 682.477 68.8584 683.483 68.8584 684.508 cv
68.8584 718.958 li
68.8584 718.958 li
68.8584 720.743 70.3051 722.19 72.0893 722.19 cv
102.76 722.19 li
104.544 722.19 105.991 720.743 105.991 718.958 cv
105.991 714.147 li
106.499 714.147 li
109.428 714.147 111.802 716.521 111.802 719.45 cv
111.802 735.758 li
11.0507 735.758 li
11.0507 742.638 li
111.925 742.638 li
112.448 745.017 114.568 746.797 117.104 746.797 cv
132.121 746.797 li
134.325 746.797 136.216 748.143 137.016 750.057 cv
137.023 751.601 li
11.0507 751.601 li
11.0507 758.481 li
137.056 758.481 li
137.098 767.445 li
91.7689 767.445 li
91.6584 766.698 90.9312 766.006 89.473 766.006 cv
89.473 766.006 84.9418 766.006 85.9907 767.445 cv
11.0507 767.445 li
11.0507 774.324 li
137.131 774.324 li
137.25 799.462 li
137.25 804.609 133.159 808.824 128.014 808.976 cv
33.0371 812.098 li
24.1633 804.333 mo
21.3124 804.333 18.1604 809.033 22.7857 809.533 cv
22.7857 809.533 22.9943 809.547 23.3206 809.547 cv
24.9114 809.547 29.3052 809.209 26.0332 805.245 cv
25.4988 804.597 24.8392 804.333 24.1633 804.333 cv
45.0847 776.561 mo
43.4951 776.561 39.0976 776.898 42.3706 780.864 cv
42.9051 781.511 43.5644 781.776 44.2405 781.776 cv
47.0911 781.776 50.2425 777.076 45.6181 776.576 cv
45.6181 776.576 45.4103 776.561 45.0847 776.561 cv
97.7655 760.284 mo
97.7655 760.284 92.662 760.284 95.9097 762.912 cv
96.4462 763.347 96.9591 763.523 97.413 763.523 cv
99.2438 763.524 100.12 760.656 97.7655 760.284 cv
30.1174 719.479 mo
29.6628 719.479 26.2372 719.542 27.0259 721.426 cv
27.5805 722.75 28.5917 723.237 29.6557 723.238 cv
31.1399 723.238 32.7271 722.29 33.3227 721.342 cv
33.9182 720.394 33.5219 719.446 31.0399 719.446 cv
30.7733 719.446 30.4829 719.457 30.1668 719.48 cv
30.1668 719.48 30.1495 719.479 30.1174 719.479 cv
61.3165 700.181 mo
60.8904 700.181 60.2005 700.375 60.0439 701.585 cv
59.9934 701.975 60.2453 702.127 60.6252 702.127 cv
61.2978 702.127 62.3719 701.651 62.8805 701.175 cv
63.3893 700.699 63.3323 700.224 61.7443 700.224 cv
61.7165 700.224 61.6884 700.224 61.6596 700.224 cv
61.6596 700.224 61.5174 700.181 61.3165 700.181 cv
33.4467 679.204 mo
32.9906 679.204 29.5665 679.302 30.3553 682.261 cv
30.9099 684.342 31.9212 685.108 32.9854 685.108 cv
34.4696 685.108 36.0566 683.619 36.6521 682.129 cv
37.2476 680.64 36.8511 679.151 34.3692 679.151 cv
34.1027 679.151 33.8125 679.168 33.4965 679.204 cv
33.4965 679.204 33.479 679.204 33.4467 679.204 cv
63.9209 637.545 mo
63.9209 637.545 58.8174 637.545 62.0655 640.174 cv
62.6021 640.609 63.1148 640.785 63.5687 640.785 cv
65.3994 640.785 66.2751 637.917 63.9209 637.545 cv
5.71823 629.748 mo
5.71749 629.748 5.717 629.748 5.71626 629.748 cv
5.71694 629.748 5.71755 629.748 5.71823 629.748 cv
5.66777 629.747 mo
5.66631 629.747 5.66458 629.747 5.66312 629.747 cv
5.6646 629.747 5.66629 629.747 5.66777 629.747 cv
5.63945 629.747 mo
5.63909 629.747 5.63896 629.747 5.63859 629.747 cv
5.63886 629.747 5.63918 629.747 5.63945 629.747 cv
5.61628 629.747 mo
5.61425 629.747 5.61254 629.747 5.61052 629.747 cv
5.61242 629.747 5.61438 629.747 5.61628 629.747 cv
86.1796 629.746 mo
5.58727 629.746 li
5.58727 629.746 li
5.46281 629.746 li
2.44572 629.746 0 627.301 0 624.284 cv
0 622.608 .754798 621.108 1.9428 620.106 cv
7.13667 615.726 10.9882 609.966 14.5844 604.203 cv
83.7114 493.426 li
84.5676 492.054 85.9944 491.368 87.4213 491.368 cv
88.7927 491.368 90.1642 492.001 91.0288 493.269 cv
90.1679 492.007 88.8069 491.384 87.4427 491.384 cv
87.0169 491.384 86.591 491.445 86.1796 491.565 cv
86.1825 491.565 86.2088 491.561 86.2559 491.561 cv
86.7337 491.561 89.3549 491.928 91.455 499.698 cv
93.2602 506.379 106.169 573.214 111.802 602.507 cv
111.802 610.893 li
111.802 613.822 109.428 616.196 106.499 616.196 cv
91.4824 616.196 li
90.638 616.196 89.8395 616.393 89.1309 616.744 cv
46.455 617.764 li
87.7176 617.764 li
86.7669 618.722 86.1796 620.042 86.1796 621.498 cv
86.1796 629.746 li
82.1685 501.777 mo
17.0044 606.203 li
48.8744 564.096 li
82.1685 501.777 li
58.6108 597.074 mo
58.6108 597.074 53.5077 597.074 56.7554 599.703 cv
57.2918 600.137 57.8046 600.313 58.2584 600.313 cv
60.0896 600.313 60.9657 597.445 58.6108 597.074 cv
80.7479 581.352 mo
79.1579 581.352 74.7609 581.689 78.0342 585.654 cv
78.5686 586.301 79.2279 586.566 79.904 586.566 cv
82.7546 586.566 85.906 581.866 81.2817 581.366 cv
81.2817 581.366 81.0737 581.352 80.7479 581.352 cv
89.564 532.084 mo
89.564 532.084 84.4605 532.084 87.7084 534.713 cv
88.245 535.148 88.7577 535.324 89.2116 535.324 cv
91.0425 535.324 91.9182 532.456 89.564 532.084 cv
91.039 493.284 mo
91.0369 493.281 91.0348 493.278 91.0328 493.275 cv
91.0349 493.278 91.0369 493.281 91.039 493.284 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .85098 .658824 ]
/C1 [.952941 .745098 .564706 ]
/N 4.97729 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8N#srr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrVc]nrVc]nrVc]nrVc]nrVc]nrVc]mr;?Kjr;?Kjr;?Kj
r;?Hhqtp9fqtp9fqtp6dqYL'bqYL'aq>'j^q>'j]q"XXZq"XUXp\4FVp@e4Rp@e1Pp%A"Mo^qeJoCMSF
~>
<~g"=s0f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f[na,f@SX+f@SX+f@SX+f@SX+f%/F'f%/F'f%/F'f%&=$e^`4#e^`4"eC<!teC<!se'ldpe'lan
daHRldF$@hdEp7ed*U+bcd0n^cHa\Zc-=JVbfn8RbK@uMaiVZGaN2EB`l?$;`Pod6_o'@._83t'^q[Xu
~>
<~W2HPkVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVP^5fVP^5fVP^5fVP^5fVP^5fV5:#bV5:#bV5:#bV50o_Unjf^Unjf]USFTZUSFTYU8"BV
U8"?TTqS0RTV.sNTV.pLT:_aISt;OESXl=AS=H+=S"#n9R[TY4R@'A/Q^=&)QBmf$Q'@MsPEV/mOcb`e
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
111.925 742.638 mo
11.0507 742.638 li
11.0507 735.758 li
111.802 735.758 li
111.802 741.494 li
111.802 741.887 111.844 742.27 111.925 742.638 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~qS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm
`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm_iX`4OSZkVqSSEk_iX]3OSQeUq8/6h_N4N0O86YRq8&*e_2e<+
NqgDLpqMg`^Q&!%NVC/GpUuO[]o2TsMY=]?ot-(R\qp!gL\/'2o<sDF[=n+WKCQ:"nZdZ7YCQ)DIdX7a
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j]q"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXYp\4FVp\4FVp\4FVp\4FUp@e4R
p@e4Rp@e4Rp@e4Rp%A"Np%A"No^qeJo^qeJoCMSFoCMSFo()ABo()ABnaZ/>nF5r:nF5r:n*f`6mdBN2
~>
<~_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'@._SX1,_SX1,
_SX1,_SX1,_SX1,_SX1,_SX1+_83t(_83t(_83t(_83t'^qdb$^qdb#^V@Ou^V@Ot^:q=q^:q=p]tM+m
]tM+m]Y(ni]Y(ni]=Y\e]=Y\e]"5Ja\[f5[\$riU[^NWQ[C*EM['[0GZEgdAZEga?Yct=7Y-+n/XK8J'
~>
<~OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>NaO,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?^NfK-[NfK-[NfK-ZNK&pWNK&pWNK&pVN/W^SN/W^SN/W^SN/W^R
Mi3LOMi3LOMMd:KM2@(GM2@(GLkpkCLPLY?L5(G;L5(G;KnY25K7ef/JqAT+JUrB'J:N0#It)orI=6Kj
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
137.056 758.481 mo
11.0507 758.481 li
11.0507 751.601 li
137.023 751.601 li
137.056 758.481 li
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
137.131 774.324 mo
11.0507 774.324 li
11.0507 767.445 li
85.9907 767.445 li
86.2253 767.766 86.7392 768.16 87.6454 768.642 cv
88.4809 769.087 89.2064 769.267 89.8062 769.267 cv
91.1829 769.267 91.8983 768.318 91.7689 767.445 cv
137.098 767.445 li
137.131 774.324 li
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
99.9189 720.333 mo
74.9301 720.333 li
73.4761 720.333 72.2974 719.155 72.2974 717.701 cv
72.2974 689.632 li
72.2974 686.637 73.1677 683.846 74.6695 681.496 cv
80.8769 681.496 li
83.8057 681.496 86.1796 683.871 86.1796 686.799 cv
86.1796 708.844 li
86.1796 711.773 88.5537 714.147 91.4824 714.147 cv
102.552 714.147 li
102.552 717.701 li
102.552 719.155 101.373 720.333 99.9189 720.333 cv
level3{
gsave
clp
[3.22791e-15 -52.7159 52.7159 3.22791e-15 87.4245 720.776 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.847059 .509804 .341176 ]
/C1 [.847059 .509804 .341176 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.847059 .509804 .341176 ]
/C1 [.690196 .321569 .219608 ]
/N 2.06553 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.690196 .321569 .219608 ]
/C1 [.690196 .321569 .219608 ]
/N 1 
>>
]
/Bounds [1.89999e-07 .998385 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.22791e-15 -52.7159 52.7159 3.22791e-15 87.4245 720.776 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~f[na,f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX*f%/F'f%/F'f%/F'f%/F'e^`4#
e^`4#e^`4#e^W*ueC<!teC<!te'ldpe'ldpe'landaHRldaHRkdF$@hdF$=fd*U.dd*U+bcd0q`cd'h]
cHa_[c-=MXc-4DUbfn;SbKJ)PbK@uMb0%iJaiVZGaN2HDaN)?Aa2Z-=`l?!:`Pog7`5KU3_o'C0_SX1,
_83t(^qdb$^V@Ou^:q=q]tM+m]Y(ni]=Y\d]"5J`\[f5[\@B#W\$i`R[^ENN['[3HZa7!DZEga?Z*:I:
~>
<~Jq8K(JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'J:N0#J:N0#J:N0#J:N0"It)rtIt)rt
It)rsIXZ`pIXZ`pIXQWmI=6NlI=6KjI!g<hI!g9fH[C*dH[:!aH?sm`H$O[\H$OXZG^+IXGB\7TGB\4R
G'8%OF`hhLFEDVHFE;MEF)uABEcQ2?EH,u;E,]c7Df9Q4DJj?0D/F-,Ci!p(CMR^#C2.KtBk_9pBP;$k
B4kggAn>ObARo=^@q0"X@U`eT@:<PO?sd8J?=$rD?!U]?>[(E:>$>'3=]ed.='&I(<`W4#<)cgq;c6Lk
~>
<~=&r@&<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`N."<E3%!<E3%!<E3%!
<E3%!<)cgr<)cgr<)cgr<)cgq;c?Un;c?Un;c?Um;GpCj;GpCj;Gp@h;,L1f;,L1f:f'tb:f'tb:esk_
:JXb^:JOY[:/4PZ:/+GW9he>V9MA,R9MA,Q91qoN91qlL8kM]J8P)KF8P)HD84Z9B7n6'>7n6$<7Rfj:
77BX6779O36psC06UO4-6:+"*5s[e&5sR\#5X7Ou5<h=q5!D.n4Ztqj4?P_g4$,Mc3]];_3B9)[3&ilW
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
102.76 722.19 mo
72.0893 722.19 li
70.3051 722.19 68.8584 720.743 68.8584 718.958 cv
68.8584 684.508 li
68.8584 683.483 68.9416 682.477 69.1015 681.496 cv
74.6695 681.496 li
73.1677 683.846 72.2974 686.637 72.2974 689.632 cv
72.2974 717.701 li
72.2974 719.155 73.4761 720.333 74.9301 720.333 cv
99.9189 720.333 li
101.373 720.333 102.552 719.155 102.552 717.701 cv
102.552 714.147 li
105.991 714.147 li
105.991 718.958 li
105.991 720.743 104.544 722.19 102.76 722.19 cv
level3{
gsave
clp
[3.22791e-15 -52.7159 52.7159 3.22791e-15 87.4245 720.776 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ
@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<
42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`*tgH@QMG:3lGJg`*k^E@62;73l>Ae_dGOB?ol/33l55a_-]4=
?TGo/35Ai[^g/q7>r]T(35/WW^0EV1>;s3!2S<3O]3.&(=Z3lp27cmI\Q:Vu<]%<e1q-I@[T#&k;_kaY
1:0q7ZV`H_:bf4N0X4D,YYHjT9J<PB0!.buX@b(F8M$l4/#c#hW(&;774P0&.A]B\Ud?K)5UW6j-_NXM
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~TKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q
4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd
-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OL
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 .998385 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.22791e-15 -52.7159 52.7159 3.22791e-15 87.4245 720.776 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5BL1_o'C0_o'C0_o'C0_o'C0_ns:-_SX1,_SX1,
_SX1,_SO()_83t(_83t(_83q&^qdb$^qd_"^V@Ou^V@Ou^V@Ls^:q=q^:q:o]tM+m]tM(k]Y(kg]=Y\e
]=YYc]"5Ja]"5Ja]"5G_\[f8\\@B&Y\@B&X\$riT[^NWP[C*EM[C*EL['[3HZa7!DZEgd@Z*CR<Yct@9
Yct@8YHP.4Y-+q0Xf\_,XK8M(X/i;%WiE)!WMukrW2QYnVl-DhV5:#bV5:#bUnjf^USFTZU8"?TTV.sN
~>
<~@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:3JN?smAM?smAM?smAM
?sd8J?XI/I?XI,G?=$rE?=$rE?=$rE?=$rE?=$oC?!U]?>[1N=>[1K;>?b<9>?b<9>?b97>$>*5>$>'3
=]nj/=BJ[-=BJ[-=BJX+='&I(<`W7$<E3%!<E3$u<)cgq;c?Um;GpCi;,L1f;,L1e:f'ta:JXb]:/4PZ
:/4PY9h\5R91qoN91qoM8kM]I8P)KF84Z9B7n6'>7Rfj:77BX66psF26UO4.6:+"*5s[b$5<h@s5<h=q
~>
<~3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]T2\3B9)[3B9)[3B9)[3B9)[3B9)[3B9)[
3B9)[3B9)[3B9)[3B9&Y3&ilW3&ilW3&iiU2`EZS2`EZS2`EZS2`EZS2`EZS2`EWQ2E!HO2E!EM2)R6K
2)R6K2)R6K2)R3I1c.$G1c.$F1G^gC1G^gC1G^gB1,:U?1,:U>0ekC;0ekC;0ekC:0JG170JG160/"t2
/hSb//hSb//hSb./M/P*/1`>'/1`>'.k<,#.Olnt.Olnt.Olnt.4H\p-n$Jl-n$Jl-RU8h-71&d-71&d
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
10.5768 632.981 mo
10.5659 632.981 li
9.72875 631.115 7.88367 629.799 5.71823 629.748 cv
7.88536 629.799 9.74063 631.112 10.5768 632.981 cv
5.71626 629.748 mo
5.70008 629.748 5.68399 629.747 5.66777 629.747 cv
5.68392 629.747 5.70015 629.748 5.71626 629.748 cv
5.66312 629.747 mo
5.65514 629.747 5.64744 629.747 5.63945 629.747 cv
5.64735 629.747 5.65522 629.747 5.66312 629.747 cv
5.63859 629.747 mo
5.63115 629.747 5.62373 629.747 5.61628 629.747 cv
5.62363 629.747 5.63124 629.747 5.63859 629.747 cv
5.61052 629.747 mo
5.6028 629.747 5.595 629.746 5.58727 629.746 cv
5.58727 629.746 li
5.59501 629.746 5.60279 629.747 5.61052 629.747 cv
.980392 .901961 .862745 rgb
f
168.348 812.098 mo
33.0371 812.098 li
128.014 808.976 li
133.159 808.824 137.25 804.609 137.25 799.462 cv
137.131 774.324 li
137.426 774.324 li
137.52 777.169 139.857 779.448 142.726 779.448 cv
157.743 779.448 li
160.671 779.448 163.045 781.822 163.045 784.75 cv
163.045 806.795 li
163.045 809.724 165.419 812.098 168.348 812.098 cv
137.423 767.445 mo
137.098 767.445 li
137.056 758.481 li
137.423 758.481 li
137.423 767.445 li
137.4 751.601 mo
137.023 751.601 li
137.016 750.057 li
137.217 750.54 137.35 751.059 137.4 751.601 cv
86.1796 635.102 mo
10.5768 632.981 li
9.74063 631.112 7.88536 629.799 5.71823 629.748 cv
5.71755 629.748 5.71694 629.748 5.71626 629.748 cv
5.70015 629.748 5.68392 629.747 5.66777 629.747 cv
5.66629 629.747 5.6646 629.747 5.66312 629.747 cv
5.65522 629.747 5.64735 629.747 5.63945 629.747 cv
5.63918 629.747 5.63886 629.747 5.63859 629.747 cv
5.63124 629.747 5.62363 629.747 5.61628 629.747 cv
5.61438 629.747 5.61242 629.747 5.61052 629.747 cv
5.60279 629.747 5.59501 629.746 5.58727 629.746 cv
86.1796 629.746 li
86.1796 635.102 li
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
137.423 758.481 mo
137.056 758.481 li
137.023 751.601 li
137.4 751.601 li
137.415 751.765 137.423 751.932 137.423 752.1 cv
137.423 758.481 li
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~os&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<
Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Y^H,JI.a^korri:Y^H)II.XXjoWNZ7YC#oFHh=LgoWEQ5Y']cB
Hh4@co;m90XEsH<HLe+^nu@!+Wd+'6GO_\Wn>UU#W-.R+FRQ&Jm\FsmUN5aqEU9B<m%A:_So3h`D<[L)
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
o^qeJo^qeJo^qeIoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSEo()ABo()ABo()ABo()AAnaZ/>
naZ/>naZ/>naZ/>nF5r:nF5r:n*f`6n*f`6mdBN2mdBN2mHs<.mHs<.m-O**lg*m&lg*m&lK[["l07Hs
~>
<~Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct=7YHP.5YHP.5
YHP.5YHP.5YHP.5YHP.5YHP.4Y-+q1Y-+q1Y-+q1Y-+q0Xf\_-Xf\_,XK8M)XK8M(X/i;%X/i;$WiE)!
WiE)!WMukrWMukrWMukrWMukrW2QYnVl-DhV5:#bUnjf^USFTZU8"?TTV.sNTV.sNT:_^HSXl:@S"#k8
~>
<~I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g9fH[C*dH[C*d
H[C*dH[C*dH[C*dH[C*dH[C*dH[C*cH?sm`H?sm`H?sm`H?sm`H?sm`H?sm_H$O[\H$O[\H$O[\H$O[[
G^+IXG^+IXGB\7TG'8%PG'8%PF`hhLFEDVHF)uDDF)uDDF)uABEH,u<E,]c8Df9Q4DJj?0D/F-,Ci!m&
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
137.426 774.324 mo
137.131 774.324 li
137.098 767.445 li
137.423 767.445 li
137.423 774.146 li
137.423 774.206 137.424 774.265 137.426 774.324 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
91.1313 493.426 mo
91.1012 493.378 91.0705 493.331 91.039 493.284 cv
91.0705 493.331 91.1012 493.378 91.1313 493.426 cv
91.0328 493.275 mo
91.0315 493.273 91.0301 493.271 91.0288 493.269 cv
91.0301 493.271 91.0314 493.273 91.0328 493.275 cv
.980392 .901961 .862745 rgb
f
87.7176 617.764 mo
46.455 617.764 li
89.1309 616.744 li
88.6042 617.005 88.1272 617.351 87.7176 617.764 cv
111.802 602.507 mo
106.169 573.214 93.2602 506.379 91.455 499.698 cv
89.3549 491.928 86.7337 491.561 86.2559 491.561 cv
86.2088 491.561 86.1825 491.565 86.1796 491.565 cv
86.591 491.445 87.0169 491.384 87.4427 491.384 cv
88.8069 491.384 90.1679 492.007 91.0288 493.269 cv
91.0301 493.271 91.0315 493.273 91.0328 493.275 cv
91.0348 493.278 91.0369 493.281 91.039 493.284 cv
91.0705 493.331 91.1012 493.378 91.1313 493.426 cv
91.1313 493.426 li
137.423 567.628 li
137.423 578.242 li
137.423 581.171 135.049 583.545 132.121 583.545 cv
117.104 583.545 li
114.176 583.545 111.802 585.919 111.802 588.847 cv
111.802 602.507 li
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
17.0044 606.203 mo
82.1685 501.777 li
48.8744 564.096 li
17.0044 606.203 li
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
91.7689 767.445 mo
85.9907 767.445 li
84.9418 766.006 89.473 766.006 89.473 766.006 cv
90.9312 766.006 91.6584 766.698 91.7689 767.445 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
89.8062 769.267 mo
89.2064 769.267 88.4809 769.087 87.6454 768.642 cv
86.7392 768.16 86.2253 767.766 85.9907 767.445 cv
91.7689 767.445 li
91.8983 768.318 91.1829 769.267 89.8062 769.267 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
44.2405 781.776 mo
43.5644 781.776 42.9051 781.511 42.3706 780.864 cv
39.0976 776.898 43.4951 776.561 45.0847 776.561 cv
45.4103 776.561 45.6181 776.576 45.6181 776.576 cv
50.2425 777.076 47.0911 781.776 44.2405 781.776 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
97.413 763.523 mo
96.9591 763.523 96.4462 763.347 95.9097 762.912 cv
92.662 760.284 97.7655 760.284 97.7655 760.284 cv
100.12 760.656 99.2438 763.524 97.413 763.523 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
63.5687 640.785 mo
63.1148 640.785 62.6021 640.609 62.0655 640.174 cv
58.8174 637.545 63.9209 637.545 63.9209 637.545 cv
66.2751 637.917 65.3994 640.785 63.5687 640.785 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
89.2116 535.324 mo
88.7577 535.324 88.245 535.148 87.7084 534.713 cv
84.4605 532.084 89.564 532.084 89.564 532.084 cv
91.9182 532.456 91.0425 535.324 89.2116 535.324 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
60.6252 702.127 mo
60.2453 702.127 59.9934 701.975 60.0439 701.585 cv
60.2005 700.375 60.8904 700.181 61.3165 700.181 cv
61.5174 700.181 61.6596 700.224 61.6596 700.224 cv
61.6884 700.224 61.7165 700.224 61.7443 700.224 cv
63.3323 700.224 63.3893 700.699 62.8805 701.175 cv
62.3719 701.651 61.2978 702.127 60.6252 702.127 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
29.6557 723.238 mo
28.5917 723.237 27.5805 722.75 27.0259 721.426 cv
26.2372 719.542 29.6628 719.479 30.1174 719.479 cv
30.1495 719.479 30.1668 719.48 30.1668 719.48 cv
30.4829 719.457 30.7733 719.446 31.0399 719.446 cv
33.5219 719.446 33.9182 720.394 33.3227 721.342 cv
32.7271 722.29 31.1399 723.238 29.6557 723.238 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
32.9854 685.108 mo
31.9212 685.108 30.9099 684.342 30.3553 682.261 cv
29.5665 679.302 32.9906 679.204 33.4467 679.204 cv
33.479 679.204 33.4965 679.204 33.4965 679.204 cv
33.8125 679.168 34.1027 679.151 34.3692 679.151 cv
36.8511 679.151 37.2476 680.64 36.6521 682.129 cv
36.0566 683.619 34.4696 685.108 32.9854 685.108 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
79.904 586.566 mo
79.2279 586.566 78.5686 586.301 78.0342 585.654 cv
74.7609 581.689 79.1579 581.352 80.7479 581.352 cv
81.0737 581.352 81.2817 581.366 81.2817 581.366 cv
85.906 581.866 82.7546 586.566 79.904 586.566 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
58.2584 600.313 mo
57.8046 600.313 57.2918 600.137 56.7554 599.703 cv
53.5077 597.074 58.6108 597.074 58.6108 597.074 cv
60.9657 597.445 60.0896 600.313 58.2584 600.313 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
23.3206 809.547 mo
22.9943 809.547 22.7857 809.533 22.7857 809.533 cv
18.1604 809.033 21.3124 804.333 24.1633 804.333 cv
24.8392 804.333 25.4988 804.597 26.0332 805.245 cv
29.3052 809.209 24.9114 809.547 23.3206 809.547 cv
level3{
gsave
clp
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.75889e-14 287.249 -287.249 1.75889e-14 87.412 521.827 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
178.969 648.846 mo
112.737 648.846 li
80.8769 648.846 li
83.8057 648.846 86.1796 646.472 86.1796 643.543 cv
86.1796 635.102 li
86.1796 629.746 li
86.1796 621.498 li
86.1796 620.042 86.7669 618.722 87.7176 617.764 cv
88.1272 617.351 88.6042 617.005 89.1309 616.744 cv
89.8395 616.393 90.638 616.196 91.4824 616.196 cv
106.499 616.196 li
109.428 616.196 111.802 613.822 111.802 610.893 cv
111.802 602.507 li
111.802 588.847 li
111.802 585.919 114.176 583.545 117.104 583.545 cv
132.121 583.545 li
135.049 583.545 137.423 581.171 137.423 578.242 cv
137.423 567.628 li
137.423 556.197 li
137.423 553.269 139.797 550.895 142.726 550.895 cv
157.743 550.895 li
160.671 550.895 163.045 548.521 163.045 545.591 cv
163.045 523.546 li
163.045 520.618 165.419 518.244 168.348 518.244 cv
183.365 518.244 li
186.293 518.244 188.667 515.87 188.667 512.941 cv
188.667 490.896 li
188.667 487.968 191.041 485.594 193.97 485.594 cv
247.533 485.594 li
247.533 516.857 li
195.6 518.108 li
247.533 518.208 li
247.533 549.264 li
239.609 549.557 li
226.66 549.557 li
223.334 549.557 220.638 546.862 220.638 543.535 cv
220.638 538.095 li
220.638 534.77 217.942 532.074 214.616 532.074 cv
177.329 532.074 li
174.004 532.074 171.308 534.77 171.308 538.095 cv
171.308 575.382 li
171.308 578.708 174.004 581.404 177.329 581.404 cv
183.131 581.404 li
183.175 585.197 li
183.214 588.647 li
183.245 591.318 li
183.273 593.818 184.885 595.986 187.238 596.827 cv
191.754 598.445 194.985 602.761 194.985 607.834 cv
194.985 614.575 li
128.848 616.196 li
179.1 616.196 li
181.971 616.196 184.299 618.545 184.272 621.416 cv
184.272 621.498 li
184.272 643.543 li
184.272 646.472 181.897 648.846 178.969 648.846 cv
150.257 639.311 mo
149.935 639.311 149.413 639.415 149.294 640.062 cv
149.256 640.27 149.447 640.352 149.734 640.352 cv
150.243 640.352 151.055 640.097 151.439 639.843 cv
151.823 639.588 151.78 639.334 150.578 639.334 cv
150.558 639.334 150.537 639.334 150.516 639.334 cv
150.516 639.334 150.408 639.311 150.257 639.311 cv
163.9 605.568 mo
163.9 605.568 160.015 606.05 162.515 608.075 cv
162.96 608.435 163.429 608.583 163.868 608.583 cv
165.737 608.583 167.083 605.912 163.9 605.568 cv
172.189 594.316 mo
170.326 594.316 165.173 594.711 169.008 599.357 cv
169.635 600.116 170.407 600.425 171.199 600.425 cv
174.54 600.425 178.233 594.918 172.814 594.332 cv
172.814 594.332 172.57 594.316 172.189 594.316 cv
130.705 591.848 mo
130.449 591.848 128.516 591.895 128.96 593.346 cv
129.273 594.366 129.843 594.741 130.444 594.741 cv
131.281 594.741 132.176 594.011 132.512 593.281 cv
132.848 592.552 132.625 591.822 131.225 591.822 cv
131.075 591.822 130.911 591.83 130.732 591.848 cv
130.732 591.848 130.723 591.848 130.705 591.848 cv
168.074 542.264 mo
168.074 542.264 164.145 542.264 166.645 544.289 cv
167.058 544.623 167.453 544.759 167.802 544.759 cv
169.212 544.759 169.886 542.55 168.074 542.264 cv
237.844 536.829 mo
237.494 536.829 234.856 536.904 235.464 539.183 cv
235.891 540.785 236.67 541.375 237.489 541.375 cv
238.632 541.375 239.854 540.228 240.312 539.082 cv
240.771 537.935 240.465 536.788 238.554 536.788 cv
238.349 536.788 238.126 536.802 237.882 536.829 cv
237.882 536.829 237.869 536.829 237.844 536.829 cv
212.359 498.992 mo
209.019 498.992 205.326 504.499 210.745 505.085 cv
210.745 505.085 210.989 505.102 211.371 505.102 cv
213.234 505.102 218.385 504.707 214.55 500.061 cv
213.924 499.302 213.151 498.992 212.359 498.992 cv
219.69 490.835 mo
217.821 490.835 216.476 493.506 219.659 493.85 cv
219.659 493.85 223.544 493.368 221.044 491.344 cv
220.598 490.983 220.129 490.835 219.69 490.835 cv
level3{
gsave
clp
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.952941 .745098 .564706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.901961 .603922 .458824 ]
/N 2.33779 
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~oCDJCo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()>@naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/=nF5r:nF5r:nF5r:
nF5r:nF5r:nF,i7n*f`6n*f`6n*f`6n*f`5mdBN2mdBN2mdBN2mdBN1mHs<.mHs<.mHs<.m-O**m-O**
m-O**m-F!'lg*m&lg*m&lK[["lK[["lK[[!l07Hsl07Hsl0.?pkih6okih6nkND$kkND$kk2tggk2tgg
~>
<~^:h4n]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]Y(ni]Y(ni
]Y(ni]Y(ni]Y(nh]=Y\e]=Y\e]=Y\e]=PSb]"5Ja]"5Ja]",A^\[f8]\[f8\\@B&Y\@B&X\$riU\$riU
[^NWQ[^NWP[C*EM[C*BK['[3I['R*FZa7!DZEgdAZE^[>Z*CO;Yct@8YHP.5YHG%2Y-"h.Xf\\+XK8M(
X/i;$WiE)!WMukrW2QYnVl-GjVP^5fV5:#bUnjf]USFTYU8"?TTqS-PTV%jKT:VXGSXl=AS=H(<S!oe7
~>
<~OH5H`O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?^
NfK-[NfK-[NfK-[NfK-[NfK-[NfB$XNK&pWNK&pWNK&pWNJrgTN/W^SN/W^SN/W[QMi3LOMi3LOMi*CL
MMd:KMMd:JM2@(GM2@(GLkpkCLkpkCLkgb@LPLY?LPCP<L5(G;KnY57KnY56KS5#3KS+o0K7ef/JqAT+
JqAQ)JUrB'J:N0#J:E&uIt)rsIXZ`pI=6NlI=-EiI!g9fH[C'bH?sm_H$O[\G^+IXGB\7TG'8%PF`hhL
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
194.985 648.846 mo
192.802 648.846 li
178.969 648.846 li
181.897 648.846 184.272 646.472 184.272 643.543 cv
184.272 621.498 li
184.272 621.416 li
184.299 618.545 181.971 616.196 179.1 616.196 cv
128.848 616.196 li
194.985 614.575 li
194.985 648.846 li
246.463 549.557 mo
239.609 549.557 li
247.533 549.264 li
247.533 549.462 li
247.185 549.525 246.828 549.557 246.463 549.557 cv
247.533 518.208 mo
195.6 518.108 li
247.533 516.857 li
247.533 518.208 li
level3{
gsave
clp
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
/6 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9
I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I.""^m](X%WdF06Hg[n\mAbO#WdF-5HgRh[mAbO#
WI+$3HgReYmAP?uW-[g.HL.PTm&,-qVKqO*GjM8Ol_SgkUj)."GO)#IlCrIeU35apFm>ZBlCi=aTQKFj
FQoB<kacbXST<qaET`g1kF-AQR;_5TDW[=(k*KuIQ>P`KCupmsjHF?>P%s$=C#b7fif@d4Nb@=0B&SYZ
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
mHs9,m-O**m-O**m-O**m-O**m-O**m-O**m-O**m-O**m-O**m-O'(lg*m&lg*m&lg*m&lg*m&lg*m&
lg*m%lK[["lK[["lK[["lK[[!l07Hsl07Hsl07Hsl07Hsl07Hrkih6okih6okih6nkND$kkND$kkND$j
k2tggk2tggk2tggjlPUcjlPUcjlPUcjQ,C_jQ,C_jQ,C_j5]1[j5]1[io8tWio8tWiSibSiSibSi8EPO
~>
<~WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!Wi;tsWMukrWMukrWMukrWMukr
WMukrWMukrWMukrWMukrWMukrWMuhpW2QYnW2QYnW2QVlVl-GjVl-DhVP^5fVP^5fVP^2dV5:#bV59u`
Unjf^Unjf]USFTYU8"BVU8"BUTqS0RTqS0QTV.sNTV.sNTV.sMT:_aISt;OESXl=AS=H+>S=H+=S"#n9
R[T\6R@0J2R$a8.Q^=&*Q^=&*QBmi&Q'IW"Pa%DsPEV2oP*1ukOcb`eO,o?_NfK-[NfK-[NK&mUMi3LO
~>
<~H[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[:!aH?sm`H?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sj^H$O[\H$O[\H$O[\H$OXZG^+IXG^+IXG^+FVGB\7T
GB\7SG'8%PG'8%PG'8%OF`hhLF`hhKFEDVHFEDVGF)uDDF)uDDF)uDDF)uDCEcQ2?EH,u<EH,u;E,]c7
Df9Q4Df9Q4DJj?0D/F-,D/F-,D/F-,Ci!p(CMR^$C2.KuBk_9qBk_9qBP;'mB4kjiB4kjiAnGXeAS#Fa
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
171.199 600.425 mo
170.407 600.425 169.635 600.116 169.008 599.357 cv
165.173 594.711 170.326 594.316 172.189 594.316 cv
172.57 594.316 172.814 594.332 172.814 594.332 cv
178.233 594.918 174.54 600.425 171.199 600.425 cv
level3{
gsave
clp
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
163.868 608.583 mo
163.429 608.583 162.96 608.435 162.515 608.075 cv
160.015 606.05 163.9 605.568 163.9 605.568 cv
167.083 605.912 165.737 608.583 163.868 608.583 cv
level3{
gsave
clp
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
167.802 544.759 mo
167.453 544.759 167.058 544.623 166.645 544.289 cv
164.145 542.264 168.074 542.264 168.074 542.264 cv
169.886 542.55 169.212 544.759 167.802 544.759 cv
level3{
gsave
clp
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
237.489 541.375 mo
236.67 541.375 235.891 540.785 235.464 539.183 cv
234.856 536.904 237.494 536.829 237.844 536.829 cv
237.869 536.829 237.882 536.829 237.882 536.829 cv
238.126 536.802 238.349 536.788 238.554 536.788 cv
240.465 536.788 240.771 537.935 240.312 539.082 cv
239.854 540.228 238.632 541.375 237.489 541.375 cv
level3{
gsave
clp
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
149.734 640.352 mo
149.447 640.352 149.256 640.27 149.294 640.062 cv
149.413 639.415 149.935 639.311 150.257 639.311 cv
150.408 639.311 150.516 639.334 150.516 639.334 cv
150.537 639.334 150.558 639.334 150.578 639.334 cv
151.78 639.334 151.823 639.588 151.439 639.843 cv
151.055 640.097 150.243 640.352 149.734 640.352 cv
level3{
gsave
clp
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
130.444 594.741 mo
129.843 594.741 129.273 594.366 128.96 593.346 cv
128.516 591.895 130.449 591.848 130.705 591.848 cv
130.723 591.848 130.732 591.848 130.732 591.848 cv
130.911 591.83 131.075 591.822 131.225 591.822 cv
132.625 591.822 132.848 592.552 132.512 593.281 cv
132.176 594.011 131.281 594.741 130.444 594.741 cv
level3{
gsave
clp
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
211.371 505.102 mo
210.989 505.102 210.745 505.085 210.745 505.085 cv
205.326 504.499 209.019 498.992 212.359 498.992 cv
213.151 498.992 213.924 499.302 214.55 500.061 cv
218.385 504.707 213.234 505.102 211.371 505.102 cv
level3{
gsave
clp
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
219.659 493.85 mo
216.476 493.506 217.821 490.835 219.69 490.835 cv
220.129 490.835 220.598 490.983 221.044 491.344 cv
223.544 493.368 219.659 493.85 219.659 493.85 cv
level3{
gsave
clp
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
389.012 605.745 mo
389.012 605.745 li
389.012 581.404 li
389.012 549.557 li
385.686 549.557 382.991 546.862 382.991 543.535 cv
382.991 538.095 li
382.991 534.77 380.294 532.074 376.969 532.074 cv
339.682 532.074 li
336.356 532.074 333.661 534.77 333.661 538.095 cv
333.661 543.535 li
333.661 546.862 330.964 549.557 327.639 549.557 cv
307.835 549.557 li
304.511 549.557 301.814 546.862 301.814 543.535 cv
301.814 538.095 li
301.814 534.77 299.119 532.074 295.792 532.074 cv
258.505 532.074 li
255.18 532.074 252.484 534.77 252.484 538.095 cv
252.484 543.535 li
252.484 546.496 250.348 548.958 247.533 549.462 cv
247.533 549.264 li
247.533 518.208 li
247.533 516.857 li
247.533 485.594 li
247.533 455.131 li
247.533 450.739 244.734 447 240.823 445.6 cv
238.785 444.871 237.389 442.992 237.364 440.828 cv
237.362 440.624 li
389.012 444.305 li
389.012 454.623 li
388.433 455.14 388.259 455.951 389.012 457.222 cv
389.012 605.745 li
326.79 545.22 mo
326.316 545.22 322.713 545.284 323.542 547.264 cv
324.125 548.655 325.187 549.168 326.305 549.168 cv
327.864 549.168 329.531 548.172 330.157 547.176 cv
330.782 546.18 330.365 545.184 327.758 545.184 cv
327.478 545.184 327.173 545.196 326.841 545.22 cv
326.841 545.22 326.823 545.22 326.79 545.22 cv
295.359 498.281 mo
293.689 498.281 289.07 498.635 292.508 502.8 cv
293.069 503.48 293.762 503.758 294.472 503.758 cv
297.467 503.758 300.778 498.821 295.919 498.296 cv
295.919 498.296 295.701 498.281 295.359 498.281 cv
280.692 490.687 mo
280.692 490.687 275.332 490.687 278.744 493.449 cv
279.307 493.905 279.846 494.091 280.323 494.091 cv
282.246 494.091 283.166 491.078 280.692 490.687 cv
303.407 491.368 mo
302.959 491.368 302.235 491.571 302.07 492.842 cv
302.017 493.251 302.282 493.411 302.681 493.411 cv
303.388 493.411 304.516 492.911 305.05 492.412 cv
305.585 491.912 305.525 491.412 303.856 491.412 cv
303.827 491.412 303.798 491.413 303.768 491.413 cv
303.768 491.413 303.618 491.368 303.407 491.368 cv
375.883 483.272 mo
375.407 483.272 371.806 483.374 372.635 486.484 cv
373.218 488.669 374.28 489.474 375.398 489.474 cv
376.957 489.474 378.624 487.91 379.25 486.345 cv
379.875 484.781 379.459 483.216 376.852 483.216 cv
376.572 483.216 376.267 483.234 375.935 483.272 cv
375.935 483.272 375.917 483.272 375.883 483.272 cv
314.541 453.751 mo
314.541 453.751 306.907 453.751 310.805 458.137 cv
312.03 459.516 313.224 460.05 314.262 460.05 cv
317.83 460.05 319.574 453.751 314.541 453.751 cv
351.253 443.842 mo
351.253 443.842 345.893 443.842 349.304 446.603 cv
349.868 447.06 350.407 447.245 350.883 447.245 cv
352.807 447.245 353.726 444.233 351.253 443.842 cv
237.285 433.821 mo
237.267 432.241 li
237.285 433.821 li
level3{
gsave
clp
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
/7 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.952941 .745098 .564706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.901961 .603922 .458824 ]
/N 4.97729 
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
clp
/7 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~oCDJCo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()ABo'u8?naZ/>naZ/>naZ/>naZ/>naZ/>nF5r:nF5r:nF5r:nF5r9
n*f`6n*f`6n*f`5mdBN2mdBN2mHs<.mHs<.m-O**m-O*)lg*m&lg!d#lK[Wul07Hrkih6okND$kk2tgg
~>
<~^:h4n]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m
]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tD"j
]Y(ni]Y(ni]Y(ni]Y(ni]=Y\e]=Y\e]=Y\e]"5Ja]"5Ja]",A^\[f8]\[]/Z\@B&X\$riU\$i`R[^NTO
[C*BK['[0GZa6sCZEga?Z*:I:YHP.4Y-+n/XfSV)X/i8#WMuhpVl-DhV59u`USFQXTqS-OT:VXFS=H(;
~>
<~OH5H`O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,f6\NfK-[NfK-[NfK-[NfK-[NK&pWNK&pWNK&pWNJrgTN/W^SN/W^RMi3LOMi3LNMMd:KMMd7I
M2@(GLkpkCLkgb@LPLV=L5(D9KnY25KS4u1K7ec-Jq8K(J:N0"It)orI=6NkI!g9fH?sj^G^+IWGBS.P
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /7 /Gradient get_res exec grestore
}if
np
237.362 440.624 mo
237.362 440.624 li
237.285 433.821 li
237.362 440.624 li
.980392 .901961 .862745 rgb
f
389.012 444.305 mo
237.362 440.624 li
237.285 433.821 li
237.267 432.241 li
269.749 432.241 li
297.331 432.241 li
340.054 432.241 li
367.635 432.241 li
389.012 432.241 li
389.012 444.305 li
level3{
gsave
clp
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
/8 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9
I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I.""^m]([&WdF06Hg[n\m](X$WdF-5HgRh[mAbO#WI+$3HgReZmAP?tW-[g.
H0hGSm&#$oV0M=%GO)&Kl_AXgU35apFQoH?l(<(^Soa+cET`g1kF$8NQu;#OD<7!ujH=9<O(dO5BAnb[
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
clp
/8 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
mHs<.mHs<-m-O**m-O**m-O**m-O**m-O**m-O**m-O**m-O*)lg*m&lg*m&lg*m&lg*m&lg*m%lK[["
lK[["lK[["l07Hsl07Hskih6okih6okih6okND$kk2tggk2tggjlPUcjQ,C_jQ,C_j5]1[io8tWiSibS
~>
<~WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!
WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE%tWMukrWMukrWMukrWMukr
WMukrWMukrWMukrWMukrWMukrWMukqW2QYnW2QYnW2QYmVl-GjVl-GiVP^5fVP^5eV5:#aUnjf]USFTZ
USFTZU8"BVTqS0RTV.sNT:_aJSt;OFSXl:@S"#n:R[TY4R$a8.Q^=#(Q'ISuPEV/mOcb`dNfK-[NK&mT
~>
<~H[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*d
H[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C'bH?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm_H$O[\H$O[[G^+IXG^+IWGB\7TGB\7SG'8%P
G'8%PF`hhLFEDVHF)uDDF)uDDF)uDDEcQ/>E,]c8Df9Q4DJj?0D/F-,Ci!p(CMR["Bk_6oB4kjiAnGUc
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /8 /Gradient get_res exec grestore
}if
np
389.012 432.241 mo
367.635 432.241 li
340.054 432.241 li
297.331 432.241 li
269.749 432.241 li
237.267 432.241 li
236.848 432.241 li
231.423 432.241 227.026 427.844 227.026 422.419 cv
227.026 394.732 li
227.026 391.853 229.361 389.518 232.241 389.518 cv
264.535 389.518 li
267.414 389.518 269.749 391.853 269.749 394.733 cv
269.749 399.445 li
269.749 402.325 272.084 404.66 274.964 404.66 cv
292.116 404.66 li
294.996 404.66 297.331 402.325 297.331 399.445 cv
297.331 394.732 li
297.331 391.853 299.665 389.518 302.545 389.518 cv
334.838 389.518 li
337.719 389.518 340.054 391.853 340.054 394.733 cv
340.054 399.445 li
340.054 402.325 342.389 404.66 345.269 404.66 cv
362.42 404.66 li
365.3 404.66 367.635 402.325 367.635 399.445 cv
367.635 394.732 li
367.635 391.853 369.97 389.518 372.85 389.518 cv
389.012 389.518 li
389.012 432.241 li
376.313 414.241 mo
376.313 414.241 369.186 414.241 374.394 417.011 cv
375.271 417.477 376.033 417.666 376.663 417.666 cv
379.345 417.666 379.639 414.241 376.313 414.241 cv
250.09 412.984 mo
249.74 412.984 247.104 413.049 247.711 415.028 cv
248.138 416.419 248.916 416.931 249.735 416.931 cv
250.877 416.931 252.099 415.936 252.557 414.94 cv
253.015 413.944 252.71 412.948 250.8 412.948 cv
250.595 412.948 250.371 412.96 250.128 412.984 cv
250.128 412.984 250.115 412.984 250.09 412.984 cv
311.335 413.52 mo
310.896 413.52 310.185 413.662 310.023 414.544 cv
309.971 414.829 310.231 414.94 310.623 414.94 cv
311.317 414.94 312.424 414.593 312.948 414.245 cv
313.473 413.898 313.414 413.551 311.778 413.551 cv
311.749 413.551 311.719 413.551 311.689 413.552 cv
311.689 413.552 311.543 413.52 311.335 413.52 cv
385.024 408.23 mo
385.024 408.23 379.663 408.23 383.075 410.992 cv
383.639 411.448 384.177 411.633 384.654 411.633 cv
386.577 411.633 387.498 408.621 385.024 408.23 cv
level3{
gsave
clp
[-308.685 3.78029e-14 -3.7803e-14 -308.685 539.536 410.879 ]ct
/9 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.952941 .745098 .564706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .85098 .658824 ]
/C1 [.952941 .745098 .564706 ]
/N 4.97729 
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-308.685 3.78029e-14 -3.7803e-14 -308.685 539.536 410.879 ]ct
clp
/9 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~oCMSFoCV\Io^qhLp%A"Op@e4Rp@n=Up\4FWq"XXZq"X[\q>'j^q>'m`qYL'bqYL'cqtp9fqtp9fqtp9g
r;?Kjr;?Kjr;?Kjr;?NlrVc]nrVc]nrVc]nrVc]nrVc]nrVlfqrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
~>
<~^:q@s^qde&_8=(,_o0L4`Poj:`lH-@aN2KFai_cKbKJ)Qbfn;Uc-=MYcHa_]cd0qad*U.ddF$@hdF-Ik
daHRme'ldpe'lgreC<!teC<%!e^`4#e^`4#f%/F'f%/F'f%/F'f%8O*f@SX+f@SX+f@SX+f@SX+f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
~>
<~OH>QdOcklkPEV5qQ'IW#QBml(Q^F/-R@0J3R[T_8S"#q<S=H.@SXl@DSt;RHT:_aKTV.sNTV8'QTqS0S
U8"BVU8"EXUSFTZUSFW\Unjf^Unjf^V5:#bV5:#bV5:#bV5C,eVP^5fVP^5fVP^5fVP^5fVPg>iVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /9 /Gradient get_res exec grestore
}if
np
294.472 503.758 mo
293.762 503.758 293.069 503.48 292.508 502.8 cv
289.07 498.635 293.689 498.281 295.359 498.281 cv
295.701 498.281 295.919 498.296 295.919 498.296 cv
300.778 498.821 297.467 503.758 294.472 503.758 cv
level3{
gsave
clp
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
280.323 494.091 mo
279.846 494.091 279.307 493.905 278.744 493.449 cv
275.332 490.687 280.692 490.687 280.692 490.687 cv
283.166 491.078 282.246 494.091 280.323 494.091 cv
level3{
gsave
clp
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
376.663 417.666 mo
376.033 417.666 375.271 417.477 374.394 417.011 cv
369.186 414.241 376.313 414.241 376.313 414.241 cv
379.639 414.241 379.345 417.666 376.663 417.666 cv
level3{
gsave
clp
[-308.685 3.78029e-14 -3.7803e-14 -308.685 539.536 410.879 ]ct
/10 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9
I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~qS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm
`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm_iX`4OSZkVqSSEk_iX]3OSQeUq8/6h_N4N0O86YRq8&*e_2e<+
NqgDLpqMg`^Q&!%NVC/GpUuO[]o2TsMY=]?ot-(R\qp!gL\/'2o<sDF[=n+WKCQ:"nZdZ7YCQ)DIdX7a
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-308.685 3.78029e-14 -3.7803e-14 -308.685 539.536 410.879 ]ct
clp
/10 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~mI'E1mdKW5n*oi9nF5r:nF?&=nac8Ao()ABo(2JEoCMSFoCV\Io^qeJo_%nMp%A"Np%J+Qp@e4Rp@e4R
p@e4Rp@e7Tp\4FVp\4FVp\4FVp\4IXq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"X[\q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
~>
<~WiN2%XKAV-Y-5%5Yd(I=ZEgdAZEpmE['d<L[C3NP[^W`T\%&rY\[oA`]">Sd]=Y\e]=beh]Y(ni]Y2"l
]tM+m]tM.o^:q=q^:q@s^V@Ou^V@S"^qdb$^qde&_83t(_83t(_83t(_84"*_SX1,_SX1,_SX1,_SX1,
_SX1,_SX1,_SX1-_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
~>
<~H[L3hI=?WpIt3'"J:W9&JV&K*JqJ].K7no3Knb>:L5(G;L51P>LPUbBLl$tFM2@(GM2I1JMMmCNMi3LO
Mi3OQN/W^SN/W^SN/W^SN/WaUNK&pWNK&pWNK&sYNfK-[NfK-[NfK0]O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?`OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /10 /Gradient get_res exec grestore
}if
np
384.654 411.633 mo
384.177 411.633 383.639 411.448 383.075 410.992 cv
379.663 408.23 385.024 408.23 385.024 408.23 cv
387.498 408.621 386.577 411.633 384.654 411.633 cv
level3{
gsave
clp
[-308.685 3.78029e-14 -3.7803e-14 -308.685 539.536 410.879 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-308.685 3.78029e-14 -3.7803e-14 -308.685 539.536 410.879 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
302.681 493.411 mo
302.282 493.411 302.017 493.251 302.07 492.842 cv
302.235 491.571 302.959 491.368 303.407 491.368 cv
303.618 491.368 303.768 491.413 303.768 491.413 cv
303.798 491.413 303.827 491.412 303.856 491.412 cv
305.525 491.412 305.585 491.912 305.05 492.412 cv
304.516 492.911 303.388 493.411 302.681 493.411 cv
level3{
gsave
clp
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
326.305 549.168 mo
325.187 549.168 324.125 548.655 323.542 547.264 cv
322.713 545.284 326.316 545.22 326.79 545.22 cv
326.823 545.22 326.841 545.22 326.841 545.22 cv
327.173 545.196 327.478 545.184 327.758 545.184 cv
330.365 545.184 330.782 546.18 330.157 547.176 cv
329.531 548.172 327.864 549.168 326.305 549.168 cv
level3{
gsave
clp
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
375.398 489.474 mo
374.28 489.474 373.218 488.669 372.635 486.484 cv
371.806 483.374 375.407 483.272 375.883 483.272 cv
375.917 483.272 375.935 483.272 375.935 483.272 cv
376.267 483.234 376.572 483.216 376.852 483.216 cv
379.459 483.216 379.875 484.781 379.25 486.345 cv
378.624 487.91 376.957 489.474 375.398 489.474 cv
level3{
gsave
clp
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
314.262 460.05 mo
313.224 460.05 312.03 459.516 310.805 458.137 cv
306.907 453.751 314.541 453.751 314.541 453.751 cv
319.574 453.751 317.83 460.05 314.262 460.05 cv
level3{
gsave
clp
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
389.012 457.222 mo
388.259 455.951 388.433 455.14 389.012 454.623 cv
389.012 457.222 li
level3{
gsave
clp
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
350.883 447.245 mo
350.407 447.245 349.868 447.06 349.304 446.603 cv
345.893 443.842 351.253 443.842 351.253 443.842 cv
353.726 444.233 352.807 447.245 350.883 447.245 cv
level3{
gsave
clp
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.61593e-15 -108.046 108.046 6.61593e-15 388.997 545.735 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
310.623 414.94 mo
310.231 414.94 309.971 414.829 310.023 414.544 cv
310.185 413.662 310.896 413.52 311.335 413.52 cv
311.543 413.52 311.689 413.552 311.689 413.552 cv
311.719 413.551 311.749 413.551 311.778 413.551 cv
313.414 413.551 313.473 413.898 312.948 414.245 cv
312.424 414.593 311.317 414.94 310.623 414.94 cv
level3{
gsave
clp
[-308.685 3.78029e-14 -3.7803e-14 -308.685 539.536 410.879 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-308.685 3.78029e-14 -3.7803e-14 -308.685 539.536 410.879 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
249.735 416.931 mo
248.916 416.931 248.138 416.419 247.711 415.028 cv
247.104 413.049 249.74 412.984 250.09 412.984 cv
250.115 412.984 250.128 412.984 250.128 412.984 cv
250.371 412.96 250.595 412.948 250.8 412.948 cv
252.71 412.948 253.015 413.944 252.557 414.94 cv
252.099 415.936 250.877 416.931 249.735 416.931 cv
level3{
gsave
clp
[-308.685 3.78029e-14 -3.7803e-14 -308.685 539.536 410.879 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-308.685 3.78029e-14 -3.7803e-14 -308.685 539.536 410.879 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
516.188 328.887 mo
506.287 328.887 li
496.386 328.887 li
493.059 328.887 490.364 326.191 490.364 322.866 cv
490.364 317.424 li
490.364 314.099 487.667 311.402 484.343 311.402 cv
447.056 311.402 li
443.73 311.402 441.034 314.099 441.034 317.424 cv
441.034 322.866 li
441.034 323.206 441.005 323.539 440.951 323.864 cv
438.724 324.065 435.691 324.92 437.683 328.263 cv
436.879 328.662 435.972 328.887 435.013 328.887 cv
415.209 328.887 li
414.268 328.887 413.378 328.671 412.584 328.286 cv
414.501 327.162 415.788 325.08 415.788 322.698 cv
415.788 202.732 li
415.788 199.157 412.889 196.258 409.313 196.258 cv
409.165 196.258 li
405.932 196.258 403.252 193.888 402.768 190.791 cv
402.801 190.791 li
402.918 191.542 403.164 192.247 403.519 192.891 cv
539.058 196.18 li
543.313 196.284 547.435 197.688 550.868 200.204 cv
563.334 209.338 li
564.335 210.072 565.452 210.614 566.593 211.101 cv
573.991 214.265 578.902 221.403 579.219 229.437 cv
579.225 268.767 li
579.15 268.267 578.773 267.825 577.985 267.701 cv
577.985 267.701 573.5 267.701 576.354 270.012 cv
576.826 270.393 577.277 270.548 577.676 270.548 cv
578.515 270.548 579.125 269.863 579.225 269.161 cv
579.228 286.559 li
521.508 286.559 li
521.718 285.864 521.191 285.257 519.33 285.257 cv
519.095 285.257 518.84 285.267 518.563 285.287 cv
518.563 285.287 518.547 285.287 518.519 285.287 cv
518.158 285.287 515.668 285.331 515.698 286.559 cv
415.788 286.559 li
415.788 298.646 li
579.229 298.646 li
579.233 320.245 li
579.317 322.376 578.569 324.376 577.252 325.898 cv
576.462 326.812 576.648 328.228 577.466 328.886 cv
574.185 328.835 571.54 326.159 571.54 322.866 cv
571.54 317.424 li
571.54 314.099 568.844 311.402 565.519 311.402 cv
528.231 311.402 li
524.906 311.402 522.21 314.099 522.21 317.424 cv
522.21 322.866 li
522.21 326.191 519.514 328.887 516.188 328.887 cv
540.176 306.757 mo
538.778 306.757 534.914 307.053 537.79 310.539 cv
538.26 311.108 538.84 311.341 539.434 311.341 cv
541.94 311.341 544.711 307.209 540.645 306.769 cv
540.645 306.769 540.462 306.757 540.176 306.757 cv
497.073 273.729 mo
497.073 273.729 492.587 273.729 495.441 276.041 cv
495.913 276.422 496.364 276.577 496.763 276.577 cv
498.373 276.578 499.143 274.056 497.073 273.729 cv
570.696 272.73 mo
570.696 272.73 564.732 272.73 569.09 275.048 cv
569.824 275.438 570.461 275.596 570.988 275.596 cv
573.233 275.596 573.479 272.73 570.696 272.73 cv
545.944 268.322 mo
545.57 268.322 544.963 268.493 544.826 269.556 cv
544.782 269.899 545.003 270.032 545.337 270.032 cv
545.929 270.032 546.873 269.614 547.32 269.196 cv
547.766 268.778 547.716 268.36 546.32 268.36 cv
546.296 268.36 546.271 268.36 546.246 268.36 cv
546.246 268.36 546.121 268.322 545.944 268.322 cv
442.989 265.217 mo
442.596 265.76 442.661 266.554 443.694 267.717 cv
444.719 268.87 445.718 269.317 446.587 269.317 cv
448.357 269.317 449.59 267.466 449.424 265.958 cv
451.463 265.958 li
451.529 266.044 451.6 266.133 451.675 266.224 cv
452.145 266.793 452.724 267.025 453.319 267.025 cv
454.145 267.025 455 266.576 455.63 265.958 cv
468.097 265.958 li
468.097 265.958 li
468.098 265.958 li
468.748 265.958 469.339 265.656 469.781 265.164 cv
470.266 264.622 470.57 263.848 470.57 262.99 cv
470.57 235.212 li
470.57 233.558 470.374 231.958 470.008 230.445 cv
472.906 230.299 474.264 225.178 470.113 225.178 cv
470.113 225.178 469.042 225.178 468.001 225.43 cv
466.605 223.044 464.713 221.106 462.505 219.833 cv
463.173 219.33 463.737 218.599 464.029 217.869 cv
464.553 216.56 464.204 215.25 462.022 215.25 cv
461.788 215.25 461.533 215.265 461.255 215.297 cv
461.255 215.297 461.24 215.297 461.212 215.297 cv
460.813 215.297 457.8 215.382 458.494 217.985 cv
458.53 218.121 458.569 218.25 458.609 218.373 cv
457.876 218.233 457.125 218.161 456.36 218.161 cv
448.512 218.161 442.15 225.795 442.15 235.212 cv
442.15 235.212 li
442.15 235.213 442.15 235.213 442.15 235.213 cv
442.15 256.176 li
442.04 256.138 441.919 256.108 441.787 256.087 cv
441.787 256.087 437.302 256.087 440.156 258.398 cv
440.628 258.78 441.079 258.935 441.478 258.935 cv
441.724 258.935 441.95 258.876 442.15 258.776 cv
442.15 262.99 li
442.15 262.99 li
442.15 262.99 li
442.15 263.877 442.474 264.674 442.989 265.217 cv
415.788 265.966 mo
415.788 265.966 li
423.386 265.966 li
424.269 265.966 424.976 264.623 424.976 262.998 cv
424.976 235.23 li
424.976 235.23 li
424.976 225.794 420.876 218.16 415.788 218.16 cv
415.788 265.966 li
544.397 265.956 mo
544.423 265.957 544.45 265.958 544.476 265.958 cv
567.951 265.958 li
567.978 265.958 568.004 265.957 568.031 265.956 cv
569.36 265.906 570.424 264.597 570.424 262.99 cv
570.424 235.213 li
570.424 230.559 568.87 226.341 566.352 223.264 cv
565 221.612 563.369 220.289 561.551 219.404 cv
561.959 217.935 561.263 216.531 558.517 216.234 cv
558.517 216.234 558.239 216.215 557.803 216.215 cv
556.234 216.215 552.621 216.46 552.592 218.719 cv
550.271 219.451 548.182 220.87 546.484 222.784 cv
546.691 222.077 546.394 221.281 545.292 221.107 cv
545.292 221.107 540.806 221.107 543.661 223.418 cv
544.132 223.8 544.583 223.955 544.982 223.955 cv
545.231 223.955 545.46 223.894 545.662 223.791 cv
543.388 226.814 542.003 230.819 542.003 235.212 cv
542.003 235.212 li
542.003 235.213 542.003 235.213 542.003 235.213 cv
542.003 262.99 li
542.003 262.99 li
542.003 262.99 li
542.003 264.597 543.068 265.906 544.397 265.956 cv
492.117 265.956 mo
492.148 265.957 492.18 265.958 492.212 265.958 cv
520.382 265.958 li
520.855 265.958 521.302 265.847 521.699 265.65 cv
521.7 265.649 521.7 265.649 521.7 265.649 cv
521.703 265.648 521.705 265.647 521.708 265.645 cv
522.681 265.158 523.349 264.152 523.349 262.99 cv
523.349 262.99 li
523.349 253.866 li
523.744 253.442 524.065 252.948 524.263 252.453 cv
524.682 251.405 524.542 250.356 523.349 249.981 cv
523.349 235.212 li
523.349 225.795 515.715 218.161 506.297 218.161 cv
504.803 218.161 503.356 218.352 501.975 218.713 cv
502.272 217.973 502.016 217.072 500.834 216.886 cv
500.834 216.886 496.349 216.886 499.204 219.197 cv
499.358 219.322 499.51 219.422 499.658 219.501 cv
493.539 222.09 489.245 228.15 489.245 235.212 cv
489.245 235.212 li
489.245 235.213 489.245 235.213 489.245 235.213 cv
489.245 262.99 li
489.245 262.99 li
489.245 262.99 li
489.245 264.597 490.522 265.906 492.117 265.956 cv
479.538 263.901 mo
479.037 263.901 478.226 264.019 478.041 264.757 cv
477.982 264.995 478.279 265.088 478.727 265.088 cv
479.519 265.088 480.784 264.798 481.383 264.508 cv
481.982 264.217 481.915 263.927 480.045 263.927 cv
480.012 263.927 479.978 263.927 479.944 263.927 cv
479.944 263.927 479.776 263.901 479.538 263.901 cv
479.145 197.835 mo
479.145 197.835 474.66 197.835 477.515 200.146 cv
477.986 200.528 478.437 200.683 478.836 200.683 cv
480.445 200.683 481.215 198.162 479.145 197.835 cv
596.787 322.111 mo
596.766 321.9 596.723 321.698 596.723 321.482 cv
596.723 298.646 li
596.787 298.646 li
596.787 322.111 li
596.787 286.559 mo
596.723 286.559 li
596.723 265.966 li
596.787 265.966 li
596.787 286.559 li
596.723 218.161 mo
596.723 202.473 li
596.793 202.441 li
596.789 202.538 596.787 202.635 596.787 202.732 cv
596.787 218.16 li
596.766 218.16 596.744 218.16 596.723 218.161 cv
603.099 196.26 mo
603.099 196.26 603.099 196.26 603.1 196.26 cv
603.099 196.26 603.099 196.26 603.099 196.26 cv
603.119 196.26 mo
603.12 196.26 603.12 196.26 603.121 196.26 cv
603.121 196.26 603.12 196.26 603.119 196.26 cv
603.139 196.259 mo
603.14 196.259 603.142 196.259 603.144 196.259 cv
603.142 196.259 603.141 196.259 603.139 196.259 cv
603.159 196.259 mo
603.161 196.259 603.164 196.259 603.167 196.259 cv
603.164 196.259 603.161 196.259 603.159 196.259 cv
603.179 196.259 mo
603.182 196.259 603.184 196.259 603.187 196.259 cv
603.184 196.259 603.182 196.259 603.179 196.259 cv
603.199 196.258 mo
603.203 196.258 603.207 196.258 603.21 196.258 cv
603.207 196.258 603.203 196.258 603.199 196.258 cv
603.22 196.258 mo
603.224 196.258 603.228 196.258 603.232 196.258 cv
603.228 196.258 603.224 196.258 603.22 196.258 cv
603.241 196.258 mo
603.247 196.258 603.254 196.258 603.261 196.258 cv
603.254 196.258 603.247 196.258 603.241 196.258 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
599.989 328.286 mo
598.073 327.162 596.787 325.08 596.787 322.698 cv
596.787 325.08 598.073 327.162 599.989 328.286 cv
599.989 328.286 li
.980392 .901961 .862745 rgb
f
597.365 328.887 mo
577.561 328.887 li
577.529 328.887 577.498 328.886 577.466 328.886 cv
576.648 328.228 576.462 326.812 577.252 325.898 cv
578.569 324.376 579.317 322.376 579.233 320.245 cv
579.229 298.646 li
596.723 298.646 li
596.723 321.482 li
596.723 321.698 596.766 321.9 596.787 322.111 cv
596.787 322.698 li
596.787 322.698 li
596.787 322.698 li
596.787 325.08 598.073 327.162 599.989 328.286 cv
599.196 328.671 598.306 328.887 597.365 328.887 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
596.793 202.441 mo
596.943 199.055 599.695 196.344 603.099 196.26 cv
599.701 196.344 596.975 199.052 596.817 202.431 cv
596.793 202.441 li
603.1 196.26 mo
603.106 196.26 603.112 196.26 603.119 196.26 cv
603.112 196.26 603.106 196.26 603.1 196.26 cv
603.121 196.26 mo
603.127 196.26 603.133 196.259 603.139 196.259 cv
603.133 196.259 603.127 196.26 603.121 196.26 cv
603.144 196.259 mo
603.149 196.259 603.154 196.259 603.159 196.259 cv
603.154 196.259 603.149 196.259 603.144 196.259 cv
603.167 196.259 mo
603.171 196.259 603.175 196.259 603.179 196.259 cv
603.175 196.259 603.171 196.259 603.167 196.259 cv
603.187 196.259 mo
603.191 196.259 603.195 196.258 603.199 196.258 cv
603.195 196.258 603.191 196.259 603.187 196.259 cv
603.21 196.258 mo
603.214 196.258 603.217 196.258 603.22 196.258 cv
603.217 196.258 603.213 196.258 603.21 196.258 cv
603.232 196.258 mo
603.235 196.258 603.238 196.258 603.241 196.258 cv
603.238 196.258 603.235 196.258 603.232 196.258 cv
.980392 .901961 .862745 rgb
f
596.723 286.559 mo
579.228 286.559 li
579.225 269.161 li
579.244 269.029 579.244 268.896 579.225 268.767 cv
579.219 229.437 li
578.902 221.403 573.991 214.265 566.593 211.101 cv
565.452 210.614 564.335 210.072 563.334 209.338 cv
550.868 200.204 li
547.435 197.688 543.313 196.284 539.058 196.18 cv
403.519 192.891 li
403.164 192.247 402.918 191.542 402.801 190.791 cv
609.805 190.791 li
609.321 193.888 606.642 196.258 603.409 196.258 cv
603.261 196.258 li
603.261 196.258 li
603.254 196.258 603.247 196.258 603.241 196.258 cv
603.238 196.258 603.235 196.258 603.232 196.258 cv
603.228 196.258 603.224 196.258 603.22 196.258 cv
603.217 196.258 603.214 196.258 603.21 196.258 cv
603.207 196.258 603.203 196.258 603.199 196.258 cv
603.195 196.258 603.191 196.259 603.187 196.259 cv
603.184 196.259 603.182 196.259 603.179 196.259 cv
603.175 196.259 603.171 196.259 603.167 196.259 cv
603.164 196.259 603.161 196.259 603.159 196.259 cv
603.154 196.259 603.149 196.259 603.144 196.259 cv
603.142 196.259 603.14 196.259 603.139 196.259 cv
603.133 196.259 603.127 196.26 603.121 196.26 cv
603.12 196.26 603.12 196.26 603.119 196.26 cv
603.112 196.26 603.106 196.26 603.1 196.26 cv
603.099 196.26 603.099 196.26 603.099 196.26 cv
599.695 196.344 596.943 199.055 596.793 202.441 cv
596.723 202.473 li
596.723 218.161 li
591.663 218.224 587.598 225.833 587.598 235.23 cv
587.598 262.998 li
587.598 262.998 li
587.598 264.623 588.305 265.966 589.188 265.966 cv
596.723 265.966 li
596.723 286.559 li
557.527 190.98 mo
556.129 190.98 552.264 191.277 555.141 194.762 cv
555.611 195.331 556.19 195.564 556.785 195.564 cv
559.291 195.564 562.061 191.432 557.996 190.993 cv
557.996 190.993 557.813 190.98 557.527 190.98 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
612.853 190.791 mo
609.805 190.791 li
402.801 190.791 li
402.768 190.791 li
399.721 190.791 li
395.401 190.791 391.899 187.288 391.899 182.969 cv
391.899 181.345 li
391.899 177.026 395.401 173.524 399.721 173.524 cv
401.547 173.524 403.329 172.913 404.729 171.741 cv
456.585 128.362 486.289 30.3509 493.11 5.70647 cv
494.046 2.32315 497.128 0 500.64 0 cv
506.287 0 li
511.934 0 li
511.934 0 li
511.934 0 li
506.287 0 li
506.287 0 514.518 1.32321 514.518 9.38022 cv
529.533 144.15 li
532 161.465 522.8 175.005 506.814 175.855 cv
468.979 177.869 li
586.022 176.393 li
586.044 176.393 586.067 176.392 586.09 176.392 cv
588.992 176.392 591.352 178.746 591.352 181.657 cv
591.352 183.742 li
591.352 186.626 589.032 188.974 586.147 189.006 cv
428.189 190.79 li
612.853 190.79 li
617.097 190.79 620.551 187.41 620.671 183.196 cv
620.551 187.41 617.097 190.791 612.853 190.791 cv
445.108 174.165 mo
444.815 174.165 442.608 174.219 443.117 175.875 cv
443.474 177.04 444.125 177.468 444.81 177.468 cv
445.766 177.468 446.788 176.635 447.172 175.802 cv
447.555 174.968 447.3 174.135 445.701 174.135 cv
445.53 174.135 445.343 174.145 445.14 174.165 cv
445.14 174.165 445.129 174.165 445.108 174.165 cv
481.082 53.1825 mo
481.076 53.1854 li
468.608 86.7196 448.953 129.849 422.24 159.743 cv
422.212 159.799 li
452.793 124.775 li
460.994 107.94 481.082 53.1825 481.082 53.1825 cv
500.045 123.91 mo
498.647 123.91 494.783 124.206 497.66 127.691 cv
498.13 128.261 498.71 128.493 499.304 128.493 cv
501.81 128.493 504.58 124.362 500.515 123.922 cv
500.515 123.922 500.332 123.91 500.045 123.91 cv
487.772 117.556 mo
487.772 117.556 483.287 117.556 486.142 119.867 cv
486.613 120.248 487.064 120.403 487.463 120.403 cv
489.072 120.404 489.842 117.882 487.772 117.556 cv
506.78 118.124 mo
506.406 118.124 505.8 118.295 505.662 119.358 cv
505.618 119.7 505.839 119.834 506.173 119.834 cv
506.765 119.834 507.709 119.416 508.156 118.998 cv
508.603 118.58 508.553 118.162 507.158 118.162 cv
507.133 118.162 507.108 118.162 507.082 118.162 cv
507.082 118.162 506.957 118.124 506.78 118.124 cv
479.988 81.5866 mo
477.744 81.5866 477.498 84.4531 480.281 84.4531 cv
480.281 84.4531 486.245 84.4531 481.887 82.1352 cv
481.153 81.7447 480.515 81.5866 479.988 81.5866 cv
620.674 181.295 mo
620.674 181.292 620.674 181.289 620.674 181.287 cv
620.674 181.289 620.674 181.292 620.674 181.295 cv
620.674 181.269 mo
620.674 181.269 620.674 181.268 620.674 181.268 cv
620.674 181.268 620.674 181.269 620.674 181.269 cv
620.674 181.244 mo
620.674 181.244 li
620.674 181.244 li
612.853 173.524 mo
612.05 173.524 611.255 173.406 610.497 173.173 cv
611.254 173.406 612.05 173.524 612.853 173.524 cv
612.866 173.524 612.878 173.524 612.89 173.524 cv
612.878 173.524 612.866 173.524 612.853 173.524 cv
607.728 171.643 mo
555.94 128.214 526.277 30.3257 519.463 5.70353 cv
519.417 5.53846 519.366 5.37619 519.311 5.21634 cv
519.367 5.37711 519.418 5.54045 519.464 5.70647 cv
526.28 30.3329 555.943 128.216 607.728 171.643 cv
level3{
gsave
clp
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
596.787 298.646 mo
596.723 298.646 li
596.723 286.559 li
596.787 286.559 li
596.787 298.646 li
579.229 298.646 mo
415.788 298.646 li
415.788 286.559 li
515.698 286.559 li
515.701 286.691 515.734 286.837 515.801 286.998 cv
516.289 288.162 517.178 288.59 518.113 288.59 cv
519.418 288.591 520.813 287.757 521.337 286.924 cv
521.413 286.801 521.471 286.679 521.508 286.559 cv
579.228 286.559 li
579.229 298.646 li
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
596.723 298.646 mo
579.229 298.646 li
579.228 286.559 li
596.723 286.559 li
596.723 298.646 li
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/11 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/V
C[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%7&l'Z;NR;1uSC?_.$ka?2LR;1rRC?V(#ka?2L
QtkiPC?V%!ka6)JQtb`MC$1grkEflFQ>#HIB]kXok*9TAP\9-BBBGCijcX6;P%Ea;A`]%bjcO*7OC[F5
AE8e]j,RU/Nah%.@H*5Sieq7)MI>D"?f?iKiJ:k"LL/qo?/^KBi.YCnKNm>c>Mk!8hLSkeJ6C]W=P\C,
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/11 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6o
kih3mkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND!ik2tggk2tggk2tggk2tggk2tgg
k2tgfjlPUcjlPUcjlPUcjlPUbjQ,C_jQ,C_jQ,C_jQ,C_jQ,C^j5]1[j5]1[j5]1Zio8tWio8tWio8tV
iSibSiSibSiSibSi8EPOi8EPOi8EPOi8EPOi8EPOi8EPOhr!>Khr!>KhVR,GhVR,Gh;-oCh;-oCgt^]?
~>
<~R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@'A/R$a8.R$a8.R$a8.R$a8.
R$a8.R$a8.R$a8.R$a8.R$a8.R$a5,Q^=&*Q^=&*Q^=&*Q^=&*Q^=#(QBmi&QBmi&QBmf$Q'IW"Q'ISu
Pa%DsPa%DrPEV2nP*1ukP*1ujOcbcgOcbcfOH>QcOH>QcOH>QbO,o?^NfK-[NfK-ZNK&pWNK&pVN/W^R
Mi3LOMMd:KM2@(GLkpkCLkpkCLPLY?L5(G;KnY57KS5#3KS5#3K7ec-JUrB'J:N0#J:N0#It)orI=6Nl
~>
<~C2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2%BrBk_9qBk_9qBk_9q
Bk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_6oBP;'mBP;'mBP;'mBP;$kB4kjiB4kjiB4kjiB4kji
B4kjhAnGXeAnGXeAnGXdAS#FaAS#F`A7T4]A7T4\@q0"Y@q0"Y@q0"Y@q0"X@U`eT@:<SQ@:<SP?smAM
?smAM?smAM?XI/I?=$rE?=$rE?=$rE?!U`A>[1N=>?b<9>$>*5>$>*5>$>*5=]nm1=]nm1=BJ[-='&I)
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /11 /Gradient get_res exec grestore
}if
np
620.674 181.345 mo
620.674 181.328 620.674 181.312 620.674 181.295 cv
620.674 181.312 620.674 181.328 620.674 181.345 cv
620.674 181.287 mo
620.674 181.281 620.674 181.275 620.674 181.269 cv
620.674 181.275 620.674 181.281 620.674 181.287 cv
620.674 181.268 mo
620.674 181.26 620.674 181.252 620.674 181.244 cv
620.674 181.252 620.674 181.26 620.674 181.268 cv
620.674 181.244 mo
620.62 176.983 617.159 173.543 612.89 173.524 cv
612.896 173.524 612.902 173.524 612.908 173.524 cv
612.925 173.524 612.942 173.524 612.959 173.524 cv
617.202 173.524 620.62 177.006 620.674 181.244 cv
610.497 173.173 mo
609.533 172.878 608.629 172.397 607.845 171.741 cv
608.629 172.397 609.532 172.877 610.497 173.173 cv
607.845 171.741 mo
607.807 171.709 607.766 171.675 607.728 171.643 cv
607.766 171.675 607.807 171.709 607.845 171.741 cv
519.311 5.21634 mo
518.224 2.10088 515.273 0 511.934 0 cv
515.275 0 518.225 2.09835 519.311 5.21634 cv
.980392 .901961 .862745 rgb
f
612.853 190.79 mo
428.189 190.79 li
586.147 189.006 li
589.032 188.974 591.352 186.626 591.352 183.742 cv
591.352 181.657 li
591.352 178.746 588.992 176.392 586.09 176.392 cv
586.067 176.392 586.044 176.393 586.022 176.393 cv
468.979 177.869 li
506.814 175.855 li
522.8 175.005 532 161.465 529.533 144.15 cv
514.518 9.38022 li
514.518 1.32321 506.287 0 506.287 0 cv
511.934 0 li
511.934 0 li
515.273 0 518.224 2.10088 519.311 5.21634 cv
519.366 5.37619 519.417 5.53846 519.463 5.70353 cv
526.277 30.3257 555.94 128.214 607.728 171.643 cv
607.766 171.675 607.807 171.709 607.845 171.741 cv
607.845 171.741 li
607.845 171.741 li
608.629 172.397 609.533 172.878 610.497 173.173 cv
611.255 173.406 612.05 173.524 612.853 173.524 cv
612.866 173.524 612.878 173.524 612.89 173.524 cv
617.159 173.543 620.62 176.983 620.674 181.244 cv
620.674 181.244 li
620.674 181.252 620.674 181.26 620.674 181.268 cv
620.674 181.268 620.674 181.269 620.674 181.269 cv
620.674 181.275 620.674 181.281 620.674 181.287 cv
620.674 181.289 620.674 181.292 620.674 181.295 cv
620.674 181.312 620.674 181.328 620.674 181.345 cv
620.674 181.345 li
620.674 182.969 li
620.674 183.045 620.673 183.121 620.671 183.196 cv
620.551 187.41 617.097 190.79 612.853 190.79 cv
545.292 153.643 mo
545.292 153.643 540.806 153.643 543.661 155.955 cv
544.132 156.336 544.583 156.491 544.982 156.491 cv
546.591 156.491 547.361 153.971 545.292 153.643 cv
541.95 107.378 mo
541.95 107.378 537.514 107.929 540.369 110.24 cv
540.877 110.652 541.412 110.82 541.914 110.82 cv
544.048 110.821 545.584 107.771 541.95 107.378 cv
536.44 99.8266 mo
534.312 99.8266 528.434 100.278 532.811 105.582 cv
533.526 106.448 534.408 106.801 535.312 106.802 cv
539.126 106.803 543.343 100.514 537.156 99.8456 cv
537.156 99.8456 536.877 99.8266 536.44 99.8266 cv
level3{
gsave
clp
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
422.212 159.799 mo
422.24 159.743 li
448.953 129.849 468.608 86.7196 481.076 53.1854 cv
481.082 53.1825 li
481.082 53.1825 460.994 107.94 452.793 124.775 cv
422.212 159.799 li
level3{
gsave
clp
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
446.587 269.317 mo
445.718 269.317 444.719 268.87 443.694 267.717 cv
442.661 266.554 442.596 265.76 442.989 265.217 cv
443.406 265.659 443.948 265.933 444.543 265.956 cv
444.57 265.957 444.596 265.958 444.623 265.958 cv
449.424 265.958 li
449.59 267.466 448.357 269.317 446.587 269.317 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
570.988 275.596 mo
570.461 275.596 569.824 275.438 569.09 275.048 cv
564.732 272.73 570.696 272.73 570.696 272.73 cv
573.479 272.73 573.233 275.596 570.988 275.596 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
539.434 311.341 mo
538.84 311.341 538.26 311.108 537.79 310.539 cv
534.914 307.053 538.778 306.757 540.176 306.757 cv
540.462 306.757 540.645 306.769 540.645 306.769 cv
544.711 307.209 541.94 311.341 539.434 311.341 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
453.319 267.025 mo
452.724 267.025 452.145 266.793 451.675 266.224 cv
451.6 266.133 451.529 266.044 451.463 265.958 cv
455.63 265.958 li
455 266.576 454.145 267.025 453.319 267.025 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
561.551 219.404 mo
559.904 218.602 558.102 218.161 556.214 218.161 cv
556.213 218.161 li
554.962 218.161 553.748 218.355 552.592 218.719 cv
552.621 216.46 556.234 216.215 557.803 216.215 cv
558.239 216.215 558.517 216.234 558.517 216.234 cv
561.263 216.531 561.959 217.935 561.551 219.404 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
437.683 328.263 mo
435.691 324.92 438.724 324.065 440.951 323.864 cv
440.628 325.798 439.383 327.421 437.683 328.263 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
535.312 106.802 mo
534.408 106.801 533.526 106.448 532.811 105.582 cv
528.434 100.278 534.312 99.8266 536.44 99.8266 cv
536.877 99.8266 537.156 99.8456 537.156 99.8456 cv
543.343 100.514 539.126 106.803 535.312 106.802 cv
level3{
gsave
clp
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
541.914 110.82 mo
541.412 110.82 540.877 110.652 540.369 110.24 cv
537.514 107.929 541.95 107.378 541.95 107.378 cv
545.584 107.771 544.048 110.821 541.914 110.82 cv
level3{
gsave
clp
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
496.763 276.577 mo
496.364 276.577 495.913 276.422 495.441 276.041 cv
492.587 273.729 497.073 273.729 497.073 273.729 cv
499.143 274.056 498.373 276.578 496.763 276.577 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
441.478 258.935 mo
441.079 258.935 440.628 258.78 440.156 258.398 cv
437.302 256.087 441.787 256.087 441.787 256.087 cv
441.919 256.108 442.04 256.138 442.15 256.176 cv
442.15 258.776 li
441.95 258.876 441.724 258.935 441.478 258.935 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
577.676 270.548 mo
577.277 270.548 576.826 270.393 576.354 270.012 cv
573.5 267.701 577.985 267.701 577.985 267.701 cv
578.773 267.825 579.15 268.267 579.225 268.767 cv
579.225 269.161 li
579.125 269.863 578.515 270.548 577.676 270.548 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
579.225 269.161 mo
579.225 268.767 li
579.244 268.896 579.244 269.029 579.225 269.161 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
544.982 156.491 mo
544.583 156.491 544.132 156.336 543.661 155.955 cv
540.806 153.643 545.292 153.643 545.292 153.643 cv
547.361 153.971 546.591 156.491 544.982 156.491 cv
level3{
gsave
clp
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
478.727 265.088 mo
478.279 265.088 477.982 264.995 478.041 264.757 cv
478.226 264.019 479.037 263.901 479.538 263.901 cv
479.776 263.901 479.944 263.927 479.944 263.927 cv
479.978 263.927 480.012 263.927 480.045 263.927 cv
481.915 263.927 481.982 264.217 481.383 264.508 cv
480.784 264.798 479.519 265.088 478.727 265.088 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
545.337 270.032 mo
545.003 270.032 544.782 269.899 544.826 269.556 cv
544.963 268.493 545.57 268.322 545.944 268.322 cv
546.121 268.322 546.246 268.36 546.246 268.36 cv
546.271 268.36 546.296 268.36 546.32 268.36 cv
547.716 268.36 547.766 268.778 547.32 269.196 cv
546.873 269.614 545.929 270.032 545.337 270.032 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
521.508 286.559 mo
515.698 286.559 li
515.668 285.331 518.158 285.287 518.519 285.287 cv
518.547 285.287 518.563 285.287 518.563 285.287 cv
518.84 285.267 519.095 285.257 519.33 285.257 cv
521.191 285.257 521.718 285.864 521.508 286.559 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
518.113 288.59 mo
517.178 288.59 516.289 288.162 515.801 286.998 cv
515.734 286.837 515.701 286.691 515.698 286.559 cv
521.508 286.559 li
521.471 286.679 521.413 286.801 521.337 286.924 cv
520.813 287.757 519.418 288.591 518.113 288.59 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
523.349 253.866 mo
523.349 249.981 li
524.542 250.356 524.682 251.405 524.263 252.453 cv
524.065 252.948 523.744 253.442 523.349 253.866 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
499.304 128.493 mo
498.71 128.493 498.13 128.261 497.66 127.691 cv
494.783 124.206 498.647 123.91 500.045 123.91 cv
500.332 123.91 500.515 123.922 500.515 123.922 cv
504.58 124.362 501.81 128.493 499.304 128.493 cv
level3{
gsave
clp
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
487.463 120.403 mo
487.064 120.403 486.613 120.248 486.142 119.867 cv
483.287 117.556 487.772 117.556 487.772 117.556 cv
489.842 117.882 489.072 120.404 487.463 120.403 cv
level3{
gsave
clp
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
506.173 119.834 mo
505.839 119.834 505.618 119.7 505.662 119.358 cv
505.8 118.295 506.406 118.124 506.78 118.124 cv
506.957 118.124 507.082 118.162 507.082 118.162 cv
507.108 118.162 507.133 118.162 507.158 118.162 cv
508.553 118.162 508.603 118.58 508.156 118.998 cv
507.709 119.416 506.765 119.834 506.173 119.834 cv
level3{
gsave
clp
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
462.505 219.833 mo
461.292 219.134 459.983 218.635 458.609 218.373 cv
458.569 218.25 458.53 218.121 458.494 217.985 cv
457.8 215.382 460.813 215.297 461.212 215.297 cv
461.24 215.297 461.255 215.297 461.255 215.297 cv
461.533 215.265 461.788 215.25 462.022 215.25 cv
464.204 215.25 464.553 216.56 464.029 217.869 cv
463.737 218.599 463.173 219.33 462.505 219.833 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
470.008 230.445 mo
469.568 228.63 468.884 226.94 468.001 225.43 cv
469.042 225.178 470.113 225.178 470.113 225.178 cv
474.264 225.178 472.906 230.299 470.008 230.445 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
556.785 195.564 mo
556.19 195.564 555.611 195.331 555.141 194.762 cv
552.264 191.277 556.129 190.98 557.527 190.98 cv
557.813 190.98 557.996 190.993 557.996 190.993 cv
562.061 191.432 559.291 195.564 556.785 195.564 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
499.658 219.501 mo
499.51 219.422 499.358 219.322 499.204 219.197 cv
496.349 216.886 500.834 216.886 500.834 216.886 cv
502.016 217.072 502.272 217.973 501.975 218.713 cv
501.179 218.921 500.405 219.185 499.658 219.501 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
544.982 223.955 mo
544.583 223.955 544.132 223.8 543.661 223.418 cv
540.806 221.107 545.292 221.107 545.292 221.107 cv
546.394 221.281 546.691 222.077 546.484 222.784 cv
546.199 223.106 545.925 223.442 545.662 223.791 cv
545.46 223.894 545.231 223.955 544.982 223.955 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
478.836 200.683 mo
478.437 200.683 477.986 200.528 477.515 200.146 cv
474.66 197.835 479.145 197.835 479.145 197.835 cv
481.215 198.162 480.445 200.683 478.836 200.683 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
444.81 177.468 mo
444.125 177.468 443.474 177.04 443.117 175.875 cv
442.608 174.219 444.815 174.165 445.108 174.165 cv
445.129 174.165 445.14 174.165 445.14 174.165 cv
445.343 174.145 445.53 174.135 445.701 174.135 cv
447.3 174.135 447.555 174.968 447.172 175.802 cv
446.788 176.635 445.766 177.468 444.81 177.468 cv
level3{
gsave
clp
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
480.281 84.4531 mo
477.498 84.4531 477.744 81.5866 479.988 81.5866 cv
480.515 81.5866 481.153 81.7447 481.887 82.1352 cv
486.245 84.4531 480.281 84.4531 480.281 84.4531 cv
level3{
gsave
clp
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.02006e-14 -166.59 166.59 1.02006e-14 506.287 190.273 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
492.117 265.956 mo
490.522 265.906 489.245 264.597 489.245 262.99 cv
489.245 264.596 490.522 265.906 492.117 265.956 cv
521.699 265.65 mo
521.7 265.649 521.7 265.649 521.7 265.649 cv
521.7 265.649 521.7 265.649 521.699 265.65 cv
521.708 265.645 mo
522.681 265.158 523.349 264.152 523.349 262.99 cv
523.349 264.152 522.681 265.158 521.708 265.645 cv
517.772 264.253 mo
494.822 264.253 li
493.486 264.253 492.403 263.17 492.403 261.835 cv
492.403 239.919 li
492.403 232.246 498.624 226.025 506.297 226.025 cv
513.971 226.025 520.19 232.246 520.19 239.919 cv
520.19 261.835 li
520.19 263.17 519.108 264.253 517.772 264.253 cv
level3{
gsave
clp
[2.47329e-15 -40.392 40.392 2.47329e-15 506.297 262.508 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.47329e-15 -40.392 40.392 2.47329e-15 506.297 262.508 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
568.031 265.956 mo
569.36 265.906 570.423 264.596 570.423 262.99 cv
570.423 235.212 li
570.423 230.559 568.87 226.341 566.352 223.264 cv
568.87 226.341 570.424 230.559 570.424 235.213 cv
570.424 262.99 li
570.424 264.597 569.36 265.906 568.031 265.956 cv
544.397 265.956 mo
543.068 265.906 542.003 264.597 542.003 262.99 cv
542.003 264.596 543.068 265.906 544.397 265.956 cv
565.776 264.253 mo
546.651 264.253 li
545.538 264.253 544.636 263.17 544.636 261.835 cv
544.636 239.919 li
544.636 232.246 549.819 226.025 556.213 226.025 cv
556.214 226.025 li
562.608 226.025 567.791 232.246 567.791 239.919 cv
567.791 261.835 li
567.791 263.17 566.89 264.253 565.776 264.253 cv
level3{
gsave
clp
[2.47329e-15 -40.392 40.392 2.47329e-15 556.214 262.508 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.47329e-15 -40.392 40.392 2.47329e-15 556.214 262.508 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
596.787 264.253 mo
590.597 264.253 li
589.877 264.253 589.302 263.159 589.302 261.834 cv
589.302 239.931 li
589.302 232.244 592.641 226.025 596.787 226.025 cv
596.787 264.253 li
587.598 262.998 mo
587.598 262.998 li
587.598 235.23 li
587.598 225.833 591.663 218.224 596.723 218.161 cv
596.744 218.16 596.766 218.16 596.787 218.16 cv
596.787 218.16 li
591.698 218.16 587.598 225.794 587.598 235.23 cv
587.598 262.998 li
level3{
gsave
clp
[2.47355e-15 -40.3962 40.3962 2.47355e-15 592.192 262.512 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.47355e-15 -40.3962 40.3962 2.47355e-15 592.192 262.512 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
468.098 265.958 mo
468.098 265.958 li
468.748 265.958 469.339 265.656 469.781 265.164 cv
469.339 265.656 468.748 265.958 468.098 265.958 cv
444.543 265.956 mo
443.948 265.933 443.406 265.659 442.989 265.217 cv
442.474 264.674 442.15 263.877 442.15 262.99 cv
442.15 264.596 443.214 265.906 444.543 265.956 cv
465.923 264.253 mo
446.797 264.253 li
445.685 264.253 444.783 263.17 444.783 261.835 cv
444.783 239.919 li
444.783 232.246 449.966 226.025 456.36 226.025 cv
462.754 226.025 467.938 232.246 467.938 239.919 cv
467.938 261.835 li
467.938 263.17 467.036 264.253 465.923 264.253 cv
level3{
gsave
clp
[2.47329e-15 -40.392 40.392 2.47329e-15 456.36 262.508 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.47329e-15 -40.392 40.392 2.47329e-15 456.36 262.508 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
415.788 265.966 mo
415.788 265.966 li
415.788 218.16 li
420.876 218.16 424.976 225.794 424.976 235.23 cv
424.976 235.23 li
424.976 225.794 420.876 218.16 415.788 218.16 cv
415.788 226.025 li
419.934 226.025 423.273 232.244 423.273 239.931 cv
423.273 261.834 li
423.273 263.159 422.697 264.253 421.977 264.253 cv
415.788 264.253 li
415.788 265.966 li
level3{
gsave
clp
[2.47355e-15 -40.3962 40.3962 2.47355e-15 420.382 262.512 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.47355e-15 -40.3962 40.3962 2.47355e-15 420.382 262.512 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
520.382 265.958 mo
492.212 265.958 li
492.18 265.958 492.148 265.957 492.117 265.956 cv
492.148 265.957 492.18 265.958 492.212 265.958 cv
520.381 265.958 li
520.855 265.958 521.302 265.847 521.699 265.65 cv
521.302 265.847 520.855 265.958 520.382 265.958 cv
521.7 265.649 mo
521.703 265.648 521.705 265.647 521.708 265.645 cv
521.705 265.647 521.703 265.648 521.7 265.649 cv
523.349 249.981 mo
523.349 249.981 li
523.349 235.213 li
523.349 225.795 515.715 218.161 506.297 218.161 cv
504.803 218.161 503.355 218.353 501.975 218.713 cv
501.975 218.713 501.975 218.713 501.975 218.713 cv
503.356 218.352 504.803 218.161 506.297 218.161 cv
515.715 218.161 523.349 225.795 523.349 235.212 cv
523.349 249.981 li
489.245 235.212 mo
489.245 235.212 li
489.245 228.15 493.539 222.09 499.658 219.501 cv
499.659 219.501 499.659 219.501 499.659 219.501 cv
493.539 222.09 489.245 228.149 489.245 235.213 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/12 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-
@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,T
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm)Sh2c"#O($k*@GQuQglGn!Na^_'@GHlNgl>dt
NaUY&@,-cMgl5^sNF:M"@,$WIgPfLoMdP4s?JCBEg5B:kMI,"n?J:6Afn`qeLg8Vg>hOm;fnWhcL0N>b
>M4[5fS!G\KNd#\=kA7-f7@&UJQUKR=4Vk&ep^ZMIT=pH<RlIre9b-DHW/C=;q#thdWeX;G>Zb1:sjD]
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/12 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?
gt^Z=gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:H9g=k97g=k97g=k97g=k97g=k97
g=k96g"G'3g"G'3g"G'3g"G'2f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j.f@SX+f@SX+f@SX*
f%/F'f%/F'f%/F'e^`4#e^`4#e^`4#eC<!teC<!teC<!te'ldpe'ldpdaHRldaHRldF$@hdF$@hd*U.d
~>
<~O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,f6\NfK-[NfK-[NfK-[NfK-[
NfK-[NfK*YNK&pWNK&pWNK&pWNK&pWNK&pWNK&pWNK&mUN/W^SN/W[QMi3LOMi3LOMi3IMMMd:KMMd:K
MMd:KMMd:JM2@(FLkpkCLkpkBLPLY?LPLY>L5(G;L5(G;L5(G:KnY56KS5#2K7ef/K7ef/K7ef.JqAT*
JUrB'J:N0#J:N0#It)rtIXZ`pI=6NlI=6NlI!g<hH[C*dH?sm`H?sj^G^+IXGB\7TGB\7TG'8"NFEDVH
~>
<~@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:3JN?smAM?smAM?smAM
?smAM?smAM?smAM?sm>K?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI,G?=$rE?=$rE?=$oC?!U`A
?!U`A?!U`A?!U`A?!U`@>[1N=>[1N<>?b<9>?b<9>?b<9>?b<8>$>*5>$>*4=]nm1=]nm1=]nm0=BJ[,
='&I)='&I)='&I)<`W7%<`W7%<E3%!<)cgr<)cgr;c?Un;GpCj;GpCj;GpCj;,L1f:f'tb:f'tb:JXb^
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /12 /Gradient get_res exec grestore
}if
np
499.659 219.501 mo
499.659 219.501 499.659 219.501 499.658 219.501 cv
500.405 219.185 501.179 218.921 501.975 218.713 cv
501.975 218.713 501.975 218.713 501.975 218.713 cv
501.179 218.921 500.405 219.186 499.659 219.501 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/13 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,U
JQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R
<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!)TJQ(6Q;qZ_#fRZuRJQ(3P;qQY"fRZuR
J5b*N;qQV!fRHiPIoFsJ;qHIrf7$WLIT"dH;:g4nepUEHHr8IA;:^(jeU(-CHV`1<:XsbeeTt$@Gu)q7
:XjVads"O8G>6P0:""/XdWJ73FA(#&9@7fRd;hn,E_=\u8^MEJcYlA#Db/2k8'c!Ac>6"rCIZQ`7EoO8
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/13 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"g-f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SU)f%/F'f%/F'f%/F'f%/F'f%/F'
f%/F&e^`4#e^`4#e^`4#e^`4"eC<!teC<!teC<!teC<!teC<!se'ldpe'ldpe'ldodaHRldaHRldaHRk
dF$@hdF$@hdF$@hd*U.dd*U.dd*U.dcd0q`cd0q`cd0q`cHa_\cHa_\cHa_\cHa_\c-=MXc-=MXbfn;T
~>
<~J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#J:N0#
J:N0#J:N0#J:N0#J:N0#J:N0#J:N-!It)rtIt)rtIt)orIXZ`pIXZ]nI=6NlI=6NlI=6NlI=6NlI=6Kj
I!g<hI!g<gH[C*cH?sm`H?sm`H?sm`H?sm_H$O[\H$O[\H$O[[G^+IWGB\7TGB\7SG'8%PG'8%OF`hhK
FEDVHFEDVHF)uDDEcQ2@EcQ2@EH,u<EH,u<E,]c8Df9Q4DJj?0DJj<.Ci!p(CMR^$CMR^$C2.KuBk_9q
~>
<~;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c?Un;c6Lk;GpCj;GpCj;GpCj
;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;GpCj;Gp@h;,L1f;,L1f;,L.d:f'tb
:f'tb:f'tb:f'tb:f'ta:JXb^:JXb]:/4PZ:/4PZ:/4PZ:/4PZ:/4PZ:/4PY9he>U9MA,R9MA,R9MA,Q
91qoN91qoN8kM]J8kM]J8kM]J8kM]J8P)KF84Z9B84Z9B7n6'>7n6'>7Rfj:7Rfj:7Rfj:77BX66psF2
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /13 /Gradient get_res exec grestore
}if
np
520.381 265.958 mo
492.212 265.958 li
492.18 265.958 492.148 265.957 492.117 265.956 cv
490.522 265.906 489.245 264.596 489.245 262.99 cv
489.245 262.99 li
489.245 235.212 li
489.245 228.149 493.539 222.09 499.659 219.501 cv
500.405 219.186 501.179 218.921 501.975 218.713 cv
503.355 218.353 504.803 218.161 506.297 218.161 cv
515.715 218.161 523.349 225.795 523.349 235.213 cv
523.349 249.981 li
523.349 262.99 li
523.349 262.99 li
523.349 264.152 522.681 265.158 521.708 265.645 cv
521.705 265.647 521.703 265.648 521.7 265.649 cv
521.7 265.649 521.7 265.649 521.699 265.65 cv
521.302 265.847 520.855 265.958 520.381 265.958 cv
506.297 226.025 mo
498.624 226.025 492.403 232.246 492.403 239.919 cv
492.403 261.835 li
492.403 263.17 493.486 264.253 494.822 264.253 cv
517.772 264.253 li
519.108 264.253 520.19 263.17 520.19 261.835 cv
520.19 239.919 li
520.19 232.246 513.971 226.025 506.297 226.025 cv
level3{
gsave
clp
[2.47329e-15 -40.392 40.392 2.47329e-15 506.297 262.508 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.47329e-15 -40.392 40.392 2.47329e-15 506.297 262.508 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
542.003 235.212 mo
542.003 235.212 li
542.003 230.819 543.388 226.814 545.662 223.791 cv
545.662 223.791 545.662 223.791 545.662 223.791 cv
543.388 226.814 542.003 230.819 542.003 235.213 cv
566.352 223.264 mo
564.999 221.612 563.369 220.289 561.551 219.405 cv
561.551 219.404 li
563.369 220.289 565 221.612 566.352 223.264 cv
546.484 222.784 mo
546.484 222.784 546.484 222.784 546.484 222.784 cv
548.182 220.87 550.271 219.451 552.592 218.719 cv
552.592 218.719 552.592 218.719 552.592 218.72 cv
550.271 219.452 548.181 220.871 546.484 222.784 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/12 /Gradient get_res exec grestore
}if
np
561.551 219.405 mo
559.903 218.603 558.102 218.161 556.214 218.161 cv
556.213 218.161 li
554.962 218.161 553.748 218.355 552.592 218.72 cv
552.592 218.719 552.592 218.719 552.592 218.719 cv
553.748 218.355 554.962 218.161 556.213 218.161 cv
556.214 218.161 li
558.102 218.161 559.904 218.602 561.551 219.404 cv
561.551 219.405 li
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
545.662 223.791 mo
545.925 223.442 546.199 223.106 546.484 222.784 cv
546.484 222.784 546.484 222.784 546.484 222.784 cv
546.199 223.106 545.925 223.442 545.662 223.791 cv
545.662 223.791 545.662 223.791 545.662 223.791 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
567.951 265.958 mo
544.476 265.958 li
544.45 265.958 544.423 265.957 544.397 265.956 cv
543.068 265.906 542.003 264.596 542.003 262.99 cv
542.003 262.99 li
542.003 235.212 li
542.003 230.819 543.388 226.814 545.662 223.791 cv
545.925 223.442 546.199 223.106 546.484 222.784 cv
548.181 220.871 550.271 219.452 552.592 218.72 cv
553.748 218.355 554.962 218.161 556.213 218.161 cv
556.214 218.161 li
558.102 218.161 559.903 218.603 561.551 219.405 cv
563.369 220.289 564.999 221.612 566.352 223.264 cv
568.87 226.341 570.423 230.559 570.423 235.212 cv
570.423 262.99 li
570.423 264.596 569.36 265.906 568.031 265.956 cv
568.004 265.957 567.978 265.958 567.951 265.958 cv
556.213 226.025 mo
549.819 226.025 544.636 232.246 544.636 239.919 cv
544.636 261.835 li
544.636 263.17 545.538 264.253 546.651 264.253 cv
565.776 264.253 li
566.89 264.253 567.791 263.17 567.791 261.835 cv
567.791 239.919 li
567.791 232.246 562.608 226.025 556.214 226.025 cv
556.213 226.025 li
level3{
gsave
clp
[2.47329e-15 -40.392 40.392 2.47329e-15 556.214 262.508 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.47329e-15 -40.392 40.392 2.47329e-15 556.214 262.508 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
596.787 265.966 mo
596.723 265.966 li
589.188 265.966 li
588.305 265.966 587.598 264.623 587.598 262.998 cv
587.598 235.23 li
587.598 225.794 591.698 218.16 596.787 218.16 cv
596.787 226.025 li
592.641 226.025 589.302 232.244 589.302 239.931 cv
589.302 261.834 li
589.302 263.159 589.877 264.253 590.597 264.253 cv
596.787 264.253 li
596.787 265.966 li
level3{
gsave
clp
[2.47355e-15 -40.3962 40.3962 2.47355e-15 592.192 262.512 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.47355e-15 -40.3962 40.3962 2.47355e-15 592.192 262.512 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
469.781 265.164 mo
470.266 264.622 470.57 263.848 470.57 262.99 cv
470.57 235.213 li
470.57 233.558 470.373 231.958 470.007 230.445 cv
470.008 230.445 li
470.374 231.958 470.57 233.558 470.57 235.212 cv
470.57 262.99 li
470.57 263.848 470.266 264.622 469.781 265.164 cv
442.15 235.212 mo
442.15 235.212 li
442.15 225.795 448.512 218.161 456.36 218.161 cv
457.125 218.161 457.876 218.233 458.609 218.373 cv
458.609 218.373 li
457.877 218.234 457.125 218.161 456.36 218.161 cv
448.512 218.161 442.15 225.795 442.15 235.213 cv
468 225.43 mo
466.605 223.044 464.713 221.106 462.505 219.833 cv
462.505 219.833 462.505 219.833 462.505 219.833 cv
464.713 221.106 466.605 223.044 468.001 225.43 cv
468 225.43 468 225.43 468 225.43 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/12 /Gradient get_res exec grestore
}if
np
462.505 219.833 mo
461.292 219.134 459.983 218.636 458.609 218.373 cv
458.609 218.373 li
459.983 218.635 461.292 219.134 462.505 219.833 cv
462.505 219.833 462.505 219.833 462.505 219.833 cv
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
470.007 230.445 mo
469.568 228.63 468.883 226.94 468 225.43 cv
468 225.43 468 225.43 468.001 225.43 cv
468.884 226.94 469.568 228.63 470.008 230.445 cv
470.007 230.445 li
level3{
gsave
clp
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.00294e-14 -163.794 163.794 1.00294e-14 506.287 354.849 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
468.098 265.958 mo
455.63 265.958 li
451.463 265.958 li
449.424 265.958 li
444.623 265.958 li
444.596 265.958 444.57 265.957 444.543 265.956 cv
443.214 265.906 442.15 264.596 442.15 262.99 cv
442.15 262.99 li
442.15 235.212 li
442.15 225.795 448.512 218.161 456.36 218.161 cv
457.125 218.161 457.877 218.234 458.609 218.373 cv
459.983 218.636 461.292 219.134 462.505 219.833 cv
464.713 221.106 466.605 223.044 468 225.43 cv
468.883 226.94 469.568 228.63 470.007 230.445 cv
470.373 231.958 470.57 233.558 470.57 235.213 cv
470.57 262.99 li
470.57 263.848 470.266 264.622 469.781 265.164 cv
469.339 265.656 468.748 265.958 468.097 265.958 cv
456.36 226.025 mo
449.966 226.025 444.783 232.246 444.783 239.919 cv
444.783 261.835 li
444.783 263.17 445.685 264.253 446.797 264.253 cv
465.923 264.253 li
467.036 264.253 467.938 263.17 467.938 261.835 cv
467.938 239.919 li
467.938 232.246 462.754 226.025 456.36 226.025 cv
level3{
gsave
clp
[2.47329e-15 -40.392 40.392 2.47329e-15 456.36 262.508 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.47329e-15 -40.392 40.392 2.47329e-15 456.36 262.508 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
423.386 265.966 mo
415.788 265.966 li
415.788 264.253 li
421.977 264.253 li
422.697 264.253 423.273 263.159 423.273 261.834 cv
423.273 239.931 li
423.273 232.244 419.934 226.025 415.788 226.025 cv
415.788 218.16 li
420.876 218.16 424.976 225.794 424.976 235.23 cv
424.976 262.998 li
424.976 264.623 424.269 265.966 423.386 265.966 cv
level3{
gsave
clp
[2.47355e-15 -40.3962 40.3962 2.47355e-15 420.382 262.512 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.47355e-15 -40.3962 40.3962 2.47355e-15 420.382 262.512 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
641.597 532.074 mo
641.597 532.074 li
641.597 429.329 li
641.597 428.533 641.428 427.777 641.123 427.095 cv
739.097 429.843 li
746.641 430.055 752.918 435.706 753.916 443.187 cv
754.154 444.976 754.705 446.708 755.544 448.305 cv
765.766 467.772 li
766.924 469.978 767.529 472.432 767.529 474.924 cv
767.671 486.092 li
767.323 485.949 766.89 485.842 766.36 485.785 cv
766.36 485.785 761.302 486.413 764.557 489.048 cv
765.136 489.518 765.747 489.71 766.319 489.71 cv
766.829 489.71 767.31 489.557 767.712 489.311 cv
768.094 519.408 li
768.094 524.567 763.992 528.791 758.836 528.945 cv
723.273 530.114 li
641.597 530.114 li
641.597 532.074 li
660.71 513.796 mo
660.255 513.796 656.82 513.859 657.61 515.747 cv
658.166 517.075 659.18 517.563 660.246 517.563 cv
661.734 517.564 663.325 516.613 663.922 515.663 cv
664.519 514.713 664.122 513.763 661.634 513.763 cv
661.367 513.763 661.076 513.774 660.759 513.797 cv
660.759 513.797 660.742 513.796 660.71 513.796 cv
699.542 513.274 mo
699.542 513.274 li
699.542 515.063 700.991 516.513 702.78 516.513 cv
733.522 516.513 li
735.311 516.513 736.761 515.063 736.761 513.274 cv
736.761 478.744 li
736.761 478.744 li
736.761 478.483 736.755 478.223 736.745 477.965 cv
736.336 468.048 728.168 460.134 718.151 460.134 cv
708.134 460.134 699.966 468.048 699.557 477.965 cv
699.547 478.223 699.542 478.483 699.542 478.744 cv
699.542 513.274 li
699.542 513.274 li
691.981 494.453 mo
691.554 494.453 690.863 494.648 690.706 495.86 cv
690.655 496.25 690.908 496.403 691.289 496.403 cv
691.963 496.403 693.04 495.926 693.549 495.449 cv
694.059 494.973 694.002 494.496 692.411 494.496 cv
692.383 494.496 692.355 494.496 692.326 494.497 cv
692.326 494.497 692.183 494.453 691.981 494.453 cv
760.077 477.175 mo
757.65 477.175 750.949 477.689 755.939 483.736 cv
756.755 484.724 757.761 485.128 758.792 485.128 cv
763.14 485.128 767.948 477.958 760.892 477.196 cv
760.892 477.196 760.574 477.175 760.077 477.175 cv
664.046 473.427 mo
663.588 473.427 660.157 473.525 660.948 476.491 cv
661.503 478.577 662.517 479.344 663.584 479.344 cv
665.071 479.344 666.662 477.852 667.259 476.359 cv
667.856 474.866 667.459 473.374 664.971 473.374 cv
664.704 473.374 664.413 473.391 664.096 473.427 cv
664.096 473.427 664.079 473.427 664.046 473.427 cv
737.501 446.477 mo
737.501 446.477 730.7 446.477 735.67 449.12 cv
736.507 449.565 737.234 449.745 737.835 449.745 cv
740.394 449.746 740.675 446.477 737.501 446.477 cv
745.813 440.741 mo
745.813 440.741 740.698 440.741 743.953 443.376 cv
744.491 443.812 745.005 443.988 745.46 443.988 cv
747.295 443.989 748.173 441.114 745.813 440.741 cv
694.593 431.669 mo
694.593 431.669 689.477 431.669 692.732 434.305 cv
693.27 434.74 693.784 434.917 694.239 434.917 cv
696.074 434.917 696.953 432.042 694.593 431.669 cv
636.252 423.854 mo
636.252 423.854 636.252 423.854 636.251 423.854 cv
636.251 423.854 636.252 423.854 636.252 423.854 cv
636.202 423.853 mo
636.2 423.853 636.199 423.853 636.198 423.853 cv
636.199 423.853 636.2 423.853 636.202 423.853 cv
636.174 423.853 mo
636.173 423.853 636.173 423.853 636.173 423.853 cv
636.173 423.853 636.174 423.853 636.174 423.853 cv
636.15 423.853 mo
636.149 423.853 636.147 423.853 636.145 423.853 cv
636.147 423.853 636.149 423.853 636.15 423.853 cv
800.28 423.853 mo
800.155 423.853 li
800.155 423.853 li
636.121 423.853 li
636.121 423.853 li
635.997 423.853 li
632.972 423.853 630.521 421.401 630.521 418.376 cv
630.521 416.697 631.277 415.193 632.469 414.188 cv
637.674 409.799 641.535 404.025 645.14 398.249 cv
714.43 287.21 li
715.288 285.835 716.718 285.148 718.148 285.148 cv
719.573 285.148 720.998 285.83 721.857 287.195 cv
721.001 285.835 719.587 285.164 718.169 285.164 cv
717.743 285.164 717.316 285.225 716.903 285.346 cv
716.906 285.346 716.933 285.342 716.98 285.342 cv
717.459 285.342 720.086 285.71 722.191 293.498 cv
724.209 300.965 740.067 383.413 744.218 405.043 cv
744.739 407.763 742.689 410.275 739.922 410.341 cv
677.085 411.843 li
794.801 411.843 li
797.957 411.843 801.061 412.652 803.814 414.194 cv
798.613 409.794 794.744 404.026 791.138 398.246 cv
721.867 287.211 li
721.867 287.211 li
721.867 287.211 li
791.138 398.246 li
794.744 404.026 798.613 409.794 803.814 414.194 cv
805.002 415.199 805.756 416.7 805.756 418.376 cv
805.756 421.401 803.305 423.853 800.28 423.853 cv
712.883 295.581 mo
647.565 400.254 li
679.511 358.047 li
712.883 295.581 li
689.27 391.103 mo
689.27 391.103 684.155 391.103 687.41 393.738 cv
687.948 394.173 688.462 394.35 688.917 394.35 cv
690.752 394.35 691.63 391.475 689.27 391.103 cv
711.46 375.344 mo
709.867 375.344 705.458 375.681 708.739 379.656 cv
709.274 380.305 709.935 380.57 710.613 380.57 cv
713.47 380.57 716.629 375.859 711.994 375.358 cv
711.994 375.358 711.786 375.344 711.46 375.344 cv
720.295 325.96 mo
720.295 325.96 715.181 325.96 718.435 328.596 cv
718.973 329.031 719.487 329.208 719.943 329.208 cv
721.778 329.208 722.655 326.334 720.295 325.96 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
730.675 514.653 mo
705.627 514.653 li
704.17 514.653 702.989 513.472 702.989 512.015 cv
702.989 483.879 li
702.989 475.505 709.777 468.717 718.151 468.717 cv
726.525 468.717 733.313 475.505 733.313 483.879 cv
733.313 512.015 li
733.313 513.472 732.133 514.653 730.675 514.653 cv
level3{
gsave
clp
[2.99875e-15 -48.9734 48.9734 2.99875e-15 718.151 511.604 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.99875e-15 -48.9734 48.9734 2.99875e-15 718.151 511.604 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
736.745 477.965 mo
736.336 468.048 728.168 460.134 718.151 460.134 cv
708.134 460.134 699.966 468.048 699.557 477.965 cv
699.966 468.048 708.134 460.134 718.151 460.134 cv
728.168 460.134 736.336 468.048 736.745 477.965 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/14 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-
@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,T
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm)Sh2c%$O($k*@GQuQh2c""O($h(@GHlOgl>dtNaUY&@,-cMgl5^rNF:M"
?e^NHgP]CmMdG+p?J:9Cg50+gLg8Vg>hOj:fnEY`KNd#\=kA7-f7@&TIok0L<RlIse9b-CGZ)t6;:0M^
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/14 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?
gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?
gt^]?gt^]>gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K:g=k97g=k97g=k97g=k97g=k96g"G'3
g"G'3g"G'3f\"j/f\"j/f\"j/f\"j/f\"j/f@SX+f%/F'f%/F'e^`4#eC<!teC<!te'ldpdaHRldF$@h
~>
<~O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o<]NfK-[NfK-[NfK-[NfK-[
NfK-[NfK-[NfK-ZNK&pWNK&pWNK&pWNK&pWNK&pWNK&pVN/W^SN/W^RMi3LOMi3LNMMd:KMMd:JM2@(G
M2@(GLkpkCLPLY?L5(G;KnY57KS5#3K7ef/JqAT+JUrB'J:N-!IXZ`pI=6KjH[C*dH?sj]GB\7TG'8"N
~>
<~@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<PO?smAM?smAM
?smAM?smAM?smAM?smAM?smAL?XI/I?XI/I?XI/I?XI/I?XI/I?XI/H?=$rE?=$rD?!U`A?!U`A?!U`A
?!U`A>[1N=>?b<9>?b<9>?b<9>$>*5=]nm1=BJ[-='&I)='&I)<`W4#<)cgr<)cdp;GpCj;,L1f:f'q`
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /14 /Gradient get_res exec grestore
}if
np
733.522 516.513 mo
702.78 516.513 li
700.991 516.513 699.542 515.063 699.542 513.274 cv
699.542 478.744 li
699.542 478.483 699.547 478.223 699.557 477.965 cv
699.966 468.048 708.134 460.134 718.151 460.134 cv
728.168 460.134 736.336 468.048 736.745 477.965 cv
736.755 478.223 736.761 478.483 736.761 478.744 cv
736.761 513.274 li
736.761 515.063 735.311 516.513 733.522 516.513 cv
718.151 468.717 mo
709.777 468.717 702.989 475.505 702.989 483.879 cv
702.989 512.015 li
702.989 513.472 704.17 514.653 705.627 514.653 cv
730.675 514.653 li
732.133 514.653 733.313 513.472 733.313 512.015 cv
733.313 483.879 li
733.313 475.505 726.525 468.717 718.151 468.717 cv
level3{
gsave
clp
[2.99875e-15 -48.9734 48.9734 2.99875e-15 718.151 511.604 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.99875e-15 -48.9734 48.9734 2.99875e-15 718.151 511.604 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
663.636 532.074 mo
641.597 532.074 li
641.597 530.114 li
723.273 530.114 li
663.636 532.074 li
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
641.123 427.095 mo
641.112 427.095 li
640.273 425.224 638.422 423.905 636.252 423.854 cv
638.425 423.905 640.285 425.222 641.123 427.095 cv
636.251 423.854 mo
636.235 423.854 636.218 423.854 636.202 423.853 cv
636.218 423.854 636.235 423.854 636.251 423.854 cv
636.198 423.853 mo
636.19 423.853 636.182 423.853 636.174 423.853 cv
636.182 423.853 636.19 423.853 636.198 423.853 cv
636.173 423.853 mo
636.165 423.853 636.158 423.853 636.15 423.853 cv
636.158 423.853 636.165 423.853 636.173 423.853 cv
636.145 423.853 mo
636.137 423.853 636.129 423.853 636.121 423.853 cv
636.121 423.853 li
636.129 423.853 636.137 423.853 636.145 423.853 cv
.980392 .901961 .862745 rgb
f
791.412 545.994 mo
760.613 545.994 li
760.277 545.244 760.09 544.411 760.09 543.535 cv
760.09 538.095 li
760.09 537.724 760.056 537.361 759.992 537.009 cv
792.033 537.009 li
791.969 537.361 791.936 537.724 791.936 538.095 cv
791.936 543.535 li
791.936 544.411 791.749 545.244 791.412 545.994 cv
710.236 545.994 mo
679.437 545.994 li
679.1 545.244 678.913 544.411 678.913 543.535 cv
678.913 538.095 li
678.913 537.724 678.88 537.361 678.816 537.009 cv
710.857 537.009 li
710.793 537.361 710.76 537.724 710.76 538.095 cv
710.76 543.535 li
710.76 544.411 710.573 545.244 710.236 545.994 cv
794.68 530.114 mo
723.273 530.114 li
758.836 528.945 li
763.992 528.791 768.094 524.567 768.094 519.408 cv
767.712 489.311 li
768.983 488.535 769.474 486.831 767.671 486.092 cv
767.529 474.924 li
767.529 472.432 766.924 469.978 765.766 467.772 cv
755.544 448.305 li
754.705 446.708 754.154 444.976 753.916 443.187 cv
752.918 435.706 746.641 430.055 739.097 429.843 cv
641.123 427.095 li
640.285 425.222 638.425 423.905 636.252 423.854 cv
636.252 423.854 636.251 423.854 636.251 423.854 cv
636.235 423.854 636.218 423.854 636.202 423.853 cv
636.2 423.853 636.199 423.853 636.198 423.853 cv
636.19 423.853 636.182 423.853 636.174 423.853 cv
636.174 423.853 636.173 423.853 636.173 423.853 cv
636.165 423.853 636.158 423.853 636.15 423.853 cv
636.149 423.853 636.147 423.853 636.145 423.853 cv
636.137 423.853 636.129 423.853 636.121 423.853 cv
800.155 423.853 li
797.132 423.853 794.68 426.305 794.68 429.329 cv
794.68 530.114 li
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
792.033 537.009 mo
759.992 537.009 li
759.481 534.202 757.024 532.074 754.068 532.074 cv
716.782 532.074 li
713.827 532.074 711.369 534.202 710.857 537.009 cv
678.816 537.009 li
678.304 534.202 675.847 532.074 672.892 532.074 cv
663.636 532.074 li
723.273 530.114 li
794.68 530.114 li
794.68 533.043 li
793.317 533.929 792.335 535.351 792.033 537.009 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/15 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/V
C[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%7&l'Z>OR;1uSC?_.$l'Z;MR;1rRC?V(#ka?2LQtkiPC?V%"ka6)IQtb`M
B]k^qkE]fEQ"]<EBBGFkk*'E=P%Ea;AE8h_jH!j4O(740@H*5Sieh.&M-o4s?K$TDi.P=lJQgo\=l"L-
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/15 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6o
kih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6o
kih6okih6nkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$jk2tggk2tggk2tggk2tggk2tgfjlPUc
jlPUcjlPUcjQ,C_jQ,C_j5]1[j5]1[j5]1[io8tWiSibSiSibSi8EPOi8EPOi8EPOhr!>KhVR,Gh;-oC
~>
<~R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2
R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0G0R$a8.R$a8.R$a8.R$a8.
R$a8.R$a8.R$a8.R$a8.R$a8.R$a8-Q^=&*Q^=&*Q^=&*Q^=&*Q^=&)QBmi&QBmi%Q'IW!Pa%DrPEV2o
PEV2oP*1ukOcbcgOH>QcO,o?_NfK-[NfK*YN/W^SMi3IMM2@(GLkphAL5(D9KS5#3K7ec,J:N0#It)oq
~>
<~C2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.Ku
C2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.HsBk_9qBk_9q
Bk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9pBP;'mBP;'lB4kjiB4kjiB4kjiB4kjhAnGXe
AnGXeAS#FaA7T4]@q0"Y@q0"Y@q0"Y@U`bS?smAM?smAM?XI/I?=$rE?!U`A>[1K;>$>*5=]nm1=BJX+
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /15 /Gradient get_res exec grestore
}if
np
785.914 549.557 mo
766.111 549.557 li
763.661 549.557 761.553 548.094 760.613 545.994 cv
791.412 545.994 li
790.472 548.094 788.364 549.557 785.914 549.557 cv
704.738 549.557 mo
684.935 549.557 li
682.485 549.557 680.377 548.094 679.437 545.994 cv
710.236 545.994 li
709.296 548.094 707.188 549.557 704.738 549.557 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/15 /Gradient get_res exec grestore
}if
np
721.867 287.211 mo
721.864 287.206 721.86 287.2 721.857 287.195 cv
721.86 287.2 721.864 287.206 721.867 287.211 cv
.980392 .901961 .862745 rgb
f
803.814 414.194 mo
801.061 412.652 797.957 411.843 794.801 411.843 cv
677.085 411.843 li
739.922 410.341 li
742.689 410.275 744.739 407.763 744.218 405.043 cv
740.067 383.413 724.209 300.965 722.191 293.498 cv
720.086 285.71 717.459 285.342 716.98 285.342 cv
716.933 285.342 716.906 285.346 716.903 285.346 cv
717.316 285.225 717.743 285.164 718.169 285.164 cv
719.587 285.164 721.001 285.835 721.857 287.195 cv
721.86 287.2 721.864 287.206 721.867 287.211 cv
721.867 287.211 li
791.138 398.246 li
794.744 404.026 798.613 409.794 803.814 414.194 cv
758.098 391.417 mo
757.641 391.417 754.208 391.515 754.999 394.482 cv
755.555 396.567 756.568 397.335 757.635 397.335 cv
759.122 397.335 760.713 395.842 761.31 394.35 cv
761.907 392.857 761.51 391.364 759.023 391.364 cv
758.755 391.364 758.464 391.382 758.147 391.418 cv
758.147 391.418 758.13 391.417 758.098 391.417 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
647.565 400.254 mo
712.883 295.581 li
679.511 358.047 li
647.565 400.254 li
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
758.792 485.128 mo
757.761 485.128 756.755 484.724 755.939 483.736 cv
750.949 477.689 757.65 477.175 760.077 477.175 cv
760.574 477.175 760.892 477.196 760.892 477.196 cv
767.948 477.958 763.14 485.128 758.792 485.128 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
766.319 489.71 mo
765.747 489.71 765.136 489.518 764.557 489.048 cv
761.302 486.413 766.36 485.785 766.36 485.785 cv
766.89 485.842 767.323 485.949 767.671 486.092 cv
767.712 489.311 li
767.31 489.557 766.829 489.71 766.319 489.71 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
767.712 489.311 mo
767.671 486.092 li
769.474 486.831 768.983 488.535 767.712 489.311 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/15 /Gradient get_res exec grestore
}if
np
694.239 434.917 mo
693.784 434.917 693.27 434.74 692.732 434.305 cv
689.477 431.669 694.593 431.669 694.593 431.669 cv
696.953 432.042 696.074 434.917 694.239 434.917 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
719.943 329.208 mo
719.487 329.208 718.973 329.031 718.435 328.596 cv
715.181 325.96 720.295 325.96 720.295 325.96 cv
722.655 326.334 721.778 329.208 719.943 329.208 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
691.289 496.403 mo
690.908 496.403 690.655 496.25 690.706 495.86 cv
690.863 494.648 691.554 494.453 691.981 494.453 cv
692.183 494.453 692.326 494.497 692.326 494.497 cv
692.355 494.496 692.383 494.496 692.411 494.496 cv
694.002 494.496 694.059 494.973 693.549 495.449 cv
693.04 495.926 691.963 496.403 691.289 496.403 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
660.246 517.563 mo
659.18 517.563 658.166 517.075 657.61 515.747 cv
656.82 513.859 660.255 513.796 660.71 513.796 cv
660.742 513.796 660.759 513.797 660.759 513.797 cv
661.076 513.774 661.367 513.763 661.634 513.763 cv
664.122 513.763 664.519 514.713 663.922 515.663 cv
663.325 516.613 661.734 517.564 660.246 517.563 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
663.584 479.344 mo
662.517 479.344 661.503 478.577 660.948 476.491 cv
660.157 473.525 663.588 473.427 664.046 473.427 cv
664.079 473.427 664.096 473.427 664.096 473.427 cv
664.413 473.391 664.704 473.374 664.971 473.374 cv
667.459 473.374 667.856 474.866 667.259 476.359 cv
666.662 477.852 665.071 479.344 663.584 479.344 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
757.635 397.335 mo
756.568 397.335 755.555 396.567 754.999 394.482 cv
754.208 391.515 757.641 391.417 758.098 391.417 cv
758.13 391.417 758.147 391.418 758.147 391.418 cv
758.464 391.382 758.755 391.364 759.023 391.364 cv
761.51 391.364 761.907 392.857 761.31 394.35 cv
760.713 395.842 759.122 397.335 757.635 397.335 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/15 /Gradient get_res exec grestore
}if
np
737.835 449.745 mo
737.234 449.745 736.507 449.565 735.67 449.12 cv
730.7 446.477 737.501 446.477 737.501 446.477 cv
740.675 446.477 740.394 449.746 737.835 449.745 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
710.613 380.57 mo
709.935 380.57 709.274 380.305 708.739 379.656 cv
705.458 375.681 709.867 375.344 711.46 375.344 cv
711.786 375.344 711.994 375.358 711.994 375.358 cv
716.629 375.859 713.47 380.57 710.613 380.57 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
745.46 443.988 mo
745.005 443.988 744.491 443.812 743.953 443.376 cv
740.698 440.741 745.813 440.741 745.813 440.741 cv
748.173 441.114 747.295 443.989 745.46 443.988 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
688.917 394.35 mo
688.462 394.35 687.948 394.173 687.41 393.738 cv
684.155 391.103 689.27 391.103 689.27 391.103 cv
691.63 391.475 690.752 394.35 688.917 394.35 cv
level3{
gsave
clp
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.35374e-14 221.083 -221.083 1.35374e-14 718.139 347.299 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
274.782 758.687 mo
274.782 752.1 li
274.782 752.1 li
274.782 749.171 272.408 746.797 269.479 746.797 cv
254.462 746.797 li
251.534 746.797 249.16 744.423 249.16 741.494 cv
249.16 719.45 li
249.16 719.45 li
249.16 716.521 246.786 714.147 243.857 714.147 cv
228.84 714.147 li
225.912 714.147 223.537 711.773 223.537 708.844 cv
223.537 686.799 li
223.537 686.799 li
223.537 683.871 221.164 681.496 218.235 681.496 cv
203.219 681.496 li
200.29 681.496 197.915 679.123 197.915 676.194 cv
197.915 653.96 li
197.915 653.96 li
197.915 651.917 196.717 650.153 194.985 649.334 cv
194.985 648.846 li
194.985 614.575 li
194.985 607.834 li
194.985 602.761 191.754 598.445 187.238 596.827 cv
184.885 595.986 183.273 593.818 183.245 591.318 cv
183.214 588.647 li
330.737 592.938 li
336.645 593.323 342.144 596.093 345.969 600.613 cv
354.831 611.085 li
356.18 612.678 357.749 614.07 359.493 615.216 cv
361.153 616.309 li
367.285 620.343 370.976 627.191 370.976 634.53 cv
370.976 743.659 li
370.976 747.46 369.391 751.09 366.6 753.673 cv
364.136 755.956 360.915 757.249 357.556 757.305 cv
274.782 758.687 li
304.284 733.036 mo
304.284 733.036 295.618 734.112 301.195 738.627 cv
302.188 739.431 303.234 739.761 304.214 739.761 cv
308.383 739.762 311.384 733.803 304.284 733.036 cv
314.335 727.902 mo
313.371 727.902 310.705 728.106 312.69 730.511 cv
313.014 730.904 313.413 731.064 313.824 731.064 cv
315.552 731.064 317.464 728.214 314.659 727.911 cv
314.659 727.911 314.532 727.902 314.335 727.902 cv
258.271 680.921 mo
258.271 680.921 249.455 680.921 253.957 685.986 cv
255.372 687.577 256.75 688.194 257.949 688.194 cv
262.068 688.195 264.081 680.921 258.271 680.921 cv
348.403 680.904 mo
346.475 680.904 341.142 681.313 345.112 686.122 cv
345.76 686.907 346.56 687.228 347.38 687.228 cv
350.838 687.228 354.66 681.527 349.051 680.921 cv
349.051 680.921 348.798 680.904 348.403 680.904 cv
300.66 669.48 mo
300.66 669.48 294.47 669.48 298.409 672.668 cv
299.06 673.195 299.682 673.409 300.232 673.409 cv
302.453 673.41 303.515 669.931 300.66 669.48 cv
276.467 655.918 mo
275.775 655.918 274.656 656.081 274.401 657.1 cv
274.319 657.429 274.729 657.557 275.347 657.557 cv
276.44 657.557 278.186 657.156 279.012 656.755 cv
279.838 656.355 279.744 655.954 277.163 655.954 cv
277.118 655.954 277.073 655.954 277.026 655.954 cv
277.026 655.954 276.795 655.918 276.467 655.918 cv
347.643 628.175 mo
347.088 628.175 342.937 628.25 343.894 630.535 cv
344.566 632.141 345.793 632.732 347.084 632.732 cv
348.884 632.732 350.809 631.583 351.531 630.433 cv
352.253 629.284 351.773 628.134 348.764 628.134 cv
348.44 628.134 348.088 628.147 347.704 628.175 cv
347.704 628.175 347.683 628.175 347.643 628.175 cv
220.48 619.649 mo
217.544 619.649 209.432 620.272 215.473 627.59 cv
216.459 628.785 217.676 629.273 218.924 629.273 cv
224.186 629.275 230.003 620.598 221.466 619.675 cv
221.466 619.675 221.082 619.649 220.48 619.649 cv
279.329 611.759 mo
278.78 611.759 274.622 611.834 275.578 614.12 cv
276.251 615.726 277.478 616.317 278.769 616.317 cv
280.569 616.317 282.494 615.167 283.216 614.017 cv
283.939 612.868 283.458 611.718 280.447 611.718 cv
280.124 611.718 279.772 611.731 279.389 611.759 cv
279.389 611.759 279.368 611.759 279.329 611.759 cv
183.175 585.197 mo
183.131 581.404 li
183.132 581.404 li
183.175 585.197 li
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
183.214 588.647 mo
183.214 588.647 li
183.175 585.197 li
183.214 588.647 li
level3{
gsave
clp
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.09783e-15 -148.579 148.579 9.09783e-15 203.451 648.525 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
377.326 759.928 mo
274.782 759.928 li
274.782 758.687 li
357.556 757.305 li
360.915 757.249 364.136 755.956 366.6 753.673 cv
369.391 751.09 370.976 747.46 370.976 743.659 cv
370.976 634.53 li
370.976 627.191 367.285 620.343 361.153 616.309 cv
359.493 615.216 li
357.749 614.07 356.18 612.678 354.831 611.085 cv
345.969 600.613 li
342.144 596.093 336.645 593.323 330.737 592.938 cv
183.214 588.647 li
183.175 585.197 li
183.132 581.404 li
220.638 581.404 li
252.484 581.404 li
301.814 581.404 li
333.661 581.404 li
389.012 581.404 li
389.012 627.88 li
389.012 628.16 li
389.012 635.997 li
389.007 635.997 389.002 635.997 388.997 635.997 cv
388.997 702.962 li
389.012 702.962 li
389.012 748.242 li
389.012 754.696 383.78 759.928 377.326 759.928 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
832.029 760.193 mo
832.029 760.193 li
831.227 760.02 830.395 759.928 829.541 759.928 cv
812.137 759.928 li
700.855 757.305 li
697.496 757.249 694.275 755.956 691.81 753.673 cv
689.02 751.09 687.434 747.46 687.434 743.659 cv
687.434 705.618 li
687.571 705.566 687.696 705.514 687.805 705.461 cv
688.428 705.159 688.528 704.857 687.434 704.726 cv
687.434 634.53 li
687.434 627.191 691.126 620.343 697.257 616.309 cv
698.918 615.216 li
700.661 614.07 702.231 612.678 703.58 611.085 cv
712.441 600.613 li
716.266 596.093 721.765 593.323 727.674 592.938 cv
829.359 588.647 li
829.442 581.404 li
829.443 581.404 li
829.329 591.318 li
829.301 593.818 827.689 595.986 825.336 596.827 cv
820.82 598.445 817.589 602.761 817.589 607.834 cv
817.589 748.242 li
817.589 754.696 822.82 759.928 829.274 759.928 cv
829.541 759.928 li
830.395 759.928 831.227 760.02 832.029 760.193 cv
781.807 730.454 mo
781.807 730.454 775.617 730.454 779.556 733.644 cv
780.206 734.171 780.828 734.385 781.379 734.385 cv
783.6 734.385 784.662 730.906 781.807 730.454 cv
709.453 718.186 mo
709.453 718.186 703.264 718.186 707.202 721.374 cv
707.853 721.901 708.475 722.115 709.025 722.115 cv
711.246 722.115 712.308 718.637 709.453 718.186 cv
755.784 711.262 mo
755.784 711.262 743.544 712.783 751.422 719.159 cv
752.825 720.295 754.302 720.761 755.686 720.761 cv
761.575 720.762 765.813 712.346 755.784 711.262 cv
779.16 645.491 mo
779.16 645.491 772.971 645.491 776.91 648.679 cv
777.561 649.206 778.183 649.42 778.734 649.42 cv
780.954 649.421 782.016 645.942 779.16 645.491 cv
722.456 610.712 mo
722.456 610.712 716.267 610.712 720.206 613.901 cv
720.857 614.428 721.479 614.642 722.029 614.642 cv
724.25 614.642 725.312 611.163 722.456 610.712 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
812.137 759.928 mo
635.248 759.928 li
629.786 759.928 625.199 756.181 623.918 751.117 cv
623.695 750.216 623.577 749.274 623.577 748.304 cv
623.577 702.962 li
623.577 700.742 li
623.577 646.191 li
623.577 646.191 li
623.577 635.997 li
623.577 635.997 li
623.577 635.997 li
623.577 581.404 li
678.913 581.404 li
710.76 581.404 li
760.09 581.404 li
791.936 581.404 li
829.442 581.404 li
829.359 588.647 li
727.674 592.938 li
721.765 593.323 716.266 596.093 712.441 600.613 cv
703.58 611.085 li
702.231 612.678 700.661 614.07 698.918 615.216 cv
697.257 616.309 li
691.126 620.343 687.434 627.191 687.434 634.53 cv
687.434 704.726 li
687.077 704.683 686.592 704.659 685.957 704.659 cv
685.912 704.659 685.866 704.659 685.82 704.66 cv
685.82 704.66 685.589 704.623 685.263 704.623 cv
684.57 704.623 683.449 704.786 683.194 705.806 cv
683.112 706.134 683.522 706.263 684.14 706.263 cv
685.089 706.263 686.53 705.96 687.434 705.618 cv
687.434 743.659 li
687.434 747.46 689.02 751.09 691.81 753.673 cv
694.275 755.956 697.496 757.249 700.855 757.305 cv
812.137 759.928 li
667.064 729.626 mo
667.064 729.626 658.249 729.626 662.75 734.691 cv
664.165 736.282 665.543 736.899 666.742 736.899 cv
670.861 736.9 672.875 729.626 667.064 729.626 cv
664.655 675.567 mo
664.655 675.567 658.535 676.327 662.474 679.515 cv
663.175 680.083 663.914 680.316 664.606 680.316 cv
667.55 680.316 669.669 676.109 664.655 675.567 cv
657.054 665.147 mo
654.12 665.147 646.005 665.769 652.045 673.088 cv
653.032 674.283 654.249 674.771 655.497 674.771 cv
660.759 674.773 666.577 666.096 658.039 665.173 cv
658.039 665.173 657.655 665.147 657.054 665.147 cv
643.248 620.506 mo
643.248 620.506 635.018 620.506 641.031 623.703 cv
642.044 624.242 642.924 624.46 643.651 624.461 cv
646.748 624.461 647.087 620.506 643.248 620.506 cv
653.305 613.566 mo
653.305 613.566 647.116 613.566 651.055 616.755 cv
651.705 617.282 652.327 617.496 652.878 617.496 cv
655.099 617.496 656.161 614.017 653.305 613.566 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
389.012 581.404 mo
389.012 581.404 li
333.661 581.404 li
301.814 581.404 li
252.484 581.404 li
220.638 581.404 li
183.132 581.404 li
183.131 581.404 li
177.329 581.404 li
174.004 581.404 171.308 578.708 171.308 575.382 cv
171.308 538.095 li
171.308 534.77 174.004 532.074 177.329 532.074 cv
214.616 532.074 li
217.942 532.074 220.638 534.77 220.638 538.095 cv
220.638 543.535 li
220.638 546.862 223.334 549.557 226.66 549.557 cv
239.609 549.557 li
246.463 549.557 li
246.828 549.557 247.185 549.525 247.533 549.462 cv
250.348 548.958 252.484 546.496 252.484 543.535 cv
252.484 538.095 li
252.484 534.77 255.18 532.074 258.505 532.074 cv
295.792 532.074 li
299.119 532.074 301.814 534.77 301.814 538.095 cv
301.814 543.535 li
301.814 546.862 304.511 549.557 307.835 549.557 cv
327.639 549.557 li
330.964 549.557 333.661 546.862 333.661 543.535 cv
333.661 538.095 li
333.661 534.77 336.356 532.074 339.682 532.074 cv
376.969 532.074 li
380.294 532.074 382.991 534.77 382.991 538.095 cv
382.991 543.535 li
382.991 546.862 385.686 549.557 389.012 549.557 cv
389.012 581.404 li
215.101 566.896 mo
213.172 566.896 207.84 567.305 211.81 572.115 cv
212.458 572.9 213.258 573.221 214.078 573.221 cv
217.536 573.221 221.358 567.52 215.749 566.914 cv
215.749 566.914 215.496 566.896 215.101 566.896 cv
337.706 562.208 mo
337.154 562.208 332.999 562.326 333.956 565.916 cv
334.629 568.44 335.855 569.369 337.146 569.369 cv
338.946 569.369 340.871 567.562 341.593 565.756 cv
342.316 563.95 341.835 562.144 338.825 562.144 cv
338.502 562.144 338.149 562.165 337.766 562.208 cv
337.766 562.208 337.745 562.208 337.706 562.208 cv
369.816 565.675 mo
369.3 565.675 368.463 565.911 368.273 567.377 cv
368.212 567.85 368.518 568.034 368.979 568.034 cv
369.795 568.034 371.097 567.457 371.714 566.881 cv
372.331 566.304 372.262 565.727 370.336 565.727 cv
370.302 565.727 370.268 565.728 370.233 565.728 cv
370.233 565.728 370.06 565.675 369.816 565.675 cv
198.167 558.129 mo
198.167 558.129 191.978 558.129 195.916 561.318 cv
196.567 561.845 197.189 562.059 197.74 562.059 cv
199.96 562.059 201.023 558.58 198.167 558.129 cv
224.394 558.915 mo
223.877 558.915 223.041 559.15 222.851 560.617 cv
222.79 561.089 223.096 561.274 223.557 561.274 cv
224.373 561.274 225.675 560.697 226.292 560.12 cv
226.908 559.543 226.84 558.967 224.914 558.967 cv
224.88 558.967 224.846 558.967 224.811 558.967 cv
224.811 558.967 224.638 558.915 224.394 558.915 cv
282.296 551.061 mo
282.296 551.061 273.481 551.061 277.983 556.125 cv
279.398 557.717 280.776 558.334 281.975 558.334 cv
286.094 558.334 288.107 551.061 282.296 551.061 cv
level3{
gsave
clp
[217.704 0 0 217.704 171.308 556.739 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 171.308 556.739 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
835.244 581.404 mo
829.443 581.404 li
829.442 581.404 li
791.936 581.404 li
760.09 581.404 li
710.76 581.404 li
678.913 581.404 li
623.577 581.404 li
623.577 549.557 li
626.896 549.549 629.583 546.857 629.583 543.535 cv
629.583 538.095 li
629.583 534.77 632.28 532.074 635.605 532.074 cv
641.597 532.074 li
663.636 532.074 li
672.892 532.074 li
675.847 532.074 678.304 534.202 678.816 537.009 cv
678.88 537.361 678.913 537.724 678.913 538.095 cv
678.913 543.535 li
678.913 544.411 679.1 545.244 679.437 545.994 cv
680.377 548.094 682.485 549.557 684.935 549.557 cv
704.738 549.557 li
707.188 549.557 709.296 548.094 710.236 545.994 cv
710.573 545.244 710.76 544.411 710.76 543.535 cv
710.76 538.095 li
710.76 537.724 710.793 537.361 710.857 537.009 cv
711.369 534.202 713.827 532.074 716.782 532.074 cv
754.068 532.074 li
757.024 532.074 759.481 534.202 759.992 537.009 cv
760.056 537.361 760.09 537.724 760.09 538.095 cv
760.09 543.535 li
760.09 544.411 760.277 545.244 760.613 545.994 cv
761.553 548.094 763.661 549.557 766.111 549.557 cv
785.914 549.557 li
788.364 549.557 790.472 548.094 791.412 545.994 cv
791.749 545.244 791.936 544.411 791.936 543.535 cv
791.936 538.095 li
791.936 537.724 791.969 537.361 792.033 537.009 cv
792.335 535.351 793.317 533.929 794.68 533.043 cv
795.623 532.43 796.749 532.074 797.958 532.074 cv
835.244 532.074 li
838.57 532.074 841.266 534.77 841.266 538.095 cv
841.266 575.382 li
841.266 578.708 838.57 581.404 835.244 581.404 cv
818.83 566.954 mo
818.83 566.954 812.641 566.954 816.579 570.142 cv
817.23 570.669 817.852 570.883 818.402 570.883 cv
820.623 570.883 821.686 567.404 818.83 566.954 cv
733.148 559.437 mo
733.148 559.437 724.919 559.437 730.932 562.635 cv
731.945 563.174 732.824 563.392 733.552 563.392 cv
736.649 563.392 736.988 559.437 733.148 559.437 cv
646.664 556.275 mo
644.735 556.275 639.403 556.684 643.373 561.493 cv
644.021 562.278 644.821 562.599 645.641 562.599 cv
649.099 562.599 652.921 556.899 647.312 556.292 cv
647.312 556.292 647.059 556.275 646.664 556.275 cv
743.207 552.497 mo
743.207 552.497 737.016 552.497 740.956 555.686 cv
741.607 556.213 742.229 556.426 742.779 556.426 cv
745 556.427 746.063 552.948 743.207 552.497 cv
807.835 551.348 mo
807.143 551.348 806.021 551.511 805.766 552.532 cv
805.684 552.86 806.094 552.988 806.711 552.988 cv
807.805 552.988 809.55 552.587 810.377 552.186 cv
811.203 551.785 811.111 551.384 808.529 551.384 cv
808.484 551.384 808.439 551.384 808.392 551.384 cv
808.392 551.384 808.161 551.348 807.835 551.348 cv
level3{
gsave
clp
[217.704 0 0 217.704 623.562 556.739 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 623.562 556.739 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
257.949 688.194 mo
256.75 688.194 255.372 687.577 253.957 685.986 cv
249.455 680.921 258.271 680.921 258.271 680.921 cv
264.081 680.921 262.068 688.195 257.949 688.194 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
733.552 563.392 mo
732.824 563.392 731.945 563.174 730.932 562.635 cv
724.919 559.437 733.148 559.437 733.148 559.437 cv
736.988 559.437 736.649 563.392 733.552 563.392 cv
level3{
gsave
clp
[217.704 0 0 217.704 623.562 556.739 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 623.562 556.739 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
347.38 687.228 mo
346.56 687.228 345.76 686.907 345.112 686.122 cv
341.142 681.313 346.475 680.904 348.403 680.904 cv
348.798 680.904 349.051 680.921 349.051 680.921 cv
354.66 681.527 350.838 687.228 347.38 687.228 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
214.078 573.221 mo
213.258 573.221 212.458 572.9 211.81 572.115 cv
207.84 567.305 213.172 566.896 215.101 566.896 cv
215.496 566.896 215.749 566.914 215.749 566.914 cv
221.358 567.52 217.536 573.221 214.078 573.221 cv
level3{
gsave
clp
[217.704 0 0 217.704 171.308 556.739 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 171.308 556.739 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
313.824 731.064 mo
313.413 731.064 313.014 730.904 312.69 730.511 cv
310.705 728.106 313.371 727.902 314.335 727.902 cv
314.532 727.902 314.659 727.911 314.659 727.911 cv
317.464 728.214 315.552 731.064 313.824 731.064 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
655.497 674.771 mo
654.249 674.771 653.032 674.283 652.045 673.088 cv
646.005 665.769 654.12 665.147 657.054 665.147 cv
657.655 665.147 658.039 665.173 658.039 665.173 cv
666.577 666.096 660.759 674.773 655.497 674.771 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/15 /Gradient get_res exec grestore
}if
np
218.924 629.273 mo
217.676 629.273 216.459 628.785 215.473 627.59 cv
209.432 620.272 217.544 619.649 220.48 619.649 cv
221.082 619.649 221.466 619.675 221.466 619.675 cv
230.003 620.598 224.186 629.275 218.924 629.273 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
755.686 720.761 mo
754.302 720.761 752.825 720.295 751.422 719.159 cv
743.544 712.783 755.784 711.262 755.784 711.262 cv
765.813 712.346 761.575 720.762 755.686 720.761 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
304.214 739.761 mo
303.234 739.761 302.188 739.431 301.195 738.627 cv
295.618 734.112 304.284 733.036 304.284 733.036 cv
311.384 733.803 308.383 739.762 304.214 739.761 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
664.606 680.316 mo
663.914 680.316 663.175 680.083 662.474 679.515 cv
658.535 676.327 664.655 675.567 664.655 675.567 cv
669.669 676.109 667.55 680.316 664.606 680.316 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/15 /Gradient get_res exec grestore
}if
np
300.232 673.409 mo
299.682 673.409 299.06 673.195 298.409 672.668 cv
294.47 669.48 300.66 669.48 300.66 669.48 cv
303.515 669.931 302.453 673.41 300.232 673.409 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
197.74 562.059 mo
197.189 562.059 196.567 561.845 195.916 561.318 cv
191.978 558.129 198.167 558.129 198.167 558.129 cv
201.023 558.58 199.96 562.059 197.74 562.059 cv
level3{
gsave
clp
[217.704 0 0 217.704 171.308 556.739 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 171.308 556.739 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
742.779 556.426 mo
742.229 556.426 741.607 556.213 740.956 555.686 cv
737.016 552.497 743.207 552.497 743.207 552.497 cv
746.063 552.948 745 556.427 742.779 556.426 cv
level3{
gsave
clp
[217.704 0 0 217.704 623.562 556.739 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 623.562 556.739 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
781.379 734.385 mo
780.828 734.385 780.206 734.171 779.556 733.644 cv
775.617 730.454 781.807 730.454 781.807 730.454 cv
784.662 730.906 783.6 734.385 781.379 734.385 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
778.734 649.42 mo
778.183 649.42 777.561 649.206 776.91 648.679 cv
772.971 645.491 779.16 645.491 779.16 645.491 cv
782.016 645.942 780.954 649.421 778.734 649.42 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
275.347 657.557 mo
274.729 657.557 274.319 657.429 274.401 657.1 cv
274.656 656.081 275.775 655.918 276.467 655.918 cv
276.795 655.918 277.026 655.954 277.026 655.954 cv
277.073 655.954 277.118 655.954 277.163 655.954 cv
279.744 655.954 279.838 656.355 279.012 656.755 cv
278.186 657.156 276.44 657.557 275.347 657.557 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
666.742 736.899 mo
665.543 736.899 664.165 736.282 662.75 734.691 cv
658.249 729.626 667.064 729.626 667.064 729.626 cv
672.875 729.626 670.861 736.9 666.742 736.899 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/15 /Gradient get_res exec grestore
}if
np
709.025 722.115 mo
708.475 722.115 707.853 721.901 707.202 721.374 cv
703.264 718.186 709.453 718.186 709.453 718.186 cv
712.308 718.637 711.246 722.115 709.025 722.115 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
687.434 705.618 mo
687.434 704.726 li
688.528 704.857 688.428 705.159 687.805 705.461 cv
687.696 705.514 687.571 705.566 687.434 705.618 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
684.14 706.263 mo
683.522 706.263 683.112 706.134 683.194 705.806 cv
683.449 704.786 684.57 704.623 685.263 704.623 cv
685.589 704.623 685.82 704.66 685.82 704.66 cv
685.866 704.659 685.912 704.659 685.957 704.659 cv
686.592 704.659 687.077 704.683 687.434 704.726 cv
687.434 705.618 li
686.53 705.96 685.089 706.263 684.14 706.263 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/15 /Gradient get_res exec grestore
}if
np
368.979 568.034 mo
368.518 568.034 368.212 567.85 368.273 567.377 cv
368.463 565.911 369.3 565.675 369.816 565.675 cv
370.06 565.675 370.233 565.728 370.233 565.728 cv
370.268 565.728 370.302 565.727 370.336 565.727 cv
372.262 565.727 372.331 566.304 371.714 566.881 cv
371.097 567.457 369.795 568.034 368.979 568.034 cv
level3{
gsave
clp
[217.704 0 0 217.704 171.308 556.739 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 171.308 556.739 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
223.557 561.274 mo
223.096 561.274 222.79 561.089 222.851 560.617 cv
223.041 559.15 223.877 558.915 224.394 558.915 cv
224.638 558.915 224.811 558.967 224.811 558.967 cv
224.846 558.967 224.88 558.967 224.914 558.967 cv
226.84 558.967 226.908 559.543 226.292 560.12 cv
225.675 560.697 224.373 561.274 223.557 561.274 cv
level3{
gsave
clp
[217.704 0 0 217.704 171.308 556.739 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 171.308 556.739 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
278.769 616.317 mo
277.478 616.317 276.251 615.726 275.578 614.12 cv
274.622 611.834 278.78 611.759 279.329 611.759 cv
279.368 611.759 279.389 611.759 279.389 611.759 cv
279.772 611.731 280.124 611.718 280.447 611.718 cv
283.458 611.718 283.939 612.868 283.216 614.017 cv
282.494 615.167 280.569 616.317 278.769 616.317 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
337.146 569.369 mo
335.855 569.369 334.629 568.44 333.956 565.916 cv
332.999 562.326 337.154 562.208 337.706 562.208 cv
337.745 562.208 337.766 562.208 337.766 562.208 cv
338.149 562.165 338.502 562.144 338.825 562.144 cv
341.835 562.144 342.316 563.95 341.593 565.756 cv
340.871 567.562 338.946 569.369 337.146 569.369 cv
level3{
gsave
clp
[217.704 0 0 217.704 171.308 556.739 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 171.308 556.739 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
281.975 558.334 mo
280.776 558.334 279.398 557.717 277.983 556.125 cv
273.481 551.061 282.296 551.061 282.296 551.061 cv
288.107 551.061 286.094 558.334 281.975 558.334 cv
level3{
gsave
clp
[217.704 0 0 217.704 171.308 556.739 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 171.308 556.739 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
643.651 624.461 mo
642.924 624.46 642.044 624.242 641.031 623.703 cv
635.018 620.506 643.248 620.506 643.248 620.506 cv
647.087 620.506 646.748 624.461 643.651 624.461 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/15 /Gradient get_res exec grestore
}if
np
645.641 562.599 mo
644.821 562.599 644.021 562.278 643.373 561.493 cv
639.403 556.684 644.735 556.275 646.664 556.275 cv
647.059 556.275 647.312 556.292 647.312 556.292 cv
652.921 556.899 649.099 562.599 645.641 562.599 cv
level3{
gsave
clp
[217.704 0 0 217.704 623.562 556.739 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 623.562 556.739 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
818.402 570.883 mo
817.852 570.883 817.23 570.669 816.579 570.142 cv
812.641 566.954 818.83 566.954 818.83 566.954 cv
821.686 567.404 820.623 570.883 818.402 570.883 cv
level3{
gsave
clp
[217.704 0 0 217.704 623.562 556.739 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 623.562 556.739 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
652.878 617.496 mo
652.327 617.496 651.705 617.282 651.055 616.755 cv
647.116 613.566 653.305 613.566 653.305 613.566 cv
656.161 614.017 655.099 617.496 652.878 617.496 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/15 /Gradient get_res exec grestore
}if
np
722.029 614.642 mo
721.479 614.642 720.857 614.428 720.206 613.901 cv
716.267 610.712 722.456 610.712 722.456 610.712 cv
725.312 611.163 724.25 614.642 722.029 614.642 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
806.711 552.988 mo
806.094 552.988 805.684 552.86 805.766 552.532 cv
806.021 551.511 807.143 551.348 807.835 551.348 cv
808.161 551.348 808.392 551.384 808.392 551.384 cv
808.439 551.384 808.484 551.384 808.529 551.384 cv
811.111 551.384 811.203 551.785 810.377 552.186 cv
809.55 552.587 807.805 552.988 806.711 552.988 cv
level3{
gsave
clp
[217.704 0 0 217.704 623.562 556.739 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 623.562 556.739 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
347.084 632.732 mo
345.793 632.732 344.566 632.141 343.894 630.535 cv
342.937 628.25 347.088 628.175 347.643 628.175 cv
347.683 628.175 347.704 628.175 347.704 628.175 cv
348.088 628.147 348.44 628.134 348.764 628.134 cv
351.773 628.134 352.253 629.284 351.531 630.433 cv
350.809 631.583 348.884 632.732 347.084 632.732 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 280.18 794.448 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
383.614 812.098 mo
380.36 812.098 li
295.1 812.098 li
298.029 812.098 300.403 809.724 300.403 806.795 cv
300.403 789.873 li
302.607 789.849 303.652 786.393 300.806 785.944 cv
300.806 785.944 300.65 785.944 300.403 785.957 cv
300.403 784.75 li
300.403 784.75 li
300.403 781.822 298.029 779.448 295.1 779.448 cv
280.084 779.448 li
277.156 779.448 274.782 777.074 274.782 774.146 cv
274.782 759.928 li
377.326 759.928 li
383.78 759.928 389.012 754.696 389.012 748.242 cv
389.012 748.242 li
389.012 702.962 li
398.845 702.962 li
399.99 702.962 400.906 701.222 400.906 699.115 cv
400.906 658.12 li
400.906 658.12 li
400.906 645.901 395.601 636.012 389.012 635.997 cv
389.012 605.745 li
389.012 457.222 li
389.012 454.623 li
389.012 444.305 li
389.012 432.241 li
389.012 389.518 li
389.012 384.05 li
389.012 378.978 385.781 374.661 381.265 373.044 cv
378.911 372.202 377.3 370.034 377.271 367.534 cv
377.193 360.732 li
377.337 360.732 li
377.414 367.524 li
377.425 368.447 377.71 369.291 378.11 370.074 cv
572.633 373.739 li
576.311 373.809 579.623 375.985 581.144 379.336 cv
590.451 399.833 li
590.451 425.31 li
590.451 427.508 591.532 429.453 593.19 430.645 cv
594.267 431.418 595.588 431.874 597.015 431.874 cv
597.015 431.874 li
597.015 431.874 li
600.64 431.874 603.579 428.936 603.579 425.311 cv
603.579 425.311 li
603.579 425.31 603.579 425.31 603.579 425.31 cv
603.579 414.467 li
605.098 415.972 li
606.908 417.765 607.926 420.206 607.926 422.753 cv
607.926 503.282 li
389.012 503.282 li
389.012 510.161 li
607.926 510.161 li
607.926 517.861 li
389.012 517.861 li
389.012 531.62 li
607.926 531.62 li
607.926 749.486 li
607.926 752.677 607.684 755.048 607.352 756.797 cv
607.184 757.68 607.194 758.559 607.361 759.401 cv
606.782 758.984 606.23 758.812 605.736 758.812 cv
603.515 758.812 602.452 762.29 605.308 762.741 cv
605.308 762.741 607.56 762.741 608.483 762.041 cv
608.867 762.599 609.333 763.11 609.872 763.56 cv
611.985 765.326 613.302 767.976 613.302 770.889 cv
613.302 801.181 li
613.302 806.43 609.064 810.694 603.816 810.726 cv
383.614 812.098 li
415.942 796.203 mo
412.485 796.203 408.662 801.904 414.272 802.51 cv
414.272 802.51 414.525 802.527 414.921 802.527 cv
416.851 802.527 422.179 802.118 418.21 797.31 cv
417.562 796.524 416.762 796.203 415.942 796.203 cv
570.508 797.066 mo
569.189 797.066 567.779 798.216 567.25 799.366 cv
566.721 800.516 567.073 801.666 569.279 801.666 cv
569.516 801.666 569.773 801.652 570.054 801.625 cv
570.054 801.625 570.069 801.625 570.098 801.625 cv
570.5 801.625 573.546 801.55 572.845 799.264 cv
572.352 797.658 571.454 797.066 570.508 797.066 cv
344.928 786.58 mo
341.993 786.58 333.881 787.202 339.921 794.52 cv
340.907 795.715 342.124 796.203 343.372 796.203 cv
348.634 796.204 354.451 787.528 345.915 786.606 cv
345.915 786.606 345.53 786.58 344.928 786.58 cv
475.514 765.511 mo
471.395 765.511 469.381 772.783 475.192 772.783 cv
475.192 772.783 484.008 772.783 479.506 767.719 cv
478.091 766.127 476.713 765.511 475.514 765.511 cv
546.411 764.344 mo
546.411 764.344 546.58 764.38 546.819 764.38 cv
547.326 764.38 548.148 764.217 548.334 763.198 cv
548.394 762.869 548.094 762.741 547.641 762.741 cv
546.84 762.741 545.562 763.142 544.956 763.543 cv
544.351 763.944 544.419 764.344 546.312 764.344 cv
546.344 764.344 546.377 764.344 546.411 764.344 cv
578.665 761.904 mo
578.665 761.904 578.838 761.956 579.082 761.956 cv
579.599 761.956 580.434 761.721 580.624 760.254 cv
580.686 759.781 580.38 759.597 579.919 759.597 cv
579.103 759.597 577.8 760.174 577.184 760.751 cv
576.567 761.327 576.636 761.904 578.563 761.904 cv
578.596 761.904 578.63 761.904 578.665 761.904 cv
589.398 747.649 mo
585.94 747.649 582.117 753.35 587.727 753.956 cv
587.727 753.956 587.979 753.974 588.374 753.974 cv
590.303 753.974 595.635 753.565 591.665 748.755 cv
591.017 747.97 590.218 747.649 589.398 747.649 cv
435.755 730.441 mo
433.535 730.441 432.473 733.919 435.329 734.37 cv
435.329 734.37 441.518 734.37 437.579 731.182 cv
436.928 730.655 436.306 730.441 435.755 730.441 cv
501.156 725.44 mo
498.935 725.44 497.873 728.919 500.729 729.369 cv
500.729 729.369 506.918 729.369 502.979 726.181 cv
502.329 725.654 501.707 725.44 501.156 725.44 cv
543.44 710.655 mo
539.321 710.655 537.307 717.928 543.118 717.928 cv
543.118 717.928 551.933 717.928 547.432 712.864 cv
546.017 711.272 544.639 710.655 543.44 710.655 cv
553.321 701.569 mo
553.909 702.414 554.793 702.952 555.782 702.952 cv
586.206 702.952 li
587.194 702.952 588.078 702.414 588.666 701.569 cv
589.131 700.902 589.411 700.043 589.411 699.106 cv
589.411 699.106 li
589.411 658.098 li
589.411 658.098 li
589.411 645.892 581.165 635.998 570.994 635.998 cv
570.994 635.998 li
570.994 635.998 li
560.862 635.998 552.641 645.815 552.577 657.955 cv
552.577 658.003 552.577 658.05 552.577 658.098 cv
552.577 699.106 li
552.577 699.106 li
552.577 699.106 li
552.577 700.043 552.857 700.902 553.321 701.569 cv
485.42 701.915 mo
486.107 702.558 487.031 702.952 488.046 702.952 cv
524.555 702.952 li
525.779 702.952 526.87 702.379 527.574 701.487 cv
528.091 700.832 528.4 700.005 528.4 699.106 cv
528.4 699.106 li
528.4 658.098 li
528.4 658.098 li
528.4 645.892 518.506 635.998 506.301 635.998 cv
506.3 635.998 li
494.095 635.998 484.2 645.892 484.2 658.098 cv
484.2 699.106 li
484.2 700.215 484.669 701.213 485.42 701.915 cv
423.908 701.569 mo
424.496 702.414 425.38 702.952 426.369 702.952 cv
456.792 702.952 li
457.781 702.952 458.665 702.414 459.253 701.569 cv
459.717 700.902 459.997 700.043 459.997 699.106 cv
459.997 699.106 li
459.997 658.098 li
459.997 658.098 li
459.997 645.892 451.752 635.998 441.581 635.998 cv
441.581 635.998 li
441.58 635.998 li
432.522 635.998 424.99 643.846 423.451 654.186 cv
423.262 655.456 423.164 656.763 423.164 658.098 cv
423.164 699.106 li
423.164 699.106 li
423.164 699.106 li
423.164 700.043 423.443 700.902 423.908 701.569 cv
472.851 676.681 mo
471.05 676.681 469.125 678.487 468.403 680.294 cv
467.681 682.1 468.161 683.906 471.172 683.906 cv
471.495 683.906 471.847 683.885 472.23 683.841 cv
472.23 683.841 472.251 683.842 472.29 683.842 cv
472.842 683.842 476.997 683.724 476.04 680.133 cv
475.368 677.61 474.141 676.681 472.851 676.681 cv
476.889 630.433 mo
475.089 630.433 473.164 631.582 472.441 632.732 cv
471.719 633.882 472.199 635.032 475.21 635.032 cv
475.533 635.032 475.885 635.019 476.269 634.991 cv
476.269 634.991 476.29 634.991 476.329 634.991 cv
476.883 634.991 481.035 634.916 480.079 632.63 cv
479.406 631.024 478.179 630.433 476.889 630.433 cv
492.508 610.121 mo
490.708 610.121 488.783 611.928 488.06 613.734 cv
487.338 615.54 487.819 617.346 490.829 617.346 cv
491.153 617.346 491.505 617.325 491.888 617.282 cv
491.888 617.282 491.909 617.282 491.948 617.282 cv
492.501 617.282 496.655 617.164 495.698 613.574 cv
495.025 611.05 493.799 610.121 492.508 610.121 cv
404.897 613.681 mo
404.897 613.681 405.07 613.734 405.314 613.734 cv
405.831 613.734 406.667 613.498 406.856 612.032 cv
406.918 611.559 406.612 611.375 406.151 611.375 cv
405.335 611.375 404.032 611.951 403.416 612.528 cv
402.799 613.105 402.868 613.682 404.795 613.682 cv
404.828 613.682 404.862 613.681 404.897 613.681 cv
539.411 605.804 mo
539.411 605.804 539.642 605.84 539.968 605.84 cv
540.66 605.84 541.782 605.677 542.037 604.658 cv
542.119 604.329 541.708 604.201 541.09 604.201 cv
539.997 604.201 538.252 604.602 537.425 605.003 cv
536.599 605.404 536.692 605.805 539.275 605.805 cv
539.32 605.805 539.365 605.804 539.411 605.804 cv
582.79 591.184 mo
580.569 591.184 579.506 594.662 582.362 595.113 cv
582.362 595.113 588.552 595.113 584.613 591.924 cv
583.962 591.397 583.34 591.184 582.79 591.184 cv
429.395 565.756 mo
425.937 565.756 422.115 571.457 427.725 572.063 cv
427.725 572.063 427.977 572.08 428.372 572.08 cv
430.3 572.08 435.633 571.671 431.663 566.863 cv
431.015 566.077 430.215 565.756 429.395 565.756 cv
454.769 532.072 mo
452.839 532.072 447.51 532.481 451.479 537.29 cv
452.127 538.076 452.927 538.396 453.747 538.396 cv
457.204 538.397 461.027 532.695 455.417 532.089 cv
455.417 532.089 455.164 532.072 454.769 532.072 cv
518.668 512.328 mo
518.668 512.328 512.478 512.328 516.417 515.517 cv
517.068 516.044 517.69 516.258 518.24 516.258 cv
520.461 516.258 521.523 512.78 518.668 512.328 cv
563.014 464.859 mo
563.014 464.859 556.894 465.619 560.833 468.808 cv
561.534 469.375 562.273 469.608 562.965 469.608 cv
565.909 469.609 568.029 465.4 563.014 464.859 cv
436.618 462.836 mo
436.068 462.836 431.911 462.911 432.868 465.197 cv
433.54 466.803 434.767 467.394 436.057 467.395 cv
437.857 467.395 439.783 466.245 440.505 465.095 cv
441.227 463.945 440.747 462.795 437.736 462.795 cv
437.413 462.795 437.061 462.808 436.678 462.836 cv
436.678 462.836 436.657 462.836 436.618 462.836 cv
555.414 454.439 mo
552.48 454.439 544.364 455.06 550.406 462.38 cv
551.392 463.575 552.609 464.063 553.857 464.063 cv
559.119 464.063 564.936 455.388 556.399 454.465 cv
556.399 454.465 556.015 454.439 555.414 454.439 cv
474.458 439.429 mo
473.941 439.429 473.105 439.665 472.915 441.131 cv
472.854 441.604 473.16 441.788 473.621 441.788 cv
474.437 441.788 475.739 441.211 476.356 440.635 cv
476.972 440.058 476.903 439.481 474.978 439.481 cv
474.944 439.481 474.909 439.481 474.874 439.482 cv
474.874 439.482 474.702 439.429 474.458 439.429 cv
559.603 431.778 mo
559.967 431.841 560.342 431.874 560.724 431.874 cv
561.106 431.874 561.481 431.841 561.845 431.778 cv
564.936 431.246 567.287 428.553 567.287 425.311 cv
567.287 425.311 li
567.287 425.31 567.287 425.31 567.287 425.31 cv
567.287 397.666 li
567.287 397.666 li
567.287 397.666 li
567.287 394.041 564.349 391.103 560.724 391.103 cv
557.099 391.103 554.161 394.041 554.161 397.666 cv
554.161 425.311 li
554.161 428.553 556.512 431.246 559.603 431.778 cv
524.433 431.874 mo
524.433 431.874 li
524.815 431.874 525.19 431.841 525.554 431.778 cv
528.645 431.246 530.996 428.553 530.996 425.311 cv
530.996 425.311 li
530.996 425.31 530.996 425.31 530.996 425.31 cv
530.996 397.666 li
530.996 397.666 li
530.996 397.666 li
530.996 394.041 528.057 391.103 524.433 391.103 cv
520.807 391.103 517.869 394.041 517.869 397.666 cv
517.869 425.311 li
517.869 428.936 520.807 431.874 524.433 431.874 cv
488.141 431.874 mo
488.141 431.874 li
489.953 431.874 491.593 431.14 492.781 429.953 cv
492.781 429.953 492.782 429.952 492.782 429.952 cv
492.783 429.951 492.783 429.951 492.784 429.95 cv
493.971 428.763 494.704 427.123 494.704 425.311 cv
494.704 425.311 li
494.704 425.31 494.704 425.31 494.704 425.31 cv
494.704 397.666 li
494.704 397.666 li
494.704 397.666 li
494.704 395.854 493.97 394.214 492.784 393.026 cv
492.783 393.026 492.783 393.025 492.782 393.025 cv
492.782 393.024 492.781 393.024 492.781 393.023 cv
491.593 391.837 489.953 391.103 488.141 391.103 cv
488.141 391.103 li
488.141 391.103 488.141 391.103 488.141 391.103 cv
484.517 391.103 481.578 394.041 481.578 397.666 cv
481.578 425.311 li
481.578 428.936 484.517 431.874 488.141 431.874 cv
488.141 431.874 li
451.85 431.874 mo
451.85 431.874 li
455.475 431.874 458.414 428.936 458.414 425.31 cv
458.414 397.666 li
458.414 394.083 455.543 391.172 451.977 391.104 cv
451.935 391.103 451.893 391.103 451.85 391.103 cv
448.225 391.103 445.287 394.041 445.287 397.666 cv
445.287 425.311 li
445.287 428.936 448.225 431.874 451.85 431.874 cv
415.559 431.874 mo
415.559 431.874 li
417.54 431.874 419.317 430.996 420.52 429.608 cv
420.521 429.607 420.521 429.606 420.522 429.606 cv
420.523 429.604 420.525 429.602 420.526 429.6 cv
421.521 428.45 422.122 426.951 422.122 425.311 cv
422.122 425.311 li
422.122 425.31 422.122 425.31 422.122 425.31 cv
422.122 397.666 li
422.122 397.666 li
422.122 397.666 li
422.122 396.019 421.516 394.515 420.515 393.363 cv
419.311 391.978 417.538 391.103 415.559 391.103 cv
415.559 391.103 li
415.559 391.103 415.559 391.103 415.559 391.103 cv
411.934 391.103 408.996 394.041 408.996 397.666 cv
408.996 425.311 li
408.996 428.936 411.934 431.874 415.559 431.874 cv
415.559 431.874 li
440.655 413.986 mo
440.103 413.986 435.948 414.104 436.906 417.694 cv
437.578 420.217 438.805 421.146 440.096 421.146 cv
441.896 421.147 443.821 419.34 444.543 417.534 cv
445.265 415.728 444.784 413.922 441.774 413.922 cv
441.451 413.922 441.099 413.942 440.715 413.986 cv
440.715 413.986 440.694 413.986 440.655 413.986 cv
529.54 381.374 mo
529.54 381.374 521.31 381.374 527.324 384.573 cv
528.336 385.112 529.216 385.33 529.943 385.33 cv
533.041 385.331 533.38 381.374 529.54 381.374 cv
539.598 374.435 mo
539.598 374.435 533.409 374.435 537.348 377.623 cv
537.998 378.15 538.62 378.364 539.171 378.364 cv
541.391 378.364 542.453 374.886 539.598 374.435 cv
832.029 760.193 mo
831.32 760.056 830.588 759.984 829.839 759.984 cv
635.257 759.984 li
629.776 759.984 625.177 756.209 623.918 751.117 cv
625.199 756.181 629.786 759.928 635.248 759.928 cv
812.137 759.928 li
829.541 759.928 li
830.395 759.928 831.227 760.02 832.029 760.193 cv
626.78 375.996 mo
628.028 374.681 629.579 373.655 631.32 373.032 cv
632.375 372.654 633.281 372.01 633.962 371.189 cv
633.279 372.016 632.37 372.665 631.31 373.044 cv
629.573 373.666 628.026 374.687 626.78 375.996 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
829.839 812.098 mo
383.614 812.098 li
631.693 812.098 li
829.541 812.098 li
835.994 812.098 841.227 806.867 841.227 800.412 cv
841.227 771.614 li
841.227 771.614 li
841.227 766.014 837.287 761.334 832.029 760.193 cv
837.292 761.215 841.266 765.848 841.266 771.41 cv
841.266 800.672 li
841.266 806.983 836.149 812.098 829.839 812.098 cv
.980392 .901961 .862745 rgb
f
623.918 751.117 mo
623.685 750.197 623.562 749.234 623.562 748.243 cv
623.562 702.962 li
623.577 702.962 li
623.577 748.304 li
623.577 749.274 623.695 750.216 623.918 751.117 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/15 /Gradient get_res exec grestore
}if
np
623.562 549.557 mo
623.562 531.62 li
623.562 517.861 li
623.562 510.161 li
623.562 503.282 li
623.562 384.05 li
623.562 380.928 624.786 378.092 626.78 375.996 cv
624.795 378.09 623.577 380.918 623.577 384.032 cv
623.577 549.557 li
623.572 549.557 623.567 549.557 623.562 549.557 cv
.980392 .901961 .862745 rgb
f
623.562 635.997 mo
623.562 581.404 li
623.577 581.404 li
623.577 635.997 li
623.572 635.997 623.567 635.997 623.562 635.997 cv
level3{
gsave
clp
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
/15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.23117e-14 -201.067 201.067 1.23117e-14 732.394 794.448 ]ct
clp
/15 /Gradient get_res exec grestore
}if
np
623.577 581.404 mo
623.562 581.404 li
623.562 549.557 li
623.567 549.557 623.572 549.557 623.577 549.557 cv
623.577 581.404 li
level3{
gsave
clp
[217.704 0 0 217.704 623.562 556.739 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[217.704 0 0 217.704 623.562 556.739 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
633.962 371.189 mo
634.793 370.181 635.287 368.907 635.303 367.534 cv
635.38 360.732 li
635.389 360.732 li
635.312 367.524 li
635.296 368.902 634.799 370.179 633.962 371.189 cv
.980392 .901961 .862745 rgb
f
829.541 812.098 mo
631.693 812.098 li
383.614 812.098 li
603.816 810.726 li
609.064 810.694 613.302 806.43 613.302 801.181 cv
613.302 770.889 li
613.302 767.976 611.985 765.326 609.872 763.56 cv
609.333 763.11 608.867 762.599 608.483 762.041 cv
609.09 761.58 609.122 760.817 607.559 759.552 cv
607.493 759.498 607.426 759.448 607.361 759.401 cv
607.194 758.559 607.184 757.68 607.352 756.797 cv
607.684 755.048 607.926 752.677 607.926 749.486 cv
607.926 531.62 li
623.562 531.62 li
623.562 549.557 li
623.562 581.404 li
623.562 635.997 li
616.973 636.012 611.668 645.901 611.668 658.12 cv
611.668 699.115 li
611.668 701.214 612.577 702.949 613.716 702.962 cv
613.72 702.962 613.725 702.962 613.729 702.962 cv
623.562 702.962 li
623.562 748.243 li
623.562 749.234 623.685 750.197 623.918 751.117 cv
625.177 756.209 629.776 759.984 635.257 759.984 cv
829.839 759.984 li
830.588 759.984 831.32 760.056 832.029 760.193 cv
837.287 761.334 841.227 766.014 841.227 771.614 cv
841.227 771.614 li
841.227 800.412 li
841.227 806.867 835.994 812.098 829.541 812.098 cv
673.023 793.004 mo
667.761 793.004 661.944 801.68 670.48 802.603 cv
670.48 802.603 670.864 802.629 671.465 802.629 cv
674.399 802.629 682.516 802.007 676.474 794.688 cv
675.488 793.493 674.271 793.004 673.023 793.004 cv
778.421 795.528 mo
778.421 795.528 772.231 795.528 776.171 798.716 cv
776.821 799.243 777.443 799.457 777.994 799.457 cv
780.214 799.457 781.277 795.979 778.421 795.528 cv
736.615 783.031 mo
736.062 783.031 731.908 783.149 732.865 786.739 cv
733.538 789.262 734.764 790.191 736.055 790.191 cv
737.855 790.192 739.78 788.385 740.503 786.579 cv
741.225 784.773 740.744 782.967 737.734 782.967 cv
737.41 782.967 737.058 782.988 736.675 783.032 cv
736.675 783.032 736.654 783.031 736.615 783.031 cv
684.572 780.154 mo
681.628 780.154 679.508 784.361 684.522 784.904 cv
684.522 784.904 690.643 784.144 686.704 780.955 cv
686.003 780.387 685.264 780.154 684.572 780.154 cv
792.913 773.702 mo
790.985 773.702 785.652 774.111 789.622 778.919 cv
790.27 779.705 791.07 780.025 791.89 780.025 cv
795.347 780.025 799.17 774.325 793.561 773.719 cv
793.561 773.719 793.308 773.702 792.913 773.702 cv
623.562 517.861 mo
607.926 517.861 li
607.926 510.161 li
623.562 510.161 li
623.562 517.861 li
623.562 503.282 mo
607.926 503.282 li
607.926 422.753 li
607.926 420.206 606.908 417.765 605.098 415.972 cv
603.579 414.467 li
603.579 397.666 li
603.579 397.666 li
603.579 397.666 li
603.579 394.041 600.64 391.103 597.015 391.103 cv
595.58 391.103 594.253 391.563 593.173 392.344 cv
591.524 393.536 590.451 395.476 590.451 397.666 cv
590.451 399.833 li
581.144 379.336 li
579.623 375.985 576.311 373.809 572.633 373.739 cv
378.11 370.074 li
377.71 369.291 377.425 368.447 377.414 367.524 cv
377.337 360.732 li
409.187 360.732 li
441.034 360.732 li
490.364 360.732 li
506.287 360.732 li
522.21 360.732 li
571.54 360.732 li
603.386 360.732 li
635.38 360.732 li
635.303 367.534 li
635.287 368.907 634.793 370.181 633.962 371.189 cv
633.281 372.01 632.375 372.654 631.32 373.032 cv
629.579 373.655 628.028 374.681 626.78 375.996 cv
624.786 378.092 623.562 380.928 623.562 384.05 cv
623.562 503.282 li
477.618 363.457 mo
477.618 363.457 471.428 363.457 475.367 366.646 cv
476.018 367.173 476.64 367.387 477.19 367.387 cv
479.411 367.387 480.474 363.908 477.618 363.457 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
646.694 360.732 mo
635.389 360.732 li
635.38 360.732 li
603.386 360.732 li
571.54 360.732 li
522.21 360.732 li
506.287 360.732 li
490.364 360.732 li
441.034 360.732 li
409.187 360.732 li
377.337 360.732 li
377.193 360.732 li
365.879 360.732 li
362.554 360.732 359.858 358.037 359.858 354.711 cv
359.858 317.424 li
359.858 314.099 362.554 311.402 365.879 311.402 cv
403.166 311.402 li
406.492 311.402 409.187 314.099 409.187 317.424 cv
409.187 322.866 li
409.187 325.25 410.574 327.311 412.584 328.286 cv
413.378 328.671 414.268 328.887 415.209 328.887 cv
435.013 328.887 li
435.972 328.887 436.879 328.662 437.683 328.263 cv
439.383 327.421 440.628 325.798 440.951 323.864 cv
441.005 323.539 441.034 323.206 441.034 322.866 cv
441.034 317.424 li
441.034 314.099 443.73 311.402 447.056 311.402 cv
484.343 311.402 li
487.667 311.402 490.364 314.099 490.364 317.424 cv
490.364 322.866 li
490.364 326.191 493.059 328.887 496.386 328.887 cv
506.287 328.887 li
516.188 328.887 li
519.514 328.887 522.21 326.191 522.21 322.866 cv
522.21 317.424 li
522.21 314.099 524.906 311.402 528.231 311.402 cv
565.519 311.402 li
568.844 311.402 571.54 314.099 571.54 317.424 cv
571.54 322.866 li
571.54 326.159 574.185 328.835 577.466 328.886 cv
577.498 328.886 577.529 328.887 577.561 328.887 cv
597.365 328.887 li
598.306 328.887 599.196 328.671 599.989 328.286 cv
599.989 328.286 li
602 327.311 603.386 325.25 603.386 322.866 cv
603.386 317.424 li
603.386 314.099 606.082 311.402 609.408 311.402 cv
646.694 311.402 li
650.02 311.402 652.716 314.099 652.716 317.424 cv
652.716 354.711 li
652.716 358.037 650.02 360.732 646.694 360.732 cv
444.364 343.638 mo
444.364 343.638 438.173 343.638 442.112 346.826 cv
442.763 347.353 443.385 347.567 443.936 347.567 cv
446.157 347.567 447.219 344.088 444.364 343.638 cv
554.463 333.881 mo
553.91 333.881 549.756 334 550.713 337.589 cv
551.385 340.113 552.612 341.042 553.903 341.042 cv
555.703 341.042 557.628 339.236 558.35 337.429 cv
559.073 335.623 558.592 333.817 555.581 333.817 cv
555.258 333.817 554.906 333.838 554.523 333.882 cv
554.523 333.882 554.502 333.881 554.463 333.881 cv
631.437 327.243 mo
631.437 327.243 625.247 327.243 629.186 330.432 cv
629.837 330.959 630.459 331.172 631.01 331.173 cv
633.23 331.173 634.293 327.694 631.437 327.243 cv
471.214 324.568 mo
469.286 324.568 463.951 324.977 467.921 329.787 cv
468.57 330.572 469.369 330.893 470.189 330.893 cv
473.647 330.893 477.469 325.192 471.86 324.585 cv
471.86 324.585 471.608 324.568 471.214 324.568 cv
level3{
gsave
clp
[292.858 0 0 292.858 359.858 336.068 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[292.858 0 0 292.858 359.858 336.068 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
343.372 796.203 mo
342.124 796.203 340.907 795.715 339.921 794.52 cv
333.881 787.202 341.993 786.58 344.928 786.58 cv
345.53 786.58 345.915 786.606 345.915 786.606 cv
354.451 787.528 348.634 796.204 343.372 796.203 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
300.403 789.873 mo
300.403 785.957 li
300.65 785.944 300.806 785.944 300.806 785.944 cv
303.652 786.393 302.607 789.849 300.403 789.873 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
736.055 790.191 mo
734.764 790.191 733.538 789.262 732.865 786.739 cv
731.908 783.149 736.062 783.031 736.615 783.031 cv
736.654 783.031 736.675 783.032 736.675 783.032 cv
737.058 782.988 737.41 782.967 737.734 782.967 cv
740.744 782.967 741.225 784.773 740.503 786.579 cv
739.78 788.385 737.855 790.192 736.055 790.191 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/16 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/V
C[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~os&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<
Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Y^H,JI.a^korri:Y^H)II.XXjoWNZ7YC#oFHh=LgoWEQ5Y']cB
Hh4@co;m90XEsH<HLe+^nu@!+Wd+'6GO_\Wn>UU#W-.R+FRQ&Jm\FsmUN5aqEU9B<m%A:_So3h`D<[L)
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/16 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kiq?rl0@R!lKdd%lg*m&lg4!)m-X3-mHs<.mI'E1mdBN2mdKW5n*f`6n*oi9nF5r:nF?&=naZ/>naZ/>
naZ/>naZ2@o()ABo()ABo()ABo()DDoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMVHo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
<~R@9S6S"-">SXuFFT:hjMTV.sNTV8'RU8+KYUSO]]UnsoaV5C,fVl6PmW2ZbqWMukrWMukrWMukrWN)tu
WiE)!WiE,#X/i;%X/i>'XK8M)XK8P+Xf\_-Xf\b/Y-+q1Y-+q1Y-+q1Y-+t3YHP.5YHP.5YHP.5YHP.5
YHP.5YHP.5YHP.6Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
~>
<~C27U$Ci+$+D/O6/DJsH3DfBZ7E,fl;EH6)@F)uDDF)uDDF*)MGFEM_KF`qqOG'8%PG'A.SGBe@WG^+IX
G^+LZH$O[\H$O[\H$O[\H$O^^H?sm`H?sm`H?sm`H?sm`H?sm`H?spbH[C*dH[C*dH[C*dH[C*dH[C*d
H[C*dH[C*dH[C*eI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /16 /Gradient get_res exec grestore
}if
np
791.89 780.025 mo
791.07 780.025 790.27 779.705 789.622 778.919 cv
785.652 774.111 790.985 773.702 792.913 773.702 cv
793.308 773.702 793.561 773.719 793.561 773.719 cv
799.17 774.325 795.347 780.025 791.89 780.025 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/16 /Gradient get_res exec grestore
}if
np
453.747 538.396 mo
452.927 538.396 452.127 538.076 451.479 537.29 cv
447.51 532.481 452.839 532.072 454.769 532.072 cv
455.164 532.072 455.417 532.089 455.417 532.089 cv
461.027 532.695 457.204 538.397 453.747 538.396 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
553.857 464.063 mo
552.609 464.063 551.392 463.575 550.406 462.38 cv
544.364 455.06 552.48 454.439 555.414 454.439 cv
556.015 454.439 556.399 454.465 556.399 454.465 cv
564.936 455.388 559.119 464.063 553.857 464.063 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
562.965 469.608 mo
562.273 469.608 561.534 469.375 560.833 468.808 cv
556.894 465.619 563.014 464.859 563.014 464.859 cv
568.029 465.4 565.909 469.609 562.965 469.608 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
518.24 516.258 mo
517.69 516.258 517.068 516.044 516.417 515.517 cv
512.478 512.328 518.668 512.328 518.668 512.328 cv
521.523 512.78 520.461 516.258 518.24 516.258 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
477.19 367.387 mo
476.64 367.387 476.018 367.173 475.367 366.646 cv
471.428 363.457 477.618 363.457 477.618 363.457 cv
480.474 363.908 479.411 367.387 477.19 367.387 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/16 /Gradient get_res exec grestore
}if
np
631.01 331.173 mo
630.459 331.172 629.837 330.959 629.186 330.432 cv
625.247 327.243 631.437 327.243 631.437 327.243 cv
634.293 327.694 633.23 331.173 631.01 331.173 cv
level3{
gsave
clp
[292.858 0 0 292.858 359.858 336.068 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[292.858 0 0 292.858 359.858 336.068 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
473.621 441.788 mo
473.16 441.788 472.854 441.604 472.915 441.131 cv
473.105 439.665 473.941 439.429 474.458 439.429 cv
474.702 439.429 474.874 439.482 474.874 439.482 cv
474.909 439.481 474.944 439.481 474.978 439.481 cv
476.903 439.481 476.972 440.058 476.356 440.635 cv
475.739 441.211 474.437 441.788 473.621 441.788 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
436.057 467.395 mo
434.767 467.394 433.54 466.803 432.868 465.197 cv
431.911 462.911 436.068 462.836 436.618 462.836 cv
436.657 462.836 436.678 462.836 436.678 462.836 cv
437.061 462.808 437.413 462.795 437.736 462.795 cv
440.747 462.795 441.227 463.945 440.505 465.095 cv
439.783 466.245 437.857 467.395 436.057 467.395 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
440.096 421.146 mo
438.805 421.146 437.578 420.217 436.906 417.694 cv
435.948 414.104 440.103 413.986 440.655 413.986 cv
440.694 413.986 440.715 413.986 440.715 413.986 cv
441.099 413.942 441.451 413.922 441.774 413.922 cv
444.784 413.922 445.265 415.728 444.543 417.534 cv
443.821 419.34 441.896 421.147 440.096 421.146 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
553.903 341.042 mo
552.612 341.042 551.385 340.113 550.713 337.589 cv
549.756 334 553.91 333.881 554.463 333.881 cv
554.502 333.881 554.523 333.882 554.523 333.882 cv
554.906 333.838 555.258 333.817 555.581 333.817 cv
558.592 333.817 559.073 335.623 558.35 337.429 cv
557.628 339.236 555.703 341.042 553.903 341.042 cv
level3{
gsave
clp
[292.858 0 0 292.858 359.858 336.068 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[292.858 0 0 292.858 359.858 336.068 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
529.943 385.33 mo
529.216 385.33 528.336 385.112 527.324 384.573 cv
521.31 381.374 529.54 381.374 529.54 381.374 cv
533.38 381.374 533.041 385.331 529.943 385.33 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
470.189 330.893 mo
469.369 330.893 468.57 330.572 467.921 329.787 cv
463.951 324.977 469.286 324.568 471.214 324.568 cv
471.608 324.568 471.86 324.585 471.86 324.585 cv
477.469 325.192 473.647 330.893 470.189 330.893 cv
level3{
gsave
clp
[292.858 0 0 292.858 359.858 336.068 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[292.858 0 0 292.858 359.858 336.068 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
539.171 378.364 mo
538.62 378.364 537.998 378.15 537.348 377.623 cv
533.409 374.435 539.598 374.435 539.598 374.435 cv
542.453 374.886 541.391 378.364 539.171 378.364 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
443.936 347.567 mo
443.385 347.567 442.763 347.353 442.112 346.826 cv
438.173 343.638 444.364 343.638 444.364 343.638 cv
447.219 344.088 446.157 347.567 443.936 347.567 cv
level3{
gsave
clp
[292.858 0 0 292.858 359.858 336.068 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[292.858 0 0 292.858 359.858 336.068 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
777.994 799.457 mo
777.443 799.457 776.821 799.243 776.171 798.716 cv
772.231 795.528 778.421 795.528 778.421 795.528 cv
781.277 795.979 780.214 799.457 777.994 799.457 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/16 /Gradient get_res exec grestore
}if
np
475.192 772.783 mo
469.381 772.783 471.395 765.511 475.514 765.511 cv
476.713 765.511 478.091 766.127 479.506 767.719 cv
484.008 772.783 475.192 772.783 475.192 772.783 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
428.372 572.08 mo
427.977 572.08 427.725 572.063 427.725 572.063 cv
422.115 571.457 425.937 565.756 429.395 565.756 cv
430.215 565.756 431.015 566.077 431.663 566.863 cv
435.633 571.671 430.3 572.08 428.372 572.08 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
588.374 753.974 mo
587.979 753.974 587.727 753.956 587.727 753.956 cv
582.117 753.35 585.94 747.649 589.398 747.649 cv
590.218 747.649 591.017 747.97 591.665 748.755 cv
595.635 753.565 590.303 753.974 588.374 753.974 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
671.465 802.629 mo
670.864 802.629 670.48 802.603 670.48 802.603 cv
661.944 801.68 667.761 793.004 673.023 793.004 cv
674.271 793.004 675.488 793.493 676.474 794.688 cv
682.516 802.007 674.399 802.629 671.465 802.629 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/16 /Gradient get_res exec grestore
}if
np
684.522 784.904 mo
679.508 784.361 681.628 780.154 684.572 780.154 cv
685.264 780.154 686.003 780.387 686.704 780.955 cv
690.643 784.144 684.522 784.904 684.522 784.904 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/16 /Gradient get_res exec grestore
}if
np
582.362 595.113 mo
579.506 594.662 580.569 591.184 582.79 591.184 cv
583.34 591.184 583.962 591.397 584.613 591.924 cv
588.552 595.113 582.362 595.113 582.362 595.113 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
605.308 762.741 mo
602.452 762.29 603.515 758.812 605.736 758.812 cv
606.23 758.812 606.782 758.984 607.361 759.401 cv
607.547 760.344 607.931 761.24 608.483 762.041 cv
607.56 762.741 605.308 762.741 605.308 762.741 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
608.483 762.041 mo
607.931 761.24 607.547 760.344 607.361 759.401 cv
607.426 759.448 607.493 759.498 607.559 759.552 cv
609.122 760.817 609.09 761.58 608.483 762.041 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/16 /Gradient get_res exec grestore
}if
np
435.329 734.37 mo
432.473 733.919 433.535 730.441 435.755 730.441 cv
436.306 730.441 436.928 730.655 437.579 731.182 cv
441.518 734.37 435.329 734.37 435.329 734.37 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
539.968 605.84 mo
539.642 605.84 539.411 605.804 539.411 605.804 cv
539.365 605.804 539.32 605.805 539.275 605.805 cv
536.692 605.805 536.599 605.404 537.425 605.003 cv
538.252 604.602 539.997 604.201 541.09 604.201 cv
541.708 604.201 542.119 604.329 542.037 604.658 cv
541.782 605.677 540.66 605.84 539.968 605.84 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
405.314 613.734 mo
405.07 613.734 404.897 613.681 404.897 613.681 cv
404.862 613.681 404.828 613.682 404.795 613.682 cv
402.868 613.682 402.799 613.105 403.416 612.528 cv
404.032 611.951 405.335 611.375 406.151 611.375 cv
406.612 611.375 406.918 611.559 406.856 612.032 cv
406.667 613.498 405.831 613.734 405.314 613.734 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
579.082 761.956 mo
578.838 761.956 578.665 761.904 578.665 761.904 cv
578.63 761.904 578.596 761.904 578.563 761.904 cv
576.636 761.904 576.567 761.327 577.184 760.751 cv
577.8 760.174 579.103 759.597 579.919 759.597 cv
580.38 759.597 580.686 759.781 580.624 760.254 cv
580.434 761.721 579.599 761.956 579.082 761.956 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
475.21 635.032 mo
472.199 635.032 471.719 633.882 472.441 632.732 cv
473.164 631.582 475.089 630.433 476.889 630.433 cv
478.179 630.433 479.406 631.024 480.079 632.63 cv
481.035 634.916 476.883 634.991 476.329 634.991 cv
476.29 634.991 476.269 634.991 476.269 634.991 cv
475.885 635.019 475.533 635.032 475.21 635.032 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
471.172 683.906 mo
468.161 683.906 467.681 682.1 468.403 680.294 cv
469.125 678.487 471.05 676.681 472.851 676.681 cv
474.141 676.681 475.368 677.61 476.04 680.133 cv
476.997 683.724 472.842 683.842 472.29 683.842 cv
472.251 683.842 472.23 683.841 472.23 683.841 cv
471.847 683.885 471.495 683.906 471.172 683.906 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
490.829 617.346 mo
487.819 617.346 487.338 615.54 488.06 613.734 cv
488.783 611.928 490.708 610.121 492.508 610.121 cv
493.799 610.121 495.025 611.05 495.698 613.574 cv
496.655 617.164 492.501 617.282 491.948 617.282 cv
491.909 617.282 491.888 617.282 491.888 617.282 cv
491.505 617.325 491.153 617.346 490.829 617.346 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
543.118 717.928 mo
537.307 717.928 539.321 710.655 543.44 710.655 cv
544.639 710.655 546.017 711.272 547.432 712.864 cv
551.933 717.928 543.118 717.928 543.118 717.928 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
414.921 802.527 mo
414.525 802.527 414.272 802.51 414.272 802.51 cv
408.662 801.904 412.485 796.203 415.942 796.203 cv
416.762 796.203 417.562 796.524 418.21 797.31 cv
422.179 802.118 416.851 802.527 414.921 802.527 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
500.729 729.369 mo
497.873 728.919 498.935 725.44 501.156 725.44 cv
501.707 725.44 502.329 725.654 502.979 726.181 cv
506.918 729.369 500.729 729.369 500.729 729.369 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
546.819 764.38 mo
546.58 764.38 546.411 764.344 546.411 764.344 cv
546.377 764.344 546.344 764.344 546.312 764.344 cv
544.419 764.344 544.351 763.944 544.956 763.543 cv
545.562 763.142 546.84 762.741 547.641 762.741 cv
548.094 762.741 548.394 762.869 548.334 763.198 cv
548.148 764.217 547.326 764.38 546.819 764.38 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
569.279 801.666 mo
567.073 801.666 566.721 800.516 567.25 799.366 cv
567.779 798.216 569.189 797.066 570.508 797.066 cv
571.454 797.066 572.352 797.658 572.845 799.264 cv
573.546 801.55 570.5 801.625 570.098 801.625 cv
570.069 801.625 570.054 801.625 570.054 801.625 cv
569.773 801.652 569.516 801.666 569.279 801.666 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
485.42 701.915 mo
484.669 701.213 484.2 700.215 484.2 699.106 cv
484.2 658.098 li
484.2 645.892 494.095 635.998 506.3 635.998 cv
506.301 635.998 li
518.506 635.998 528.4 645.892 528.4 658.098 cv
528.4 658.098 li
528.4 645.892 518.506 635.998 506.3 635.998 cv
494.095 635.998 484.201 645.892 484.201 658.098 cv
484.201 699.106 li
484.201 700.214 484.67 701.213 485.42 701.915 cv
527.574 701.487 mo
528.091 700.832 528.4 700.005 528.4 699.106 cv
528.4 700.005 528.091 700.832 527.574 701.487 cv
521.173 700.742 mo
491.428 700.742 li
489.697 700.742 488.294 699.339 488.294 697.609 cv
488.294 664.198 li
488.294 654.253 496.355 646.191 506.3 646.191 cv
516.245 646.191 524.306 654.253 524.306 664.198 cv
524.306 697.609 li
524.306 699.339 522.903 700.742 521.173 700.742 cv
level3{
gsave
clp
[3.79249e-15 -61.9361 61.9361 3.79249e-15 506.3 699.166 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.79249e-15 -61.9361 61.9361 3.79249e-15 506.3 699.166 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
588.666 701.569 mo
589.131 700.902 589.411 700.043 589.411 699.106 cv
589.411 700.043 589.131 700.902 588.666 701.569 cv
553.321 701.569 mo
552.857 700.902 552.577 700.043 552.577 699.106 cv
552.577 700.043 552.857 700.902 553.321 701.569 cv
583.388 700.742 mo
558.599 700.742 li
557.158 700.742 555.989 699.339 555.989 697.609 cv
555.989 664.198 li
555.989 654.253 562.706 646.191 570.994 646.191 cv
570.994 646.191 li
579.281 646.191 585.999 654.253 585.999 664.198 cv
585.999 697.609 li
585.999 699.339 584.83 700.742 583.388 700.742 cv
level3{
gsave
clp
[3.79249e-15 -61.9361 61.9361 3.79249e-15 570.994 699.166 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.79249e-15 -61.9361 61.9361 3.79249e-15 570.994 699.166 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
613.716 702.962 mo
612.577 702.949 611.668 701.214 611.668 699.115 cv
611.668 658.12 li
611.668 645.901 616.973 636.012 623.562 635.997 cv
623.567 635.997 623.572 635.997 623.577 635.997 cv
623.577 635.997 li
616.981 635.997 611.668 645.891 611.668 658.12 cv
611.668 699.115 li
611.668 701.214 612.577 702.949 613.716 702.962 cv
623.577 700.742 mo
615.555 700.742 li
614.622 700.742 613.876 699.325 613.876 697.608 cv
613.876 664.213 li
613.876 654.251 618.204 646.191 623.577 646.191 cv
623.577 700.742 li
level3{
gsave
clp
[3.79251e-15 -61.9365 61.9365 3.79251e-15 617.622 699.166 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.79251e-15 -61.9365 61.9365 3.79251e-15 617.622 699.166 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
459.253 701.569 mo
459.717 700.902 459.997 700.043 459.997 699.106 cv
459.997 700.043 459.717 700.902 459.253 701.569 cv
423.908 701.569 mo
423.443 700.902 423.164 700.043 423.164 699.106 cv
423.164 700.043 423.443 700.902 423.908 701.569 cv
453.975 700.742 mo
429.187 700.742 li
427.744 700.742 426.575 699.339 426.575 697.609 cv
426.575 664.198 li
426.575 654.253 433.293 646.191 441.58 646.191 cv
441.581 646.191 li
449.868 646.191 456.585 654.253 456.585 664.198 cv
456.585 697.609 li
456.585 699.339 455.416 700.742 453.975 700.742 cv
459.997 658.098 mo
459.997 645.892 451.751 635.998 441.581 635.998 cv
441.581 635.998 li
441.581 635.998 li
451.752 635.998 459.997 645.892 459.997 658.098 cv
459.997 658.098 li
level3{
gsave
clp
[3.79249e-15 -61.9361 61.9361 3.79249e-15 441.58 699.166 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.79249e-15 -61.9361 61.9361 3.79249e-15 441.58 699.166 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
388.997 702.962 mo
388.997 702.962 li
388.997 635.997 li
389.002 635.997 389.007 635.997 389.012 635.997 cv
389.012 635.997 li
395.601 636.012 400.906 645.901 400.906 658.12 cv
400.906 658.12 li
400.906 645.891 395.593 635.997 388.997 635.997 cv
388.997 646.191 li
394.37 646.191 398.698 654.251 398.698 664.213 cv
398.698 697.608 li
398.698 699.325 397.952 700.742 397.019 700.742 cv
388.997 700.742 li
388.997 702.962 li
level3{
gsave
clp
[3.79251e-15 -61.9365 61.9365 3.79251e-15 394.952 699.166 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.79251e-15 -61.9365 61.9365 3.79251e-15 394.952 699.166 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
524.555 702.952 mo
488.046 702.952 li
487.031 702.952 486.107 702.558 485.42 701.915 cv
486.107 702.557 487.031 702.951 488.046 702.951 cv
524.554 702.951 li
525.779 702.951 526.87 702.379 527.574 701.487 cv
526.87 702.379 525.779 702.952 524.555 702.952 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/17 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-
@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,T
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_
UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UN,LmETj0;kbE.]UN,IlETa*:kG*%[UN,IlETa*:kFuqYU2]7g
E9<j4k+HYTTPrqbDrmX0je$GPSo*PZD<.7)j.1#HS87/RCZCjuigFN?QtYHFBAf(fi07g1P@WO4A)35U
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /17 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/17 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~gtgfBh;7#FhV[5Jhr!>Khr*GNi8NYRiSibSiSrkVio8tWio8tWio8tWioB(Zj5]1[j5f:^jQ,C_jQ,C_
jQ,C_jQ,FajlPUcjlPUcjlPUcjlPXek2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tjikND$kkND$k
kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
~>
<~O-#HbOHGZgP*;)nPE_;sQ'R`%QC!r)Q^F/-R$jA1R@0J2R@9S6S"-"=S=H+>S=H+>S=Q4ASXuFEStDXI
T:_aJT:_aJT:_aJT:_dLTV.sNTV/!PTqS0RTqS3TU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BWUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZ
USFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZ
~>
<~@:E\T@UinX@q9+\A7]=`AS,OdAnPahB4tslBPD0pBkhBtC2.KuC27U#CM[g'Ci!p(Ci!p(Ci+$+D/F-,
D/F0.DJj?0DJj?0DJj?0DJjB2Df9Q4Df9Q4Df9T6E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8
E,]c8E,]c8E,]c9EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /17 /Gradient get_res exec grestore
}if
np
524.554 702.951 mo
488.046 702.951 li
487.031 702.951 486.107 702.557 485.42 701.915 cv
484.67 701.213 484.201 700.214 484.201 699.106 cv
484.201 658.098 li
484.201 645.892 494.095 635.998 506.3 635.998 cv
518.506 635.998 528.4 645.892 528.4 658.098 cv
528.4 699.106 li
528.4 699.106 li
528.4 700.005 528.091 700.832 527.574 701.487 cv
526.87 702.379 525.779 702.951 524.554 702.951 cv
506.3 646.191 mo
496.355 646.191 488.294 654.253 488.294 664.198 cv
488.294 697.609 li
488.294 699.339 489.697 700.742 491.428 700.742 cv
521.173 700.742 li
522.903 700.742 524.306 699.339 524.306 697.609 cv
524.306 664.198 li
524.306 654.253 516.245 646.191 506.3 646.191 cv
level3{
gsave
clp
[3.79249e-15 -61.9361 61.9361 3.79249e-15 506.3 699.166 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.79249e-15 -61.9361 61.9361 3.79249e-15 506.3 699.166 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
586.206 702.952 mo
555.782 702.952 li
554.793 702.952 553.909 702.414 553.321 701.569 cv
553.909 702.414 554.793 702.951 555.782 702.951 cv
586.206 702.951 li
587.194 702.951 588.078 702.414 588.666 701.569 cv
588.078 702.414 587.194 702.952 586.206 702.952 cv
552.577 657.955 mo
552.641 645.815 560.862 635.998 570.994 635.998 cv
560.862 635.998 552.641 645.815 552.577 657.955 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/17 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/17 /Gradient get_res exec grestore
}if
np
586.206 702.951 mo
555.782 702.951 li
554.793 702.951 553.909 702.414 553.321 701.569 cv
552.857 700.902 552.577 700.043 552.577 699.106 cv
552.577 699.106 li
552.577 658.098 li
552.577 658.05 552.577 658.003 552.577 657.955 cv
552.641 645.815 560.862 635.998 570.994 635.998 cv
570.994 635.998 li
570.994 635.998 li
581.165 635.998 589.411 645.892 589.411 658.098 cv
589.411 699.106 li
589.411 699.106 li
589.411 700.043 589.131 700.902 588.666 701.569 cv
588.078 702.414 587.194 702.951 586.206 702.951 cv
570.994 646.191 mo
562.706 646.191 555.989 654.253 555.989 664.198 cv
555.989 697.609 li
555.989 699.339 557.158 700.742 558.599 700.742 cv
583.388 700.742 li
584.83 700.742 585.999 699.339 585.999 697.609 cv
585.999 664.198 li
585.999 654.253 579.281 646.191 570.994 646.191 cv
570.994 646.191 li
level3{
gsave
clp
[3.79249e-15 -61.9361 61.9361 3.79249e-15 570.994 699.166 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.79249e-15 -61.9361 61.9361 3.79249e-15 570.994 699.166 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
623.577 702.962 mo
623.562 702.962 li
613.729 702.962 li
613.725 702.962 613.72 702.962 613.716 702.962 cv
612.577 702.949 611.668 701.214 611.668 699.115 cv
611.668 658.12 li
611.668 645.891 616.981 635.997 623.577 635.997 cv
623.577 646.191 li
618.204 646.191 613.876 654.251 613.876 664.213 cv
613.876 697.608 li
613.876 699.325 614.622 700.742 615.555 700.742 cv
623.577 700.742 li
623.577 702.962 li
level3{
gsave
clp
[3.79251e-15 -61.9365 61.9365 3.79251e-15 617.622 699.166 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.79251e-15 -61.9365 61.9365 3.79251e-15 617.622 699.166 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
456.792 702.952 mo
426.369 702.952 li
425.38 702.952 424.496 702.414 423.908 701.569 cv
424.496 702.414 425.38 702.951 426.369 702.951 cv
456.792 702.951 li
457.781 702.951 458.665 702.414 459.253 701.569 cv
458.665 702.414 457.781 702.952 456.792 702.952 cv
423.451 654.186 mo
424.99 643.846 432.522 635.998 441.58 635.998 cv
441.581 635.998 li
432.522 635.998 424.99 643.846 423.451 654.186 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/17 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/17 /Gradient get_res exec grestore
}if
np
456.792 702.951 mo
426.369 702.951 li
425.38 702.951 424.496 702.414 423.908 701.569 cv
423.443 700.902 423.164 700.043 423.164 699.106 cv
423.164 699.106 li
423.164 658.098 li
423.164 656.763 423.262 655.456 423.451 654.186 cv
424.99 643.846 432.522 635.998 441.581 635.998 cv
441.581 635.998 li
451.751 635.998 459.997 645.892 459.997 658.098 cv
459.997 699.106 li
459.997 699.106 li
459.997 700.043 459.717 700.902 459.253 701.569 cv
458.665 702.414 457.781 702.951 456.792 702.951 cv
441.58 646.191 mo
433.293 646.191 426.575 654.253 426.575 664.198 cv
426.575 697.609 li
426.575 699.339 427.744 700.742 429.187 700.742 cv
453.975 700.742 li
455.416 700.742 456.585 699.339 456.585 697.609 cv
456.585 664.198 li
456.585 654.253 449.868 646.191 441.581 646.191 cv
441.58 646.191 li
level3{
gsave
clp
[3.79249e-15 -61.9361 61.9361 3.79249e-15 441.58 699.166 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.79249e-15 -61.9361 61.9361 3.79249e-15 441.58 699.166 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
398.845 702.962 mo
389.012 702.962 li
398.845 702.962 li
399.99 702.962 400.906 701.222 400.906 699.115 cv
400.906 658.12 li
400.906 658.12 li
400.906 699.115 li
400.906 701.222 399.99 702.962 398.845 702.962 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/17 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/17 /Gradient get_res exec grestore
}if
np
398.845 702.962 mo
389.012 702.962 li
388.997 702.962 li
388.997 700.742 li
397.019 700.742 li
397.952 700.742 398.698 699.325 398.698 697.608 cv
398.698 664.213 li
398.698 654.251 394.37 646.191 388.997 646.191 cv
388.997 635.997 li
395.593 635.997 400.906 645.891 400.906 658.12 cv
400.906 699.115 li
400.906 701.222 399.99 702.962 398.845 702.962 cv
level3{
gsave
clp
[3.79251e-15 -61.9365 61.9365 3.79251e-15 394.952 699.166 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.79251e-15 -61.9365 61.9365 3.79251e-15 394.952 699.166 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
415.559 431.874 mo
411.934 431.874 408.996 428.936 408.996 425.311 cv
408.996 397.666 li
408.996 394.041 411.934 391.103 415.559 391.103 cv
415.559 391.103 li
411.934 391.103 408.996 394.041 408.996 397.666 cv
408.996 425.31 li
408.996 428.936 411.934 431.874 415.559 431.874 cv
415.559 431.874 415.559 431.874 415.559 431.874 cv
415.559 430.533 mo
412.629 430.533 410.255 428.159 410.255 425.229 cv
410.255 400.842 li
410.255 397.912 412.629 395.538 415.559 395.538 cv
418.488 395.538 420.862 397.912 420.862 400.842 cv
420.862 425.229 li
420.862 428.159 418.488 430.533 415.559 430.533 cv
420.52 429.608 mo
420.521 429.607 420.521 429.606 420.522 429.606 cv
420.521 429.606 420.521 429.607 420.52 429.608 cv
420.526 429.6 mo
421.521 428.45 422.122 426.95 422.122 425.31 cv
422.122 425.311 li
422.122 426.951 421.521 428.45 420.526 429.6 cv
422.122 397.666 mo
422.122 396.02 421.516 394.515 420.515 393.363 cv
421.516 394.515 422.122 396.019 422.122 397.666 cv
422.122 397.666 li
level3{
gsave
clp
[2.23357e-15 -36.477 36.477 2.23357e-15 415.559 426.825 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.23357e-15 -36.477 36.477 2.23357e-15 415.559 426.825 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
451.85 431.874 mo
448.225 431.874 445.287 428.936 445.287 425.311 cv
445.287 397.666 li
445.287 394.041 448.225 391.103 451.85 391.103 cv
451.893 391.103 451.935 391.103 451.977 391.104 cv
451.935 391.103 451.893 391.103 451.85 391.103 cv
448.226 391.103 445.287 394.041 445.287 397.666 cv
445.287 425.31 li
445.287 428.936 448.226 431.874 451.85 431.874 cv
451.85 430.533 mo
448.92 430.533 446.546 428.159 446.546 425.229 cv
446.546 400.842 li
446.546 397.912 448.92 395.538 451.85 395.538 cv
454.78 395.538 457.154 397.912 457.154 400.842 cv
457.154 425.229 li
457.154 428.159 454.78 430.533 451.85 430.533 cv
level3{
gsave
clp
[2.23357e-15 -36.477 36.477 2.23357e-15 451.85 426.825 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.23357e-15 -36.477 36.477 2.23357e-15 451.85 426.825 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
488.141 431.874 mo
484.517 431.874 481.578 428.936 481.578 425.311 cv
481.578 397.666 li
481.578 394.041 484.517 391.103 488.141 391.103 cv
488.141 391.103 li
484.517 391.103 481.578 394.041 481.578 397.666 cv
481.578 425.31 li
481.578 428.936 484.517 431.874 488.141 431.874 cv
488.141 431.874 488.141 431.874 488.141 431.874 cv
488.141 430.533 mo
485.212 430.533 482.837 428.159 482.837 425.229 cv
482.837 400.842 li
482.837 397.912 485.212 395.538 488.141 395.538 cv
491.07 395.538 493.445 397.912 493.445 400.842 cv
493.445 425.229 li
493.445 428.159 491.07 430.533 488.141 430.533 cv
492.781 429.953 mo
492.781 429.953 492.782 429.952 492.782 429.952 cv
492.782 429.952 492.781 429.953 492.781 429.953 cv
492.784 429.95 mo
493.97 428.763 494.704 427.122 494.704 425.31 cv
494.704 425.311 li
494.704 427.123 493.971 428.763 492.784 429.95 cv
494.704 397.666 mo
494.704 395.854 493.97 394.214 492.784 393.026 cv
493.97 394.214 494.704 395.854 494.704 397.666 cv
494.704 397.666 li
492.782 393.025 mo
492.782 393.024 492.781 393.024 492.781 393.023 cv
492.781 393.024 492.782 393.024 492.782 393.025 cv
level3{
gsave
clp
[2.23357e-15 -36.477 36.477 2.23357e-15 488.141 426.825 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.23357e-15 -36.477 36.477 2.23357e-15 488.141 426.825 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
524.433 431.874 mo
520.807 431.874 517.869 428.936 517.869 425.311 cv
517.869 397.666 li
517.869 394.041 520.807 391.103 524.433 391.103 cv
528.057 391.103 530.996 394.041 530.996 397.666 cv
530.996 397.666 li
530.996 394.041 528.057 391.103 524.433 391.103 cv
520.808 391.103 517.869 394.041 517.869 397.666 cv
517.869 425.31 li
517.869 428.936 520.808 431.874 524.433 431.874 cv
525.554 431.778 mo
528.645 431.246 530.996 428.553 530.996 425.31 cv
530.996 425.311 li
530.996 428.553 528.645 431.246 525.554 431.778 cv
524.433 430.533 mo
521.503 430.533 519.128 428.159 519.128 425.229 cv
519.128 400.842 li
519.128 397.912 521.503 395.538 524.433 395.538 cv
527.362 395.538 529.736 397.912 529.736 400.842 cv
529.736 425.229 li
529.736 428.159 527.362 430.533 524.433 430.533 cv
level3{
gsave
clp
[2.23357e-15 -36.477 36.477 2.23357e-15 524.432 426.825 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.23357e-15 -36.477 36.477 2.23357e-15 524.432 426.825 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
561.845 431.778 mo
564.936 431.246 567.287 428.553 567.287 425.31 cv
567.287 425.311 li
567.287 428.553 564.936 431.246 561.845 431.778 cv
559.603 431.778 mo
556.512 431.246 554.161 428.553 554.161 425.311 cv
554.161 397.666 li
554.161 394.041 557.099 391.103 560.724 391.103 cv
564.349 391.103 567.287 394.041 567.287 397.666 cv
567.287 397.666 li
567.287 394.041 564.349 391.103 560.724 391.103 cv
557.099 391.103 554.161 394.041 554.161 397.666 cv
554.161 425.31 li
554.161 428.553 556.512 431.246 559.603 431.778 cv
560.724 430.533 mo
557.794 430.533 555.42 428.159 555.42 425.229 cv
555.42 400.842 li
555.42 397.912 557.794 395.538 560.724 395.538 cv
563.653 395.538 566.027 397.912 566.027 400.842 cv
566.027 425.229 li
566.027 428.159 563.653 430.533 560.724 430.533 cv
level3{
gsave
clp
[2.23357e-15 -36.477 36.477 2.23357e-15 560.724 426.825 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.23357e-15 -36.477 36.477 2.23357e-15 560.724 426.825 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
597.015 431.874 mo
600.64 431.874 603.579 428.936 603.579 425.31 cv
603.579 425.311 li
603.579 428.936 600.64 431.874 597.015 431.874 cv
597.015 431.874 mo
595.588 431.874 594.267 431.418 593.19 430.645 cv
594.267 431.418 595.588 431.874 597.015 431.874 cv
597.015 430.533 mo
594.085 430.533 591.711 428.159 591.711 425.229 cv
591.711 400.842 li
591.711 397.912 594.085 395.538 597.015 395.538 cv
599.944 395.538 602.319 397.912 602.319 400.842 cv
602.319 425.229 li
602.319 428.159 599.944 430.533 597.015 430.533 cv
603.579 397.666 mo
603.579 394.041 600.64 391.103 597.015 391.103 cv
595.58 391.103 594.253 391.563 593.173 392.344 cv
594.253 391.563 595.58 391.103 597.015 391.103 cv
600.64 391.103 603.579 394.041 603.579 397.666 cv
603.579 397.666 li
level3{
gsave
clp
[2.23357e-15 -36.477 36.477 2.23357e-15 597.015 426.825 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.23357e-15 -36.477 36.477 2.23357e-15 597.015 426.825 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
593.19 430.645 mo
591.532 429.453 590.451 427.508 590.451 425.31 cv
590.451 399.833 li
590.452 399.834 li
590.452 425.311 li
590.452 427.508 591.532 429.454 593.19 430.645 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/17 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/17 /Gradient get_res exec grestore
}if
np
590.452 399.834 mo
590.451 399.833 li
590.451 397.666 li
590.451 395.476 591.524 393.536 593.173 392.344 cv
591.525 393.536 590.452 395.476 590.452 397.666 cv
590.452 399.834 li
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/18 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,U
JQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R
<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5
P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-*s4P@<L8@H3P[j-!g1P$m:3
@,d;VifRX.O^R.0@,[2SiK%@)O'^b)?JpiMhi;""NEk=u>i(BDh25FmM-A\i=ke^6gP/haKNHiZ<S;q&
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /18 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/18 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~f\"j/f\+s2g"P06g=k97g=tB:gYCT>gt^]?gtgfBh;-oCh;7#FhVR,GhV[5Jhr!>Khr*GNi8EPOi8EPO
i8EPOi8ESQiSibSiSibSiSibSiSieUio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tW
io8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tW
io8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tW
~>
<~J:W9'JqJ].K7no3Knb>:L5(G;L51P?Ll$tFM2I1JMMd:KMMmCON/`gVNK&pWNK&pWNK0$ZNfK-[NfT6^
O,o?_O,oBaOH>QcOH>QcOH>QcOH>TeOcbcgOcbfiP*1ukP*1ukP*1ukP*2#mPEV2oPEV2oPEV2oPEV2o
PEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2o
PEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2o
~>
<~;cH^q<)lq!<``@(='&I)='/R,=BSd0=^#!4>$G38>?b<9>?b<9>?kE<>[:W@?!U`A?!U`A?!^iD?=$rE
?=$uG?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI2K?smAM?smAM?smDO@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /18 /Gradient get_res exec grestore
}if
np
603.579 414.467 mo
603.579 414.467 li
603.579 397.666 li
603.579 397.666 603.579 397.666 603.579 397.666 cv
603.579 414.467 li
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/18 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/18 /Gradient get_res exec grestore
}if
np
597.015 431.874 mo
597.015 431.874 li
595.588 431.874 594.267 431.418 593.19 430.645 cv
591.532 429.454 590.452 427.508 590.452 425.311 cv
590.452 399.834 li
590.452 397.666 li
590.452 395.476 591.525 393.536 593.173 392.344 cv
594.253 391.563 595.58 391.103 597.015 391.103 cv
600.64 391.103 603.579 394.041 603.579 397.666 cv
603.579 414.467 li
603.579 425.311 li
603.579 428.936 600.64 431.874 597.015 431.874 cv
597.015 431.874 li
597.015 395.538 mo
594.085 395.538 591.711 397.912 591.711 400.842 cv
591.711 425.229 li
591.711 428.159 594.085 430.533 597.015 430.533 cv
599.944 430.533 602.319 428.159 602.319 425.229 cv
602.319 400.842 li
602.319 397.912 599.944 395.538 597.015 395.538 cv
level3{
gsave
clp
[2.23357e-15 -36.477 36.477 2.23357e-15 597.015 426.825 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.23357e-15 -36.477 36.477 2.23357e-15 597.015 426.825 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
560.724 431.874 mo
560.342 431.874 559.967 431.841 559.603 431.778 cv
556.512 431.246 554.161 428.553 554.161 425.31 cv
554.161 397.666 li
554.161 394.041 557.099 391.103 560.724 391.103 cv
564.349 391.103 567.287 394.041 567.287 397.666 cv
567.287 425.311 li
567.287 428.553 564.936 431.246 561.845 431.778 cv
561.481 431.841 561.106 431.874 560.724 431.874 cv
560.724 395.538 mo
557.794 395.538 555.42 397.912 555.42 400.842 cv
555.42 425.229 li
555.42 428.159 557.794 430.533 560.724 430.533 cv
563.653 430.533 566.027 428.159 566.027 425.229 cv
566.027 400.842 li
566.027 397.912 563.653 395.538 560.724 395.538 cv
level3{
gsave
clp
[2.23357e-15 -36.477 36.477 2.23357e-15 560.724 426.825 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.23357e-15 -36.477 36.477 2.23357e-15 560.724 426.825 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
524.433 431.874 mo
524.433 431.874 li
520.808 431.874 517.869 428.936 517.869 425.31 cv
517.869 397.666 li
517.869 394.041 520.808 391.103 524.433 391.103 cv
528.057 391.103 530.996 394.041 530.996 397.666 cv
530.996 425.311 li
530.996 428.553 528.645 431.246 525.554 431.778 cv
525.19 431.841 524.815 431.874 524.433 431.874 cv
524.433 395.538 mo
521.503 395.538 519.128 397.912 519.128 400.842 cv
519.128 425.229 li
519.128 428.159 521.503 430.533 524.433 430.533 cv
527.362 430.533 529.736 428.159 529.736 425.229 cv
529.736 400.842 li
529.736 397.912 527.362 395.538 524.433 395.538 cv
level3{
gsave
clp
[2.23357e-15 -36.477 36.477 2.23357e-15 524.432 426.825 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.23357e-15 -36.477 36.477 2.23357e-15 524.432 426.825 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
488.141 431.874 mo
488.141 431.874 li
489.953 431.874 491.593 431.14 492.781 429.953 cv
491.593 431.14 489.953 431.874 488.141 431.874 cv
492.782 429.952 mo
492.783 429.951 492.783 429.951 492.784 429.95 cv
492.783 429.951 492.783 429.951 492.782 429.952 cv
492.784 393.026 mo
492.783 393.026 492.783 393.025 492.782 393.025 cv
492.783 393.025 492.783 393.026 492.784 393.026 cv
492.781 393.023 mo
491.593 391.837 489.953 391.103 488.141 391.103 cv
488.141 391.103 488.141 391.103 488.141 391.103 cv
489.953 391.103 491.593 391.837 492.781 393.023 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/17 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/17 /Gradient get_res exec grestore
}if
np
488.141 431.874 mo
484.517 431.874 481.578 428.936 481.578 425.31 cv
481.578 397.666 li
481.578 394.041 484.517 391.103 488.141 391.103 cv
489.953 391.103 491.593 391.837 492.781 393.023 cv
492.781 393.024 492.782 393.024 492.782 393.025 cv
492.783 393.025 492.783 393.026 492.784 393.026 cv
493.97 394.214 494.704 395.854 494.704 397.666 cv
494.704 425.311 li
494.704 427.122 493.97 428.763 492.784 429.95 cv
492.783 429.951 492.783 429.951 492.782 429.952 cv
492.782 429.952 492.781 429.953 492.781 429.953 cv
491.593 431.14 489.953 431.874 488.141 431.874 cv
488.141 395.538 mo
485.212 395.538 482.837 397.912 482.837 400.842 cv
482.837 425.229 li
482.837 428.159 485.212 430.533 488.141 430.533 cv
491.07 430.533 493.445 428.159 493.445 425.229 cv
493.445 400.842 li
493.445 397.912 491.07 395.538 488.141 395.538 cv
level3{
gsave
clp
[2.23357e-15 -36.477 36.477 2.23357e-15 488.141 426.825 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.23357e-15 -36.477 36.477 2.23357e-15 488.141 426.825 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
451.85 431.874 mo
451.85 431.874 li
451.85 431.874 li
455.475 431.874 458.413 428.936 458.413 425.311 cv
458.413 397.666 li
458.413 394.083 455.543 391.172 451.977 391.104 cv
455.543 391.172 458.414 394.083 458.414 397.666 cv
458.414 425.31 li
458.414 428.936 455.475 431.874 451.85 431.874 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/17 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/17 /Gradient get_res exec grestore
}if
np
451.85 431.874 mo
451.85 431.874 li
448.226 431.874 445.287 428.936 445.287 425.31 cv
445.287 397.666 li
445.287 394.041 448.226 391.103 451.85 391.103 cv
451.893 391.103 451.935 391.103 451.977 391.104 cv
455.543 391.172 458.413 394.083 458.413 397.666 cv
458.413 425.311 li
458.413 428.936 455.475 431.874 451.85 431.874 cv
451.85 395.538 mo
448.92 395.538 446.546 397.912 446.546 400.842 cv
446.546 425.229 li
446.546 428.159 448.92 430.533 451.85 430.533 cv
454.78 430.533 457.154 428.159 457.154 425.229 cv
457.154 400.842 li
457.154 397.912 454.78 395.538 451.85 395.538 cv
level3{
gsave
clp
[2.23357e-15 -36.477 36.477 2.23357e-15 451.85 426.825 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.23357e-15 -36.477 36.477 2.23357e-15 451.85 426.825 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
415.559 431.874 mo
415.559 431.874 li
417.54 431.874 419.317 430.996 420.52 429.608 cv
419.317 430.996 417.54 431.874 415.559 431.874 cv
420.522 429.606 mo
420.523 429.604 420.525 429.602 420.526 429.6 cv
420.525 429.602 420.523 429.604 420.522 429.606 cv
420.515 393.363 mo
419.311 391.978 417.537 391.103 415.559 391.103 cv
415.559 391.103 415.559 391.103 415.559 391.103 cv
417.538 391.103 419.311 391.978 420.515 393.363 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/17 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/17 /Gradient get_res exec grestore
}if
np
415.559 431.874 mo
411.934 431.874 408.996 428.936 408.996 425.31 cv
408.996 397.666 li
408.996 394.041 411.934 391.103 415.559 391.103 cv
417.537 391.103 419.311 391.978 420.515 393.363 cv
421.516 394.515 422.122 396.02 422.122 397.666 cv
422.122 425.311 li
422.122 426.95 421.521 428.45 420.526 429.6 cv
420.525 429.602 420.523 429.604 420.522 429.606 cv
420.521 429.606 420.521 429.607 420.52 429.608 cv
419.317 430.996 417.54 431.874 415.559 431.874 cv
415.559 395.538 mo
412.629 395.538 410.255 397.912 410.255 400.842 cv
410.255 425.229 li
410.255 428.159 412.629 430.533 415.559 430.533 cv
418.488 430.533 420.862 428.159 420.862 425.229 cv
420.862 400.842 li
420.862 397.912 418.488 395.538 415.559 395.538 cv
level3{
gsave
clp
[2.23357e-15 -36.477 36.477 2.23357e-15 415.559 426.825 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.23357e-15 -36.477 36.477 2.23357e-15 415.559 426.825 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
607.926 531.62 mo
389.012 531.62 li
389.012 517.861 li
607.926 517.861 li
607.926 531.62 li
578.308 523.224 mo
578.308 523.224 572.118 523.224 576.057 526.412 cv
576.708 526.939 577.33 527.153 577.88 527.153 cv
580.101 527.153 581.163 523.675 578.308 523.224 cv
508.61 519.268 mo
508.61 519.268 500.38 519.268 506.393 522.467 cv
507.406 523.006 508.285 523.224 509.013 523.224 cv
512.11 523.224 512.45 519.268 508.61 519.268 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
623.562 531.62 mo
607.926 531.62 li
607.926 517.861 li
623.562 517.861 li
623.562 531.62 li
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/16 /Gradient get_res exec grestore
}if
np
509.013 523.224 mo
508.285 523.224 507.406 523.006 506.393 522.467 cv
500.38 519.268 508.61 519.268 508.61 519.268 cv
512.45 519.268 512.11 523.224 509.013 523.224 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/16 /Gradient get_res exec grestore
}if
np
577.88 527.153 mo
577.33 527.153 576.708 526.939 576.057 526.412 cv
572.118 523.224 578.308 523.224 578.308 523.224 cv
581.163 523.675 580.101 527.153 577.88 527.153 cv
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/16 /Gradient get_res exec grestore
}if
np
607.926 510.161 mo
389.012 510.161 li
389.012 503.282 li
607.926 503.282 li
607.926 510.161 li
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
623.562 510.161 mo
607.926 510.161 li
607.926 503.282 li
623.562 503.282 li
623.562 510.161 li
level3{
gsave
clp
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
/16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.29375e-14 374.599 -374.599 2.29375e-14 506.287 414.821 ]ct
clp
/16 /Gradient get_res exec grestore
}if
np
207.614 812.098 mo
168.348 812.098 li
168.348 812.098 li
165.419 812.098 163.045 809.724 163.045 806.795 cv
163.045 784.75 li
163.045 781.822 160.671 779.448 157.743 779.448 cv
142.726 779.448 li
139.857 779.448 137.52 777.169 137.426 774.324 cv
137.424 774.265 137.423 774.206 137.423 774.146 cv
137.423 767.445 li
137.423 758.481 li
137.423 752.1 li
137.423 751.932 137.415 751.765 137.4 751.601 cv
137.35 751.059 137.217 750.54 137.016 750.057 cv
136.216 748.143 134.325 746.797 132.121 746.797 cv
117.104 746.797 li
114.568 746.797 112.448 745.017 111.925 742.638 cv
111.844 742.27 111.802 741.887 111.802 741.494 cv
111.802 735.758 li
111.802 719.45 li
111.802 716.521 109.428 714.147 106.499 714.147 cv
105.991 714.147 li
102.552 714.147 li
91.4824 714.147 li
88.5537 714.147 86.1796 711.773 86.1796 708.844 cv
86.1796 686.799 li
86.1796 683.871 83.8057 681.496 80.8769 681.496 cv
74.6695 681.496 li
69.1015 681.496 li
65.8603 681.496 li
62.9321 681.496 60.5576 679.123 60.5576 676.194 cv
60.5576 654.149 li
60.5576 651.22 62.9321 648.846 65.8603 648.846 cv
112.737 648.846 li
192.802 648.846 li
193.583 648.846 194.323 649.021 194.985 649.334 cv
196.717 650.153 197.915 651.917 197.915 653.96 cv
197.915 653.96 li
197.915 651.135 195.626 648.846 192.802 648.846 cv
94.5209 648.846 li
97.4496 648.846 99.8237 651.22 99.8237 654.149 cv
99.8237 676.194 li
99.8237 679.123 102.198 681.496 105.126 681.496 cv
115.349 681.496 li
120.143 681.496 li
195.047 681.496 li
130.607 683.372 li
129.094 683.416 127.671 684.104 126.697 685.261 cv
125.889 686.22 125.445 687.433 125.445 688.687 cv
125.445 708.844 li
125.445 711.773 127.819 714.147 130.748 714.147 cv
145.765 714.147 li
148.693 714.147 151.067 716.521 151.067 719.45 cv
151.067 741.494 li
151.067 744.423 153.441 746.797 156.37 746.797 cv
171.387 746.797 li
244.403 746.797 li
183.094 748.891 li
181.415 748.948 179.819 749.641 178.631 750.829 cv
177.388 752.073 176.689 753.759 176.689 755.518 cv
176.689 758.285 li
176.556 758.222 176.4 758.174 176.22 758.146 cv
176.22 758.146 172.29 758.146 174.79 760.17 cv
175.204 760.504 175.598 760.64 175.948 760.64 cv
176.229 760.64 176.48 760.553 176.689 760.41 cv
176.689 774.146 li
176.689 777.074 179.063 779.448 181.992 779.448 cv
189.586 779.448 li
197.008 779.448 li
235.301 779.448 li
208.065 781.57 li
206.583 781.686 205.19 782.327 204.139 783.378 cv
202.969 784.548 202.311 786.135 202.311 787.79 cv
202.311 806.796 li
202.311 809.724 204.685 812.098 207.614 812.098 cv
149.311 765.409 mo
149.311 765.409 143.715 765.409 146.573 768.623 cv
147.471 769.634 148.346 770.025 149.107 770.025 cv
151.722 770.026 153 765.409 149.311 765.409 cv
160.864 749.537 mo
160.424 749.537 159.712 749.641 159.551 750.288 cv
159.498 750.496 159.758 750.577 160.15 750.577 cv
160.844 750.577 161.952 750.323 162.477 750.068 cv
163.002 749.814 162.944 749.56 161.306 749.56 cv
161.277 749.56 161.248 749.56 161.218 749.56 cv
161.218 749.56 161.071 749.537 160.864 749.537 cv
127.346 734.019 mo
126.734 734.019 125.041 734.149 126.301 735.675 cv
126.507 735.924 126.761 736.026 127.021 736.026 cv
128.118 736.026 129.332 734.217 127.552 734.025 cv
127.552 734.025 127.472 734.019 127.346 734.019 cv
136.077 724.917 mo
134.214 724.917 129.061 725.312 132.896 729.959 cv
133.523 730.718 134.295 731.028 135.087 731.028 cv
138.428 731.029 142.121 725.52 136.702 724.934 cv
136.702 724.934 136.458 724.917 136.077 724.917 cv
81.4706 662.72 mo
79.608 662.72 74.4553 663.115 78.2905 667.761 cv
78.9168 668.52 79.6894 668.83 80.4816 668.83 cv
83.8218 668.83 87.5141 663.323 82.0956 662.737 cv
82.0956 662.737 81.8521 662.72 81.4706 662.72 cv
274.782 752.1 mo
274.782 749.171 272.408 746.797 269.478 746.797 cv
254.462 746.797 li
251.534 746.797 249.16 744.423 249.16 741.494 cv
249.16 741.494 li
249.16 744.423 251.534 746.797 254.462 746.797 cv
269.479 746.797 li
272.408 746.797 274.782 749.171 274.782 752.1 cv
274.782 752.1 li
249.16 719.45 mo
249.16 716.521 246.786 714.147 243.857 714.147 cv
228.84 714.147 li
225.912 714.147 223.537 711.773 223.537 708.844 cv
223.537 708.844 li
223.537 711.773 225.912 714.147 228.84 714.147 cv
243.857 714.147 li
246.786 714.147 249.16 716.521 249.16 719.45 cv
249.16 719.45 li
223.537 686.799 mo
223.537 683.871 221.164 681.496 218.235 681.496 cv
203.219 681.496 li
200.29 681.496 197.915 679.123 197.915 676.194 cv
197.915 676.194 li
197.915 679.123 200.29 681.496 203.219 681.496 cv
218.235 681.496 li
221.164 681.496 223.537 683.871 223.537 686.799 cv
223.537 686.799 li
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
295.1 812.098 mo
207.614 812.098 li
204.685 812.098 202.311 809.724 202.311 806.796 cv
202.311 787.79 li
202.311 786.135 202.969 784.548 204.139 783.378 cv
205.19 782.327 206.583 781.686 208.065 781.57 cv
235.301 779.448 li
197.008 779.448 li
189.586 779.448 li
181.992 779.448 li
179.063 779.448 176.689 777.074 176.689 774.146 cv
176.689 760.41 li
177.424 759.908 177.625 758.725 176.689 758.285 cv
176.689 755.518 li
176.689 753.759 177.388 752.073 178.631 750.829 cv
179.819 749.641 181.415 748.948 183.094 748.891 cv
244.403 746.797 li
171.387 746.797 li
156.37 746.797 li
153.441 746.797 151.067 744.423 151.067 741.494 cv
151.067 719.45 li
151.067 716.521 148.693 714.147 145.765 714.147 cv
130.748 714.147 li
127.819 714.147 125.445 711.773 125.445 708.844 cv
125.445 688.687 li
125.445 687.433 125.889 686.22 126.697 685.261 cv
127.671 684.104 129.094 683.416 130.607 683.372 cv
195.047 681.496 li
120.143 681.496 li
115.349 681.496 li
105.126 681.496 li
102.198 681.496 99.8237 679.123 99.8237 676.194 cv
99.8237 654.149 li
99.8237 651.22 97.4496 648.846 94.5209 648.846 cv
192.802 648.846 li
195.626 648.846 197.915 651.135 197.915 653.96 cv
197.915 676.194 li
197.915 676.194 li
197.915 679.123 200.29 681.496 203.219 681.496 cv
218.235 681.496 li
221.164 681.496 223.537 683.871 223.537 686.799 cv
223.537 708.844 li
223.537 708.844 li
223.537 711.773 225.912 714.147 228.84 714.147 cv
243.857 714.147 li
246.786 714.147 249.16 716.521 249.16 719.45 cv
249.16 741.494 li
249.16 741.494 li
249.16 744.423 251.534 746.797 254.462 746.797 cv
269.478 746.797 li
272.408 746.797 274.782 749.171 274.782 752.1 cv
274.782 774.146 li
274.782 774.146 li
274.782 777.074 277.156 779.448 280.084 779.448 cv
295.1 779.448 li
298.029 779.448 300.403 781.822 300.403 784.75 cv
300.403 789.873 li
300.403 806.795 li
300.403 809.724 298.029 812.098 295.1 812.098 cv
295.1 812.098 li
270.109 801.532 mo
270.109 801.532 262.339 802.497 267.339 806.546 cv
268.23 807.267 269.167 807.563 270.046 807.563 cv
273.785 807.563 276.475 802.22 270.109 801.532 cv
206.527 765.398 mo
205.303 765.398 201.918 765.657 204.438 768.71 cv
204.849 769.209 205.357 769.412 205.877 769.412 cv
208.073 769.413 210.499 765.794 206.938 765.409 cv
206.938 765.409 206.778 765.398 206.527 765.398 cv
240.704 757.27 mo
240.704 757.27 235.48 757.27 239.297 759.3 cv
239.94 759.642 240.499 759.781 240.96 759.781 cv
242.926 759.781 243.141 757.27 240.704 757.27 cv
247.089 752.865 mo
247.089 752.865 243.16 752.865 245.661 754.889 cv
246.074 755.223 246.469 755.359 246.818 755.359 cv
248.228 755.359 248.902 753.151 247.089 752.865 cv
195.003 721.447 mo
194.649 721.447 192.016 721.496 192.623 722.946 cv
193.05 723.965 193.829 724.341 194.648 724.341 cv
195.79 724.341 197.012 723.611 197.471 722.881 cv
197.93 722.151 197.625 721.421 195.715 721.421 cv
195.51 721.421 195.286 721.43 195.042 721.448 cv
195.042 721.448 195.028 721.447 195.003 721.447 cv
219.025 706.588 mo
218.697 706.588 218.166 706.738 218.045 707.669 cv
218.006 707.969 218.2 708.086 218.493 708.086 cv
219.011 708.086 219.838 707.72 220.23 707.354 cv
220.621 706.987 220.577 706.621 219.355 706.621 cv
219.334 706.621 219.312 706.621 219.289 706.622 cv
219.289 706.622 219.18 706.588 219.025 706.588 cv
138.546 701.438 mo
137.322 701.438 133.937 701.697 136.456 704.75 cv
136.868 705.249 137.376 705.452 137.896 705.453 cv
140.091 705.453 142.518 701.834 138.957 701.449 cv
138.957 701.449 138.797 701.438 138.546 701.438 cv
127.796 695.872 mo
127.796 695.872 123.867 695.872 126.368 697.897 cv
126.781 698.231 127.175 698.367 127.525 698.367 cv
128.935 698.367 129.609 696.159 127.796 695.872 cv
144.444 696.37 mo
144.116 696.37 143.586 696.52 143.465 697.451 cv
143.426 697.751 143.62 697.868 143.913 697.868 cv
144.431 697.868 145.258 697.501 145.65 697.135 cv
146.041 696.769 145.997 696.403 144.775 696.403 cv
144.754 696.403 144.732 696.404 144.71 696.404 cv
144.71 696.404 144.6 696.37 144.444 696.37 cv
197.566 690.438 mo
197.213 690.438 194.579 690.513 195.186 692.791 cv
195.613 694.393 196.392 694.983 197.211 694.983 cv
198.354 694.983 199.576 693.836 200.035 692.69 cv
200.493 691.543 200.188 690.397 198.278 690.397 cv
198.072 690.397 197.849 690.41 197.605 690.438 cv
197.605 690.438 197.591 690.438 197.566 690.438 cv
152.606 668.799 mo
152.606 668.799 147.01 668.799 149.868 672.013 cv
150.766 673.023 151.641 673.415 152.402 673.415 cv
155.017 673.416 156.295 668.799 152.606 668.799 cv
179.515 661.536 mo
179.515 661.536 175.585 661.536 178.086 663.56 cv
178.499 663.894 178.894 664.03 179.244 664.03 cv
180.653 664.03 181.327 661.823 179.515 661.536 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
149.107 770.025 mo
148.346 770.025 147.471 769.634 146.573 768.623 cv
143.715 765.409 149.311 765.409 149.311 765.409 cv
153 765.409 151.722 770.026 149.107 770.025 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
240.96 759.781 mo
240.499 759.781 239.94 759.642 239.297 759.3 cv
235.48 757.27 240.704 757.27 240.704 757.27 cv
243.141 757.27 242.926 759.781 240.96 759.781 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
205.877 769.412 mo
205.357 769.412 204.849 769.209 204.438 768.71 cv
201.918 765.657 205.303 765.398 206.527 765.398 cv
206.778 765.398 206.938 765.409 206.938 765.409 cv
210.499 765.794 208.073 769.413 205.877 769.412 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
137.896 705.453 mo
137.376 705.452 136.868 705.249 136.456 704.75 cv
133.937 701.697 137.322 701.438 138.546 701.438 cv
138.797 701.438 138.957 701.449 138.957 701.449 cv
142.518 701.834 140.091 705.453 137.896 705.453 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
127.021 736.026 mo
126.761 736.026 126.507 735.924 126.301 735.675 cv
125.041 734.149 126.734 734.019 127.346 734.019 cv
127.472 734.019 127.552 734.025 127.552 734.025 cv
129.332 734.217 128.118 736.026 127.021 736.026 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
80.4816 668.83 mo
79.6894 668.83 78.9168 668.52 78.2905 667.761 cv
74.4553 663.115 79.608 662.72 81.4706 662.72 cv
81.8521 662.72 82.0956 662.737 82.0956 662.737 cv
87.5141 663.323 83.8218 668.83 80.4816 668.83 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
135.087 731.028 mo
134.295 731.028 133.523 730.718 132.896 729.959 cv
129.061 725.312 134.214 724.917 136.077 724.917 cv
136.458 724.917 136.702 724.934 136.702 724.934 cv
142.121 725.52 138.428 731.029 135.087 731.028 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
270.046 807.563 mo
269.167 807.563 268.23 807.267 267.339 806.546 cv
262.339 802.497 270.109 801.532 270.109 801.532 cv
276.475 802.22 273.785 807.563 270.046 807.563 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
175.948 760.64 mo
175.598 760.64 175.204 760.504 174.79 760.17 cv
172.29 758.146 176.22 758.146 176.22 758.146 cv
176.4 758.174 176.556 758.222 176.689 758.285 cv
176.689 760.41 li
176.48 760.553 176.229 760.64 175.948 760.64 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
176.689 760.41 mo
176.689 758.285 li
177.625 758.725 177.424 759.908 176.689 760.41 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
127.525 698.367 mo
127.175 698.367 126.781 698.231 126.368 697.897 cv
123.867 695.872 127.796 695.872 127.796 695.872 cv
129.609 696.159 128.935 698.367 127.525 698.367 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
246.818 755.359 mo
246.469 755.359 246.074 755.223 245.661 754.889 cv
243.16 752.865 247.089 752.865 247.089 752.865 cv
248.902 753.151 248.228 755.359 246.818 755.359 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
160.15 750.577 mo
159.758 750.577 159.498 750.496 159.551 750.288 cv
159.712 749.641 160.424 749.537 160.864 749.537 cv
161.071 749.537 161.218 749.56 161.218 749.56 cv
161.248 749.56 161.277 749.56 161.306 749.56 cv
162.944 749.56 163.002 749.814 162.477 750.068 cv
161.952 750.323 160.844 750.577 160.15 750.577 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
218.493 708.086 mo
218.2 708.086 218.006 707.969 218.045 707.669 cv
218.166 706.738 218.697 706.588 219.025 706.588 cv
219.18 706.588 219.289 706.622 219.289 706.622 cv
219.312 706.621 219.334 706.621 219.355 706.621 cv
220.577 706.621 220.621 706.987 220.23 707.354 cv
219.838 707.72 219.011 708.086 218.493 708.086 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
143.913 697.868 mo
143.62 697.868 143.426 697.751 143.465 697.451 cv
143.586 696.52 144.116 696.37 144.444 696.37 cv
144.6 696.37 144.71 696.404 144.71 696.404 cv
144.732 696.404 144.754 696.403 144.775 696.403 cv
145.997 696.403 146.041 696.769 145.65 697.135 cv
145.258 697.501 144.431 697.868 143.913 697.868 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
194.648 724.341 mo
193.829 724.341 193.05 723.965 192.623 722.946 cv
192.016 721.496 194.649 721.447 195.003 721.447 cv
195.028 721.447 195.042 721.448 195.042 721.448 cv
195.286 721.43 195.51 721.421 195.715 721.421 cv
197.625 721.421 197.93 722.151 197.471 722.881 cv
197.012 723.611 195.79 724.341 194.648 724.341 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
197.211 694.983 mo
196.392 694.983 195.613 694.393 195.186 692.791 cv
194.579 690.513 197.213 690.438 197.566 690.438 cv
197.591 690.438 197.605 690.438 197.605 690.438 cv
197.849 690.41 198.072 690.397 198.278 690.397 cv
200.188 690.397 200.493 691.543 200.035 692.69 cv
199.576 693.836 198.354 694.983 197.211 694.983 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
152.402 673.415 mo
151.641 673.415 150.766 673.023 149.868 672.013 cv
147.01 668.799 152.606 668.799 152.606 668.799 cv
156.295 668.799 155.017 673.416 152.402 673.415 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
179.244 664.03 mo
178.894 664.03 178.499 663.894 178.086 663.56 cv
175.585 661.536 179.515 661.536 179.515 661.536 cv
181.327 661.823 180.653 664.03 179.244 664.03 cv
level3{
gsave
clp
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[9.81522e-15 160.295 -160.295 9.81522e-15 180.48 646.226 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 
/10 /11 /12 /13 /14 /15 /16 /17 /18 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.2.1
%%For: (Lenovo) ()
%%Title: (2212.m02.i012.n041_e08.eps)
%%CreationDate: 2/17/2023 6:08 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3X+_oCqkQ>Z\Xl%&!p$<>Qo+/jK\"e8umN!=lR"\0Q:hir@](RFtS]LEfJQ7OK03QF>*<VX3Y_C+APWWl7m/1@+mW=^'<d
%*I]_K;H6@fD#;mM;c@U-#B$=82D$LrMN.Ai-X2-,bd=)mplpIH'd(\IKiZ0p2YZND_/2#L?J2A<QDN@YV^h'nQgftZI<<YDn$eN5
%4,%Hp-F9\DXd@2u\lZ'p:!#rL6r_LriSt,)"U3gsU75eb'd+O.bpKe-b/W26%Q:W?.Y14Dm,nKFZIER=SS$!EI\"A\1ReS%qTu?)
%r!Ooh=^l?p_O"0W]l70:-Eg>Tmt-VF3=1UGOS3E[C!]c_<5e!``Pqjd<^?/X7>Chr[rm/:cS2ej`p;=8cXRt&^VQ!X9o#nenGqmR
%!%G8(80#Gj[o+_<9pa2"V5/7&67,oN9pa*W,l^/t&,qZ&g1cPgcu+hWP02\`bI/^/>N44Q`nauJp\1uceocjf>tf(3hE3@fKaG+C
%Q<"FMPUn4L[Oke?E6p)Hp#Bed$"IZ\c/u@=it^B*oK=a=^$O*n8%MI1`>qHDrR,NakBc5*:(Gc&qqpeL.bi5j(KllW9(m";ouK4g
%-84)QRas#/3bYI+K:.mm[S<5/-HrW,9/_`oQq\P-`mi'dqfQ:t=I`_1NoebSYj,Q.FBPUr03U&cL;F'0Dq%G!OGQ\#ZM6*<;VI$+
%Zi,BJjY.1hVH``*_N_C^:1QB+l((2CHECApGnlj<#6($EKi!I\;YD`^\)AG$*>Ho$M7sP[CtF:E8l[G;fg!+H46p^tgk%1<l<^O"
%=hX<rrA0olHKVGQiYIth*@ABHm@F9-5N\bE>,p"Jh'kT,n98hIg*tS7"r%@AXLf,F(7q?erVmE"4KN%CPct-_?*!sFb?cbu0Y_On
%'),gDCX@d`0E6$KD@-a>F$o#hTrPsiY#hI-@L5N*7r<\C3W/8$$Wl)Zo>XW"Q(=pRDl[98qV_D^KVO5[]$1c'PaQU8jjI_rWEkbr
%;RYFs>Y.GW<t:,VnpO>/oK2mVTBoo6%*-meW=%Q.*O\R72lt'#e52T*LK@4[al/eG2jfN:.R)Id,Q:*<o`6b)5;QgTm\@5KWGXT0
%Q]J,3_ZGfk[lWMU"n`/l"0@1e<nXSj)aX#lc`gYZSt%]<]DkjU]lL)L$(Dm-loXlPWDIaKs"p24!&3I^/o=Vqck(KfSs4"JRU-.F
%1Vih#GAQ]>rK8c./@2<hBE'cp1PNr.CeJ,I!KEr"VPM#"ddL)ad([_XmEs6FE^_;'io7:oF=CFR9!4/b;_3LX>F&l^X&Z&!,3`!e
%,Y_.0V!`=9]o&%+55XO7Z[Z:Fqa\)gJYoNtV89!c$_,0"2u]FV6i93+2uIspcRQ=j1H!P.e9*XPk1#?)_.BX8Wi?D2$lZJ_f,@n>
%\8lP"`+?iO#qjE9T)B=O*q&T'@d9h*b/V#T1U:t&L2#S,DJ3u<E2a$tA@S#@:=gCiq6hg:?SHc9RpFMVR2WE7Y%pi=ZtA-!\)=RN
%b.s9r.jqL4\CTB:/jE1l%=e:aafa`9(j@QEjNO-bbN,t>>](!#Qf2C-.kl$i%5."\!LG5f.sBVFp$A=?o.X7u&mL)Nf5)K"=&@E6
%XIY!If3h]k\/=aeRaL?Ikq_HXgFg[aT)B=O*p+(edA3bJCn4T>lEa0nFAQo;1pDaL0Wr!b/KHACpqNM,QD24Ldo!rInPN7ocYi_m
%(3EhB/ZY<H.XG8Q9jP`m2;QbuK/@@JLZ(N;/1Fm0n1JZ:)HHP@/j![#9h;!4CfNA8ig5^%_df"h"1.V0bY%Y#Pj"m4'#?aR%1sI<
%7[ejo[a0ag7@;/]l%WPA+sIsM*$QCG*`UDj!EHp%P>Et9pm;:c:]N.C^Ekg-R)mg<>D-Tb,%6t%FF\XmI#*;6TqMe&M!13.>`o+@
%odFDunIr_n-kZLJUR[BkLk(;7LkpkG-D@4FGcCPWE\iB*?#e@,=9^&qZJdbddNRU!J:2rud%E83_^s`?%JXT::+A7a]B6T`AdB'^
%g2W%t$qfU5`c4a"raCV50H=lTJK3UB%JXT<:27RSEX-44G1j>LfY8tmn8*=`ZqT^bkXj,!CQu-3mO/82:<b99.oKhGr6C*oG3!R:
%o06gNb0`X_9#'!9>%bV^!-aANGX]!DA1le#(_dO`pfh!HE+S:Vd=j)b?!@F(F'WFi!gfp&\urrpkr*L*N\G1<0M"-q7)K5a=YlJF
%75VG`/o3R6)jG"=(Xi*is-s$jE1*Rts2X"71CI7oroMB^d*uV$`sCsQ$_[(D5B(,Pb/1P%fBs9b+se^E0,D*/IL2+t5C'g?b1<k;
%A_)D!f'G80%JmGDKUQ:8=.Wd/-A*fb>l5s:(P!B`*KDjF*??aaX(IVJbK:q/eh[%p%W9H$>3ZtB#=(WoE%kp;,$JJc(Q'0!de28#
%(:gs-aO*Ec-RcGUr'?o/J1WUBk.i)JQt6`Z#1S+cSkY0?G<p!X,X-d[L1gfBKZP"M=AZdEpsOnug585ko[#Mr<@Rr?o0iLN9_42Y
%p2;Z+#,3WF,Q7>'SdGCgBqn0N;.>cU%B`rTjTTh2M,.pHU@g%d<rN1\:3`oOM<G#;HQohXd2\thVa3,'"]kM6NHgG=NL5^(c#K3t
%G7Lksd$s?_.d<"m45+Xb!6=[8PR&0Q1R0-R>[VX^TCiIR>G`:SBL6D]d1T!pZ.^P37_Il>NL10R*T/hGDO(4cK])V9Mm-n5B4:>n
%BS#%Rc+B`l*1n+5(r>GB<eko?@Q$_n+1XCXj(6]Y@0uR-NoWQ:H+rZ\a(?Ea3Be*C6]%[*Bcj5bW=c0CXVl.;+Z@AWNnTn[/bE;#
%1tk3a79p[jRqo>t,C(4\a0@X(l>o-Q_dnK=NRQ'jRNj\![6[KZ"c08lMkK6LSJVSL-qE+=E#&P1j6ZR5E88skWeNThM1KqBM>nLA
%ocAplG9FI@pUF>[(&_!^9,!Z[?VmK"OK#=KF<S-G0cst->Z".$=SlXtUW(PI"n;-M+0tifqF;*sRc5N/<,K4``M%Cee@$l\H<jd1
%\;5cS=p8;!!d<SOK.BH0[QNLTrJnGC<8h`TN](.f)+'&t?2;]*#rMo-LE7$YkceAEJdmBq/:blHFreLA,:B7X$R*[ZHBJ(JCB^&#
%[tDk]JWp*Oe1:W,5*0c'j,f%&Kf(#u)79W$'eYJNT*Dhj9gT=0&iBBW6nnT2E30FZW(_(0Q.uN;cN(V/It!H)0jVhrp:W<_JeJ%.
%HJ=/A)cKuW?#`#\CDqb(..dfW4_,ES.r$3j6$P0sd>3+mAf8C(kT3r<JP3Gr?..[k#qdHCKha"h?B@MX>q2M\cj2Dp>Trja\r^hi
%c8fpQA;Rj9(2u0*Ek<1LeC&$ME98"_,gIiq]"FDOhk9JXPSOP'?pCB@j,UNQZ@ASA5hDI7nj4mH*<UtRnDDm8C(+rOY1;Hn7``Ar
%`ncDmOO?*^Hl!toM_hp\!UGPlL)Dc661>nM/Eg@tH:1"3dm5K_ofs2WC\eqi=7f"@>cP<,>QK.E>^R3!SZXi]ppB&/iS#Q/7&Y1$
%.YfWF//E`.8"*&#b%N:425N1?E(;=33X!5,JsY":<#$61)3"\7;8^CM&dqm#Z6p)t/COiV,U5@-'W)goNrjf`e0MkDgM'X\,2t/a
%1:b230Xk#?DLsto=i_$-Zq9aqd8Y`IlZ<XC8Qir_29&<&P:WihMV_(s-=-0r!k<%0%$ULRLF4&,V/d5ZUm?VYdPCan@:sr=/%YLY
%=upId!LM7$s!m+[&/Xlg0;mTGkG/o5Dl-ibrnRLPQ11*V<N06)]2cFPp;/t-e^%H2[p";p\sA,?"5V1sV+jc,@UD%ne3mU<;?>g^
%S9d[]B:D^dO2>hbfXfgNQ(*DpWSF/7OfFou'RJVN\dc4_^@A7NdA8pQ8*i^9i_:@hQbnNP*E&'a8$u@M.l<f(=P8LV'<SRR:K?kf
%=_\_TP3?)%9#<!udIf(lB7&eASb+0gG4%3Bot(%,"jHmWA6iuOogSo8?eb\E;2A>,K#[3and`?6^#3etLpeS+$:B>51d@gOGK`^W
%)nj&L0)D8`G,4:\hP_B"c)j'%Y<K8+KG=u'0"i-pFH8NDGp^^58IY$P>IqHcSXB/PlN#U+3\rg!rR9GRUh8\3WS$P`8X&V!W3*`h
%RE`'3\T[))Ysa,@3'&$/hA(,1De+:k?Y:0;$N#l(*(lqq*2;YMaN42nX)e9R0'1msBk;,'4V:W\U@*O4;;Ut<NMg70Bk(Z@Yo.V>
%#dgig2n%hf[bTN$98;WM[To0EN,?,DD7N'AQ*Do"[cO*L/[s]G)NBnYc'DRXL[n]VTp>BUoU>C.6hM:5dmTk6d4FG9?R<j.1.$%0
%>3S3&"FCq$%<p_=hKmj#1,HnsBbSH<l9nO.jdt(O1/fngfj!eiI#2))!<"-.Y<,nKM.=H;=/n0fLTsHhN=Ur3+5kON*/dEeh=s(;
%DZ&nM%6^CkN*8T`[;3Q@XLX$cfr5XS;_Fq/iq+TB75/Z%?E4kb4;.FKor'ERI^)-EnpXs=G*(QWTDVV/h%#4=XhAe4`'-%^oa@\U
%*Yt8CFspC*HbWZ,0\$_mJ*h_CYNf.Ya,?K'GB>O\roLe-UZpQ$s2'Z^_6gcMm>_=cE")%=_g:;PS+.!6?16]663Kg^VQ\O49a=_L
%IAK&s:"r'8KBlk3Ouo$EXd`5BV"CBW#`t6Q.\fAilRj<MW5-/\JWe54kr#Mc0H[C&%o0gf]W/KdA8pi@$HL(RlAf)`FKrbG'<0+M
%GXjEF7]kb,rJW!NN#pc%$l[eE8+iQF0PO<4Jn\)-$8G3\c,i>0@EQ0rh"'Eh;tPN'M,Pip1"eqJ.='9;5!*)aG(oDH(q;-;0g6RC
%dYSrEa!;.sd7'o-eTGR%:WO/DL:cjis,&+MJ(!!7H@R\-#-Wdd?;Kf*?o$nR`o-M,_<[,672MRa[-//ght'5e["e]bO4;r)p#7%/
%OnaU,igprV17H>&=<(-+<.?[pF3bas,&qtie-(X%D*Vif7+gqBR[P@+C=LC$_8WnSmPqVZ"R7@cHA)a_C^#eVR^[V\ms-*_Gp'CL
%+i/6WE?WHJaZ[hnK1,EFE`Z#DlBVt:1;0c3FB^UC't<ojPK3skIJ'eMid24s3BZ`7j$5m4pY]pBDN\-qpMB=Eig+j4+C44jiK)75
%OX:$j3^0k%a!<]>2ig_ip8beEG'kM5S:jbeWKo$I4l[%u>lLJc<CSll]Wr%=][npKRAY@M^67P^eZCH-6m>rlVDgOMoX\F<,#`KA
%n"1Gf^!1>.n&e)TFoNfJL:\k!bG/8c<*=Q\SFUU]:Eji^U:fa?8#eW>qV&P\GKE@;7%]uYZ.(?')P$pA<nQ90EiJ=bM8WSMNF1?.
%"pZ>"eu>mjp.eW$C,5B[.'tJ+5.edX0N4)`gUf=2NhW"cc`_b`\hU3+`bQTr)tgJq7[!["+dMYjc+$0;r<"e7P3L1R4/nB'j$-:C
%FpF-Xei4<(6%E"p.7KsVe!VTC\[^NfP_>pnSeoF,''2EkB9SaUqc6T-nK!ZX;%hHp`ihM;1\!9$=Hk0VK+_%G+%.YPi@2a?,U@^(
%3u0-13>ol3r/2VU@o5]<E^gY!P0dCDB9QsJMt0,mSH/a>:GWb4)0UE(*hAG[dNgXepC)":BpU07cJ5l2A@tRa\'L*hTij^03HCo4
%2/M1K9I.!+4._</C=\L$7uiP7q`W6kIL1/[I^ApVVj6'kkBZ0*@aV7NS_?k8A8]D*.8;5#ph@C;FCb1TT2$U1A2[s>7LHC"8BRq/
%;K>#,j_9Co*pJ^4(t\aK\7U\>D2`6h`O/+$ArLM8>T<!E_r-tfpNemT`ita/XKCF]O0uAMW]bH'HV3#G(tD*-C1COd[&>mGn<-26
%9--MA^ceimkY.R2_;M?`1,?nnBZ/(BOV&ZgUEKm-c;SC&PORemF&+NIXXLKnFSIF\n8AIo_uEfr$g@tO#X>$\<->\0oh8LFc;-=7
%B\VtNWCk^8HVpg:Ic()5]2`pCAq#Cm&ZN%!oq#XXX[Wb`D^Ef1EU'[<:;+W3[Y(.ajXK?JHCPbjds@#:GsX/NIiq6JP3U=U`sDZg
%XOoTolWU95NS[9"!f%,Gij!ho$K_lK?E;\hI>eGN#Q$m_S>Dl+T0/YrPt-W3M4E>4m^5?Or,c=HG7=TIN+e%frP%^-/T:qnU@k.A
%Vj*]*RH61b,ei[J`//:/pFKF0=YII#p($5<FnWYNQ^Utj\!`2VItC#X&Y9_3*!=7E7W6b?45WN_0E'3Kn!BS0B9+ljm=4.i>l:-F
%ZD8il2[29)n#B_"Ob8Y,DB83G55P4bi`"V5<ofOaG]pa_HgAD)pO(#.^>hB6]AN3#^M[buk<%Pl9j0%cn+f.TfA_&$pHPqGqq)=V
%-h7o%5An$urEd%9]5D`pQC>De3aq:$>PV:ib&29smM8m:\l8"\Zl3.N@gd'g@>uk?Z%Y'DYXWJ<PqgB*Zsg4iDa5//=gp>rng2)T
%C3+`h,b;ErRB/g3[*IQ,V)?-.PsKiclt7Tl*OcIOO&Vg6e2WiGqD-=77B>BbMcD`saR!i3(\r#5+k&Qi*o4/FSk('q7]Ut=$IRgG
%ha\H_[(TfQ`gDao>Hp6XUfW.nF'b,"hrr;Rp3O??j@OH5./bRi*k#-s=8L.nATTRX,N0d)/gK=>,1"ZhAMeQJh-Fs=/u)WoC[<ep
%]8X`^UTr!UlnZ/%QVk<>BK[\hq7l@o3iojq5a_E#pGJK0X!,LKBcTZT:Y'BI9ZP)IYPkX/b/=Qk/=dN"F>+=)o'71(&#lnp://?e
%J/EWpL/MsXrePj:QoIS14$`S=Fs_I(CuQT^5r'gqml/q<;bPpG'XCGt9?hm_e5J#GN.@GB[+oSoM'TRTmouG1PPAXXA7@)0T5l9U
%,_:1k(DE!jis\Tl9/%]1&W\_%NJ6CP"&jtG9bdWIfp?U*PS%M7l32d#BtnYXI;,4"Bb]2]:,d-%KA_T_)b:)`TC=l>5)X(BihGDg
%>qAer0D$b)I!':H_:*o%DR&!gRSRNFH3s+'R#:od;(7<*&a8Ou0ekAr585%U2g79c&'i=CKJW3&[KspNk7FNRiK[@6IZLi75%M9H
%CnZh?[)\rr`+.-6(><UAcQ-5'f%<<9-u2#7W>JiQ@gd-iToCY2V_]c3$Z23/nl-6CHfY`YoJ<cJorDkp&rTFZUcY>M41])G9M8tm
%I[>p:4Q\,.C[Xs\!dG&VcUmZYk]EeAWmo[^E?BXg8!]i>:+()Mo:kYQ7`Q'>=ZaA_O]4to3g$f>9lFRu^oH+80hs^Xb7G[A*#^1E
%lIi:Z_P,`/e&+d;FRD!@ot(%,j]2c&9T5m:DlA_jIFP9h\&pBGGGiOs*bf;/]G$-h:Ch!fk+_8XRSJ.[.j]9-OZ./W>#"K_o(-qK
%k%ulA:o^Y?*_c%+&Oma1X6c&sLWr`'d*!)C_js+Fl)7Q&@GbO:FrCO@=D>YYVE;jj)R":f*-m2b<YN?(q\;<TbU;5XnY"43h:IA_
%qKn],672oV!FPjq8*TtU$VdSZ$)uY'5pQ*U'^\;?=iMrV-rj5lXJ7sm*Ao:e)f)E_/bO*sWD%b=@5#`Ek'hqh&t4r<'(cfOWb9#n
%9g'h%.%/0pLV8YK\Zn"NhDe+)q"WL5)l5]aaHV\/\VH2j@rq)3h&2]'@rlO(c94a?/eMaYfUNnMF&1&N)dtXZ7sulW.Hb23m)8i#
%iaX/Jc8_rE*N]9\ikG^#?/rkQ%igPAIS93^_ss[6CVB(["$:f*.+"br0`=6rlN0S7^Q<I2]^-?8=!UQ3C/1JPr3MoTPH`I41WoHb
%o%MeZS(QdbrDb\+Gj<3oj*l^FImEKKT@E%q4h(qnA<D5OE:@6+7m@R*8A7JFB&4TK\bn*9q'=seFT.RUXV&-LKDO<TP@".a'FrY2
%M&`O:bAdJP4UI5h#HtMKgeVjug_R*`^9\"47',YV?O6Kn["0K0EI,Am3>$p][-AH&_*'>/UGQgsQ+$E;_06u][Tg!tn"a$:H#m;W
%AGGAY<UKIfp[7cU69/5l!gjf$R9%FRYeAbq2YZ:?\L/L#rp._^Tm/*R=IU7)RnNN.[LYd$Ha7ro,-0Ijo<nVK]W+%[SY<CL4&Lk4
%C.>?>F]LV*MB8H!5Og[ZNtFQqKHCG+GO*6^FEZOl&gSZ=YBuhD9R]%,WpVD!kl`7Y1FKkZs6j>jZu4GAJ#E5Y!p!mhATT>Jh$&Iq
%F9LL15Y4A-^@#"D*R"cSm"84i26SKI6HQgY_D,I8i"HZ^8HSEa/ro&Q?/b;Ob/M:.id6uNaXi^^CjaU80l`%2Ib3M^EbX%7cJ?gj
%j44l]^R[:Jf*jj_'L#=YrS%DZlnKtu:G=BJpf.T\/MGL2c0W2eBU$4,NWTFo4HXo)-r1WVmMX,*TRDe`_$c;9a=I5Os3X-B,`A_X
%VgspuDs?E3iLjQ64i"uAPC,J-Q1'PNnf-c5\Fh&WiuAqpM't^bS0[.b]4p8GneAB@lohU@b>3'*0N"\=SsKkG(@p2,e&pWs2iHnV
%2gr[XFq7Q?:3md@+B3SXn&/eZ]ZKaO/(D](HtlXh#C!WERa-16@e]u6;A:PlG;p&Ra_6)KYr_=Sj,qGA`_88nPGLuFQH!`aHT''-
%fk_K`A,dE#)e=ic+i0qb;f,dp@<2@FAs.Un_-/MB+8N@kdrTp_4Z<n%ebD>Lj(Gg44tnj;I6:3Ta!6O29Rb[nVrJA!@nWY2b2pYQ
%B"&i;4+7EtrhSD%[)eiU>EBJdPDA]EUf5Si?IkZXjP;t3E_;5*`\0VMU2RMd$.;dbPK@HQeRJ#',bjNo3ns>-qp9:SVQqW6=nf4$
%NILKcTA:E6BCYHab:WM&7tZ[=?hDWL.9g^JY,!)9l<LoCBs1hG&0LP@`4sPWj`9UKCV&NV,L7kn_=(F`Wls!eF&H0u#W`Q9c5h#/
%8,KLq]imBcJTXY[s(%Ps7BY_+DtEEQp#[EpkAL?-D,n:,<VhUh_.V[2#Ggrmi7;2l9]Eb';PdE;K:?Cc%tFC@J9ZK]OE(?9dO%mm
%9p=YFTrYbBis3KQk_!T:Z>RG_``,ma@io7;Z4uOj#0ZN=$U=R*^YZf)+$f]4j!3q^T>/NHnJQ_"J-$dl/j]s1^^K^QPbDq6Th&Mq
%&)+`rG+23mpMU#$\tdrU_QXiRc"u[3.0C#CfJ:ot;m^]@o)Y*&B\$nX#)3Z#n_l,2C&Em%s6LQ5%H$M$j]`@)s3"hm.-S]#>`8/b
%F0B!<i87'"\+L(F9mj4<%EBdYrQVic)`eeqSBet6\(m-\!LN#n_`sE-YDbpK^F3Er;1$h9)P-U0Xbp>"k+*iXdF?j4:I)q>5@ZAT
%KSY;K3ZB=Ui;Pter:cfM,m:-kAq)i6'"V9P$Gi^J^.Na=)<rg0n@KK\fr=(fK><;UFQa2Mn2Kf?]]$3Ge](aceS'8oQ%?Ngd(M^@
%&5DVoS_SHnr*$^+&+pS1V3,jAQ[dge0<s@M6ZVH'9B^>6Yj9&9[&R1Jm&h4PoZLS"g)Xk",X2!P[G?)o]L5Bki:@:75rb7"?0][j
%3uY4^=[j>>Uts"!^K3\4A!(k'iiH!0'qU_AVB0^^1n"#\cH[2(d^!`SdaE^4PlGn'LN=OacH6_X@XA=rFf)"Or)"*liBWH5igotq
%[9o6>dY\(F>Vb+Rb/]lof0WhSkHr>jD2Ol\rs&>aP)%YlrIWRgot5e3T6%1B9(fW>dG1dh/dH;M-/Q>\#!?unE^u5iDLZM5h5aVI
%4'-IMg",us/XlUDjciE_d3DdjD\kU!'3Z5QD[3:cqn8lqmQ)2g]UKg(\P>B2l&M&+lYWJJ?^$pU[rUmP2flP.\p%!ir3Cjk]@g']
%*Q!-)mTnE"7\fTko_ja!I><7CC<]YQo_0EnlU]:Vq)&aa"5dCIWIX\+H9F5kFTQ`/e#?]c9sCYF.t-TX84(0FhWW5^a=![f!Smmp
%5dfPd>t9,X<Y\39e'Y0/i&n8BB`mYgq![+JZ#T;\,gIa8kJ-.plDO*\9rI23H_$V=2f>!6MJ]o?%C;6=gITRBig*;NP;+N=/qeAs
%W_)MfeCpp??.oNlml%"u(RAd0A_eE_G,gl\kL,Xh]iqHPN\T,lkQr`Drl^Reh#B7.[:6-"S<kE<^DsdgQ7dcT'[!8@<:Fj>l@2^f
%]nFZi_FOM>7A$M?NM]oer8e]_?<oU9apr!Ji_uQ7BdFdBP[A&]f3@@Bhk:^mhEY=[qKf2["gWV"^8jQ!TEK,]9?"4>F=aQmY8Ig'
%ld:QXhg+[W>Hd!dDIYr@]iMIEWk)*'=nf(O)=>li['jI]l,G3hIPH5XK^XMme$5$/""(Xbjna$1::9K\"HM#ZDPB_WmOu%3AG_iM
%gKe\S,.BV`Ak@T;S]I2f5%`!@><MIk-P7bbIn<QMrONY!j3W#6QJX_t(l)t3i09A=)g"GkTFC7CiGe+Pq:NC.muME)Z0G*8<6bth
%?BaPKo8;A9OX5cSZlakJFee:($Qlmd<k71]ToCe\iVKO<_aSV,8XXnrgiMc"SqGEc@"rBa$IaXi@VKbAG.+6K;n0QCURt\HRW3A\
%@_26BiC]RS>lL-\jLHn)e#d`kjLu9eqq0iH8;Bp;);-+sIVYl%F<:t&ZQfD]M+?7;Zkfe$m5:dA$PLg]=TZ;Ure\*j^%BpW2M5XE
%QN7R;g8l(4XWj@(_,]7o6TQ=Bn?r?A0QnHNVXq)TbVLrH\\l>Adh1A[PWqSimG"Rt^$hoj:9RZ4bs+4t>kWN;oQc2dA&kS-Jo-5m
%TO0SU,=h]sWHNl&`C`82h%j]F<*,67;K+*\_G[3`ZE/.baaiQm1WFC[^kdP5l49&$_Zm-MI8IQCK=]Abp'i*Sm;'9,OE;N9I&dG^
%!%()TagtR!Y>TmUD$qisXi&`cKic:`bT<k62H`j)TNTUtBKa@C^gk&)CVXGWs-S2/a8GI.PT)bt[:uUmT'FM6"6qYQim49qjK=:o
%kUGV::"287[eE>f$>9`k/o"qe-eh`XWd/fP>>\-*.WV!+BrP;.IeOB^d2R;"6MGU7^$3%1qHnRc,N"i6.Ibh1/uk]X48V0_(9dG0
%;d0OmTeR8Afd=dA\tXZNQVeDBH:(mu\JC.H;^h2F?!$]T%dXJ/8tpNJ8dt'J@TXQ#e*t'l[rE]7OSL't'@MHdnB.lCgko3&^3M&j
%i&66AOO+]be%s&4eAUD"25cI[J>Gocq5$Qj\9(/t#dB=9/!2.hm+l7/FU'bt]':$56-#=2nnQ&XI,7;O`uFbVbo2g(@,qN81"u&H
%2b2T=%+S7.H[WWM3RqJ3,D'9BPo]7o^4o-3Ea[TXg6Y&,9EILYK:TV`Xd&O9L0n*..Ja_@K+i@#6QN?iNU,d8O><r8(Q<#DXj<;J
%:(;`N;6%"G;8nFc*4;GeBNi6Q(YrPeY"MF"?8MTZ^Mk25<h7t/'gP(!medQ]`DX/*f9SG@D/NO'*bm6(I/d.qQ!.tVqsUh'WK4*\
%C49mcXhD%.9\!K]%ki)Q\(-c"<2tBsVl$l2#B,q&hDFWJqTbGBf&"Hueb\pXG4"bU^T#`<pO"GJ5;SEoc+]Zt@P*"TD=;E<"4a33
%2tcp7$pHeWj.AgZoBTs*5"rYF?PD![p5Q]#>;Ub^2s>0T^AaXT%l6$6kM#[Iju`K^L&T;rf#he+F-#4+oVo'RIhq7oN:gMZ_2$\M
%/Gs)!gAc-nTB9J=T1;`&`_8Gb!reS-]-\"GVQP,Cq"/#3+(*3V)FmHq-T+oMV[jO^n6qI,\*H&`rY,;o`]k9k^9@O+`=EIVZLt;>
%F^Ct1H#IM4S"Wp#)qK'H?XNah4rLc/[IYVg@f9lPPtA%2YNOI&dc,`<k\"C?I4[Oa^j+1S>s!PMr&K6]o6)UuePa00W6oji:d!"<
%6=quqV;sSc*@:a`o<S;mKH:!h4'd2>Iq'>a8sdQFil=j;>&#e(FB)ILnE0oqa8aOTitNPALaek/rksYUDkGWiF=&ASX;B0<LlVZ:
%*HZF9lPn3S9E*0Lb;_q;BCO1.6.fS/QmV_0n?o*AfhJf4m)Mm,R=jMbl0R-PUdcr)9jdnt[ZFk0I^M*$I@/p5IPJQLYEt/#hYd:R
%b!n??/9VR"%82]i6#lbtB;XZo[anfgDseL_<oG<*HM)H,@;TYH^%qK8?nSNtYO<Cpo2ai=hkfX_>H*>,B&+/r<.26G3IL@oRO_YZ
%naqE9q6HI7]8bG)g8Bl%m$m+m+4j.i(CQ[7q94lRg9\,kfm(-<FtUOCA[Xct?GLsf=NE,Kmm#toMjlM!>djR-XCfZPe@B9G2(mBP
%]s,ToY3iF&:aY&6K=\P*b[E#E[?+Zm/iGJd^:<YZ2fkRq(=NrmMo@>a5.e/-g-2cN7fO)Ws%Q55Z,P5R;PB8B.),YB9'&i+@,?2^
%Q$WD3M(P80'/hfLFWr]Pqr)1&IbC;?B'6K.[trQrq\B.">bC[?q6+eL=C-7$R(K`pX$pRie9#G7qWi0:njS!doitWZ:JI7]MPjhK
%l*q(4QK=+Um-F6*eD/cOQ^Zf88Z*?\:LmBW:;39p(;HsL8>XWKk>Fs>V,o+VZN!,-)Q'!%-_&F\C?sMCl-h<CV2Q4Shbkd_X/E$X
%4)2oEfA<BjO&Oq6.g7sOQ$P<9C8P$5hsI7HT=ha/]rA;k<-EONT?;SR4A2eNf:StlpOBnK]q)0O8T!nG-<"-,X\<KaR6"".^0[1"
%m8"[jWV>SD;X/4B7nXlG+-'8IXWJ4U&)N5Pe>KWS='3_6&'&;Ig\^Q.eFt3d7I'g3i%S1/:j\eF.'@HcXurVM\t55FVCKb2J#9ll
%oLA+YiUgc_q*K?gOkOn\'9fijcGXgJEdD3glGN/16LM6DZ.PH?4sBAS.haDeWB`<SqN'`^'@uTqm)7%eouk;=N:V)L:&X+uM;6Xt
%iPbT%/T"tglXkEOqoda-M7qo/2K;QB?_'/oSfCIPPbFa'RI\;7fjX/^ik,=m?`\&n';]1eTJB[I3`4Y@2R/_5bcrl_EEI]S3N^!/
%R[bn!T2%![)K.!kqU(b]Vq$Jm$RFlqbO6qtPA^q[I%&:J^>#-)HRQ'nDP(7MRb[r6?CO(RnS3(7j5f">jB&rO1$S$doh"oKYVQ#A
%g%ka"9ND[E=-JX.biSGQ^"4(HB3sXOT.bTH\9]d2D#JU]ViE:Rm4W*:T<E._;U9E02Y6jKRTY$PZZ)p/5BtS#p&$Y[]^bpCd`MK0
%B6j(>o8B0AX68*l)m/;2k!jYH[F0@)eP&\ef\N-&B[(pm@_5BXb%PB&VI&[cY>/ZjMo2NRX7o[o4'SoNV@LlCS#MG^bn!b1b1AkU
%MEa_Qe;ps)qbsn\6=i2XFL:;#lf.g+oQ6ofXdKhQe'%XToCSMMAeqD7hCq^5VKY4/=/V+V?bDj,oR>hJg6#%^oVJU<T!%3Oe'kG<
%\^Qu2`p)L,U:^&+7Q^F7Slp?Rnms/[j_6N?H\]S.r@b4TB22++[@(s8X.>Xdj5\!MAUF#bVKr.&259'RlDrENqSN4cCY6Ytm&M4/
%F*;DKjhpEp@-$ZOol,6Nb87'1>C9N,Sh4SdA%%f]R[BSd\qR\kgqs&\\\5[;p\J)=4h'r;hjE.o?Phlh]ZZkkIJ6WDF/@D3XCgm5
%g!]&]nimrQe'jp:kDc\@TC]8DC=i&qe`ZAuqe=BEs6.#Nk0M5rQhfsqf?a%_n*KY_gt_#C"i^&X(099eS1is<b81Pu0Cn4Ye"%$B
%"_XPa[I@\H8hW"K%SWh``U)8gp4]fd\bkCJUA+K&>%>8<@^".GI.?am^A=Sn?!VeS3PRa`S>[K70.p#%/hEI7Mj_Q.ma'A$Xn%1T
%GbT[b(VbG[h-%Bc+'^D+/jIJBL$[unZnZu8:;=?>@5[;OPM+FWanEp@BkQc,D7]YJ>$dYBVnQD>4?,<-ZAOkB;Qf]dgX=r!;dK6A
%r9i;PYbSr)F8t"*4?K$X.BCLQfCE_5=dS#'pF#'dbP\>era+.:.TFWh2J9Lm)THs`QIr7U\LY,Qa?/b@1DP)YEZV9qh*4c6I[2aH
%nnMc&=nU@gb#[rb8*.X9H:'-mLSjW`HZDTHb9'bb6_!tUk4J,_lFr[7Vgc%G^JTJs?Wu1%l(/=6BM6V*K(eK+3N^!l\1jV)R"*uB
%glKc#>!m_pckikJS%=#_:?WY-gm!9#Zo=m!(,'7tkDOW7R%M^=2D"S#Xg+I'3])j,%aU+*nnd"SBn)X2kJ(\bC!ROG;8R0tg\P<L
%X=Dh6Z0ol+N?S_!S\7tfjkI7%CFbb%XA>lI]2iY3bn#/Amu:d,maf+CSNa%+n(4^Kg>C`LYk"o_0:(co+5\_)Y>:qo^0Y_/Irql/
%bGCt8H)P?:q,Z0Qd;g2l/,B*:A*#-=FaKs0qJKoAl,]bUjk36(jdY%dd`_Ti_WFM3qD.g9kJa@fY81Jpbe72N0@%8bFfl(Tc;'sL
%]rJcpe^YHT>P6NJq=Cej]3FlrX(S&JO9J[#V:tS-`PpX*ldahff@PAWmJYY^qMY:;HHi_P/F@:*]ucZ,baZN'WRRDHjgpaLIJ\>]
%;4Z%0bZaPsA`iXUoHNm:`js7;]Y+6+[GSGCfr^]Jc[O&T9P/)5_?*]#9CL0,\W!i-RQG=DhrQK92brqi5I?;nF)SOMJ%(b>kJ*Tp
%Ab*7t4,7TEe#T=QX>N5OG5NYO=Y%`u5-E5%rb/C:/7$rp]C,@^qY=I(Z&r4]HaTP#>2M4rkB=,!NNZ97SW06LF7m#J]p3r6hlgD%
%rG]0QqR/.d^>+*U['dK5R@F)YH2P47g\bJueDJNYPhgPamc;6s_kX99n#fF@eZIN<c],&.T>$k4J[&_fGa=fQZW@%bp8]tQO+M6k
%c=H(HY>.:]fU66KPF^6%2RdaL>Z,`oA62[@$g-R$DT5fU]R-YSmd=+^I`_&TGLfjho&!thn+/s5`SSqKl^<1_b*h&BI/TnLJ(FPK
%I%U7]d<]`5HP>lBm+Ehdk5E8N0m>=`ZnEN6<e$JA-e?`3K?EWP]>Gq=qY5#>l/;L/gYQ3&-oLO+iQ+'+rUOWOH$8Z?Z?^G=4C:(9
%4O/E4>!Dq-pu_NprFk<h7/ut<Sa9U`m[RNUYPgGOb8tCpc"Z>2iqW/02)TAW^K=e=@(cI7j29`jm)k+,l^bo5L%!@4O86!"k9%Hf
%<if(GVf_HCq.fg"VkY'OhP\NMh"GB(d?ssHV-\WJ>l8cZqIT(p+n[-?<Vl@LbB[stC[,\])QNVEZFbM`p%\LEp/g^]CjshQA+JA\
%lI3_]Ou\#>Q9IK=4569:k#pZ\e\_&@D6rmu=(U"@^O9u8SEHC)?_#_d:/7?UDtX^4f&lu/o9Ft,rUZ64ao6R6rqrEsm5@b5R_iKc
%I4fbKRnh@UEVZC)^*)$cQ'9O8Y4bWAh>LEIZ>M\3Ec@_drE6Y_48mO;\A!3_?E/moH+A,YI<Knln5<?Qqs)>Sr_hk=WdJ*UQaADe
%/#E!\bF_GXh/-+bIi/':bo_^J(+MO`Q^b1]mHJZ]qBV[fY8]]@:AO#*H`R(L`SAVSLWXAnc-+!sjdWRTXu\@ScW&M.fU$>]8Ufd7
%0[ibbh-9R%]/j;I=]=CpakHaQg%UrEOEq/^r3X2Al9A''SV_Yb9tU'Wl)uK-Z[$Ve0fO5`s5.R!Qnp%qJ47t\Pc'lPDYQ">@P)f7
%2sO5!3)TVNr#NQWDRG#2N2Cm1YoC+<g[+Eu;sh#m$[%+s./hIDn%86#[pu&:I5a2S+8<rRea7)!ms+'O4);?m4Z9X65,dnbOluX_
%G?X*?WE+1p&a8AEl/nNJ?!%Ho-^N+VZ(GAfo7If:bN0M1H2$S@\H'n"3Ahkm:i[LrI1+K-+Qs&UNV_O)FeWdh6S4uRD1gVepOMZ)
%IWb#Q@0l8'X_p'&m]I]?k4b1A^+UsXF19u-:c$2]Qh.4:VL\hAd>blX;tfMOT"!oMkkbKpR;@4Xp?2i1<c[IZ@TT^3jCeFfL;/<7
%qoZ$5%ISUeWY/),*'G[:5bb+=2"4/00*<[2]VB2p>\[.O%K9V6i'1O@Wkm,F]W1%5G+rU<68+m-<@V#EF&I\_?:[n4:d>a">&&@c
%:r/Dh9mB'HUp@n1qh)UcVoC[7d$rb)S/i+-+G7pG\u^X?nX;mp^]Q0%[<E3@W76o4eSEC0Oe1l'SPX@#?E-Gbh.]=Ha')"+;J!nJ
%?_9eHO9a%,^HeH\X\uRZJ!!RF?of]c!cUHh6QF>A#@2M\]:st"l#'NT]J_]cYJo>3ERJbgD;a]&RdSR'X)_Nh9',d6c[MYC(hsZ"
%X8rP=QgAl"aRu!T4R`I!(D*!erY::.+b(]Do]q2:4?AAdH42SG36uI_]-#`)n&HDE6*3$NRG15Hhh.1O?ioS\_kp?aL(QFo47"em
%Vsa@Pao+@ZMt4ZWTl30dC-sh2+?&Q8"2Q>Y]DJgT%_0(;<LX4Q1daho.).87orA>M-d'q%DXABF2GgPuLDHc](tmkkr.\'&153;`
%mPMDD5Akn"4u##hOEQl"[s,?Q[XJLjj&Ne0<Sa^cI0OIXkd]#:[850HfRYbGd>-mEg2,**Hbj-V@FPu"!N\25)BQ^KUYi*3DtI1f
%i<"/i[g/Q?XMC;g2l-Efc;*!aV=n3:h&c!OU)RfgRme1"dR>U@Xm&&EEUN%XV:j0VTJ!W%&Vg8<>:#+5&bqqf1_5mk6cL0_IG#T1
%Z;3u.2Y@;ph<5&=`hYsd.4*PGobW[<N_?jq4`+D+*UI8/R."Gc[emJDa1<6o2N)2r;Pg_S_eYrc,b"ZOdFk?e!kN8s>4B[G\'V"!
%XaiR*?fqie$Z6g0SF&4;@#pQlc#b+Xpks=U2lkOCVAk^C_94u9F\lAI3^O_<9n.PhB0h:V-_c4MVD!Wqg5i-*^db<tRBFW5KutLp
%,ZVG2q7g+EdAkTArl2TnIFY->Z//$`<K-^5BT8S+P4%qP][9MnJa-*6+]Tg.SSh_b3t&DhRp>%K03$^FFUE4rb]#)(mVE81l=%<T
%/h>OfYaA;XLurC7<\W>K+0)KD8YKHaj3`[g;bR/UG9[iINiK1)EKNGGi`fJtV#)[@2WF\s:l#U$pN`6Gh7\%*834[Q',PRHf\!o.
%W8l5ln#%AS+6)^#^r5'&L[O=#f-3_OHhOcM19;0.\HAc"CA<@_&$WAnWm,Xj>cV4V0fS'a!JhNGB*`s2kKQm\(kD$('!.1@`sN]Y
%CX'Ra_P[A[k]piYFhP&B/qiems,A-X&9K+Xe%P@4AiX.t'e<V</Op;DospK[f%'c^3t,cu][X#B[8'-Satj%0kpoQBp6b:6VD990
%d9Aql.IMD]\F-F"[o"RAJ18A''Zji#?/aUM#i8-?F=r_4EW%7Y0%@T2JLD1rlSSCH%bIg2f!,6m(pj9_n,_un='kj/56>H#)ngP(
%oJ(!Oaabq]i<Qls%s$ZX_Eg9]NLX#GFfAVA#D_ip.CX-^P(P3>-@(Cn(EQbhldZbXWn4m;<4m4TOd.iVEX&iZ@kiFKYsZk-L&pg2
%I=P-:S].R/^&Gf=\+.T+YCUr+@]R7u<XI*jFk*4$>_e3P=V(626Jn&,FR/>p,V?>(H!ps:/PLArmt`k%kYQID2!X7dSY'5hVGX:W
%UCPQj_R4i\m\at8qGEdX@#Q(u]$]Rr!bM[D#CWd(Sc=iCF\qbs4a7Qs*ZuW9?JMOb#8"Jm-Qa)$linA:2q/!@_PLS=p@F=6U'fF?
%h`8`VC>cA3@GB=V-=BPL\fCJ2'ReB2O$:u9G2E`k+Y\rZk(@9Wi%&tV%<f6-DO1$!%orAPBneWWH7<opep6/P^`dS*goKr]`32?\
%O%'Zd/g!*"!(,a/F14KGrY_-KmN[]hU.^App5'J-C9VLqBO&A:0b!bmHJ/I`1B*hAdlrASFR.Z[+di:0(JbN6::8/=kBHO@7S\Nm
%6[Q]AHl2H;7m,nLSJu^LL`-:/ci)tm`Q)2Z8=@_2)Dtn7":aR]e\DU>X,+BuCOGB"4/9+KcD\0[TS(iVi?:=>GmL0(;j[@:X*4uf
%&Ao9#4?YK2gMNqTKp`3cj1#Z7JoA`(V>C%JXM<>pThTu,7Zd'cSdGH&14sp2RCE>eDBD0:l&Ig"*(%Y]c`kbN&)CAIhBY3K1S@2,
%FjRfn]Y=(Th8\i9i6o+feNd-:%]-0dj`2I0^t\-,\pI_d?L6uHMjES6`RaYc6N9g-74nh_-9;s;GP5c,Wmkkjrr]o\kFLW[HkbsK
%\dWK;AK#E(:RK#n046?\ZcG3JBLe)tRY-GUH/NViQC),QMQXi=3`<H5TD^Q=GN7Z9m4(ge0RcO3Ks&H,q1C&k"s20Q+%GVk5jUs6
%%s5IP#F=B:3.lDD+d10E+ihFa_]_"WQZgaA8O!'$p.m40T6MI#cu1L=<)kMe=Nm'H29S`6\nt%S6+1;K8hLe19O!Am,ql9eS5p&&
%6^jEDR+b$YdU3*D;?7jMaB0!0A5R)p%!QJd6;WlGZF"&0VW9[.MpMg9/d16P,/YLW(,%tYTnSda53]/.Au$/A;g>8RZBj'=e.^(b
%))a`We$?e/b0g^UM?5U<BZtCZO]F=[De3P70UY-T18hCac)=("$@PhAES5ko(p@4T$J^.h0j@GSVSPbpA'e4h,*J4u!B%_"1Fm<=
%6R+EV:.)q9a$ls]BprpRIV#N-eV;B51fCtl=FtCcD*HP#IV?Nk/n7Lfg[D-p9%@K1X]VGP7Rad#.89<U8$@O\)<`L%T+bLBC#([V
%F/R\l=uYgs/Otf0TMKlu.<qKW[&.#1]EB'N>D_lQPU9Lq7OfMg#$+-k+kc&OYblA6KT-=P"jpB-L"NC4HQ/7^NXF@ZAA*u"VjX9H
%D$-`[:qie'V$:It<C9fPkdUi=ZQkG:B^o(;ONXn/'p]C`Q*@+kc#6R/<<ZYV[upXGL,DE(VA$))eEf2)r9SD<(&4MFkpp,0U<cCd
%YcNRbQDI"h0JRFt3mP#a%TFGaXb'nm0+f`O'qAEderseK#&3k.WgKN3$LkQ>R[3T>6FWGqL3&>Zg[0G'q;3k,aKgL='qZMHGT(R)
%J^oUr?f30^CbP$131..&84]l=EBoK_O*#p*>\;I:D3$<^HA-hb&a:-.H%mNsJ)A[W=K/Kr0#F.*:IH_XAhsT%kQbG<q%sB!rba<X
%B]ZZ9/I,45,@j?OF4,hBA=Q=&?ZIGK-H!(2KQ*e[0<ilD=^Y+8-*+iGoU[Yh^fPJXL14mY^"nRb`2t];O@M0Y50Mpu2$+d^Grnb*
%r%Vc]ANO3h%s"J-Md@'GK974F@L"m?:90+\q8SFn>$_C;C4b_PG*eP:/p_A!ZlAs\G@g8nJ`3E#9dSSnCqK?s@R;#J&2:e8N+F]K
%1`:7;Zhq3%j+(1m]K-m!#JaZJ`q$F-h.:c9qTC>.hJ_*@gjs][,=X==0=+kHVr"@pb0[QckMgXZQ<r=JS(/-hBtnRHBEWEn`q4*Z
%CY+!hn&Diqr%<]kaW!+-h5Dpr/Z7O8ceWIoDYKA8_Cj]!RDKH;*;jF+WB6AQ-R)SZ>LARghE'1rfr`:^=^q-D5rf9AL(#OClMru<
%g]hl3$6#VdJS73fO[@&Q(BZ^P7W]&\A"XbCh2$U,"N/d>3e5L'[fN$#3+D2c#GQ>g7gf'q!8VTRVh3a"l=6J+"5OgXmLn`DTD`9s
%B!Lf"-K@('i+gJ$LEjCS$ko^Y<T.oL8L?DrE2>'^1>&s[)X^!3Jf_IL+uIJ6CH<k%jPC9ckgQne6T@\=dY:JV3)r\B.f(;G"l4M\
%e\onEY%eOePq',I@`?Ck`jVGhCb&P<C0PCT=(4$UBqeHbHJBkQ?.b1$_qrN?+KlP&Q-KESolb5(W_>Se7;)D,D2DL=coOU(4agOj
%c:k\nNMRMW/p$JJ30'kF$Fc>#1CFDNFhcP8JZ@t#n'oe5mjsrVbKUMoY%j^.`DHT`cE(G$[YHMO^4j4_-[1kjOi'f=23@>&_6OJP
%GdCr8P4<tgVJ]Kig@u_7OKtsW2llsf\&XCidD_]1hA<D!?M%O0E?e"akV-)VoS$h0$%G#F5hb.b..gdGo+Gak146j_VpU;MG+(-3
%9'5^jVffn5QN2)9dQUd/VNBq!MU0"4<c+/R/YAq-ZDFE5L%['*`b^k4N(b4=,95)Z/Ji&-T1l*((?jRh]S'Zl+uP'2^JVQ0j-l(`
%/uERd3%g9lNItDNRjc\OW#hG@g])/T2qNJAGPbP#:#=ML?'e:B*nu(tfYX2tpboBhCM?e6M5C?7>!u<<?sq[#HlN#UHkG[XYDBV*
%!%>L^Q3I5\4^DltV.$te!#Jt*VP\Kig2@QYj5W2GJ\TG=A6;Aj#2s4;i`;r(m\R'0mNBaWo8AosWZ*Xo@NDBOXtHa1eC-GllMtqA
%2Ip9-'BD-U/u6=iROI&igM!gc2'9"1,Al.^QOnD..AEjTZB<`6A:k`-#]Fhi6GfOe@$Sfj/SMS%MKN;^?u/!;*Om-Ecg*k,G5p:<
%K6R?)Cn*%gG2&"[FPi)8(;'+@gh>jk=Mgr+?[s*K[)HpqD=\co?m:6lg;A=i5UITeT5l]^a+=,):!aa;U-\n=5uFPqbSdVb7>Lr:
%Xf2oc``G<eXO9A4,EjU-<iSpm?ir>C>%H7pN"7$X[1Q!/X%\:HM8sW23Br.b`cu`]N@hF=9k"%>l_\>0.!)=eL43@(n[kQ,eUXp/
%UL[Pu[S6&i\Z-l1F9YYLhS"=k7D]H7&-U/bqkq6HOYoM9JcHKr*c3%[^hFtu!CWMji^-OR't%F8mOY0(BJZE8,Pmh\9,C>O5SMsl
%^4OS'7ENKhWbmoC$`4.DP[@lKn--"`^eJ''![enb>fIiRW%$u10OQW&*"A.>Km6.:d4GB*)X(b:#dH)i_o-:40S)HNrU<!I,H)h&
%Yb."`RK8=tl%1Iee<eILIO0q7:m]FL(Ke/8-49ik@dF(H#EX#<757?[5TrWL4`->@U7/<N\9%gECub)\AOCt"K$6p:E'%i-\h=6t
%-S7Y!\sA^"Ca5;d2FeJ$W%YqhWkt#O&4<CJrt:J)'R%&&VTYhR'*HBdL3O^#KkMJa--]pTqIF:P(^c!KM=gq+!s7)7O@c-V.e/n"
%+l&Q7]uV$2`4a!;&N\So!!])fLf+[KmOg@C/_^91);"RIBG6KV]O5lf*@8V*^a'-YC]gCuMtjr8QD,3i34rgf&0%toNb/!q@1b>?
%es,g>TU8T$a<+T*\sO9CeqV&,6pV"q8-^&8<<MK_BOY<+#/qi>8HX*tfTA6><)K[?,IojN9"H[+P^kV>ZW6(&h:FZ'=Re?U!L[H'
%9(E*1,,e!q-ECj5=AM4a\LnQpK!h>pU/]D"38IG1iq&n[_Os<teg*'M^49HH3KnstA*VP[T\8,uL?5'1cg\ZaCqu2\18nB8ln[c>
%djXJh93"P\lDuH!^*)_TpnE#_<.W/[M9;?,3ib:N/C7qI%:>CdLX[,jDi:fI`Sr)+jGRnpM]/s=Knc>.VSr?5,$a.d!GPYF?D)k\
%WX,o3WM2,%7I(,1L&suYkR6knf@E2Y"L4X'80t>J:iT1.>>7]L(grEHYQeJK=:QOh$CbGGbiWF>jZ+2\Q;2i/-D<R]_D)^h8?Vf`
%C.%\4a:_4EV$3/3'Impj[[NBI$d(Df"JCeF[R.]i)D@%<k_jCSWM4qL\Vaf-%88p^g(>6I:2";Of^W0-C._UrPG=H[#0:[e\\;s<
%:eE^%b*,/NUO`-$$&Cid2Imnn(%f'KB%^imqmM]ig,:V7jtPFj;pt7=p8,tJ'?rjm<e>St#nePJ*G'6H94o6#IebT!Y.ElE7YBbG
%.&8V,QE!7HN2F"hVSk2,2%Y7Ga@`*Q"7*!kPRP$qil0LW#]nhRq'jmVehfY"V%VhirbAkkeqRd>7-gd#E?#(OS<Oa/U\k2(O)*W2
%M$sh=>7e2lgZ0smoS*t<!$j"H#8fA"=fTjE!=!,Q&7jPV0\B6$s7N,GncFcbNK)NSfOJF4fEsZd(p"9So9F!DSpa#0J5#)_-ic#2
%?U,s=?6odYD')dW3"8..dX7*]5ZYu)+<n7gAG"=_9Yr0;9X%?%=NG9Nn-t$VN>q7m8WbMJ+ELV7Kh!!>-%M.ie,1Z![)#@JUB+TP
%_XA$ZCY70.]U0fD?\>R\\2QZ1M&ga*/NFh.d%Fnhf7:l3@gm?&H7O3"!IU'f+]<oCra_L3TPZHrNJ=Hjn6&6%kaf$^7p\_e;7RD#
%a6(RedY6fjD$L04g@*M#<<nJb>#Fk!J1Sktj!DJl.iJXbe6;2uc,Nanq:ccN)8/G(k'KE>A3FduMS]fV0Tgc:O[)4&%$F"B/LS17
%3qleRAF;F0(0Ym_K[<<1h*H'#%A]V.RA&Z"P7_eNJ,:BU7baLcIjdqr4LCt[juemI$kCO6``E1.;&^fkWAp?4Cj(sV$t+o,N3fU,
%QW2=^-r%'+7ummc^Lu;<A:G.)'+ISM)_Ar2erpiND7C;_fZ_e2[c%G3'<i9%!Ajn:bG&BRUGTdh<,+Z.3+b6I%[[WjM([O;-<)fY
%AE7nl7MCG*_D*rLd-n%#nIj25*6<K@@%oK_[]%];m'"@p2R:)2(#5i8@2CP64FLZ(<YPe;<3Yauk+]=_WF3'UUjba)OO4iM@mCa%
%q3],o%EL`MD7>XU0LWsb67a(--:9pr257H_9QJ'ZQbb)L2N*oP16.bWJ</-3/>,lCEZdBNj5`JHKJeJ#W/EY$(YYPP*H9fVdXiKY
%-DQ@/=(h\'m0U`pZ5`^-JH^oP=m-d&N.,jN=Nb)9lW3blJ]0KaE:WK&;0J#4K<hi$P`7J5iDfiT6QCiJi#X$O#p.U\TjoOM!tnqZ
%F=^Z,2CX;&>N<$JNlmI^,IFD0'p9;$qa*J#JUAbt%W<JRLVteFNi&db&^,WBJHCcY>JVNW,>JtqHc`-\[Rb.H.%e"IVJu8:dD5>E
%!CsRedtg\Z)oJA2%%g3XCa)KkSQ$L4o^@kNKE*C#-<19(UI#F*j^X-WKaK59(2j;V)k#2r]E+HNBJs_[i[;q1LlGVt6Ge<A"pTEJ
%VkZ_LGQcRb,_K\Ia)-p#cl2="!)Xlf@7?p<4uA-h6^Pd-&D?C]-6YCLej[]3PVS(/j3e@L4c8&=&&DY\aDhiZLGjdYD3K`gL2(m:
%nqONM=r3?%0OkO/B=j8LADT,8Tk*dQ5b2UWKBY5&k(%neZ,)DP&q_1:W''8n3D4='/FHIl\5?"-(IR3i"bshfH80(d?r==IKm6MD
%(3dg?$J7HlWmpND7':D/`sZGpBr3F\.]?$[%$CKEgOZ4:+\-[r.+q\\YQ9^O4pJ$Y$7eP'eZfTEefi'pjF-<TM0f,ND\Rn8W.EB#
%3*fJl2W:5_*RE_CTE;3EmeVZH"`+pFAW0XLGU_Z2/`@<h5Z%79-Fu>hp7\7Y`$8Crf6JbIN#)#uj<1d?`=GoJ"cRgQ$jDu:LWbSD
%_1Z\^MnI+F?pRO*eNauq9!pN@%'6S.K_p?O<hll/":p5q'GUXj1A?j^kUA4hd+O(Y-r4E3#?*<sbDst0Ht"4fh0*R(9aQ0g&TnQF
%j,d]-J4pf/gocQuJJPi2Fkhf2o)^CrL]bO9W"aB-3eaSRT9,\1ThA*Oo9b-'H<eFq0oF1^0<f[Y@X'#2N;EmSWSHO;X"`18G?cH+
%8.h5(f]9P1M(Wj\9_NZ`3bq?8mHZI+[SU`SVMArZ7m@/fM@!79$PK3FD1Cs5IO2`DeqToV(ai8EMD:cSW<h^$X"!<+U>\9hWKK=5
%MWbF_jLUF<)X(a+B^$j6H43+3GPdJ<$$WD+qlHTij'KIdQ`BVs4).B6?9fZt.@Lk7!fKRm$OS!`gnZ:dBM;*G_gT/L.pMA#'0ho!
%a-`".62HHjqk`k&f$9_ISeo;[GZ_%57>j\&-nC&>$Np$\diooEJoB2g5mbpT/A\W?6VHH/W"(=%-rnj>#jn]Bl+R-)Bs_nXOH9e,
%iu$\(Va*4o/"[#8P6aH`iAR]s@hoSr`OH'$(A8Bb!BlH)A1GtfC.c&j1'[PpI0CC;+a.9/VMYX6"X>9E&eH0/<JqVQ_m>Oj-=\mC
%`\etP2?mmd1<(RgU/W-XXh*&IFC.9@dl:ao`iCZO4uQ&4\;NV6iDp<gH&5*H[TO46!\L`8\eRA2'S1f;TW#4U<*AEB?"uto@L3.=
%M&R"Q/0C'uKMkg3A`>G?R69n:;\6tP-6k#1#VgF*n?oGud$\7@6!G7u2'j<OJ32;g,&J&(+@!_=a6ZnlR4D6%PBl4"RcLp97kLYV
%gI#M1)coH2SAAX\`gAMM"9Z*_PVeFe\I+Z5ZH6VH\3?dH_`p[M85E8?itt3&/!rF-*IPe8?iZQTO-7NS1=U/D(7U\)'Cgm[/iE=j
%b>!1hWR7_bf:e<ZLUncr*(1Crgp:WB,)DXaZ[>FNj\2N'?\T/X19GWE-rntFirS2I?92jo[P-HsDakb=TY$\JD4mQ/0\2=t%>[&I
%=qMt2A?a'j/Ofk)=(<$+Xp,QAs,]R@inOPI&/hDUZLDHqL^LpGkb]'_Da6tBZYj8HUl%&jh1O91;@:bZ<"9?]![K51&D1/R+U\('
%@$MtUi^Mg'$h!`*Sh_1?#],GY",V9DD368*B/pBZ;g"hm"4/a3>rS`>T>FkXGSYjBfI(`qT-cfJ+EIQX;&)AKS48O)TK,"Ub7,*S
%6.<;k1553&I0:JH!22e7&jW4")(e$_U^_933uD1"m;t[J?j:'s0id")j-.HhqL4l`9_2'XCgb=$iMb'K]^ae'jO=%0>"7jZm[dE4
%[@%d\!L3hHT?'l+k;VEX=BC&l1F*nR;!XGdOtGR\9Jqr>%a\)5C'egC(89iaMo6u0R2B_<dsCM?3"<=?,'?:%e/2@"+jk6'G)Rhq
%(maWO6g%Y?ZX3oW&%>K1IsBO0Co;e3_&`6@qdjI?UUqBq1I,e>Be$2s7@5c`V<e,8R16fBT\/^^]7h:H=A$fp0cRFjlqjN7FMK"i
%rKm9&L7.*ah_TWG,"+>--:6?],"+4J6jW*26L:j!`7-h:#jDg^70k\:&]2",U$9-;I*.0P2SJ6G##jka@48)!jbaB%;\5RT4)dTn
%rO?k&P+W#18dtR%^I<t!S+&lLP^_H/D[#5EhM]r72[X(PnE<?'6PfDNV\p_9BTgWcjckV,SCe%#mO[(G"6P=Z;^X/&Lah7a"Em\=
%n?a0"d041a3gI[nPn]>a&I\Y,j$XiP$%aSn!lu/7_9k!=)NW2NMT/:>d.5PVn\is+P&7iBe5(N8qW4Y,>n&3J`D[<%W9$pB_!WQ?
%'(1p^*8>V]>p0@\'8oMOOGL`_3hNmC#SP'@SInP>ciC=u4;*OLb+K#o2ZoTTL;18-dqA.ee;2V#aJ(65KC6!MIDmnZjs%]a`jWr\
%LKd1S"kWuhJ,@2q8irG,a)1Bqa2u[ENV;mOA/ccU[IuB&"XA4lLbXa0>7&Y5RGk5:M0Kk+-F!#sAXYebP=C32;ZQ.$i+QQYSkOe=
%(5L"_0Hf'T)*IG18Aer$YQQE#(T.TL)0ENC0l4ulRm)Cj?=O0teu(f*-imeaTLV;q!J0P!D$mk6HRLeu>9"g'7pH3+j:TD\!!NHP
%BnqQ=b`iC45l4I[p4P7d[7pQ.=PkiJA.nf$U*S-P6?KX[UD>#1^4CThkHXEYqhoRQ,>'D(>dh^t'H+GM_`o%Q4<#tL:jtqA#;<r$
%OjT(brN>,$#0N/B%Y2ZSX#`.f@'j\0R#[.J*[K>'f]+-m#F.\JOmrgXdI@U$IfF5+4kn@=YUohj]5@IBp+^S76jF9)!fr0JSds@d
%:dp$O)8jOINXfN_m!"Pb,F,^J,&@PN_baf!.TM7.a[$X\87jR5Z3s;2JL7HI6Ape68<+0lKGnqIGX/)2lYo*c>0u5jk]eSA`56>#
%8@T3*4%bL*AB=<b.5IJ,3/rr2PT256FRX$7HsP`$,?KYpj,*b(fsKHNPJ!3-N#[QIaO1Q4Z*it_j,6!l#$o3SG"QS-_WZT/@C;.D
%/1ZW@=L%BQrLE!.j2$#GY`b(^*RB6S@!T;B/3oh$>TQldLk]fQYg>%/\k5hFWifHg7@RFj*p<spB0?Ypo#\da[cgp,.&Na(G`QI;
%I*kfnBLQB4-(5V=BCoLI0EViX)j/m]Kt\k^Jd_#6>r6DV_G+'8d>u5!]W(pLE0g-)k-p*Tfm[2fhk[#UF?ko-&i#u)Va=p9=7^qf
%Zs.&JqXDg"?uU\@C&#OKSs%-lq4TK9dI$_2*Ao.UT9!Rohr)I16F,7<^sA5q-D7*S<QJ:Z/[F<%(``e=nP:Q*crYq85/)pm4PO"1
%_B+,[a!<3=N0A.::fsqXdAs&4%9#`#g'gbUl'</uPJYK[DAa=Xh)6L6=W5Vh6b-c!\96AeFG'g84RulT)=$ckFO2'Mfgs0u->f$@
%]Fef7A5&L;S&'!6+nKAa0NmW+1i?[iPZLteA^deaB2(tDMe7dl,8H2]_d=k(/.UAW=dM\n#%M!$7r9raQAJmJnpBk*7QMshF9\.I
%.cpo?H&Np1pPRJ&VPJEqaB(^`T[?U_Z"jJgPsXGY82f[.,YD=]e#DOjm'bP\;8oRmBYVieltiU'BSq;TL[i0JcC,B,9#/XijH[Nf
%8=%$dNSuk8%bN1-]I4t]DT)HH>UYNK7MtR59\%J>!<t`K/k>N%p,"i\8Tps"-s8Cp:mp:`KcBY2HH/8O2pk]Z2ALFKiMN-j@pLcI
%Sk>k/_rLYQ3c6Z]Qu9g$1ROSjdZ\8jgh<UI-]H*nJfkjE6Xb6M#?7LT+(/QFb5#>\(dc&6fF8n,N'Tlp:_n[aAY/;j'93Z_Fk2fP
%L8l>0LX$Msa!0`7VIb[_0Rd1B2mIW\$VL6Q7tlKHY)27Va]r^M6OC8&be?F_Ak+.=K,',[BsLjKMD#@b6=H=4&t2\%3*Jj&O8V<s
%Y9q+6dH>36f05l=P7iEiY/qma)RHsloQWl#M2-bGIo<$>C$'(+VUnl='o=B=BiOUr].V[IDMs_FQkPS)InZMK&eaCFs!=6oFcAIU
%gF>e'(Dr)`e(Vbp>i5bOKT;rhaIC%;QW>@?-K+k<9^nnMcoaDl+HrRW>e2V'(rSai4F.RV%m%m0S>4Gmk$bP4]#B&Wd_pGAa?W+j
%[j@anCdmkS$Bo7G>uAFW:K)3CO%FlB%F#LofiD&2GQiUgi>_\PD8+4j/DOpC,@h/C<^`U3c6GH"]]+K=kR0?EE<0%:$m&A5l7^OG
%C.buh"s1W)r<O&rfj^Y-ibJ)[3M3lr-lAn"$VO/0OXq?R`fDX<3asYqW1/7[5NNqSeF'C`EM_:,fsa!%gAuNWd13lA0kcH]=$b%$
%*Bf>i8Rr]m[SaC;/LT=N6>T/0mAMIBV3bW[,$-Vj5`ZZP"hb+`PY;H'G_[34n3%+^.4FF\iYi0t,+T?1fq`799(>A$V6d%p\I0*K
%I]QkrS6mJ\"/E(Q/OE`2/Y/fUe7#.mB7[Q#Zr`MW%RQ7)YJf6G9pE^XRlW&k\/,pOAQ$%OBDL55!%:j=A]CW#U-6KCaF_rOM[3RH
%MP;Fr<#+eS;78Eh7IYC%Kd:eAP&N'.fb&G`iMp90nfCTRQthksBOVN&E=+<+;eYMEm4aY%#npC5lo)],;Y]P*\RO3fP,)0jM-4rA
%JAq[WILn6O$q7USjGml'7[gLLW-O"cV>_+:=rKUm!<&[#<JH8=bol$JZ"02i'(1ZP7hnH\*:OU0$HbIP/h@t&CZ1_laJL1lc?5g3
%P(HG3&hoX%TVP;L;30n8PjstSH6G>M8R0/rd6B.Uku:"b.Ma?:;hFqH$L."7AnBqQ:I>q\Dl09tkIFJ"I^YAoecdL*7GM3^9o8J.
%M7Ze4ZA"\tj=_)rN5oDLB>E_Q*mKRSoB:[m'bd]W5EO_EiJG23R_b&4i<C7K3bq>m.Y8YuHQO#8dhB_,k^+0;.*+M@0CHl:D%bVb
%;LRYnZ@f2E:Z5Hq:hlraqgqti.,.RbRM,#r`A`lrKniSq\B6"a%%8WD)LpKk6f/34^]Lcomf\h2)-i>7p+SPh$Jcim7&uXGqT_-b
%Se0'\#F85,2.a%dNFU/A1#eCB>UnXr"78[gI'X1+<mmrog_s)cXVRcB;XN,sSM__^2mN1MO,fj^cu5ZLVLWpPH7^Nd,.Nc*,SV>Z
%et3s+n[$.N(_ONfUQWQ\/QnUuNR%kKh3<X+ac'-=Tk1%PZBu4m(?YkJDk_8lM>P%5k]+M_inLXt\ltKiClR&2\;@&X.>A68;!6J7
%&XF6n2M=l'feHJk[$7p2DIP>?`Z<lu(2l,m<;8@.*g*1U"C5b7r9OMhZ5Rq+;DN?&ZjXXP:W4?%`R%%HCd03oSeIhC'%f@$Jo&gW
%k/%E&/NfE/UQVEc">dpK^6c_MmVC#e9.,>nl689/9j8I<R`>;Y:nIpR,RI+#M=Ehc8g+P.@\bAM.34[!h$XPq<J<F6,8]%nZ'ZY4
%=u?rXI/>!;-I)6Q,*;VWF52N.S",:Fo^3@[KV6Qc?#!!#YL%#l">Yp6?3jO7A%+j5d,sADf+%c!l\tD\$._G:cBf1_nYBU@3Gs<6
%R6Z@'Q-Pg2G=*d-g33Nrgr&1DJgqtjaQ8Vp7E>NheM/i2jP^9PPJpI8q(s^7ADB)!P.O`f1$M*hnGlScJ$Ja^A_V^?[+??aL1b91
%h&nGhK_Ap)q[$@qK<_]/"fXoX_]pb%C/F8XJs[/`2""q,WUsnHW5Pp=+J4<108_(O"_4cgBerc[CC^]]Ya#4uis0-Pk?3HDC)U2+
%1/^rJP[bDTs,!FY5X7k.pV3T`D15=jcW/)Q'NF90;#'%N!UsW25htK+MMB;/+S)`E9E?&r+!F),&Z(BYL8F]o$7h)E#85-nLlM_[
%>EE_65&6jE'7es^l]<7O"3^7L_7XX*LgkO[dK9[Z)A,f?@he$qTNC*Y6.Zo-S;GI]#RQU05IMV2l$^)d:LAb^$B\eeiQ.];NHUB"
%VYHA],6bG&,6c#96\=;B'[_kEKTUj%Do[[.B4:VPg1ao9I82m!aeQY50\,CaZ$HVR!!Tb]5W@Kf"VF/=&"&$@Nu2bifYO''Cs;L1
%LY',o%!NV;^J^SD(oHB\&1-B9RLS!9@u=*nZc$8Mk4[(23HVQM-"5B=NBC)7aqKZZ2gF77dM/FT>TLjj!"5R/d>Ntp7L>O+'lfjX
%j$$HkR8fT-Q#6]9inpV&[hrNC9.+h>NCW1dhli'G8k50<&IC+m6[5To;Mki88u@SC!*Rp$iJ![WYT3qH3[$2PB89o#N,Di#0IphF
%iqg)#7E*@cF@@H9,@Ci8JO6(<Zsqjc&omS"0hbsldP0'Q$Y1ta\7p^YDJabW+HujAV+&5t$I4Ha%SQ(:jq,"14=o9&ikpbq-pEC^
%ZjDZ15YmD7IqpMr72n0D49D1O_=oY1L5d:+KGlr]K1S,-+dl_FBeU?je-dK)n45=%_H8PSq'&"$d*YI5N`i9AM3)4Igs%_@'W"*H
%&LsX_8%5LW)i](Z9]LEY9IN0H\-*-BKnX,J"sJJeTuhgf!d#qZJ>XqZ[1T*8:mXX1;=:J5!KU/u.2L:WUEK.Z701Yg"FTg-Kcq!U
%&CCh@.0cA:84CV;7=<,g=Z-lVR]+0<ZZ?g/QS:6p_LkF[$lk+Na5gA(Acl?n/3mm&Z3)$Y#+C-0$#:'Q16?Ad*q33m[0q)Z7C+h\
%M-dUpS:[GZZ@W57g'>Wp4^-'sknDu(//]735f;-J;J$al,Z;]FR7n4P,3GOPLa$TP9bpq:8Jl:\#3VAP+U+uTeED"<*HlCa+19_;
%@42C'\qs"jE5R:,]E6<4Xs48K=]`.$8&au,JAe'sVj<&8A`."NaQ!]Xc;E,B5`-I)JT5DHROBnd@c@AjPSd<G0]Q!l=2Nek<j[iM
%M'1>8-\;pCb8<pGo&E:B&K>/WKX7D-#Xu*'9+-TNdH)e(mp&u/56>7L,3.9H`6qJ+!]Z!"9+0M\B;h#fqh@H'4@,ru\H%=)!rRRq
%4M>l2"5bC*]W\'"Ubf)#7ee7%9YckRJWaa*.g!?>]4b@TT#=Mn*HRU2Z\(oj:isK$j$0YU%PtR]"@4jCC@&mGc9RT2YQk8QJP+GY
%%&d$5P[7g,a1M[`8?lfk&/\&gGm+MOD.#[M=HPaQkmeBceisRfnU$#*hOLnk$="FumWY7gMTm[O:-<-&oXOFn>IqI^ME@Ms1.kH@
%D_"'/kk4T5/RL<[DY]fKUXn8h[IengWjK,>$`O$Tc"a4\Em!iT:9j4dRl>)DhecbcXQO`:]Bg98J!V)AXW#K&e/%kG;fLLSDDrHB
%HV+cF([p'1rGiFP*;jF+WB6B"?YHNs[\=uW]lg?oZ<Q2iAF365n'j0L!@Q!/YT#ok9h%%4CU+,+WBuV$<&mg9/"5!oNg!qPq22/r
%'iW=JJ?#.hK5*u8WU).4HDm42N2qf8//2$jT448TY*^t<0rO&aL/;l<!^O/%E*J_C[%`.>_<_"b"f$.TW+)!E5d`<&g=/j`YDUA$
%TdQ4g(csu@PfdiE'"XkW;SI($Hd$L:L,3OC?sfkLCpBBPBJtesArK.4MY?'rMi//9Fe9$60Vi-aP0$?(BGfG5$8`N8=f<R>7><,I
%X*Z]icr=lsRi&N.q<Fe@=>BJH&EE&PXU_16k.7OYg[4:&X:+^L0SG=^j%+B5@,]C;_MSOOjm9q8Jeg%nM#G7kEOI!iggP^\h!diA
%q?XoH!?E30P[b[m`e,Zp3lNfj$$TJ@9WBT>DJRIu-Zc#VbM6LRnV'J(Uf\p?Knc[_*Xt5q+JTh$dCdE,C&5L.aH1]8;G8%0.XYoO
%b)ce%5g*N2#RsB<O,c+9>pa5sUPeCOE!S.9!r?J[S(`cq2@tCOC1>gd'g4VnnuDciKHrq*k]YJ20t3R.%DXM&16O=Y$G[IT4N'V]
%_'<fn->V^Q6;if`Feb[EM?GQU7csu-,UVWgA'HKo!_Fo,59F_L)$q(LPL.B6Ka5.*d1dO6*CV@SJiOc]Jqb%r%O2eZ$)V-3nUq<g
%EU*rQ40^LLMhM9Ga(+.D=Tr/mM9Mb-nCqKcT\$KEk_/!c_3h!ZHWB*o1MFfD?_'^gW*l,u$5sBmQj].5"@FM\O;jsYX;6)P:!B65
%iB)BT=b]5A9%jVJ3W^#U+_alui;(/:)M(#V'T<Dn9Gn!J'P'a#W@/8)_6YIQVIh'inro"fL$[b)Hc>'F#iaqngO;7!VJn2bN3@1d
%0:"(-QOMbq:VKRr*(2DB0]dE#Ba`&d!\29+8q)B+:(S-_j#$E&[[3HTTi-W5O)1Ci_A#;F-D$%Pfm>H5%R2DBnYDEY:LAqlV'tSB
%,5bO7@Xp7!)1eiUAtcp9AB13HC5acO%:9Mk/,l1lk_d?D,3ZhmD=l*49rN=+`oDu@9ld8.IgpW??R]e8`ZQHK=*54J0Xp*=kJ?2'
%jN8!:TsqPd7'n?Vb,"dC.[2QB1("]=+IE]PUDXLtqb9H:/)&u%JXtmMbj>\gJE3pu!C=6AQJOoCTN<.g(0DAOYCZI';3-pO6iuV/
%8gl$C5fXq"Uu<o8[0c,*H`>,q)%XM"\3kr<Pr26=U+/3&ObW`H)Dk$\i"FDen;X?U4b_S')#EuC</S1hN4W6$b(sZ'$JA9uZKi3c
%f#cDiA4B&+NQ2Ql@nF/HnPsR1"*\`5#h,XO=7K*KlCs[/$?nNgH986RaoXEg-p$lS(:K&ch7*an_r\58#(RQ;K(B]o`?TGgK*QBT
%90qr6[U:-l0rZUVPi5h"(l!4@(S,Zk(%cq-W2&"ThaJoR0J=C/I6J)T6*O'K^uLn'ABP3I*D[QG,ZR\*eSY:$@!qnRmH_.rSSZJX
%2;,LU9A/jG,_?2tkse2F+f[<Q:9j:79%7ZL*b(cc$iH$sC^*L0Znud?8<qn%9t&:^%1N@oAqo<M@[MKF(KE^Vl+EQQi=;0ucSeoC
%/WQ`YFgUg\^C61idInF1NJc4_FL!L=1sVJ<&@;:s_Gh*RdF8F2fn6!kNN(T-n,#Nag9dQ2YI+@"q>]i1?*>S6Eo+J1s+e->O=YA3
%ju9i]nsjj\"V,"^Z'")s(eB9b+X=+_e]RBr2kR"*A9IWn5%^\<3f<&lEut!I2VCOMG836AQ)Z)KQM7S')Z&_14a(b@(=P93cr`ZW
%2%.Xk$KU:fJo1Z?&\C*pJD!R(U&#]KeSnoRNoVDW]Yi)4mlBO,4f-W/:cR17G*s<1\\YD-H^lFLMQ<24@79"ON>15pCYrI\S<:Z]
%B01$lUL'K9!7.\cqN+[WM!/srGb5Zl7:?HMPR*^KEea`iW-K!-g:`@OfbOK90Y$I/oYju;9OtMq6-KV']t]E/X:&7:Pp&42r6L4k
%",-fQ"ZnB`?V/L0%m:4`@7BMOjuDYFmu4+IIC=r(D.3ZgH@[7%3[_X,Y+6<%doC*-Ce)%d@AeN^@n$00q]cP!%/hQ/;6N_u@!<Uj
%#*g[/=5-G:BL3CeV#m7;)565''W:"_#3J]*GoCNVi#kOE"jD8jipI$q]K$LPFX/k_"djgBdQFJmWLlO'WD4#ME(9@B'<-oH<Fbp&
%4DDPUqq$r;Kb,?fLKsnq-$((+@Y4i1i,HS1G>i2[\c`FnI7b$0hP'QVJ:[tD9'KNW&1LNfV?#ENFd%q+NlPktl`ZV+]rEK(YG)BP
%+cqbFeo*7jh6AD%^IGH"3U5.HCu^O!a<fji(^3e"'`fm_;,9Pd:%FimTp4R@b'7tQSTYc*0UO-<086gqAC",GJp#JP-F][lf,ZMj
%DgumHqJs"d_+]s);M=A2%jf))OS]$LLKlmtDi_!\$>V'4s5lba81O2e4E;;3=u?@9s1$A<rCB96.$,I^?kK3&(kq,9rpY_;q2%=0
%'LWN0j^>W,`U(fNZS(Qei&LAj=(=ILOi!X3HF4l]-5u4\$7N("!j,-L(?f7*U8D,0^!bFNcfRW\2\YZ!rRe:u+6!HuE6f[K%VSCg
%&Aa"GpCIfrnJ:>/6T/KE=$O@<;6Q;p.r7:@m<.G=8"o$P5h:R=_5H6a(Ej/NA[HbVaB8g+q$1H![!qadf^I;I=49d-`$r4[<6]&,
%/I_>UDe,:s;%4bF^.MEI>,:[@>^<TZ">_$&N?^`$3=UDE;$[qaHJ>)n7Zkb(0hJeY`A_CK2DeBXUSeU9(9M_AOH5>?-Fp]*]sgS/
%<tsQ3EW""$IepO/@ZPO>:>[-#"SRe&LGM9Q:aHF!Y3:4s)G("<Bmj7-]gg74LG4c0a+*r7r.Md2+._J6,I%Kr4oDa!p(G\rKH>Ad
%61jmb6ck(7(,U_@)^'LSW,@K%oI+CWil$FNg)rJ^^2AJ0af:TjZ5^SBA_dp/Hp42.$I,];"Z]TcFE?75\'Bt1'H41MYb860#Lb0*
%10s'_0:p>%8.qcVIpW&3TL*)[a"oCl4eOi";SFB.ddl1u"@Ipc^7_=sr8\kZ[NWk0`5Q.Y#gA>?qY&T.iLko_j-L_tpQG"@844H?
%o>03r%MbZiDj`u3Wb[&L\C!)R;-FrhRhIY%F.akUF<?qgU;ja".#JkI4\[>b]U;8$q6'8N"%'8'\1u%&oC$gj#%UKXJAqpO"23;M
%*;AQ[:6W^[,K>p1-"X]3V[47>WMCJ/p=#7fGFSR$1d*n`gLgciEgf2X1l[;c;N1en$jbo$EreUI:obqR*>HniH9DEp&cPB8FZ+`u
%iQ\,P+:trE"#_87F^hROk26"ra4GYM;8_d:2IZ2Q'6PZm7-_!AZ'^?$r^%Jj>rNH-MI:hP#EbRtaPLNB3^D8BCrj*3%4N"i$dZtB
%_8gpc@eq@P%IreF?(h$`)!5hT(_Y@EaCC*<FL$0:Oq#3aA-9.^fu/V9L'I2Set+''!ufT_,_HLISU'EbJsHc?9[=f(I=PnAk0OcD
%N+?CPP>#dF-@n(a[0<HkGsu<Hd0S#RI<!G'qN49OIlT`<f68E2+6OTEjOTE2T,[?6a@NHdfDZY8A0qR!7PZ^92X]iWR^C%1aUQ5F
%"pSI&R,VL#$Wu1p@YUFID"&+hNC/PYnQMjbHqfW!R1%J%h1ZkFklct7Lg(C5i^RKIKRMY6.CTP1qqRi/6a$!+jF%bAq:2*&3PQHS
%59dG$H\5N[,=BN'MFq/Jbh6)fL:0Qr0b@nndFo%d3I=c9Sh1-=L8CP,CFQ28ZkV#NYS8qgE_A]HhGR1B[hR=Na1\uD%J;YbRmSSQ
%+sGL^3?c=s<<i)63H8m><iE`D"X/0ODl2EdN)T?^j'Etl7rC+lf\.=`[Ea=>OJa+@@YmNOFX4p]@[1q1U'N#8Y+SEl0H6j<h]"US
%#\dI]H`%%,KoTT^hdbsKoCcFRf;2j4=9!*^dU&'<B*H&A(&[oeJmVl\i7BIoHo('cqk2l:f6^WHD$@\g3UY'@*!1fP+m7W#JdEm.
%ie:lK7#u@_gnAirUAl]aLXm>n40+dEK*Vn(c&GT`hs17NaO's;#+_Ke>EN]RF?IZU;?,FY7K&(6,M,k(Kk&X&\"Wf]^0FJ4;pj-^
%qX1GR91mE'4[,jk#7]E9h*Z3<9(u<8O/i+DgV:L;':@/Cau)hBQ%^&,^S&`XdR$\WYVH0tc:YmpJ?]'VN_p)P'4IF;J>qk8*d@),
%UG6\aK3D5mW/nfnp\L+OeL$pFX(?FOW`_O!fC?f@Ze#8>WhLhU0au.'O(Z.iRV?"o:V`oi"#K]$`0N%2U]^EtmVu$/iMpAVreC'8
%F]U/20NJ;bCmO`L#eItqcUM4OGK]JlFGiDZ\+rB\,]AEM:VcJdJQ\R-Yf3rr4A^,6''n8R7D1(-8Q62jA6_>=bFM!2^g(0CICfFG
%H;aLD$U@,Bf$"1t^ot.kXsYpKrk3!(`5WP^?no>aOGXh?2nZ1t)@bF34nV\DTmnCMl@2n>_^DH%hXYoc<*>:ajTrVd6kZ0<q..h_
%5S42&CXY[7@a>.WnY/$H9fiWC<`p=J/ef%o4W5_ufV+m@LjCVB6n>rP=FTmZMLiLMDa)PRTK'X14r[<'8SUu+l\4(\RoC*u)VJj=
%mHQf,\H^VnC0G#p7<TCN@CaeK+\$l!gt#AG[#Y8&M^o`>`1i&$qjU[:peKNFae=YJIbTX\*i[9JN6QAh*b.PaK*Rqc'l(-!`g$N:
%(])S]5tUVtbuR:>:mp?&p4@C"8^uD=S1d3E8!)e5I9e+T+Ue`ej0Gg17?p]Lhb3]aDEoUDWfDd=e?M`H?Z.'nT,,t:GH=ub%Pd#8
%YZj,_]I*jT"in&Nq]Jt'7`49Zo:h!<8O<V"[.^ooJtP`&F)Ma5">#c3Crh";c%J(9G]S4(ee6T\k=2+Q5_AuJ+iFou9eS>r;rK(j
%5qRsIj6]%)"_L(0e9[Sjm7tbk5M/mid7*tS&e!sYlqYZMo+-1IQae@sf>[!_H)e_VNA1D)CD`&bBGuL8VA:GD4D)oL/$=kC\(G@;
%,SUR'!p'#N;86m)C=MQSLZPjf&oKg<foXers6!#[J,>tVV/$MQYC8r!^?]S%]]:S-@cdJ#0$5RYjdjTQoMTr0"q'LC\e$84YY]$J
%b'U"8N!NLoJKS#Nl"dP#KJ:drq63@dQN@t$6XV!32ERuP6?A,q+kV'f6hksc.,GP;<o3eFAX],S3f/R_D4'*:d.uf74*3%$,OqdG
%]+HuFlii^Kb0&&J17P+@_IJo*IUs89R.,O]n4X42pOXYmWW*`fi#>iohKl]t2-DtDWjNirQPs$&keM+D0JJrMrPC'l^#['pEYt-[
%rR9$VHTCggPQ'^tp,C=+s)PQg7blY$=&ACkAelHLTkiA!e"XoPpNXS*jXfg^drqs-jIJ*WHU:gjqBa^+;1<5Tbnc5s,;do7?'AA]
%hhGKaTT4c09u$<g99C":IRCf@W#M4'<l+.^JF7X23)I749))K&qt]$'29CHigYC]Aa6QG"#;,K;/(LUKa-+='?RI<$7_Bf+_]FN_
%YM@fiE#W(-r-:oa<G!qmoN7s":FK(qrhT4l@WJnF*Et:sQ^"GL4=8G+^Qb\o;PNSPM7V:h;.o;@Pg"rHlu$^IJaW!:L]S<3Mjk;r
%ULo04GFZA,*#b`103?qq/+1RqpZK*H:e]$DUDPr:r=t*T9Ji'l?Y6cE1W#J/c<bLAobYB!EF8.D06c2ehJlG!=FCe)S*=j;5#jkC
%;plWWAY.6FS"@r]^O3oiR@a,"hY)s!2F]"L[.fP7KRcl:Sh-+<C4oE9=.5S)]"irEbXtf$916++<pR\_-k#6ICG"OL6YI,k+uZRE
%LJF6iLmQ2Xr1TnK,GJi^X;qV5&5NT"e_8WA=R-+)9alB7[m>fgX$r^_F$Ug6]FA-:/1-8BK$E?=S\[]KFeNS:%=SQT]=4a/%(.Dp
%9e,AORA?U878XHoMb0k87FP4$B2"))7-&3(!nF0&,U@4c3XOKk8^)0fVjX:OTOCo&U?W["V)8qn'#TGi`K,1ip>AHa45r?LmaVL8
%kc"3p;>o;[8+hKoWXELaGna?e1m@#LSnmeW2=+G>7-Xqm&tVRoH,WBe??coWAB:HL0eB+1_k;/_Wq_.D:s'[[RdWA=[3Fq,79r3?
%2.:,`Ni:&g$C,LC6B7uJfgll__u$/F*Lt_A9?S"[3<dHr(*3rN9b&l"n8)pQK`]Ym'W0/V5Y)-EbrLtR4W7QuI!.o3gbL&ZWehk.
%Ik$$mS0J=+LUfP"AG*,S#rN;NA#GbrV+$BM,c;=#eT!+TUPqgu&LG$XMuJnN[sn>8cW;lj!>KQhqSg:_!>N2?ZdNG_ctf<7^nVOK
%QhJTF^CoVj"m(>EXbC+M*h9u.9lb5./6%3:LBG-!(TFNp$a<$*8X4M"B*G%Gkc@&"-u?=B=r"/,*dqY^ip)k:CUB!9fVfCqELu7F
%l8?*6CWgJUc;e"!WpT;Y70Uk04Li)P=`-2Z2ACte;`/FWEUV+>%SLFlSJfeA?G?gQFLa-J`N-d%FptP<LTh0OE[S/Z([m;doa1a:
%E:b/-FsIZWb4%gi5r]kG6+0\?hg/W&k=I;?fhkYCYk;AGdculPHNRJo#)*G[F!X$&),QS>^)eT@]c8.o2o.)rAW,bCHK[`9]Ce;.
%`N)8[ffTa]:=<J)UT[o:KiCn[=^dL!Z,N,2VpXQRDfd/=D2+h5aW=_1p`Sm9ijYgW/jA*.P88IgN5tMS1T;qomgKQoaAj;*+t]O8
%=[Noi;LC`Rmp+A//b0e%CEXV]4NYS"!nH+iQY(Wi3@-'Y\\s$2B.5P=][40#42p^\^l\rV&X;K-FEY4)%oD,Qa1qC"nEc:2Fg3F9
%U0dr$],Y8qNpiIlTq!RrU3!&m$KaUKK[Ma!K\UU/>#5"L85]:Iai1;G,?^A`CY[74fVT<#I6'eQ6iTtfLg1geT:>J+7uqj0FCmo.
%k/eCkQp@4B%T_g5P?cB$:]sbWX857``[W`9K.?0F&I$[mW!je8;#a+_nkD:d^(l$s?uD[\KDe^=p_N$a/j9k<Flpm?itsg-&k2n7
%.dm<HqP4Hq945^]M'1@HdGCG9*:1;XkXt>tc6i$cs+cN,PO'[,GQ@hBDnK4L<)2bcMm+d-+Smt56QK9E>BRL_Z@NlDb/YD3S_Ei[
%AcL\&P)C4OL<_e%rdrEPqAIYHOg5Ym6PPXVllD#OKd+8\LHn^"p*E-@)eAYgQF4Y@&@JHcT#SP?/$KLI73?&R2.^fA[#pM?I6dOa
%9iZ.ehu4nd4,_R1'K+D0`j+j8:4=//8cd:QP,kcf"L/Z7q^hub?""fD#':TEbf:j>l)dq44FqT\TUEnblAGQpiU`V\^\VF,Q['1W
%"l3Db%(kGT[KsA_d17)T5fJO6+/*Ic!AoG,7%-J>mH0#S%ToB.d7!\IT&`,A5h_-RV;2=9f4lEYg=hIITYkH)*1DF?GMf'E1f5tE
%THb:GZ;ZZ1?90)<B(<Am.+96(gV\Q(6#t"H>T&uSJ?4jn;5c^LWCmU6kqi5kV,W0dGM",G%1O4P$'Q9L5Skna8@%2Zp]K*o:.UiG
%/i_i/DdHen^he#7(I/?2U^TZPJsE3+m?^R(Qn/uCVfn-D;@A)op*66'@8"N]A>>cS_4^D]nZEO#)`ldX*S%qR\6er:A#?E4TMl`5
%nPU$am,n;POWq9mLE/KAp;:aqG^)-nHRkecg!UnlK_/q3.:QUA'QSpo0B^F)#pI6l+UoGZl3Qu6`M9.lQ'GR7="#U0'ji8]oVJ=t
%IF77$f[-gQ?Z]]?$bl-UEM_:[:US[ZG*=2E<,NnhK?'6U4YJDN:ou.fpVYR#pa5.Y>&074b-2PaWt)jff,\:p@lA#Nb@j9:9G_k%
%G(DSL^\"jCIb]KSF?uIgH;J]El):.q=.W7D.iH=DBi4>CA!>)RK1:'?7KY*Eh%E\e//^G.l'7SIDWS%Bl_palbDS0L$Y&.CFh*KG
%DB4A'Ko&G16Sg'r@,RssNa:M_gDk@P:#n[ATj;!f%1+hj?ms#I=T>pmqQ=I57Vugn7[P2lMFoNCoc>>o'AKCr'!".H7)7s(^BISk
%DhgE?J[7*]fL.l.B;r3Dnu7E!FE<T=>#3JdHjSAiB_o-L'jn"ZcJH"Ge&Z8@.hU)3&;I@imBV)mZW3_N9g?1'n,]%1)5[b,i*jgc
%nPg',.G;"+OD\MMmGt2]=q#PIQCh>[fdY!CjK/1Qps*[nAsk)Lh0'<<6mb@5h9Ss/]7siUWIYI&<V4's/ZNVd-a=Xih^7]X-ou)i
%</B2sd"PY0H%Q*'Q\-LVL)#O?.L-/]=V.4];K"^(F$ZXjOrrYTO,X&2-"Hrp\`_LsOT&TpSq]oJmf]?5r4]c\M7QsdSC;g3S[puE
%KGCM3mgS+GFNB/PfI$MhJ]SapCXV4^W$9DA&^KhpT,g$-7^q^e;O6S:%Y\)RiKu<lH5H1E@DWd5Bn)=R;I=:N=XLa;OPuK5[ER'n
%at"J`%<Bu.<_4A5Q"%ocDkJ2jR-Xq0k7'UHCG63'P>,L2Wfs=rQUDVQf"uu0_RSW>(pQ3O>[iFVhOon,3TS4%O`O<#p?e\i!H1f9
%Wd\-]'0QcK%so/1NsJIOAR_BRi\OK,b68ZVqNKmKVZ^E*r=o*i*46^d=e54>e&(lXimuf!\qGh@$m+Fh69rm&HTNEbJtD-llZ+cu
%7n%M"AXa!I<#ugi)o9FG.ubY69GZ*D\n=*l"e0otn6@OrC<c5@n.#\jD2.f^MCF^!"P\@dgLT2b,N,[;L$:JD_X,!?f^,YmkA!p`
%RbE3lq>k'iQ2SE`_I=I<rOu1Pg1oB%cjrDV/&[mu@!5ldD"i(gCUFmG!Ohs0e>=6MGPg)IJrsS[pGJVc<iEVB!aRJVR1*^%e\Kgq
%0[(XIAgIr@B%BXr+j^QQ?YWu(*>n;)C[L%KE#(?EAd9D(pCkbh<X+L413nAjb^D5Wj8%tc,$?i#oUkg9EfZ#dA:gmD^TmZ'hn?Ds
%11%[1`%h$4qZ6Hjn9AY\S0PS#j8$/kJ&L8`T,?AMQlZ':,*6)KcFEOA+-FC4+8F+6ZhW>b'fnaE;-p9`UB<s+:M$lBGs2ZomYlK!
%g)B1dodm-8lVT>EX_&rG,DK&&("aH9N[O)OBJ2K?\hLpEW:b3kkb=l\N&_<RNeg-s??t1sF+oGc6[&@R28tPeF*lA%<\+mY@^g?0
%:_e.<hrq]-9sPnRN<V8pB[F"P[$m(YLq+*:ilmS?mj#Ic[I&,R,#c6C;pH/4Mm>t?kEs1SCEG.>p<fOCM$O0GE4EFjn;,ZJ%f;'t
%c]h3+N<i;0)eJqPlCdSm=ch<,MlqK8kZB%1)A9J52e%W-j*n_W+_2WqD,Bi;/@m7SU?dUP<0+.CU(R@l$j_cApAuf<1XP'DC/@aV
%Ho-J9rEOE&9tt\%4NVQZb8<uUZ$*UhfjN!B;!L\/Q9U,_]O:6<Nt6-;jU8i6rCK5Jp@0S4o'\fh2K6^k(j-;V6D^)H9^*Vcc=ff\
%NIci^JEYb@paA6#'tFqaC(`-m"F"ta/c/&a1L1tJ!!RgE)Um7b&O/@Ys!:k`5n$b\F2iPR#o,]Y?'dBI1t'_,cUEgU([JQ.8Zq_b
%hmpZr"hUV\LGR*_l'D04R252..*RAPDhNe8g`ZqO7=#=[/$jO.f+:fgX$.qc`1NZ6\p,eJiDPY=)7WZ^Vu*%';Ub;jBYFO$W:-qD
%5CqP,[k&VT,Le!!8b@E'R]-lef0^K:GhI#[FS0jWke;fi@]+dG,s[JfTHur(#+RGC#DhS:o_bH>6$E*1O<BYL)$+BCo+tgGNLr'4
%(k+5hI\,fhmt-AfORr_TYdqPi\$\mHm161tU;e^k3kTRbGh`e(!AWIdTWo^pLjlLTVN1pVl:c'j4O_8h*?]0aGmaeU:"<&r(oD8j
%6UeEn_o:P;A,3N;8+[\qI+.Kh++i+W*-A@WXMC-CB3p[YcBDL[GEI>#D#eb#UcI\6;ptj_!cD1Z1WjsRUgCe;Me@MLJL<I8h`q!H
%5j9At7YXQ\VJGHg3QuU<>2Vj=33uIC%Ot7?1F]S(U..lfqVK'1ks6`-=6`*s?Zb'MeMman+F(Ak`h29$Y2"o`9NQuL,"/'s?0&gE
%LPrEA:%Oo"lM1\;\g&E_TYJGE!Ls@Z1?jT<q2tAA6jmU[.*t*CQkL_/;hmrI^:TK,P,]S_<X4uK==[8[nKsUg"t?--=d8k;'#DO`
%fo3?B*KG)F((H1g&/c0G%W_65B"C151c+2D5k/k>Zo!4H`F`Jm;33!RR:F!1ZWmN:=ccIe%!nY[T_>!G2XEo3&Ks'NB$BUUP,iNZ
%/Z98ebM@D=4mu\89k[b<i&fFBb(6')na<RE)1a_&;9!(VLXY(_Y3F9%pj17B?+^rkajn6>REXG)%EEE=s3hD#3gJ">17-O>c+^Ae
%"g;B8m\d^CL.,O!N24884'sRXDU!9G`,%fA&*gAA&!\:?&oUmfC7nDoRTLn7OVH07,X9PQABAS#\/5dg9c5]0QthgEcbh#0VcCO=
%KF'&VCmsA35C_ZB-L*ZO93_WqE'fj2djjQ.,2*P@r:^o9\-i/BiOdp5jQ]_j>l?XtYt/]@-AQ[`h\jqMGrii!Odd7I>m9e^kj1rU
%U^]s-np-XM)T^:#m(d%mX%tcoIRhs_LL/E@(ZiIY-3nFG`09W:]Tg6"Lk&8r:HE=]NfPA1.8d67%]'[sC<bgokF&K5Trj-ZEPaB7
%IM&HO0de/gXc]HC@Du#KBELZC.lDGAT0.0[pMt2!W`/6"o-@DXPG<KJ7]+s";,pq-SXrltM;mZ>9_F8kI-dV_P\1HcLWIo2g9Rt1
%VZ&J4#*kf-\N1cN!T2\0%8Lmp@T5Dg?nac@O2u;&gI^bU<fe:FHk9p14Zkb4#BGrom*$#]r3kJsE*T"^\QUb>MS7D-#9Rc]W`94i
%)@,V"hS9J%,uO%;IRkds>p:?oItL59AGhsO:D=CrDp<Cs8S<$NYM?+VBL6cLRuAo8#YGi?CPft@#;NS881I&96jll[KfVn3$@Z<T
%\(mG:nllJ&IoJOl!U[=<CIOP3#FqJBh4Y<hbjoG=#p=F_0ru)VTr*L_AOGMnF--PtV)i[hl"V,h)TN+B$K%h_7AW7GV_Jr%"FO#N
%s&QH=8^1BqG@l*J^"p5*Q/G*l]h2ZdY-s>3guk(Xs";Y5`3gIjper(u11#,>Ai55nM>OoBo"jeS(r+ZjeoILq,M5.O"N($2Br6f,
%Y^g*s`os)>B$+;3%4MM')&+I2hl1u7$(Q#H,:5<>L^sb&k8s/h/a!"M:Qo%#It/Lh/e/.[?<>M\>qCaB&#j152]2qe?)^=NPcgaj
%OeA9k40OR&Rj?uo8Qr\[agJ07KN5"GAliO(8Q6P,b4gs*:n68S(fgu"6kbb/ncU3XM,B:q0r4<Tdr<oWl\HMJ`["W8$cl:(dl7WA
%8l60D2`h`4fGf%*JZ2l%ZpVq$6>&"1;&JPlV'e_%DJPCDFI;.S7,/-IB9l1GB.\DE?ohJf"tF0l.,eY8P=S;*h_ELMeH\]EQIfhA
%>$s2u8H.dD/uGSMdKO(&oE?P;-kM@@flRGFBh$eiYU^0j+Z09$m6Z+6[Ad/\+?P[6OqBjO'lQcd\MYE?Z*^/-8DIo]j#c^kk^No#
%!CQ(PfSQjB$B_n7q?TVXUeVup.4lJ70=lLCW1e(N:C]0d?4u<DElW'.MVX*5r_>T$T&p\*FQbbe06I+fF?'gW/A1<mp's(#=!MX&
%dmBQ4gn4Y)^U^T::P!<h[0']0k__%_Cd`-[d?$!L#Wh`jq8NhNKoon&h=)s-J@eF+gAsb^I?C<FeCtLqId_q<fHNI@8qB0V4Q,GB
%NulE[#/Y=CA>`82(oYA/,0d4-L#/M!8>E4t9HasYWUVGn@b);Qj/jC-)VM/o=3!p2NhQ/V$gtNMN'fF+`P<ou&&m1!'/29:h*Usd
%p6fL(gc>h(gcB8*B3=*7N8n]c@^G0FG.D`$N(3ECI9qFoKe62]6.]8nTek#'V'+!X#*Z!i+FX-Pk?tV<*d6a>P;jpgS58jbE=)TH
%@p?1blD&7`=T2u$(Dng;1tjl?p\1`0,2N+-1jqO-1_`.n\np:=Nh,o^4C0McL!_ME41aY>iL/*N^1d/N#R=[UnOot#F.`9Yo+aNZ
%"eE=uROr402D/gsk*bF@3b"6l.+nf?Gi8EId*aJ`hA.UiM.fn7j'`0Zc">!CY>b'4;X-&hktnl>["B6ndfbo()gGjJ%U@1JNtA2;
%Pj&n"F=<RJVGDs2[)$ji17``#3jmaN3gE=mOm0BCN_H?+qKYahfLoJQ171gK2W]2L_/uu85_Ji;,`3.B0-DgulQgE_&b7aS.7;,u
%HUbgO.BA8f<uDoQU!M&[MgAjWY+hU7E"Hn^MEMBO19s"*=`Z:PB`rSadj?22NW&IQoDlKkC^K[=Io@;HNZ7ZERX>De5=pD1p_L8b
%+c<,$Mom&RUH$be6-Bn?$.F``eJKhO&OWB>%Q#MW@cR\EMDQ-2'TsK3;ke-5-NXXE84n]mPk'c\)^"\h"SC.$E3/I>;7@A'\?Mt6
%-&F_ADc+(#45gT!(ZoB<PR#U:ROad;XR&fc1CHq0lCb&oTW$ECWo$X29c0<h;5`u><V(f@7.%c8e1S,H1RF?D^ZUbdM@8j_V"Y/n
%_pmm9[=^Rc?>T+;'eUB0o-S^cb$Jn#))s"3GKGiFkZS:@05e+X#Pk_oLn[r*fN99DJ4c%F<PAM-9b-fD3#Y;F!W#$fSE@aNNE.FV
%\1lELll'H1W6QS'?WC((7&_)Rd/im%$B'.rLN%tscl3BO1c@326SC^fa)*N7nX^7,e&>jDTZqL[_^q3M62YZNlnPhD\.,;*P@CIc
%RI/?/=Sjp0ZVLtX`LpX6EFuapoV`)&F.`<:(*d&_Y'mlk!ENfO(smh*9$][%n]JDhqQ2OlAF87Ubm#(_Q\g1p3`=!ni;'ZqEOU_9
%q5KpP9ggMmi#q1-hpMM9)h0#H*uATKdXYh5#kZc4?$j>G2?k7j]gT?\.W074D[:StUX/a?j9MPma'XYU[gCc:>MrUbK<NSfp2+;i
%@G>]?9"B*$de5bX`h&=S9@hE6kS1&QqDJ^:S$u5X;0fD:Kf4<.rd7D&qZTkXaaBQYm?TlMh<2$#U`T\6=uP"q'aC/*f3n39Z+lj]
%h%!u3<:_An%L`<`"WKigk$GpA">o#bJE+/cn`PmN\og4n-)aaQ:";X#mlmt>3LC?,[?*$.lr&"M_:djW`b)u!fXHnNCNdQ'qTIE2
%?Ch=BN55Foi9Q8PBoKMhA:bTePk*6Z,Y#^S7*,s-r#"It:f'3.jY1MB0m/<$'IOiimnR[?E:l'\2]cSBge_0E/Iqt$-4M\^P:^\C
%hI(G)!uM*[aq(G<=12NcKbo.SAS@<pP%R[N"MqELhi4$V&!'.U#`N8pEM0-R=jtP!JY@P>PL9ElC#)2r[;R:+\P#NIa]d%$U2&Ut
%PA!%t5I9(aH)@Xo672s(Db._U?6+b1O\.@NHe1qE+P],:Ai[("`q,m/T#=W)lsAM0abRBUoJG%IJYh#BOHl2JM^rHnqAmeQ\O^Kd
%CcP]/.qm5o3sGg7CX?<ubT5mrVP6@tLRG:T2"TEM1"IcH"sti7*9&M_NENhD<\Fta;369jb)VU@Ib<t8fbOlN'9bt`$L$C&R,m7,
%+JdU(C/\Dbn)on85UJ@hZif.Bj[Z=[.WFQ=,gg=b!)Ea@Gk:m>QGeh^M@E_Y88l-qagJ1*#f(s9"02'tl"Oe3^,IJ"/[n\*A0E/\
%U9=Tk,[!B3OR<Kl-mG)GE9@N[53.R.1mldNf$t[4)I^pUlt.r"gmsQj/i<U00YecnJ0.VN<am4JV;Fb*NXf\ZY(uTof,jD500nbP
%O]fhtMdY6]2-Y#W>Z2M7")-%igg$bFKF]:283o#j3:$%CZ0*OA@?@++*rjsg-i9XraFI_[$h,6r1^Wn?BGY:%[cr\%HD&"W!e[<'
%!K'mPAdDj%7*gVg%0ghos(_!_#f143LjJe,6_-cZ"71>NOB>TiccE%H$m16DEJ^/uelB<Li[0;3nhg?RmpGpigbD2<\KW1*)3HSB
%FF_T,i;99)[0fg18'I$GMfhBV&`S0TAr7ZGBThQKY@c<fU[e5jO'<Vnm?$;V('m&](M)4GEiK^D;ST-/YuRMaOZFb_2+b&6Ndie^
%GZ;uKcD(#V&48Tu4N?7eONtqga92'<&1IYRm!dUiKY*<u=]ACeb,je]?/D*l^Kg+mUg[43H:UX^,VU;AGsO7hhfThL!L09(,ADl"
%@R3(577iP.>Zm7&6_PcSRcNI.Yg8$U/2Z,dX$HYDl%:BnF?q?N9L/(U7U]pT.`tZ!M.kcO0CUj_D`9EGS0kdm'sKIAnDrL`crFW/
%(L.W\EYXu_OeULgBjg'Q&4s`WJK1T1<HO'M-N4daXCeNN,hK1CD($LF#kT_o$U(2.PaDUf>1jUo-&K2Bbf1hYZ/0GpFGCGh2dgkP
%UXTmeg6ocskc;\OrlH=N6.tlr`B%kEJFl5L81#nIMFS":qO<BZfe%_#%f3;1lpJge03/]n[hl"k,>q5A#=j!%l9K<7i!a8^TStps
%lhr4,D$^X$8OKJn;3n:_nM?`V^Gp,29.TWq+gnFejp&EQUqEo3B+Q[qKR4NWg'Hmu`I11J=FVuKZWSf\YhQj@EuOmi.C?(>&B1<B
%nup>SC:<%@I4&J95R=q@fMj^6(nNIHiJ')53@Xb!Q",-YC&G%'9d3L1SET-56dZLG."]Z2&c!h(I*eF**mI6k<J1.dK$tDOFg81O
%*ccbUP?cAO,02Ns%r\CWjC1lAD*jn'/lnkOdIms3(ho_k1oq!\fgg^"gcp%PjOuZXi)`3:G9NO3"m'47!#Q=&FM?a<nPVH]+@[,"
%#P*$>7?k!A<C$P$=nBfmU[ZTn>e:>Rg/eS;818r175Q>aAb#.7n1Y^!]JtF=JkY12.jD:`!X=:-B,@+UiY]p+nMu[11bF.Bqa8be
%5mSLAWp51h<REOo#t>\baeB#?&9C6hgRq.>r5r"H%jLNEf(G97)?UI@6r<]=8M4=<KlTV"MInPGnWKG3kk#+k2.jHC&sdn$s2Fmb
%c'2piAXHCF!2<FeB*LDkK6VBGP&"-Mr`Bj@=?I`79C>1lg@5:rEd"G'Zljc1U#!LR.>"ln78E,'Ke5r*D]o^aa1qC"^j):o9Jk$I
%(^NHalodI.">D)ZVh(0tD/q,bAb0ojpkOaV\;'9*:4MP2*qVS8[>TP8>%Z<;TP]tQRn@!Z,UdsDU<ZZfJH6B5Q8Y!];!`au7<&QT
%2F/a*-c5I#f<-;?KRhJ.9F):^.f+ZfAQ>Pi,.kQ6X\hk]maidu3^@>D`tD)(0[FI;.n=B8ElMPcMn_SGV,gW[J__K*m1c_VQj(aP
%du3/)XJnX*-u'2SLBMb(XVM?UC/T6r@7X33cEgc'U1"RppmWt@-1J'/e8.L-33t(?)?G_IK;LS1IZ"h<*Fq!-dBF^YNBN>PnRmBW
%\k$ZF8=1V:aeK2"_q5Q^7>jTa,=rG6>"frNXU#eSL]^lE1'42c,H\^lS#[Kl>eGqHs7\Ih";TlY8k]N#/lKIj$0dVZLDh:4Wo\%S
%Wlfiq@8,@.<(LA%7(3/qe:UiJCiOKcjPj/^g*AE+c7q1Q^-t>1N2S=/!h6=ao,B!3)=AEfBk=d\]f\:*U+`9.Efc/&.*9TJ1oEnt
%^6k?-lVQPMj;4J16DKTLJ?WWYH9+`Xg12S8BAq'TAHn=kigE"nO+6\$W,4prpA6+q&jc$#Z5aP=V%'V_(t6VmaN1O"l2e$N*?i^5
%ND.8r<Lbm$5]S,PbB]8O:B^RoJ<0l=rl#G0!`981N="I83'<JeLsVT`<K:HkDh9/YMSVRV[m^LSaW$$"4NFjf5]U7ulO[>[KZ?N[
%"'NGK.qur0mkcfJ7H&7M_3)'1S/I&9Zq#1;Ii(N0o(2Y.^4/VE.Hfd(V]tTen+ag2M?#HH4S4rao.^G;o+So&+C]09MG;I#RDfAn
%@@68(r+k3iq.-6j)cCsW7Y0"'"Bq$oJDb$*`b3,l+iTKW7CZ-i_$9QPC(*1[bd(utb!70RI7J_UL%Zh!AdLR;;I^"*Ybgnb6JX$t
%h(uPpED%[8-n0CKW<*O5X3Mk[9"iMX&:G2u?PIInoRd=fiZ,*$7Tk`l3,d[f!DK&SfT@<<e0TS28C2bLfAr]p*44UF@Z$^l,GN7@
%Z]WPpfr_6Ij\'=Pr+$8-7rGGMH:d!ZdRh3c*ucqp%S`"FLtiGH[pO<u`_4&.,@O;,CC`g[kQnJGOu[XR?W,:B@/h(,,Vc9=+m-^;
%clP.Kl=l(Q'/M.JSf!^4$9JC,rZ9SioDZ*sKZ`\t3cpKE^-U=aS"Mo]$QSJ!ecA5)\b>X/^"-mb4DR2TZC&m#Re'Q=FML:Vac0qK
%m'6k+_=f8Ed8@rPHZIUhVsa.Oh9%A`o$LoY.mXJPm)$uLaC98FU&=s_mC7_aVBV%DdQFO]>0'9Tc$M1Z#YM*M:.Lg&aW;cH'^MEi
%B>3Mf2h)Fuk>p1MYqt^pKV&fXh_r8@I9;CMM%7Dk2aeH0Da%B8o#NB8Z^U[MY]$-U<[dtUh*:L.5GGOT&-cQ;Mp+JqXQTlb+G!>&
%D9WE<&G!eV1BkPt=TNK93s!^$6NCZMo=Y,@)=)DV!0Ne;BreI##sPp;GN^&Wi98:OP8Iu<V1i*eAC.m*i^]!D\In!FHZdn]a#_(I
%'il*OLp0/aVHXR4f("F(k7Qiu)L"f,:QG<nA5?;$*;^04,e<e,[68jlYiS99:<AO2#FIe%(7#*JOIKZU4)FF8"'[*`iPDAY^^Hno
%cQ'-8CC.2hVjK-KDAL-g8js-l8snC[\9b?d;]jst[g%<YJq8E#]^#/"_,[T%=+:8TrFV>QB4!NnPD>*5&79501^R].\:e8dl2k5S
%s2_#\r<Z%<#K):>[m,F&X<"B&6Z^5,'.i?`m>)!ZB2BR8-D0\-*E"86BC52;=Z`nicdiTp&(Zchb*CNfKNOaflKXVhhf,]h3WB,n
%f9/V6%hS'r9gW0e7'e,sR!$"PS0esc'p2a6bmg)>AFb-`oP?%8NA$G"1o=C%HkhZ$d@A17q634"3ls*5U8nigCDo&LEc'`"mOeAH
%&;gMD:K2f+Ds+in#o5:&jSma(4^@iCIeD%L4<>2W3DTlIL6.`=1@14V))=J@#=CsF$jT.S*2J316OqP\OQ$/SOFcpT1h?7!cMR;B
%#79'uM:L,"6(6`-Eo`;2@ZO5L_J%0jK7kQr.HgXi6K*F'Ha<*dPA\<Kr/'&nZp8\e(-!]^VK=!DE=*J$R1ls9e"!)JRPbjc)`#E?
%LcIcaICoI])3'*Xh01e0'Y"Kf(^.cn0T"$@THUluX$\dchSUD*7Z/4_NKXh4r_\$!5o4f+kE$-n64l-)/;gF<68?OoOYdH/cVVf`
%KqW0l4h`\Q22^tJdY\YL]ke#:`h$OalCN4;>UIN3ohDQo.VRRD]gm4Q>+Knp12#uuV\AMeRCu3e;<FNr6^0TEkZT:qTZq7erB]iF
%er[*_3Em)=[Y::/I`"!.",=.OG%2V$i?lR5--skC`=#ra#P5j=Pu^^=BZi:$Ddua-W[T%/RKE4sh2+#QE1b<KXI7F1XBDJ:CDOM"
%RSK"s"$)F)Tf[>$bhee(q5uLdab3b\?e[@a=cg1^DsZNW=7c$@phi+)--L2n<6bU#'[?Nr@cQU^=$9mKEQpZ5i-?Jh%&&m>?>//P
%-GAc"?=Pgr;XZ!c'"iYh5MVQDm;:\QmdYA1CnrI8Dn?1p`VE90T!3Ik!:S:V.=s)iPW-V!9a!Vc7b*\'9'K"qTS4S+S=r/g#*r+V
%f[+r.$%7g-__'6pmQo>NfU<gu6"Abu$'Z$D]]-g=*%RFUbgi:Cjm-Pr4K_=d@@.+26X@jT/3N+t?UU=RR2/8FaQg2gLLJn\qTYDK
%lYeo?fgV+U1h,@YYUGt4e@9F(0Q,?'0L$fZc>35"T(o7Fff0WXj*]UR-Uar?Rbabn'O;r)RoHm/F.O_g4&66T#@Pi]Nlc[4h0FTY
%RJ.49L!7$^H!6:m:D:/!Bn9b?F,IBZj/0K[H-4ms[f(KO8=&tYT<0%V(ss8]dIVGup[&@.rGnJnk<.,lm1/=$2,,Qk'S^)pljYhO
%E$=@+9lP<J(-2uAS7*G%q'N`F"=od=lP^;.0#,n-?L2Prp,l(!Su2aPQ-:]>C/:>ib3'*(.<O<fkGe8"Oit5*V8'Y.HN*I+F;jo@
%$c`-cSj)0s*CN5K@O(ZjS1^$aAmL">\Y)(n#":.P*Nb1OPI82G''A-D\BJ$Y`sR[kDZ:O^@)3>\&9F]qBTCTZo_mt:@tggtGd[,G
%QRT7/A?5F%.5`QKG^^9*P0nD$hE":ga*ddNQs\.dB:L32#%ZmUF)]LWL/uiUTl*"db7)6l^cFFgZNk,oKA,MHo0gf(YQkE@1q.!+
%%f.A)c#XB&&9De;BF`>)o_mt:F+qYOG[3cAo7QJ]roCF3H.+\n7@q_)&NT]KZ(]XFDkA-EbMi8U_pcu5bO5rPMEnBunA)V+*LVgH
%Li3=[n4_%IScoU]T7bHg0jha<*osK4rF<(0-[Q=>@Lg]ec/Dfm^Af1$XRNS+YBtN@T2t^/*hKsJIm`n<*j'*B;im78f\niMqY'_^
%^Dri',e.'p,aUN!p5Y`bcYPe8fpWFa[a'M&k*`@;"Sm=TCHe<Br1Z!:o1,?SJ)eb=a3SSI:S6=@I45UGVhZ\f[/KLrdEMtH=,ffp
%f892t@CJO[@"[Ako(FffLWJ!U[?*-'4ZaZ4M"7OiO7ie[U,+VEI*^c6/r_&)CPNV>4,d73%uo,`@HR.#AG<PkiY;PY/s5A?/W%dQ
%fd/\/6_Z*'0%!s!i0fS#nt*W532dJ_H._\2;Qe]G7GrS99A5p=`7\o<mP33Z%"U(Y&GQA5A^96>mB.I5"?p18?un28R'f%Di9-)E
%707s<f2(OE5H!h6>IqOu6J##!S1i@ar=*&II(HJ1H%6uOZ%W:205s`6\j3l>ak:LW,&l,PgmnO,%Vr@;/]84q!Y']VE)>[:IaIN:
%Tgdo2<Tc_Z2.N#]4@A&iNHdkn=0q,,Qh^rric<LKlp'3)I.V!!R]Y6"Z5&^eZk^V_V0CF9kdjLC'>-U9RGP2CZ]Bj,m9VB58)/%m
%ioD*jZLhdeG.7\nZ8\_Uqh5N;?#pFK2Oh*FJ%bH"Cb0B324&'Vs2ML[-M]mbHF2c5XR!.HF?TJu?&q)<s%(c%DR]jQnt2j,rrmkA
%lgai0VqbXn*m&o*P?ur.2seWCm$/`DP[sC_F2GYpGrON1/GUsKP5dotc-A<r?*DL.j?MOI4uO38LK[?YjF?$Pf-GhMD1i#eImPDR
%\J`NK5;nZN*6J60,$FiG8=&gdOY#IVahKUq0HS;bTp&e[[6MXdV/H"LOFKXL_YlJ\ItbIH-4@-?^JIT&':gsAkEpA)2Tq3^I-:1T
%=P+U./_-$aH!@F!s+<1BrnG-^Rt(7X[[FHf1.q8<13iZ^^H:D04cCX/k714P+$n-_=)?)f5A<:a:g1#r!n0p>k!-QVp=I(Ya7is@
%q!S%:I<beX?f/Wurl=atr%B(/HfV0@_12(pZoL\AOU(pL\)7,YH[X7,OfXU,q02;BrS?ple44;hKi)dXad;q_cb/?;++F"ar=Ar'
%m[J.poZ(>=3Xe[DDnl>:h1op`0me3@h*:nt:Z$ZNs2RA&gV<BqgaE(RI+6pH(XF;?gWpJgr:P!Cs7,aFDnl>Ga)Bj`q!W]YpWX6;
%^Am_u?>(n%ItG.Zpqr)h5Q'L+s80"Wrpfq7]t!s<GM,1M'7B*654)j-g98LXrYKkFiS1!]s,Z'P_uKOfG<`b;mZ1l)h%5@8c&_kl
%h=ofSGlP[2HhZ@n7g;.V&N(A(kMsjQj!?YB_^2c<.9O'oc>KChM#Zos3L",k0>$4?:U5(Cq;mY6ElWU=j'M274*DGTa`*jUJ6$M]
%1:Okr&R$3_<s+u&c+kD,6a808krTRun>rIHZIYM+#7QG0=X7_a-feWNA(1[W+c?$B4spTt2FhU_c+[*(3,2nB252nIAmp^W2H+EW
%C.:amA&o8qB]<"N!RhNY*-K)hSHm36'6^<U9HtbXRRj^tg4;lb`/M-L9Lfs;7n)PeCVNW3UDDFoglHsmgb`5(#`q4i0XO;B\cWTU
%'h`C)We&R-gTfqfXD(S;>5"o4s4sJ?X^W,)TV%j;p<aD(+jPE21^cB,2F%T8%iP'X<YnaR2DAmj4/Drc,6X7=DNR!?Qqijt#`]pH
%d$A@O(ekb/9?Uoc'E5d03E3K?4Y:$/XiiD^@m_K!@K2f85ScJJn6ljReXDogY*bQ]q\o@bE`-8umV>46HRQKZ'4!nrl.m/_R!rk3
%3oNXK*tIe5U50T6[I'nE3](F&idkD<g(_TS%eLZC*0gck#[O,lUOh7C0\A?Q1?sP5Oo'*Ja6=!IWcm'd@TGi+olq"#!jd\Eh?0I0
%7'21A#UnHmg?utcQsNN-Fi!)fqf%)+XVW`r/Yq4i(c"^5AUBP[<%LkXR@="1TH\AqD)VN"c8=c`g:ncZdO^]\$^6N1?o5&?EP1Uh
%qru3r\-i>jR+R\bOA*e`cKlgp(=30\HH.3VbhE:MHRpqb7R4H+baR@'-A.;EP#2HHQgir6O4CD$%+dN2Xf$cL@V=U1Zs>&!(:B:A
%/_0O+r6[d042aC0D?q.&esI^(I<57Bb_egK)%!7Q.p;/ea%(STHpX<nRCG+$W6\6.p14nVMqQDI(EHrWU9FMdPgsDLc9>7:HMBVU
%lMe5.p$gA7<OCEWD;"45o44p!gToAIkK-d!9=D.q_ro-BpU=_7LX20dmVg9L%o]nD]+J?t>M\2&XWBZ0[W5E)U,-G7S(lUdl%@_%
%+rBUp9W%OEMFP$0R*&Gbl@d1j*qo)dXYpl+:A\=2rG9UQn+IKuNE\C0.iK;3CZ/^6+W@-iN/!$pI,!SsJ0V'B1kd_mKCoGZASD(<
%]dMJ'Q<5M@FGpt)"Gn*q#tagp=DIDDgK3C^2d"i23E>?Nn0H>8"$@tL0BK%.p6*]n:fb"d1EdpiY/\AI!VllL5qjN/Gf/Xm:&/[8
%iulOD'->3ni;c[LY1$/&G![.3kI$AZ]o)qQQqCY?rE[p-`*d"1Rujh-Als2?1^L$2k.+m8,%::,p'Y/XkthcO3T/uToI01(EZ9=a
%cmcn;f(1SiSS4aBd^Q?OTC*2!F'IJg"cp:mi;cY^ZG0?hD(c7iQf"UQaM9bbWgT]2A12,[Z\95,0Ns^+4]`g9?XaW@'Dctrqub6J
%1utn]fL_p5EK]rSO-5=UZ)3Km,L9%&3[>3?_"k%`-t[@q?6qpUS_)9+>(=5&>\F4?fl=*0_Fr*h9k);J3/Sd8N"_T2rG@,ZiIq?8
%FG)jb[.h$5g5!ufB^[Ts)P/HE"H[5X/q'4rIq4>L'Lp.?1>7ZiWBl8/dBPS!4/P!OftdC-&6[/Q[eA+t9G]YRoOu&ZjBQnc7sg5W
%fG!SX9NYKtM43"\1S87q+br6QKEFEQ8fGOh-*huKRd&N:78hDTM%m=N*,FM1jM^C]8F_N(_XUoH84EBX\LjDe$`^%ZG)_r"ea&nh
%b]It@e]asZ]F:632D)cc0V'9h,<&W<9:%N4mLKehp9ML?0h=U-L7VF7WiflYf^\Q:'!]nZ(Om7je]8Y%BX---mDrHL.L.n`MtD2[
%1-g[Y)e_LuZhAY/,@i6JeFi:mj\bXM,`RM:[QQ*@*+ld,/`>548eIeR>)ldp.<L0.MEg<Yk=5?>rW[`a%3)_N=[YNN)TMn?%stQ4
%Fi?2[f8,G!6Kac>r[o=7[5(%'Rbn9C5'`372"GbDfWG?S2FG*L[^AD2AJG)0_qnW&NCiB,cCVAHp%(jYTDa:lNFYB>CK\(F<YrsV
%M%CLqNM<`;PgG'c@=C+Rmpa_bmd(67Tb9WDhf^N>r]C;f_k(MPqRcBJX!1W=8lF+RaoRKb8P^#fO5^QSL7Yp8lm$tVGeK:kX(O^R
%9;9i-T>qXFgcE[O$>87S:u@0&qVtbj)X&Tt:7,ZY9,0/!$,t:)\s$W=UVL(@m$q;,9oqD%X'3::`_9I_=CSAE$F/-X_(-+Tjt5@1
%X^*Ljrn.TAk]suM5ud6)2X`qSr@E..iX83%3R;g?GDTVg-FHcqGKME<qJfBc!phET7)ul8V]rh+hQhfm[#p*gg8LA2gGt/jK/V/C
%Wnr#uX1q;eWr5FeX=WDu_h?tC1)mn'PSVY?:t.\YBQN4GTSmV(2N5Y`q!,5?4\'(eZl:f,rEW6K+9\P-TY3W[3#"e$NNC$p(MtXs
%nm1&+\<E&G.+O<d@J>K[6-K.*D30'RVQ8=s\%"Xu:&rC&)j5u*]l(@iQrOu36Ab98])Gabi;4Ji[IP8]fIaTKaCC_/&emX.>]ZM$
%o!P\nEYI>((sUScESBu67EF2_emX6DVo8+22VcDPq@\K3j\^-nQ;P8_P^)!/1L3acIC#d*T%%UV)GAG(]nNGdBP#3#*hrL:OIXpu
%l"1Yt"^No^g=-'!1t1R!1A6(%;G*\[V/&@q>cea?0H"7k;LC1?73oMYP-@(&^CWIS_I2<@eHl-l"ZstNm96)7(&M,"l2uDKJ+MFe
%J,]0=D][d6g\W)\mQ0i=s7#H#n,MX-GMdjos2/4C`UEg$m\fethL5Dek'm=`rI;NVh%/uSpu<HFGlQoe^]23d!l9r[&,tjtrq>g\
%lX0Y1^B=9e<([~>
%AI9_PrivateDataEnd
