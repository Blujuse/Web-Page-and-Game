%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.2
%%For: Lenovo
%%CreationDate: 2/17/2023
%%BoundingBox: 0 0 1845 805
%%HiResBoundingBox: 0 0 1844.8386 804.3004
%%CropBox: 0 0 1844.8386 804.3004
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.2.1 x236 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c004 79.164570, 2020/11/18-15:51:46        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   dc:headline="Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set"
   xmp:MetadataDate="2023-02-17T18:09:58+02:00"
   xmp:ModifyDate="2023-02-17T18:10:00.178+02:00"
   xmp:CreateDate="2023-02-17T18:09:57+02:00"
   xmp:CreatorTool="Adobe Illustrator 25.2 (Windows)"
   xmpMM:InstanceID="xmp.iid:0680fa43-70d1-774e-8de6-498ba9e4cf4d"
   xmpMM:DocumentID="xmp.did:0680fa43-70d1-774e-8de6-498ba9e4cf4d"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set of element sculpt architecture illustration</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Lenovo</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>element</rdf:li>
     <rdf:li> sculpt</rdf:li>
     <rdf:li> architecture</rdf:li>
     <rdf:li> recreation</rdf:li>
     <rdf:li> sandbox</rdf:li>
     <rdf:li> construction</rdf:li>
     <rdf:li> tower</rdf:li>
     <rdf:li> generator</rdf:li>
     <rdf:li> summertime</rdf:li>
     <rdf:li> fantasy</rdf:li>
     <rdf:li> outdoor</rdf:li>
     <rdf:li> activities</rdf:li>
     <rdf:li> background</rdf:li>
     <rdf:li> preschool</rdf:li>
     <rdf:li> collection</rdf:li>
     <rdf:li> play</rdf:li>
     <rdf:li> sea</rdf:li>
     <rdf:li> illustration</rdf:li>
     <rdf:li> set</rdf:li>
     <rdf:li> object</rdf:li>
     <rdf:li> coast</rdf:li>
     <rdf:li> game</rdf:li>
     <rdf:li> isolated</rdf:li>
     <rdf:li> cartoon</rdf:li>
     <rdf:li> decorative</rdf:li>
     <rdf:li> city</rdf:li>
     <rdf:li> house</rdf:li>
     <rdf:li> build</rdf:li>
     <rdf:li> sandy</rdf:li>
     <rdf:li> fortress</rdf:li>
     <rdf:li> coastline</rdf:li>
     <rdf:li> castle</rdf:li>
     <rdf:li> vector</rdf:li>
     <rdf:li> sand</rdf:li>
     <rdf:li> design</rdf:li>
     <rdf:li> detail</rdf:li>
     <rdf:li> handmade</rdf:li>
     <rdf:li> building</rdf:li>
     <rdf:li> roughness</rdf:li>
     <rdf:li> color</rdf:li>
     <rdf:li> sandcastle</rdf:li>
     <rdf:li> figure</rdf:li>
     <rdf:li> simple</rdf:li>
     <rdf:li> stairs</rdf:li>
     <rdf:li> fragment</rdf:li>
     <rdf:li> piece</rdf:li>
     <rdf:li> casual</rdf:li>
     <rdf:li> diy</rdf:li>
     <rdf:li> creative</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="112"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAcAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FUv1t&#xA;mFsgBoC248djmDrz6B73K0g9SSV3pmqdgmNjqiwQ+nIrMAfhI8PDfM3T6sQjRcXNp+I2FLUL7606&#xA;8QVRRsD4+OV6nUeIduTPBh4B5oPMZvTW21hI4VSVWZlFOQoa/fmxxa0CIBG7h5NKSbCCvbo3M5k3&#xA;C9FU9hmJny8crcjFj4I0oAkEEGhG4IykGmwhN01uLgOUbcqb0pSubMa+NbjdwTpDexSqeVppnkbq&#xA;xJp1p7ZrskzKRJc2EeEU6GVoZUkXqpBp0r7Y45mMgQs48QpNH12HgeMbc6bVpSubGWvjWw3cIaQ3&#xA;uUldwX+Jqu2+/U5rCbc8DZXsrs2twJKEr0dR3GXYMvBK2vLj440jrvXEkt3jiRldhTkaCg+jMvLr&#xA;QYkAG3Hx6QiVlIjIhcoD8Q6jNa59I3S9S+pSPzBaJxuoPQjvmTptR4Z35OPnwcY25qmra4t1bejC&#xA;jICauSeoHbbLdRqxONBhg0vBKykRZWrQ1oaGmYLnMn8pu7WMqkkhZKKD2BAO2bbQH0H3ur1w9Q9y&#xA;d5nOE7FXYq7FXYq7FXYq7FXYq7FXYq7FULqNo1zBxQ0dTyFeh9sx9ThOSNDm3YMnBLdjUtzFFK8T&#xA;mjoSrCldxmlkCDRdrEWLC363CehP3ZFPCWxcxnxxXhcJ1qa/RQdsV4V3rL4H7sUU71R2B+7Fad6q&#xA;+B+44rTfqjwP3HFaW8yWNQQB0oDv89sU036g/lb7jja01zH8rfccbWmiy1rxNR0PE4rTRf8AyW/4&#xA;E42mlrMaGitXtVTja0spQ8ihDHqeJwJWmv8AK33HG00pORWh2PgcbSAtjhaWRYohV5Goo2FScMRx&#xA;GgsjQssv0PTpLG0KSEGR25sB0GwFPwzd6XCccaPN0+pzCcrHJMMyXHdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVYj5k02a2le+qHjmkChB9oEqTvXb9nNRrMBiTLoS7bSZhIcPcEihublXJkQlD0ApUZg2X&#xA;OMQumvbmq+ihUD7VQDXElRAdVZtRbgeELc6fDWlK42x8Pzat9SmVCJ42Zq7FQOmIKyxjot/Sl19Z&#xA;5CM+h/JTelPHG0+GK819xq0pjpBEyvX7TAHbElEcY6lfHrBEaiSFzJT4io2JxtBxdxUrfWLkO5nj&#xA;ZkP2Qq0IxtlLEOjdxrFyXQwRsqD7YZeuNrHEOqpJrqtGwiifnQhSQKA++PExGHvK221p1jpcRu71&#xA;+0oA2xBTLD3LP01cC65FD9X/AJKfFSnjgtPgivNdda27IBboyPXdmAO2ElEcPevTXUEa+pE/MD4i&#xA;KUrjxIOHzQset3PJjIag/ZCgbZGy2HCFOfU5HlDDp+1Wm+LIYwAyHyzZveMl8jBYoZSrKftEhQdv&#xA;+CzO0WnMiJ9AXA1uYRHB1IZbm5dO7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUm81ry06Mf8AFy/8&#xA;RbMHX/QPf+tzND9Z9zFPTzUu1t3p4rbTQcqUJFDXbAkFv08KLd6WK200NQRUivcdcCbXJAzEKoJO&#xA;FBK5xa27hJSZrg/Zt4vib6adMVFn3OQWtwxSKsVwPtW8vwt9FeuKmxz5LTCVJBFD3GK216WK2708&#xA;Vt3pjFbd6eK2hrqzBBkUbj7QGRIbIT6IT08i2WzfyQtNJlH/ABe3/EEzc9nf3Z9/6nTdo/3g9362&#xA;Q5nuvdirsVdirsVdirsVYzLqFytXedwCexNN/YZoDnnzsu3jhjyoK9nqE0dwplkdojswJLfry7Bq&#xA;ZRl6iaa8uAGOw3TC51a2ELei9ZSKLsdvfcZmZdZDhPCd3Fx6aV7jZKDd3f8Av6T/AII/1zW+NP8A&#xA;nH5ud4Ue4IvTtSaOVhcyMY2GxNWofxOZOm1XCfUdmnPgsekbqupavEYOFrIfUY7sARQfM0y7UasG&#xA;NQO7Xg0xu5DZJJL++HS4l/4Nv65geNP+cfm5oxQ7h8mm1CSeyNtM7SSLIJEZt/hoQRU79TkpZjKH&#xA;CTZtRhEZ8Q7kNwyhtt3Dr7d8VcFB/riruGK27hitujhb4mkKrGu/LoAPeuKk9yEvNThitJLkzrYa&#xA;ZEKy30mzN7Rg+Pb8MLIQ375dzzXWfzXZrlbDy1F9WtnkVZb+UVnlBahIBrxB8Tv8sNObDS3vP5K2&#xA;gfmbM8z2XmOL6xapIyw38Y4zx0agqBTkB4jf540uTTVvD5PRbe/jktY7gzC906QVhv492Qf5YH4/&#xA;jkXDMd9tj3IllC0qQUb7Eg+ycWLfDFFu4YrbuGK20YlJBI3HTFbQ9zaKVMi7EbkeOAhnCfRXtdSl&#xA;t9L+qwSNHI0zSOymnw8VAFRv1GXQzGOPhBo215MIlk4jvsqwajfnrdSk9/3jf1weNP8AnH5sThh3&#xA;D5Mg0vWIhb8LqQ+op2Ygmo+Yrmw0+rAjUzu4GfTHiuI2U9R1MySqLaRhGo3K1Wp/A5TqdVxH0nZs&#xA;wYKHqG6FF3d/7+k/4I/1zG8af84/Nu8KPcE3ttWtjCvrPSUCjbHf32GbLFrIcI4ju4OTTSvYbJfe&#xA;6hNJOzRSOsQ2UAkdPlmHn1MpS9JNOViwAR3G6hHfXfwuJZPGjE/iDlQzz52Ww4Y8qCHvJ7ezkEV3&#xA;KkDkVCysFJFaVFTuMhOBiaOzZD1i47qH6W0v/lsg/wCRif1yFs/Cl3F36W0v/lsg/wCRif1xtfCl&#xA;3FaNT0oMW+uQcj1/erT9eKfDl3F36V0ym95BX/jIn9cbR4cu4rG1TTP+WuH/AJGJ/XFPhy7ih5NQ&#xA;08uGF5FQCnH1Fp+vFkIS7nWdzbTTlYpUkYKSQrBjSo8MVlEgbhG8cWtxQEEEVB6jFbcEAAAFAOgx&#xA;W3ccVdQVNTRVFXY9AMUpH5g17TtO09tS1NymnoaWtoP7y4fqNj2/2zhbccCTUfq+54/5l83ar5lt&#xA;bue6Pp28csYtbRPsRrv97eJx6uyxYRAbc0i0W0M2o2xYfu/VSvv8Q2yRbJHZMb9ON/chRQCVwAP9&#xA;Y4sRyZJofmfUdA02xntqSQSSyi5tm+xIvw/cfA4GnJiE+b0rRtX0++sBfWBMmnSGl1aH7du53Ow7&#xA;f7YwEOFOJBo/V96Z19FlBPOFxWOT2yPJrq/erFWPEqaDqe9RhYt8cUO44qp3C/uX+WJZR5pW9xbx&#xA;HjJKiMdwGYA0+nIhu4SeSrBqFgOtzEP9mv8AXCxOOXcUZHqem/8ALXD/AMjF/rhYHHLuKp+k9Opt&#xA;eQA/8ZFP8cWPhy7ivGp6YNvrcP8AyMX+uK+HLuLf6T07/lqh/wCRi/1wo8OXcW/0lp3/AC1Q/wDI&#xA;xf64r4cu4q1rLFdyenayLO43KxsGIHSpp0GShAyNAWwn6RctlfzroEN7bfX60mtUoVIqGStaexFc&#xA;2etw8Q4uocbQakwlw9CwP6hF/IPuzUO64y1+j4f5BivGXfo+H+TGk+IWv0dB/J+JxpfELv0bD/L+&#xA;JxpfEKnLpqhCUBqO2JCRkR/laELqEhp/uo/8SXAGvUn0/FlNMk4TqYq6mKrGZQDTdhtT3PQY2kBB&#xA;389tBBK1zIEs7VTNeyHoaCvHFnG+nM8njPnXzXf6lrBdkj+rIq/VYXQN6asoNN+574u0w4hCKF06&#xA;+u5tJulEMIVZE5EIAtG8R0r8OCt2ZG6ZaRrNxDf2qpb24AkVRSJQaE06ih75JhOFgrtU1y7bUbkm&#xA;3tzSRlqYlY/CadTU9sURgKRd3rl1/h6yHoQbyyChjBX4OlFOw+3ixEBxFX8oeZb231YD04lt3Rzc&#xA;RxxqnNUUtTb8MWObEDF6VavbzwIIXD2d0vq2j+Fd+OAhwDYN9RzXW0pjf0n6VoPY5EFMxe6Npkmp&#xA;1MVUrofuH/z74CyhzYrrFv6t7GPFAK/7I5EOdjlQWrZoooB0yaDNv6sPDFHE76sPDFeJxtlAqdhi&#xA;vE76sPDFeJ31YeGK8TO/Jehx2dr9fLcprlKBR0VK/iTTNtosPDHi73S6/UGUuHoE214V0e6H+R/H&#xA;L9T/AHZcbTf3geePFVSAaE980TvwWo4mC0bcj9rxwKSuKKASdgNyThRaBi1PRGkCRX1u8kjUVVmQ&#xA;kk9ABXFmRLuR3pjFhbQQ8iCtFHQ164ptEaPEqak9BSsRP/DDAObHKbj8U8pknGdTFXUxVSdlEhJ+&#xA;zEpc/PtgZDkwL8zdRiTTLbSHufQkvD9ZuqKWLKD8INO3L/iOJLm6SFyMu5gWt2On/XRW84n0024F&#xA;ugoNx7ZEFzYk1yZBpOjaTF5Zuwb/AOJpI2kf0zsR0HHqepwtM5y4xspaZpmkHUbb/cjU+opA9Jlq&#xA;QagVJphTOUqOztT0zSBqNz/uRofUYkekzUJNSKg0xWEpUNkZdaZpP+H7L/T6ASyFX9NjUnqOPUUo&#xA;MWIlLiOzXlzTNK/SJ46hzPpSfD6bJsVoTVj2BxXLKVcmTeR7q3Onz6ZDd/WXtT9Yt/gZCq13G/bl&#xA;+vFxtRE3xVzZJdhS6yr0kUNkZNMDtSLt25xKT16H6MkC1yFFuN2etUKU6V74qRSy7H7hvo/XieSY&#xA;c2P3qVvY/wDVH6zkA5UT6V/p79PpybC3emMVtByato0btHJfW6OhKsjSoCCOoIJxZcMu5F+kjr2Z&#xA;T9xxRbYiAFANsUW70xitvQtBFNHtR/kfxze6b+7DodT/AHhb1z/jk3X+p/HHU/3ZXTf3gYFTNE7x&#xA;1MVSjzfGzeWtQQEgtFxqNjQkA4tuH6g8lk0KJY2ZVIZQSCCa1GHidhb2yBqW8PKpLKor13pkXWHm&#xA;q0wsVfTB/uQb/jCf+JDB1Rk+n4pxTJNDqYq6mKoOQ8o7g+LKv0VpkQ2dzyf8z0uZ/NsqhGZYooo4&#xA;6Anbjy7e7HEl2WjoY0k1Wxuf0nGDC+6xD7J8AMiC3xIpkdrp95+gL0+hJT1Yv2T2rXt7jJNBkOII&#xA;TTdPu21C2AgkJ9VD9k9mBPbAynIUXalp92uoXIMEgPqufsnuxI7YrCQoIu60+8/QFkfQkp6sv7J7&#xA;0p29jhYiQ4i7y7p94dRNIJD+6l/ZPdCB+JxXLIUj/IUF1b+Y0DxOivHIj8lI2py7+64hr1RBgz2Q&#xA;f6JD/kll+40/hjJwo8yq2LbMv0jGKMgRdMk1qF2KQEe4yJ5Moc0iuh/pkfyH6zkQ5Q5KtMm1qdyD&#xA;9XlpseDUI+WBI5vEo9CiaNWZSWYAkkmtTkuJ2lvWvKEbL5a09CSSsXGp3NASBgdfm+opvTFqdTFW&#xA;e6H/AMcm1/1P45vdN/dh0ep/vC3rf/HJuf8AU/jjqf7srpv7wMEzRO8diqWeZVB0O7Hig/4kMBbM&#xA;P1Bgs9uvoSf6p/VkLc8PSbcfuI/9Rf1ZN1p5r8UK+mj/AE8/8Yj/AMSGPVjP6fim+SaXYqt4vzrX&#xA;4KfZ98CoT/dM3/GRf+JDAGw8w8t/MS9vIvNlysUzogSIhQdv7sdsEubstJEeGEq1HUtQ/ScdJ3Wg&#xA;iPwnjuQD2+eRDdGIpkttq+qfoO8/0lyRJGAxNWANa0PX9nJW45xx4hshtP1fVhf2/wDpUhrIoIJq&#xA;KE0OxwWynjjR2dqGr6sb+4/0qQUkYAA0FAaDYY2sMcaGyJudX1T9B2f+kuCZJAWBoxApSp6/tYbY&#xA;jHHiOztA1fVfr5rcuw9OTZjyFQpI617jEFcuONckV5O1HUJ/MEKTXDyIyyEqxNPsE9MQWGogBDYM&#xA;2k/3lj/1m/4kcMnDjzatGpOPcEYAmfJMMm0oe9/ufpGRkzx80juv97I/kP1nIhyRyViyggE7noMk&#xA;1rLgf6PJ/qN+rFI5vNoLdfQj/wBUfqyFuyLOvLSgaHaDwQ/8SOTDgZvqKZbYtbeFWd6J/wAcm2/1&#xA;P45vdN/dh0ep/vC7W/8AjlXP+p/HHU/3ZXTf3gYJmhd40vLiOQo3cDFS06JIjI6hkYEMpFQQeoIx&#xA;UFDfonTNh9VjoKEfCO2NM/El3ovFg7FVfTf97z/xiP8AxJcerGf0/FNsk0LFdzIVKEKP2vHAyrZf&#xA;hYoKtYZT/lr/AMSGRDaeYeY/mD+j/wDFVx66yl+MVeDKBTgPEZGXN2WkvwwlupHSDqcX7uYbR14s&#xA;o+X2g3bItseKmUWp0H9A3gMc/L1ErVl5f5NCAF8e2S2pxpcfGOSE079BC/ty0dzT1F6shFa7dFB/&#xA;HEUznx0eTtR/QRv7grHc09RujIBWu/VSfxxNLDjockXdHQf0DZgRz8vUelGXl/lVJBXw7Y7Uwjx8&#xA;Z5NeXzoQvzyinP7t6cmUjpv9kL+zXEUubjror+Uv0X+novq6TrJR+PqMhWnE9gK/jhDHUcXBvTMJ&#xA;P95Y/wDWb/iRwycSPNSjbi6t4EHIsyNk0yxxkPe/3I/1h+o5GTZj5pJdf72x/IfrORDkDkq0BNab&#xA;jpkmDeKoT9E6ZuPqsdDUn4R3xpn4ku9EoiRoqIoVFACqBQADoAMWBLRiQuHI+IdMU2u7/wAcUM80&#xA;T/jlW3+p/HN9pv7sOj1P94ULq96HjnsuFOQ4+pXxoelP45i6rU84U3afDylbGI9PmaQq3wqP2utc&#xA;1jszMOm0+VKcP3leu1Kfjiomvk011jZlfk4FQtKVPhWuKBNStrGeVC0o9Eg0Cn4if1YAylIDlutN&#xA;ldC5EQWsR/3d2p8sV4hVr7nT544+UR9Vq/YpTb78JRGYJ3VdPsZY5BcStRmTj6VPs1IPWvtiAicw&#xA;dgj8LU7FXYqgh/cS/wCuv/EhkQ2nmHmnn/TryfzRcSRRFkKxAGo/kA7nIy5uy0kgMYSy90fUDqUX&#xA;GLlURioI6ig8fbItsZimUW+g6p+hrsGGjGSMheQqePXv/lZKtnGOWPEENYaBqpvYKwEASKSSVpQG&#xA;vjiAWU8saO7r/QNVF7PSAkGRiCCtKE18cSCsMsaG6JuNB1T9DWgENWEkhK8hUcunf/JxrZiMseIt&#xA;aJoOqfXSWh4D03FWK91p4++IC5csaRPlTSdQttcilmhKRqrgtUHqpHY4xG7HUZImGzLJP95Y/wDW&#xA;b/iRyUnEjzQ7MQKhS3sMg2BNY25RqfEDLA4x5qN9/dr/AK38MEmePmls2nyTqZ4n/eRigjp1pv1r&#xA;kQG7xK2K620y8kj5Syek1fsFQdvvGSALGWSIOy0affm5MRIEQ/3dx2p8q47rxxq11zp15EgaJhMS&#xA;aFQtCPfribWM4nnsqJplwY1ZpVVyKlONaHwryxpByC+SjbWd7Jy9WkQXpUVr9xGItlKURyWT295H&#xA;KEQB1P7dKU+e+O6gxIZRoms0+rae0W4BX1Q3gCfs0/jm00uq5Qp1mp0/OdoZ3eRy7nkzGpJzXSkZ&#xA;Gy5IAAoKfx8zWnCmx71yLJvgPf7zittemPFv+CONLbTLxWoDMfDkf64pBXBR7/ecUW3hQtEiFygP&#xA;xDqMFppdhQ7FXYqgh/cS/wCuv/EhkQ2nmHlv5if8pXcn/Ii/5NjIS5u00f8AdhKb9mbUoyxLGke5&#xA;NewOBujyZLbu40W7UMQpkjqtdt6/0w9HHkPWENYFlvrdlJBEi7jY9RgDKfIuvyzX1wzEkmRtzuep&#xA;xKw5BE3DudFtFLEqJJKLXban9cPRjEesu0N3S+qjFT6cm4NP2ScQuUbIvyd/x34SevGT/iBwx5sN&#xA;T9BZtJ/vLH/rN/xI5KTgx5qG9fbINiIiu2RAvGoHQ5IFrMLWz3DS0BFAO2AlMY0pBmHQkfLFku9S&#xA;T+Y/ecbWgr2qmRm5M1F7VOEMJ7K0ghjALctzTYt/XCWAsr/ST3+8/wBcNItv0k8PxONIt3pR/wAo&#xA;xWyujAjdXjAV1NVYDcZKMjE2ESFii2ysjFWHFhsQeuJiQaKAb5NVGBLsVdUDqcVa5p/MPvxTTXqx&#xA;fzr94xWi160X84+/AvCVvOAtUN8Xcjv88U0V/qp7/cf6YUU160fv/wAC39MU00bhADQMfahxXhQ8&#xA;aM0EgPwksD8Ww2IORAZyO7zbz3OP8TT8bVJ14x/vKE1+AdxtkJc3Y6UegbpdfXStqMRWwQgen1BP&#xA;v2pgbYjbmyi31GEaNdIdOj5mRKChoa96Hfanjkr2caUDxjdDaffxpewM2mxU5iuzbVNK71GILKcN&#xA;ju7UL+N72dl02KnM02behpXagxJWENhuibjUYTo1qg06PmJHqKGgp3oN96+ON7MYwPGd2tE1CJL0&#xA;l9PiA9N9wCOgr+1y60piCuWG3NX8s3aPrUQ+pxwAh/3gDAj4T4mmI5sc8fRztlksbC3RR8R5Mfh3&#xA;6knJEOJE7of05P5T9xwcJbLDvTk/lP3HHhK2HenJ/KfuOPCVsLeEgY8uh6ClKYKKbDdDjSFe0kVH&#xA;PI0BHXCGExaL9WE/tr94yTVRcskIFFdaD3GKSCu9RP5h9+FFO5of2h9+K0uQF2CoOTHYAb1wiJJo&#xA;IJrm/wD/2Q=="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:f2b29506-bb3a-4358-9973-eb49c6d09137"
    stRef:documentID="xmp.did:f2b29506-bb3a-4358-9973-eb49c6d09137"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:df1b4794-538b-41ca-abb3-652f1acab45d"
      stEvt:when="2022-12-22T12:47:07+02:00"
      stEvt:softwareAgent="Adobe Illustrator 27.0 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:f2b29506-bb3a-4358-9973-eb49c6d09137"
      stEvt:when="2022-12-22T13:34:36+02:00"
      stEvt:softwareAgent="Adobe Illustrator 27.0 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:0680fa43-70d1-774e-8de6-498ba9e4cf4d"
      stEvt:when="2023-02-17T18:09:58+02:00"
      stEvt:softwareAgent="Adobe Illustrator 25.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="1844.838683"
    stDim:h="804.300370"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="29"
         xmpG:blue="27"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="29"
         xmpG:blue="27"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                        
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -804.3 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 804.3 li
1844.84 804.3 li
1844.84 0 li
cp
clp
168.262 681.455 mo
158.463 681.455 li
148.663 681.455 li
145.371 681.455 142.703 678.786 142.703 675.495 cv
142.703 670.111 li
142.703 666.819 140.035 664.151 136.744 664.151 cv
99.8393 664.151 li
96.5477 664.151 93.8793 666.819 93.8793 670.111 cv
93.8793 675.495 li
93.8793 678.786 91.2117 681.455 87.9202 681.455 cv
68.3203 681.455 li
65.0288 681.455 62.3613 678.786 62.3613 675.495 cv
62.3613 670.111 li
62.3613 666.819 59.6928 664.151 56.4013 664.151 cv
47.8176 664.151 li
47.8176 391.755 li
47.8176 381.511 41.2909 372.793 32.1706 369.529 cv
27.4174 367.827 24.1633 363.449 24.1055 358.401 cv
23.8774 338.378 li
23.8783 338.378 li
24.0353 352.173 li
362.629 362.433 li
372.909 362.745 382.241 368.526 387.098 377.592 cv
394.098 390.657 li
395.551 393.373 397.431 395.834 399.666 397.953 cv
416.436 413.839 li
421.971 419.083 425.196 426.311 425.402 433.932 cv
430.734 631.568 li
431.166 647.58 418.429 660.856 402.413 661.087 cv
190.229 664.151 li
180.181 664.151 li
176.891 664.151 174.222 666.819 174.222 670.111 cv
174.222 675.495 li
174.222 678.786 171.554 681.455 168.262 681.455 cv
122.578 602.085 mo
118.682 602.085 107.917 602.911 115.932 612.622 cv
117.242 614.209 118.857 614.856 120.513 614.856 cv
127.496 614.857 135.216 603.344 123.888 602.12 cv
123.888 602.12 123.377 602.085 122.578 602.085 cv
273.734 585.452 mo
273.734 585.452 li
278.121 585.452 li
284.454 585.452 289.589 580.317 289.589 573.983 cv
289.589 468.992 li
289.589 468.992 li
289.589 468.262 289.521 467.548 289.391 466.856 cv
288.39 461.542 283.725 457.523 278.121 457.523 cv
278.121 457.523 li
278.12 457.523 278.12 457.523 278.12 457.523 cv
231.339 457.523 li
225.006 457.523 219.871 462.657 219.871 468.992 cv
219.871 573.983 li
219.871 580.181 224.788 585.23 230.933 585.444 cv
231.068 585.449 231.203 585.452 231.339 585.452 cv
235.726 585.452 li
235.726 585.452 li
235.726 585.452 li
273.734 585.452 li
399.283 553.129 mo
398.24 553.129 396.552 553.604 396.168 556.567 cv
396.045 557.521 396.662 557.893 397.593 557.893 cv
399.24 557.893 401.871 556.728 403.117 555.563 cv
404.362 554.398 404.225 553.234 400.336 553.234 cv
400.267 553.234 400.197 553.234 400.126 553.235 cv
400.126 553.235 399.776 553.129 399.283 553.129 cv
331.018 501.743 mo
329.901 501.743 321.513 501.983 323.445 509.233 cv
324.804 514.329 327.281 516.205 329.888 516.205 cv
333.523 516.205 337.411 512.557 338.87 508.91 cv
340.328 505.262 339.358 501.614 333.278 501.614 cv
332.625 501.614 331.914 501.656 331.14 501.745 cv
331.14 501.745 331.097 501.743 331.018 501.743 cv
370.006 432.87 mo
366.111 432.87 355.343 433.696 363.359 443.408 cv
364.668 444.994 366.284 445.642 367.94 445.642 cv
374.923 445.644 382.643 434.129 371.314 432.905 cv
371.314 432.905 370.805 432.87 370.006 432.87 cv
133.232 434.445 mo
133.232 434.445 120.872 435.982 128.827 442.42 cv
130.243 443.567 131.734 444.037 133.132 444.038 cv
139.078 444.039 143.358 435.541 133.232 434.445 cv
117.881 413.403 mo
111.952 413.403 95.5688 414.66 107.767 429.44 cv
109.76 431.854 112.217 432.839 114.738 432.839 cv
125.365 432.839 137.112 415.318 119.873 413.455 cv
119.873 413.455 119.097 413.403 117.881 413.403 cv
246.282 406.235 mo
245.169 406.235 236.775 406.474 238.707 413.726 cv
240.066 418.822 242.543 420.698 245.15 420.698 cv
248.785 420.698 252.673 417.05 254.132 413.402 cv
255.591 409.754 254.62 406.106 248.54 406.106 cv
247.888 406.106 247.177 406.148 246.403 406.237 cv
246.403 406.237 246.361 406.235 246.282 406.235 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.952941 .745098 .564706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.901961 .603922 .458824 ]
/N 4.97729 
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~oCDJCo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()ABo'u8?naZ/>naZ/>naZ/>naZ/>naZ/>nF5r:nF5r:nF5r:nF5r9
n*f`6n*f`6n*f`5mdBN2mdBN2mHs<.mHs<.m-O**m-O*)lg*m&lg!d#lK[Wul07Hrkih6okND$kk2tgg
~>
<~^:h4n]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m
]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tD"j
]Y(ni]Y(ni]Y(ni]Y(ni]=Y\e]=Y\e]=Y\e]"5Ja]"5Ja]",A^\[f8]\[]/Z\@B&X\$riU\$i`R[^NTO
[C*BK['[0GZa6sCZEga?Z*:I:YHP.4Y-+n/XfSV)X/i8#WMuhpVl-DhV59u`USFQXTqS-OT:VXFS=H(;
~>
<~OH5H`O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,f6\NfK-[NfK-[NfK-[NfK-[NK&pWNK&pWNK&pWNJrgTN/W^SN/W^RMi3LOMi3LNMMd:KMMd7I
M2@(GLkpkCLkgb@LPLV=L5(D9KnY25KS4u1K7ec-Jq8K(J:N0"It)orI=6NkI!g9fH?sj^G^+IWGBS.P
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
409.292 681.455 mo
399.492 681.455 li
389.692 681.455 li
386.401 681.455 383.732 678.786 383.732 675.495 cv
383.732 670.111 li
383.732 666.819 381.064 664.151 377.774 664.151 cv
340.869 664.151 li
337.578 664.151 334.909 666.819 334.909 670.111 cv
334.909 675.495 li
334.909 678.786 332.242 681.455 328.95 681.455 cv
309.35 681.455 li
306.059 681.455 303.391 678.786 303.391 675.495 cv
303.391 670.111 li
303.391 666.819 300.723 664.151 297.431 664.151 cv
297.427 664.151 li
260.527 664.151 li
260.524 664.151 li
257.232 664.151 254.564 666.819 254.564 670.111 cv
254.564 675.495 li
254.564 678.786 251.895 681.455 248.604 681.455 cv
229.004 681.455 li
225.714 681.455 223.045 678.786 223.045 675.495 cv
223.045 670.111 li
223.045 666.819 220.377 664.151 217.085 664.151 cv
190.229 664.151 li
402.413 661.087 li
418.429 660.856 431.166 647.58 430.734 631.568 cv
425.402 433.932 li
425.196 426.311 421.971 419.083 416.436 413.839 cv
399.666 397.953 li
397.431 395.834 395.551 393.373 394.098 390.657 cv
387.098 377.592 li
382.241 368.526 372.909 362.745 362.629 362.433 cv
24.0353 352.173 li
23.8783 338.378 li
99.6236 338.378 li
163.938 338.378 li
263.563 338.378 li
327.878 338.378 li
439.663 338.378 li
439.663 664.151 li
421.212 664.151 li
417.92 664.151 415.252 666.819 415.252 670.111 cv
415.252 675.495 li
415.252 678.786 412.584 681.455 409.292 681.455 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9
I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I.""^m]([&WdF06Hg[n\m](X$WdF-5HgRh[mAbO#WI+$3HgReZmAP?tW-[g.
H0hGSm&#$oV0M=%GO)&Kl_AXgU35apFQoH?l(<(^Soa+cET`g1kF$8NQu;#OD<7!ujH=9<O(dO5BAnb[
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
mHs<.mHs<-m-O**m-O**m-O**m-O**m-O**m-O**m-O**m-O*)lg*m&lg*m&lg*m&lg*m&lg*m%lK[["
lK[["lK[["l07Hsl07Hskih6okih6okih6okND$kk2tggk2tggjlPUcjQ,C_jQ,C_j5]1[io8tWiSibS
~>
<~WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!
WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE%tWMukrWMukrWMukrWMukr
WMukrWMukrWMukrWMukrWMukrWMukqW2QYnW2QYnW2QYmVl-GjVl-GiVP^5fVP^5eV5:#aUnjf]USFTZ
USFTZU8"BVTqS0RTV.sNT:_aJSt;OFSXl:@S"#n:R[TY4R$a8.Q^=#(Q'ISuPEV/mOcb`dNfK-[NK&mT
~>
<~H[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*d
H[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C'bH?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm_H$O[\H$O[[G^+IXG^+IWGB\7TGB\7SG'8%P
G'8%PF`hhLFEDVHF)uDDF)uDDF)uDDEcQ/>E,]c8Df9Q4DJj?0D/F-,Ci!p(CMR["Bk_6oB4kjiAnGUc
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
439.663 338.378 mo
439.663 338.378 li
327.878 338.378 li
263.563 338.378 li
163.938 338.378 li
99.6236 338.378 li
23.8783 338.378 li
23.8774 338.378 li
12.1606 338.378 li
5.44366 338.378 0 332.933 0 326.217 cv
0 250.913 li
0 244.198 5.44366 238.753 12.1592 238.753 cv
87.462 238.753 li
94.1795 238.753 99.6236 244.198 99.6236 250.915 cv
99.6236 261.902 li
99.6236 268.618 105.068 274.063 111.784 274.063 cv
151.778 274.063 li
158.494 274.063 163.938 268.618 163.938 261.902 cv
163.938 250.915 li
163.938 244.198 169.383 238.753 176.099 238.753 cv
251.402 238.753 li
258.119 238.753 263.563 244.198 263.563 250.915 cv
263.563 261.902 li
263.563 268.618 269.008 274.063 275.724 274.063 cv
315.718 274.063 li
322.434 274.063 327.878 268.618 327.878 261.902 cv
327.878 250.915 li
327.878 244.198 333.323 238.753 340.038 238.753 cv
415.341 238.753 li
422.058 238.753 427.503 244.198 427.503 250.915 cv
427.503 261.902 li
427.503 268.619 432.947 274.063 439.663 274.063 cv
439.663 338.378 li
230.264 312.98 mo
225.779 312.98 223.635 320.004 229.401 320.916 cv
229.401 320.916 241.902 320.916 233.947 314.476 cv
232.633 313.412 231.376 312.98 230.264 312.98 cv
175.595 319.224 mo
175.595 319.224 175.944 319.33 176.436 319.33 cv
177.479 319.33 179.168 318.855 179.552 315.892 cv
179.675 314.938 179.057 314.565 178.126 314.565 cv
176.478 314.565 173.848 315.73 172.602 316.895 cv
171.357 318.06 171.496 319.225 175.388 319.225 cv
175.456 319.225 175.525 319.225 175.595 319.224 cv
379.069 298.331 mo
379.069 298.331 361.265 298.331 370.357 308.559 cv
373.214 311.774 375.997 313.019 378.418 313.019 cv
386.737 313.02 390.804 298.331 379.069 298.331 cv
197.27 290.436 mo
190.286 290.436 182.566 301.949 193.894 303.174 cv
193.894 303.174 194.404 303.209 195.202 303.209 cv
199.097 303.209 209.867 302.383 201.85 292.669 cv
200.541 291.084 198.925 290.436 197.27 290.436 cv
50.0755 274.622 mo
50.0755 274.622 32.2726 274.622 41.3648 284.849 cv
44.222 288.063 47.0049 289.308 49.4265 289.309 cv
57.7454 289.31 61.8116 274.622 50.0755 274.622 cv
level3{
gsave
clp
[439.663 0 0 439.663 0 288.566 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .85098 .658824 ]
/C1 [.952941 .745098 .564706 ]
/N 4.97729 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[439.663 0 0 439.663 0 288.566 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8N#srr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrVc]nrVc]nrVc]nrVc]nrVc]nrVc]mr;?Kjr;?Kjr;?Kj
r;?Hhqtp9fqtp9fqtp6dqYL'bqYL'aq>'j^q>'j]q"XXZq"XUXp\4FVp@e4Rp@e1Pp%A"Mo^qeJoCMSF
~>
<~g"=s0f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f[na,f@SX+f@SX+f@SX+f@SX+f%/F'f%/F'f%/F'f%&=$e^`4#e^`4"eC<!teC<!se'ldpe'lan
daHRldF$@hdEp7ed*U+bcd0n^cHa\Zc-=JVbfn8RbK@uMaiVZGaN2EB`l?$;`Pod6_o'@._83t'^q[Xu
~>
<~W2HPkVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVP^5fVP^5fVP^5fVP^5fVP^5fV5:#bV5:#bV5:#bV50o_Unjf^Unjf]USFTZUSFTYU8"BV
U8"?TTqS0RTV.sNTV.pLT:_aISt;OESXl=AS=H+=S"#n9R[TY4R@'A/Q^=&)QBmf$Q'@MsPEV/mOcb`e
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
1797.02 657.258 mo
1447.81 651.509 li
1437.31 651.337 1428.89 642.775 1428.89 632.274 cv
1428.89 389.404 li
1428.89 385.255 1430.23 381.217 1432.71 377.893 cv
1450.58 353.96 li
1454.1 349.251 1459.58 346.406 1465.46 346.242 cv
1745.21 338.378 li
1820.96 338.378 li
1820.73 358.401 li
1820.67 363.449 1817.42 367.827 1812.67 369.529 cv
1803.55 372.793 1797.02 381.511 1797.02 391.755 cv
1797.02 657.258 li
1759.21 613.65 mo
1759.21 613.65 1746.71 613.65 1754.66 620.089 cv
1755.98 621.153 1757.24 621.585 1758.35 621.586 cv
1762.83 621.586 1764.98 614.561 1759.21 613.65 cv
1706.66 574.889 mo
1706.66 574.889 1681.94 577.96 1697.85 590.839 cv
1700.68 593.133 1703.66 594.073 1706.46 594.074 cv
1718.35 594.076 1726.91 577.079 1706.66 574.889 cv
1609.15 585.452 mo
1609.15 585.452 li
1613.54 585.452 li
1619.87 585.452 1625.01 580.317 1625.01 573.983 cv
1625.01 468.992 li
1625.01 468.992 li
1625.01 468.262 1624.94 467.548 1624.81 466.856 cv
1623.81 461.542 1619.14 457.523 1613.54 457.523 cv
1613.54 457.523 li
1613.54 457.523 1613.54 457.523 1613.54 457.523 cv
1566.76 457.523 li
1560.42 457.523 1555.29 462.657 1555.29 468.992 cv
1555.29 573.983 li
1555.29 580.181 1560.2 585.23 1566.35 585.444 cv
1566.48 585.449 1566.62 585.452 1566.76 585.452 cv
1571.14 585.452 li
1571.14 585.452 li
1571.14 585.452 li
1609.15 585.452 li
1478.57 567.919 mo
1478.57 567.919 1461.06 570.093 1472.33 579.211 cv
1474.33 580.836 1476.45 581.502 1478.43 581.502 cv
1486.84 581.502 1492.9 569.47 1478.57 567.919 cv
1498.86 557.552 mo
1496.92 557.552 1491.53 557.965 1495.54 562.822 cv
1496.2 563.614 1497 563.938 1497.83 563.938 cv
1501.32 563.939 1505.18 558.181 1499.52 557.57 cv
1499.52 557.57 1499.26 557.552 1498.86 557.552 cv
1471.25 439.565 mo
1471.25 439.565 1458.75 439.565 1466.7 446.005 cv
1468.02 447.069 1469.27 447.501 1470.38 447.501 cv
1474.87 447.501 1477.01 440.476 1471.25 439.565 cv
1668.8 399.316 mo
1668.8 399.316 1651.3 401.491 1662.56 410.609 cv
1664.57 412.232 1666.68 412.898 1668.66 412.898 cv
1677.08 412.9 1683.14 400.866 1668.8 399.316 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1844.76 722.518 mo
1844.76 722.518 li
1844.76 713.113 1839.26 704.994 1831.3 701.201 cv
1831.3 701.2 li
1839.26 704.993 1844.76 713.113 1844.76 722.518 cv
.980392 .901961 .862745 rgb
f
1776.52 681.455 mo
1756.92 681.455 li
1753.63 681.455 1750.96 678.786 1750.96 675.495 cv
1750.96 670.111 li
1750.96 666.819 1748.29 664.151 1745 664.151 cv
1708.09 664.151 li
1704.8 664.151 1702.14 666.819 1702.14 670.111 cv
1702.14 675.495 li
1702.14 678.786 1699.47 681.455 1696.17 681.455 cv
1686.38 681.455 li
1676.58 681.455 li
1673.28 681.455 1670.62 678.786 1670.62 675.495 cv
1670.62 670.111 li
1670.62 666.819 1667.95 664.151 1664.66 664.151 cv
1627.75 664.151 li
1624.46 664.151 1621.79 666.819 1621.79 670.111 cv
1621.79 675.495 li
1621.79 678.786 1619.13 681.455 1615.83 681.455 cv
1596.23 681.455 li
1592.94 681.455 1590.27 678.786 1590.27 675.495 cv
1590.27 670.111 li
1590.27 666.819 1587.61 664.151 1584.31 664.151 cv
1584.31 664.151 li
1547.41 664.151 li
1547.41 664.151 li
1544.12 664.151 1541.45 666.819 1541.45 670.111 cv
1541.45 675.495 li
1541.45 678.786 1538.78 681.455 1535.49 681.455 cv
1515.89 681.455 li
1512.6 681.455 1509.93 678.786 1509.93 675.495 cv
1509.93 670.111 li
1509.93 666.819 1507.26 664.151 1503.97 664.151 cv
1467.06 664.151 li
1463.77 664.151 1461.11 666.819 1461.11 670.111 cv
1461.11 675.495 li
1461.11 678.786 1458.44 681.455 1455.15 681.455 cv
1445.34 681.455 li
1435.55 681.455 li
1432.25 681.455 1429.59 678.786 1429.59 675.495 cv
1429.59 670.111 li
1429.59 666.819 1426.92 664.151 1423.63 664.151 cv
1405.17 664.151 li
1405.17 338.378 li
1516.96 338.378 li
1581.27 338.378 li
1680.9 338.378 li
1745.21 338.378 li
1465.46 346.242 li
1459.58 346.406 1454.1 349.251 1450.58 353.96 cv
1432.71 377.893 li
1430.23 381.217 1428.89 385.255 1428.89 389.404 cv
1428.89 632.274 li
1428.89 642.775 1437.31 651.337 1447.81 651.509 cv
1797.02 657.258 li
1797.02 664.151 li
1788.44 664.151 li
1785.15 664.151 1782.48 666.819 1782.48 670.111 cv
1782.48 675.495 li
1782.48 678.786 1779.81 681.455 1776.52 681.455 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1832.68 338.378 mo
1820.96 338.378 li
1745.21 338.378 li
1680.9 338.378 li
1581.27 338.378 li
1516.96 338.378 li
1405.17 338.378 li
1405.17 274.063 li
1411.89 274.063 1417.34 268.619 1417.34 261.902 cv
1417.34 250.915 li
1417.34 244.198 1422.78 238.753 1429.5 238.753 cv
1504.8 238.753 li
1511.52 238.753 1516.96 244.198 1516.96 250.915 cv
1516.96 261.902 li
1516.96 268.618 1522.4 274.063 1529.12 274.063 cv
1569.11 274.063 li
1575.83 274.063 1581.27 268.618 1581.27 261.902 cv
1581.27 250.915 li
1581.27 244.198 1586.72 238.753 1593.44 238.753 cv
1668.74 238.753 li
1675.45 238.753 1680.9 244.198 1680.9 250.915 cv
1680.9 261.902 li
1680.9 268.618 1686.34 274.063 1693.06 274.063 cv
1733.05 274.063 li
1739.77 274.063 1745.21 268.618 1745.21 261.902 cv
1745.21 250.915 li
1745.21 244.198 1750.66 238.753 1757.38 238.753 cv
1832.68 238.753 li
1839.39 238.753 1844.84 244.198 1844.84 250.913 cv
1844.84 326.217 li
1844.84 332.933 1839.39 338.378 1832.68 338.378 cv
1605.5 308.69 mo
1605.5 308.69 1588.88 308.69 1601.02 315.148 cv
1603.07 316.236 1604.84 316.677 1606.31 316.677 cv
1612.57 316.677 1613.25 308.69 1605.5 308.69 cv
1625.81 294.674 mo
1625.81 294.674 1613.31 294.674 1621.26 301.114 cv
1622.58 302.178 1623.83 302.61 1624.95 302.61 cv
1629.43 302.61 1631.58 295.585 1625.81 294.674 cv
1465.9 281.965 mo
1465.9 281.965 1453.4 281.965 1461.36 288.405 cv
1462.67 289.469 1463.93 289.9 1465.04 289.901 cv
1469.52 289.901 1471.67 282.876 1465.9 281.965 cv
1793.38 268.472 mo
1789.48 268.472 1778.72 269.298 1786.73 279.009 cv
1788.04 280.596 1789.66 281.243 1791.32 281.244 cv
1798.3 281.244 1806.02 269.731 1794.69 268.507 cv
1794.69 268.507 1794.18 268.472 1793.38 268.472 cv
level3{
gsave
clp
[-360.766 4.4181e-14 -4.41811e-14 -360.766 1802.86 288.566 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-360.766 4.4181e-14 -4.41811e-14 -360.766 1802.86 288.566 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
421.212 664.151 mo
417.92 664.151 415.252 666.819 415.252 670.111 cv
415.252 675.495 li
415.252 678.786 412.584 681.455 409.292 681.455 cv
399.492 681.455 li
389.692 681.455 li
386.401 681.455 383.732 678.786 383.732 675.495 cv
383.732 670.111 li
383.732 666.819 381.064 664.151 377.774 664.151 cv
340.869 664.151 li
337.578 664.151 334.909 666.819 334.909 670.111 cv
334.909 675.495 li
334.909 678.786 332.242 681.455 328.95 681.455 cv
309.35 681.455 li
306.059 681.455 303.391 678.786 303.391 675.495 cv
303.391 670.111 li
303.391 666.819 300.723 664.151 297.431 664.151 cv
297.427 664.151 li
260.527 664.151 li
260.524 664.151 li
257.232 664.151 254.564 666.819 254.564 670.111 cv
254.564 675.495 li
254.564 678.786 251.895 681.455 248.604 681.455 cv
229.004 681.455 li
225.714 681.455 223.045 678.786 223.045 675.495 cv
223.045 670.111 li
223.045 666.819 220.377 664.151 217.085 664.151 cv
180.181 664.151 li
176.891 664.151 174.222 666.819 174.222 670.111 cv
174.222 675.495 li
174.222 678.786 171.554 681.455 168.262 681.455 cv
158.463 681.455 li
148.663 681.455 li
145.371 681.455 142.703 678.786 142.703 675.495 cv
142.703 670.111 li
142.703 666.819 140.035 664.151 136.744 664.151 cv
99.8393 664.151 li
96.5477 664.151 93.8793 666.819 93.8793 670.111 cv
93.8793 675.495 li
93.8793 678.786 91.2117 681.455 87.9202 681.455 cv
68.3203 681.455 li
65.0288 681.455 62.3613 678.786 62.3613 675.495 cv
62.3613 670.111 li
62.3613 666.819 59.6928 664.151 56.4013 664.151 cv
19.4969 664.151 li
16.2068 664.151 13.5383 666.819 13.5383 670.111 cv
13.5383 707.014 li
13.5383 710.306 16.2068 712.973 19.4969 712.973 cv
62.3613 712.973 li
93.8793 712.973 li
142.703 712.973 li
158.463 712.973 li
174.222 712.973 li
223.045 712.973 li
254.564 712.973 li
260.527 712.973 li
297.427 712.973 li
303.391 712.973 li
334.909 712.973 li
383.732 712.973 li
399.492 712.973 li
415.252 712.973 li
439.663 712.973 li
439.663 664.151 li
421.212 664.151 li
1 .85098 .658824 rgb
f
1831.3 701.201 mo
1828.23 699.737 1824.79 698.917 1821.16 698.917 cv
1428.77 698.917 li
1415.74 698.917 1405.17 688.35 1405.17 675.318 cv
1405.17 664.151 li
1423.63 664.151 li
1426.92 664.151 1429.59 666.819 1429.59 670.111 cv
1429.59 675.495 li
1429.59 678.786 1432.25 681.455 1435.55 681.455 cv
1445.34 681.455 li
1455.15 681.455 li
1458.44 681.455 1461.11 678.786 1461.11 675.495 cv
1461.11 670.111 li
1461.11 666.819 1463.77 664.151 1467.06 664.151 cv
1503.97 664.151 li
1507.26 664.151 1509.93 666.819 1509.93 670.111 cv
1509.93 675.495 li
1509.93 678.786 1512.6 681.455 1515.89 681.455 cv
1535.49 681.455 li
1538.78 681.455 1541.45 678.786 1541.45 675.495 cv
1541.45 670.111 li
1541.45 666.819 1544.12 664.151 1547.41 664.151 cv
1547.41 664.151 li
1584.31 664.151 li
1584.31 664.151 li
1587.61 664.151 1590.27 666.819 1590.27 670.111 cv
1590.27 675.495 li
1590.27 678.786 1592.94 681.455 1596.23 681.455 cv
1615.83 681.455 li
1619.13 681.455 1621.79 678.786 1621.79 675.495 cv
1621.79 670.111 li
1621.79 666.819 1624.46 664.151 1627.75 664.151 cv
1664.66 664.151 li
1667.95 664.151 1670.62 666.819 1670.62 670.111 cv
1670.62 675.495 li
1670.62 678.786 1673.28 681.455 1676.58 681.455 cv
1686.38 681.455 li
1696.17 681.455 li
1699.47 681.455 1702.14 678.786 1702.14 675.495 cv
1702.14 670.111 li
1702.14 666.819 1704.8 664.151 1708.09 664.151 cv
1745 664.151 li
1748.29 664.151 1750.96 666.819 1750.96 670.111 cv
1750.96 675.495 li
1750.96 678.786 1753.63 681.455 1756.92 681.455 cv
1776.52 681.455 li
1779.81 681.455 1782.48 678.786 1782.48 675.495 cv
1782.48 670.111 li
1782.48 666.819 1785.15 664.151 1788.44 664.151 cv
1797.02 664.151 li
1825.34 664.151 li
1828.63 664.151 1831.3 666.819 1831.3 670.111 cv
1831.3 701.2 li
1831.3 701.201 li
level3{
gsave
clp
[426.125 0 0 426.125 1405.17 688.562 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[426.125 0 0 426.125 1405.17 688.562 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
1821.16 804.277 mo
1800.44 804.277 li
1554.75 799.374 li
1542.02 799.12 1531.57 789.223 1530.63 776.526 cv
1527.38 732.61 li
1526.34 718.588 1537.21 706.534 1551.26 706.121 cv
1795.93 698.917 li
1428.77 698.917 li
1415.74 698.917 1405.17 688.351 1405.17 675.318 cv
1405.17 675.318 li
1405.17 688.35 1415.74 698.917 1428.77 698.917 cv
1821.16 698.917 li
1824.79 698.917 1828.23 699.737 1831.3 701.201 cv
1839.26 704.994 1844.76 713.113 1844.76 722.518 cv
1844.76 722.518 li
1844.76 780.676 li
1844.76 793.711 1834.19 804.277 1821.16 804.277 cv
1620.02 752.287 mo
1620.02 752.287 1607.66 753.822 1615.61 760.261 cv
1617.03 761.408 1618.52 761.878 1619.92 761.878 cv
1625.86 761.879 1630.14 753.381 1620.02 752.287 cv
1604.67 731.242 mo
1598.74 731.242 1582.35 732.499 1594.55 747.281 cv
1596.54 749.694 1599 750.68 1601.52 750.68 cv
1612.15 750.683 1623.9 733.159 1606.66 731.295 cv
1606.66 731.295 1605.88 731.242 1604.67 731.242 cv
215.967 804.277 mo
23.6797 804.277 li
10.6453 804.277 .0785121 793.711 .0785121 780.676 cv
.0785121 722.518 li
.0785121 713.113 5.57891 704.994 13.5383 701.201 cv
16.6106 699.737 20.0496 698.917 23.6797 698.917 cv
416.063 698.917 li
429.096 698.917 439.663 688.35 439.663 675.317 cv
439.663 675.317 li
439.663 148.447 li
439.663 159.148 li
1262.28 169.241 li
1269.23 169.326 1275.82 172.342 1280.44 177.547 cv
1316.23 217.926 li
1317.08 218.89 1318.01 219.787 1319.01 220.606 cv
1320.31 221.677 li
1319.18 222.614 1319.19 224.141 1322.27 226.629 cv
1323.58 227.693 1324.84 228.125 1325.95 228.125 cv
1326.58 228.125 1327.16 227.987 1327.68 227.748 cv
1366.07 259.361 li
1371.99 264.241 1375.31 271.602 1375.04 279.274 cv
1360.39 696.706 li
1359.93 709.99 1349.02 720.517 1335.73 720.517 cv
1303.44 720.517 li
1291.33 720.517 1281 711.743 1279.09 699.777 cv
1271.86 654.515 1252.75 543.06 1225.47 444.829 cv
1190.24 318.007 953.962 201.988 953.962 201.988 cv
953.962 201.988 943.034 205.785 924.904 213.215 cv
923.28 212.434 922.418 212.041 922.418 212.041 cv
922.418 212.041 912.656 216.489 897.075 225.132 cv
858.592 242.302 805.505 268.82 753.66 303.983 cv
655.721 370.409 640.234 521.516 640.234 521.516 cv
638.162 767.263 li
638.049 780.508 627.502 791.302 614.263 791.719 cv
215.967 804.277 li
171.205 769.73 mo
170.161 769.73 168.473 770.206 168.089 773.169 cv
167.966 774.123 168.583 774.495 169.514 774.495 cv
171.162 774.495 173.792 773.33 175.038 772.165 cv
176.284 771 176.145 769.835 172.256 769.835 cv
172.187 769.835 172.118 769.836 172.047 769.836 cv
172.047 769.836 171.698 769.73 171.205 769.73 cv
445.821 758.012 mo
445.821 758.012 433.46 759.547 441.415 765.986 cv
442.832 767.133 444.324 767.604 445.722 767.604 cv
451.668 767.605 455.947 759.106 445.821 758.012 cv
430.473 736.968 mo
424.547 736.968 408.155 738.224 420.356 753.005 cv
422.348 755.419 424.807 756.405 427.327 756.405 cv
437.954 756.406 449.701 738.885 432.462 737.021 cv
432.462 737.021 431.686 736.968 430.473 736.968 cv
282.53 724.856 mo
278.637 724.856 267.863 725.681 275.881 735.395 cv
277.191 736.981 278.806 737.629 280.462 737.629 cv
287.445 737.629 295.164 726.116 283.836 724.891 cv
283.836 724.891 283.327 724.856 282.53 724.856 cv
83.5922 715.768 mo
82.4792 715.768 74.0854 716.006 76.0187 723.258 cv
77.3766 728.354 79.854 730.229 82.4603 730.23 cv
86.0959 730.231 89.9836 726.582 91.4426 722.934 cv
92.9015 719.286 91.9314 715.638 85.8506 715.638 cv
85.198 715.638 84.4865 715.68 83.7129 715.769 cv
83.7129 715.769 83.6706 715.768 83.5922 715.768 cv
94.4967 701.267 mo
94.4967 701.267 190.865 706.88 213.085 706.88 cv
235.305 706.88 358.704 701.267 358.704 701.267 cv
94.4967 701.267 li
517.129 635.125 mo
515.182 635.125 509.797 635.537 513.805 640.394 cv
514.46 641.187 515.267 641.51 516.095 641.511 cv
519.587 641.511 523.447 635.754 517.783 635.142 cv
517.783 635.142 517.528 635.125 517.129 635.125 cv
544.902 606.169 mo
538.976 606.169 522.588 607.425 534.788 622.207 cv
536.78 624.62 539.239 625.606 541.758 625.607 cv
552.385 625.61 564.134 608.086 546.892 606.222 cv
546.892 606.222 546.116 606.169 544.902 606.169 cv
608.587 535.345 mo
608.587 535.345 590.784 535.345 599.877 545.572 cv
602.734 548.787 605.516 550.032 607.938 550.032 cv
616.257 550.033 620.323 535.345 608.587 535.345 cv
1336.48 472.936 mo
1336.48 472.936 1323.98 472.936 1331.93 479.375 cv
1333.25 480.439 1334.5 480.871 1335.62 480.871 cv
1340.1 480.871 1342.25 473.846 1336.48 472.936 cv
1283.93 434.174 mo
1283.93 434.174 1259.21 437.246 1275.11 450.124 cv
1277.95 452.418 1280.93 453.358 1283.73 453.359 cv
1295.62 453.361 1304.18 436.364 1283.93 434.174 cv
515.572 432.519 mo
514.174 432.519 511.911 432.848 511.397 434.906 cv
511.231 435.57 512.058 435.828 513.306 435.828 cv
515.514 435.828 519.038 435.019 520.707 434.21 cv
522.376 433.401 522.19 432.591 516.982 432.591 cv
516.889 432.591 516.795 432.592 516.699 432.592 cv
516.699 432.592 516.231 432.519 515.572 432.519 cv
651.117 395.669 mo
650.006 395.669 641.61 395.82 643.543 400.437 cv
644.901 403.681 647.378 404.875 649.984 404.875 cv
653.62 404.875 657.508 402.553 658.967 400.23 cv
660.426 397.909 659.455 395.586 653.374 395.586 cv
652.722 395.586 652.01 395.613 651.237 395.669 cv
651.237 395.669 651.195 395.669 651.117 395.669 cv
1194.29 305.675 mo
1190.39 305.675 1179.62 306.5 1187.64 316.214 cv
1188.95 317.8 1190.56 318.448 1192.22 318.448 cv
1199.2 318.448 1206.92 306.935 1195.59 305.709 cv
1195.59 305.709 1195.08 305.675 1194.29 305.675 cv
577.822 286.214 mo
573.927 286.214 563.161 287.04 571.177 296.752 cv
572.486 298.339 574.101 298.986 575.758 298.986 cv
582.74 298.986 590.46 287.474 579.131 286.249 cv
579.131 286.249 578.62 286.214 577.822 286.214 cv
543.624 268.508 mo
543.624 268.508 531.124 268.508 539.079 274.948 cv
540.394 276.012 541.65 276.443 542.762 276.443 cv
547.246 276.444 549.392 269.418 543.624 268.508 cv
596.591 270.094 mo
595.547 270.094 593.858 270.568 593.474 273.532 cv
593.35 274.486 593.967 274.857 594.898 274.857 cv
596.546 274.858 599.177 273.693 600.422 272.528 cv
601.668 271.363 601.529 270.198 597.641 270.198 cv
597.572 270.198 597.503 270.199 597.432 270.199 cv
597.432 270.199 597.083 270.094 596.591 270.094 cv
765.594 251.216 mo
764.478 251.216 756.088 251.455 758.021 258.705 cv
759.379 263.802 761.856 265.678 764.463 265.678 cv
768.098 265.678 771.986 262.03 773.445 258.382 cv
774.904 254.734 773.933 251.087 767.853 251.087 cv
767.2 251.087 766.489 251.129 765.715 251.217 cv
765.715 251.217 765.673 251.216 765.594 251.216 cv
1306.5 234.205 mo
1306.5 234.205 1289.88 234.205 1302.03 240.664 cv
1304.07 241.752 1305.85 242.193 1307.32 242.193 cv
1313.57 242.193 1314.26 234.205 1306.5 234.205 cv
1192.35 221.775 mo
1191.3 221.775 1189.62 222.25 1189.23 225.213 cv
1189.11 226.167 1189.72 226.539 1190.66 226.539 cv
1192.3 226.539 1194.93 225.374 1196.18 224.209 cv
1197.43 223.045 1197.29 221.88 1193.4 221.88 cv
1193.33 221.88 1193.26 221.88 1193.19 221.881 cv
1193.19 221.881 1192.84 221.775 1192.35 221.775 cv
713.505 191.147 mo
713.505 191.147 701.005 191.147 708.96 197.586 cv
710.275 198.65 711.53 199.082 712.642 199.082 cv
717.127 199.083 719.273 192.057 713.505 191.147 cv
622.555 182.377 mo
622.555 182.377 604.752 182.377 613.843 192.604 cv
616.7 195.819 619.483 197.064 621.904 197.064 cv
630.223 197.065 634.29 182.377 622.555 182.377 cv
804.583 182.342 mo
800.688 182.342 789.919 183.168 797.935 192.881 cv
799.244 194.466 800.859 195.114 802.515 195.115 cv
809.499 195.116 817.219 183.601 805.89 182.377 cv
805.89 182.377 805.381 182.342 804.583 182.342 cv
1060.48 182.342 mo
1060.48 182.342 1047.98 182.342 1055.94 188.782 cv
1057.25 189.846 1058.51 190.278 1059.62 190.278 cv
1064.1 190.278 1066.25 183.253 1060.48 182.342 cv
994.426 167.154 mo
994.426 167.154 977.805 167.154 989.949 173.613 cv
991.995 174.701 993.771 175.142 995.239 175.142 cv
1001.49 175.142 1002.18 167.154 994.426 167.154 cv
1428.89 113.359 mo
1428.89 113.278 li
1429.04 99.6245 li
1429.04 99.6245 li
1428.89 113.359 li
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.952941 .745098 .564706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .85098 .658824 ]
/C1 [.952941 .745098 .564706 ]
/N 4.97729 
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~oCMSFoCV\Io^qhLp%A"Op@e4Rp@n=Up\4FWq"XXZq"X[\q>'j^q>'m`qYL'bqYL'cqtp9fqtp9fqtp9g
r;?Kjr;?Kjr;?Kjr;?NlrVc]nrVc]nrVc]nrVc]nrVc]nrVlfqrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
~>
<~^:q@s^qde&_8=(,_o0L4`Poj:`lH-@aN2KFai_cKbKJ)Qbfn;Uc-=MYcHa_]cd0qad*U.ddF$@hdF-Ik
daHRme'ldpe'lgreC<!teC<%!e^`4#e^`4#f%/F'f%/F'f%/F'f%8O*f@SX+f@SX+f@SX+f@SX+f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
~>
<~OH>QdOcklkPEV5qQ'IW#QBml(Q^F/-R@0J3R[T_8S"#q<S=H.@SXl@DSt;RHT:_aKTV.sNTV8'QTqS0S
U8"BVU8"EXUSFTZUSFW\Unjf^Unjf^V5:#bV5:#bV5:#bV5C,eVP^5fVP^5fVP^5fVP^5fVPg>iVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
415.951 113.359 mo
415.951 113.359 li
415.795 99.6245 li
415.795 99.6245 li
415.951 113.359 li
415.951 113.359 li
.980392 .901961 .862745 rgb
f
1800.44 804.277 mo
1421.6 804.277 li
1329.33 804.277 li
929.771 804.277 li
927.536 804.277 li
927.536 804.276 li
1161.49 804.276 li
1161.49 804.276 1161.49 612.705 1161.49 508.159 cv
1161.49 332.208 950.298 225.419 924.904 213.215 cv
943.034 205.785 953.962 201.988 953.962 201.988 cv
953.962 201.988 1190.24 318.007 1225.47 444.829 cv
1252.75 543.06 1271.86 654.515 1279.09 699.777 cv
1281 711.743 1291.33 720.517 1303.44 720.517 cv
1335.73 720.517 li
1349.02 720.517 1359.93 709.99 1360.39 696.706 cv
1375.04 279.274 li
1375.31 271.602 1371.99 264.241 1366.07 259.361 cv
1327.68 227.748 li
1330.88 226.279 1331.78 220.972 1326.81 220.189 cv
1326.81 220.189 1322.11 220.189 1320.31 221.677 cv
1319.01 220.606 li
1318.01 219.787 1317.08 218.89 1316.23 217.926 cv
1280.44 177.547 li
1275.82 172.342 1269.23 169.326 1262.28 169.241 cv
439.663 159.148 li
439.663 148.447 li
458.816 148.447 li
462.106 148.447 464.775 145.778 464.775 142.487 cv
464.775 137.102 li
464.775 133.811 467.443 131.143 470.735 131.143 cv
490.335 131.143 li
493.626 131.143 496.294 133.811 496.294 137.102 cv
496.294 142.487 li
496.294 145.778 498.963 148.447 502.254 148.447 cv
539.157 148.447 li
542.449 148.447 545.117 145.778 545.117 142.487 cv
545.117 137.102 li
545.117 133.811 547.786 131.143 551.076 131.143 cv
560.876 131.143 li
570.676 131.143 li
573.968 131.143 576.636 133.811 576.636 137.102 cv
576.636 142.487 li
576.636 145.778 579.305 148.447 582.595 148.447 cv
619.499 148.447 li
622.791 148.447 625.459 145.778 625.459 142.487 cv
625.459 137.102 li
625.459 133.811 628.127 131.143 631.419 131.143 cv
651.018 131.143 li
654.309 131.143 656.977 133.811 656.977 137.102 cv
656.977 142.487 li
656.977 145.778 659.646 148.447 662.938 148.447 cv
662.942 148.447 li
699.841 148.447 li
699.845 148.447 li
703.137 148.447 705.805 145.778 705.805 142.487 cv
705.805 137.102 li
705.805 133.811 708.474 131.143 711.764 131.143 cv
731.364 131.143 li
734.656 131.143 737.323 133.811 737.323 137.102 cv
737.323 142.487 li
737.323 145.778 739.992 148.447 743.283 148.447 cv
780.188 148.447 li
783.478 148.447 786.147 145.778 786.147 142.487 cv
786.147 137.102 li
786.147 133.811 788.815 131.143 792.107 131.143 cv
801.907 131.143 li
811.706 131.143 li
814.997 131.143 817.665 133.811 817.665 137.102 cv
817.665 142.487 li
817.665 145.778 820.334 148.447 823.625 148.447 cv
860.529 148.447 li
863.821 148.447 866.489 145.778 866.489 142.487 cv
866.489 137.102 li
866.489 133.811 869.158 131.143 872.448 131.143 cv
892.048 131.143 li
895.338 131.143 898.007 133.811 898.007 137.102 cv
898.007 142.487 li
898.007 145.778 900.675 148.447 903.967 148.447 cv
940.87 148.447 li
940.871 148.447 li
942.517 148.447 944.006 147.78 945.086 146.702 cv
946.164 145.623 946.83 144.133 946.83 142.487 cv
946.83 137.102 li
946.83 133.811 949.498 131.143 952.789 131.143 cv
972.389 131.143 li
975.681 131.143 978.35 133.811 978.35 137.102 cv
978.35 142.487 li
978.35 145.778 981.018 148.447 984.309 148.447 cv
1021.21 148.447 li
1024.5 148.447 1027.17 145.778 1027.17 142.487 cv
1027.17 137.102 li
1027.17 133.811 1029.84 131.143 1033.13 131.143 cv
1042.93 131.143 li
1052.73 131.143 li
1056.02 131.143 1058.69 133.811 1058.69 137.102 cv
1058.69 142.487 li
1058.69 145.778 1061.36 148.447 1064.65 148.447 cv
1101.55 148.447 li
1104.85 148.447 1107.51 145.778 1107.51 142.487 cv
1107.51 137.102 li
1107.51 133.811 1110.18 131.143 1113.47 131.143 cv
1133.07 131.143 li
1136.36 131.143 1139.03 133.811 1139.03 137.102 cv
1139.03 142.487 li
1139.03 145.778 1141.7 148.447 1144.99 148.447 cv
1145 148.447 li
1181.9 148.447 li
1181.9 148.447 li
1185.19 148.447 1187.86 145.778 1187.86 142.487 cv
1187.86 137.102 li
1187.86 133.811 1190.53 131.143 1193.82 131.143 cv
1213.42 131.143 li
1216.71 131.143 1219.38 133.811 1219.38 137.102 cv
1219.38 142.487 li
1219.38 145.778 1222.05 148.447 1225.34 148.447 cv
1262.24 148.447 li
1265.53 148.447 1268.2 145.778 1268.2 142.487 cv
1268.2 137.102 li
1268.2 133.811 1270.87 131.143 1274.16 131.143 cv
1280.43 131.143 li
1280.39 131.143 li
1283.96 131.143 li
1293.76 131.143 li
1297.05 131.143 1299.72 133.811 1299.72 137.102 cv
1299.72 142.487 li
1299.72 145.778 1302.39 148.447 1305.68 148.447 cv
1342.58 148.447 li
1345.88 148.447 1348.54 145.778 1348.54 142.487 cv
1348.54 137.102 li
1348.54 133.811 1351.21 131.143 1354.5 131.143 cv
1374.1 131.143 li
1377.4 131.143 1380.06 133.811 1380.06 137.102 cv
1380.06 142.487 li
1380.06 142.487 li
1380.06 145.778 1382.73 148.447 1386.02 148.447 cv
1405.17 148.447 li
1405.17 274.063 li
1405.17 338.378 li
1405.17 675.318 li
1405.17 675.318 li
1405.17 688.351 1415.74 698.917 1428.77 698.917 cv
1795.93 698.917 li
1551.26 706.121 li
1537.21 706.534 1526.34 718.588 1527.38 732.61 cv
1530.63 776.526 li
1531.57 789.223 1542.02 799.12 1554.75 799.374 cv
1800.44 804.277 li
1406.41 765.726 mo
1402.52 765.726 1391.75 766.552 1399.77 776.264 cv
1401.08 777.85 1402.69 778.498 1404.35 778.498 cv
1411.33 778.498 1419.05 766.986 1407.72 765.761 cv
1407.72 765.761 1407.21 765.726 1406.41 765.726 cv
1237.11 712.973 mo
1237.11 712.973 1224.61 712.973 1232.57 719.413 cv
1233.88 720.477 1235.14 720.909 1236.25 720.909 cv
1240.73 720.91 1242.88 713.885 1237.11 712.973 cv
1257.91 666.987 mo
1257.91 666.987 1240.41 669.162 1251.67 678.28 cv
1253.68 679.904 1255.79 680.569 1257.77 680.57 cv
1266.19 680.571 1272.25 668.537 1257.91 666.987 cv
1014.74 153.139 mo
1014.74 153.139 1002.24 153.139 1010.19 159.579 cv
1011.51 160.643 1012.76 161.075 1013.87 161.075 cv
1018.36 161.075 1020.51 154.05 1014.74 153.139 cv
917.301 804.277 mo
914.016 804.277 li
845.668 804.277 li
845.668 804.276 li
917.301 804.276 li
917.301 804.277 li
835.528 804.277 mo
763.893 804.277 li
763.893 804.276 li
801.598 804.276 li
801.598 804.276 li
835.528 804.276 li
835.528 804.277 li
753.66 804.277 mo
515.506 804.277 li
422.19 804.277 li
215.967 804.277 li
614.263 791.719 li
627.502 791.302 638.049 780.508 638.162 767.263 cv
640.234 521.516 li
640.234 521.516 655.721 370.409 753.66 303.983 cv
805.505 268.82 858.592 242.302 897.075 225.132 cv
895.17 226.189 893.177 227.309 891.104 228.491 cv
826.311 265.44 683.348 363.37 683.348 508.159 cv
683.348 612.705 683.348 804.276 683.348 804.276 cv
753.66 804.276 li
753.66 804.277 li
415.951 113.359 mo
415.951 113.359 li
415.795 99.6245 li
480.41 99.6245 li
544.723 99.6245 li
644.348 99.6245 li
676.506 99.6245 li
708.663 99.6245 li
808.287 99.6245 li
872.603 99.6245 li
884.771 99.6245 li
960.067 99.6245 li
972.235 99.6245 li
1036.55 99.6245 li
1136.17 99.6245 li
1168.33 99.6245 li
1200.49 99.6245 li
1300.11 99.6245 li
1364.43 99.6245 li
1429.04 99.6245 li
1428.89 113.278 li
1428.89 105.584 li
1428.89 102.292 1426.22 99.6245 1422.93 99.6245 cv
1380.06 99.6245 li
1348.54 99.6245 li
1299.72 99.6245 li
1283.96 99.6245 li
1268.2 99.6245 li
1219.38 99.6245 li
1187.86 99.6245 li
1181.9 99.6245 li
1145 99.6245 li
1139.03 99.6245 li
1107.51 99.6245 li
1058.69 99.6245 li
1042.93 99.6245 li
1027.17 99.6245 li
978.35 99.6245 li
946.83 99.6245 li
940.871 99.6245 li
903.967 99.6245 li
898.007 99.6245 li
866.489 99.6245 li
817.665 99.6245 li
801.907 99.6245 li
786.147 99.6245 li
737.323 99.6245 li
705.805 99.6245 li
699.841 99.6245 li
662.942 99.6245 li
656.977 99.6245 li
625.459 99.6245 li
576.636 99.6245 li
560.876 99.6245 li
545.117 99.6245 li
496.294 99.6245 li
464.775 99.6245 li
421.912 99.6245 li
418.62 99.6245 415.951 102.292 415.951 105.584 cv
415.951 113.359 li
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9
I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~qS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm
`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm_iX`4OSZkVqSSEk_iX]3OSQeUq8/6h_N4N0O86YRq8&*e_2e<+
NqgDLpqMg`^Q&!%NVC/GpUuO[]o2TsMY=]?ot-(R\qp!gL\/'2o<sDF[=n+WKCQ:"nZdZ7YCQ)DIdX7a
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~mI'E1mdKW5n*oi9nF5r:nF?&=nac8Ao()ABo(2JEoCMSFoCV\Io^qeJo_%nMp%A"Np%J+Qp@e4Rp@e4R
p@e4Rp@e7Tp\4FVp\4FVp\4FVp\4IXq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"X[\q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
~>
<~WiN2%XKAV-Y-5%5Yd(I=ZEgdAZEpmE['d<L[C3NP[^W`T\%&rY\[oA`]">Sd]=Y\e]=beh]Y(ni]Y2"l
]tM+m]tM.o^:q=q^:q@s^V@Ou^V@S"^qdb$^qde&_83t(_83t(_83t(_84"*_SX1,_SX1,_SX1,_SX1,
_SX1,_SX1,_SX1-_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
~>
<~H[L3hI=?WpIt3'"J:W9&JV&K*JqJ].K7no3Knb>:L5(G;L51P>LPUbBLl$tFM2@(GM2I1JMMmCNMi3LO
Mi3OQN/W^SN/W^SN/W^SN/WaUNK&pWNK&pWNK&sYNfK-[NfK-[NfK0]O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?`OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
1430.7 99.6245 mo
1429.04 99.6245 li
1429.04 99.6245 li
1364.43 99.6245 li
1300.11 99.6245 li
1200.49 99.6245 li
1168.33 99.6245 li
1136.17 99.6245 li
1036.55 99.6245 li
972.235 99.6245 li
960.067 99.6245 li
884.771 99.6245 li
872.603 99.6245 li
808.287 99.6245 li
708.663 99.6245 li
676.506 99.6245 li
644.348 99.6245 li
544.723 99.6245 li
480.41 99.6245 li
415.795 99.6245 li
415.795 99.6245 li
414.137 99.6245 li
395.717 99.6245 380.785 84.692 380.785 66.2712 cv
380.785 12.1606 li
380.785 5.44366 386.229 0 392.945 0 cv
468.247 0 li
474.965 0 480.41 5.44458 480.41 12.1615 cv
480.41 23.1491 li
480.41 29.8646 485.853 35.3092 492.569 35.3092 cv
532.564 35.3092 li
539.279 35.3092 544.723 29.8646 544.723 23.1491 cv
544.723 12.1606 li
544.723 5.44458 550.168 0 556.885 0 cv
632.186 0 li
638.903 0 644.348 5.44458 644.348 12.1615 cv
644.348 23.1481 li
644.348 29.8646 649.792 35.3092 656.509 35.3092 cv
676.506 35.3092 li
696.503 35.3092 li
703.219 35.3092 708.663 29.8646 708.663 23.1491 cv
708.663 12.1606 li
708.663 5.44366 714.107 0 720.824 0 cv
796.126 0 li
802.843 0 808.287 5.44458 808.287 12.1615 cv
808.287 23.1491 li
808.287 29.8646 813.732 35.3092 820.448 35.3092 cv
860.442 35.3092 li
867.158 35.3092 872.603 29.8646 872.603 23.1491 cv
872.603 12.1615 li
872.603 5.44458 878.046 0 884.763 0 cv
884.771 0 li
960.067 0 li
960.074 0 li
966.79 0 972.235 5.44458 972.235 12.1615 cv
972.235 23.1491 li
972.235 29.8646 977.679 35.3092 984.395 35.3092 cv
1024.39 35.3092 li
1031.1 35.3092 1036.55 29.8646 1036.55 23.1491 cv
1036.55 12.1606 li
1036.55 5.44458 1041.99 0 1048.71 0 cv
1124.01 0 li
1130.73 0 1136.17 5.44458 1136.17 12.1615 cv
1136.17 23.1481 li
1136.17 29.8646 1141.62 35.3092 1148.33 35.3092 cv
1168.33 35.3092 li
1188.33 35.3092 li
1195.05 35.3092 1200.49 29.8646 1200.49 23.1481 cv
1200.49 12.1606 li
1200.49 5.44366 1205.93 0 1212.65 0 cv
1287.95 0 li
1294.67 0 1300.11 5.44458 1300.11 12.1615 cv
1300.11 23.1491 li
1300.11 29.8646 1305.56 35.3092 1312.27 35.3092 cv
1352.27 35.3092 li
1358.98 35.3092 1364.43 29.8646 1364.43 23.1491 cv
1364.43 12.1606 li
1364.43 5.44458 1369.87 0 1376.59 0 cv
1451.89 0 li
1458.61 0 1464.05 5.44458 1464.05 12.1615 cv
1464.05 66.2712 li
1464.05 84.692 1449.12 99.6245 1430.7 99.6245 cv
886.801 85.4207 mo
886.801 85.4207 870.182 85.4207 882.325 91.8786 cv
884.371 92.9668 886.147 93.4075 887.616 93.4076 cv
893.871 93.4081 894.556 85.4207 886.801 85.4207 cv
1210.78 82.2544 mo
1210.78 82.2544 1198.42 83.7895 1206.37 90.2294 cv
1207.79 91.376 1209.28 91.846 1210.68 91.8462 cv
1216.62 91.8468 1220.9 83.3485 1210.78 82.2544 cv
592.469 82.4887 mo
591.652 82.4887 585.505 82.6409 586.921 87.2556 cv
587.916 90.4998 589.731 91.6939 591.64 91.694 cv
594.304 91.6942 597.151 89.3721 598.22 87.0501 cv
599.289 84.7284 598.578 82.4063 594.125 82.4063 cv
593.647 82.4063 593.125 82.433 592.558 82.4895 cv
592.558 82.4895 592.527 82.4887 592.469 82.4887 cv
735.283 83.7405 mo
734.258 83.7405 732.6 84.0704 732.223 86.1287 cv
732.101 86.7915 732.707 87.0499 733.621 87.05 cv
735.239 87.0501 737.821 86.2408 739.044 85.4314 cv
740.267 84.6221 740.13 83.8133 736.313 83.8133 cv
736.245 83.8133 736.178 83.8135 736.108 83.814 cv
736.108 83.814 735.766 83.7405 735.283 83.7405 cv
907.115 71.4049 mo
907.115 71.4049 894.614 71.4049 902.568 77.8448 cv
903.883 78.9086 905.139 79.3405 906.251 79.3405 cv
910.736 79.3406 912.881 72.3157 907.115 71.4049 cv
1237.14 46.4577 mo
1231.22 46.4577 1214.83 47.7142 1227.03 62.4952 cv
1229.02 64.9083 1231.48 65.8939 1234 65.8945 cv
1244.63 65.8968 1256.38 48.3735 1239.14 46.5106 cv
1239.14 46.5106 1238.36 46.4577 1237.14 46.4577 cv
1072.46 49.0098 mo
1071.34 49.0098 1062.95 49.2488 1064.88 56.4992 cv
1066.24 61.5954 1068.72 63.4712 1071.32 63.4713 cv
1074.96 63.4715 1078.85 59.8237 1080.31 56.1759 cv
1081.76 52.528 1080.79 48.8803 1074.72 48.8803 cv
1074.06 48.8803 1073.35 48.9223 1072.58 49.011 cv
1072.58 49.011 1072.53 49.0098 1072.46 49.0098 cv
1398.11 49.7896 mo
1394.22 49.7896 1383.45 50.6153 1391.47 60.3283 cv
1392.78 61.9145 1394.39 62.5622 1396.05 62.5623 cv
1403.03 62.5624 1410.75 51.0494 1399.42 49.8243 cv
1399.42 49.8243 1398.91 49.7896 1398.11 49.7896 cv
430.434 42.4898 mo
430.434 42.4898 417.935 42.4898 425.889 48.9297 cv
427.204 49.9936 428.46 50.4254 429.572 50.4254 cv
434.056 50.4254 436.202 43.4002 430.434 42.4898 cv
level3{
gsave
clp
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
1161.49 804.276 mo
927.536 804.276 li
927.536 772.112 li
1138.25 772.112 li
1138.25 761.878 li
927.536 761.878 li
927.536 690.245 li
1138.25 690.245 li
1138.25 680.012 li
927.536 680.012 li
927.536 608.47 li
1138.25 608.47 li
1138.25 598.237 li
927.536 598.237 li
927.536 526.604 li
1138.25 526.604 li
1138.25 516.371 li
927.536 516.371 li
927.536 444.83 li
1127.64 444.83 li
1127.64 444.83 li
1126.62 441.387 1125.32 437.945 1124.02 434.596 cv
927.536 434.596 li
927.536 362.962 li
1081.41 362.962 li
1081.41 362.962 li
1081.22 362.777 1081.13 362.59 1080.94 362.404 cv
1078.24 359.148 1075.55 355.893 1072.76 352.73 cv
927.536 352.73 li
927.536 292.528 li
949.982 269.05 966.372 253.467 966.372 253.467 cv
912.732 216.791 li
907.361 219.527 899.965 223.438 891.104 228.491 cv
893.177 227.309 895.17 226.189 897.075 225.132 cv
912.656 216.489 922.418 212.041 922.418 212.041 cv
922.418 212.041 923.28 212.434 924.904 213.215 cv
950.298 225.419 1161.49 332.208 1161.49 508.159 cv
1161.49 612.705 1161.49 804.276 1161.49 804.276 cv
917.301 804.276 mo
845.668 804.276 li
845.668 772.112 li
917.301 772.112 li
917.301 804.276 li
835.528 804.276 mo
801.598 804.276 li
801.597 804.164 801.436 791.924 801.219 772.112 cv
835.528 772.112 li
835.528 804.276 li
917.301 761.878 mo
845.668 761.878 li
845.668 690.245 li
917.301 690.245 li
917.301 761.878 li
835.528 761.878 mo
801.109 761.878 li
800.904 742.291 800.669 717.36 800.476 690.245 cv
835.528 690.245 li
835.528 761.878 li
917.301 680.012 mo
845.668 680.012 li
845.668 608.47 li
917.301 608.47 li
917.301 680.012 li
835.528 680.012 mo
800.405 680.012 li
800.252 656.811 800.135 632.331 800.097 608.47 cv
835.528 608.47 li
835.528 680.012 li
917.301 598.237 mo
845.668 598.237 li
845.668 526.604 li
917.301 526.604 li
917.301 598.237 li
835.528 598.237 mo
800.085 598.237 li
800.069 572.53 800.152 547.838 800.391 526.604 cv
835.528 526.604 li
835.528 598.237 li
917.301 516.371 mo
845.668 516.371 li
845.668 444.83 li
917.301 444.83 li
917.301 516.371 li
835.528 516.371 mo
800.522 516.371 li
800.761 499.968 801.109 486.132 801.598 476.195 cv
802.049 467.027 805.262 456.391 810.5 444.83 cv
835.528 444.83 li
835.528 516.371 li
917.301 434.596 mo
845.668 434.596 li
845.668 387.867 li
851.811 379.554 858.319 371.207 865.003 362.962 cv
917.301 362.962 li
917.301 434.596 li
835.528 434.596 mo
815.528 434.596 li
821.005 424.2 827.829 413.236 835.528 402.056 cv
835.528 434.596 li
917.301 352.73 mo
873.43 352.73 li
888.243 335.011 903.523 318.059 917.301 303.345 cv
917.301 352.73 li
level3{
gsave
clp
[2.64884e-14 -432.59 432.59 2.64884e-14 922.419 755.532 ]ct
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.847059 .509804 .341176 ]
/C1 [.847059 .509804 .341176 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.847059 .509804 .341176 ]
/C1 [.690196 .321569 .219608 ]
/N 2.06553 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.690196 .321569 .219608 ]
/C1 [.690196 .321569 .219608 ]
/N 1 
>>
]
/Bounds [1.89999e-07 .998385 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.64884e-14 -432.59 432.59 2.64884e-14 922.419 755.532 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~f[na,f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX*f%/F'f%/F'f%/F'f%/F'e^`4#
e^`4#e^`4#e^W*ueC<!teC<!te'ldpe'ldpe'landaHRldaHRkdF$@hdF$=fd*U.dd*U+bcd0q`cd'h]
cHa_[c-=MXc-4DUbfn;SbKJ)PbK@uMb0%iJaiVZGaN2HDaN)?Aa2Z-=`l?!:`Pog7`5KU3_o'C0_SX1,
_83t(^qdb$^V@Ou^:q=q]tM+m]Y(ni]=Y\d]"5J`\[f5[\@B#W\$i`R[^ENN['[3HZa7!DZEga?Z*:I:
~>
<~Jq8K(JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'J:N0#J:N0#J:N0#J:N0"It)rtIt)rt
It)rsIXZ`pIXZ`pIXQWmI=6NlI=6KjI!g<hI!g9fH[C*dH[:!aH?sm`H$O[\H$OXZG^+IXGB\7TGB\4R
G'8%OF`hhLFEDVHFE;MEF)uABEcQ2?EH,u;E,]c7Df9Q4DJj?0D/F-,Ci!p(CMR^#C2.KtBk_9pBP;$k
B4kggAn>ObARo=^@q0"X@U`eT@:<PO?sd8J?=$rD?!U]?>[(E:>$>'3=]ed.='&I(<`W4#<)cgq;c6Lk
~>
<~=&r@&<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`N."<E3%!<E3%!<E3%!
<E3%!<)cgr<)cgr<)cgr<)cgq;c?Un;c?Un;c?Um;GpCj;GpCj;Gp@h;,L1f;,L1f:f'tb:f'tb:esk_
:JXb^:JOY[:/4PZ:/+GW9he>V9MA,R9MA,Q91qoN91qlL8kM]J8P)KF8P)HD84Z9B7n6'>7n6$<7Rfj:
77BX6779O36psC06UO4-6:+"*5s[e&5sR\#5X7Ou5<h=q5!D.n4Ztqj4?P_g4$,Mc3]];_3B9)[3&ilW
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
763.893 804.3 mo
753.66 804.3 li
753.66 804.277 li
753.66 804.276 li
763.893 804.276 li
763.893 804.277 li
763.893 804.3 li
level3{
gsave
clp
[2.81487e-14 -459.705 459.705 2.81487e-14 758.777 790.381 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81487e-14 -459.705 459.705 2.81487e-14 758.777 790.381 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
845.668 804.3 mo
835.528 804.3 li
835.528 804.277 li
835.528 804.276 li
835.528 772.112 li
845.668 772.112 li
845.668 804.276 li
845.668 804.277 li
845.668 804.3 li
845.668 761.878 mo
835.528 761.878 li
835.528 690.245 li
845.668 690.245 li
845.668 761.878 li
845.668 680.012 mo
835.528 680.012 li
835.528 608.47 li
845.668 608.47 li
845.668 680.012 li
845.668 598.237 mo
835.528 598.237 li
835.528 526.604 li
845.668 526.604 li
845.668 598.237 li
845.668 516.371 mo
835.528 516.371 li
835.528 444.83 li
845.668 444.83 li
845.668 516.371 li
845.668 434.596 mo
835.528 434.596 li
835.528 402.056 li
838.764 397.357 842.158 392.615 845.668 387.867 cv
845.668 434.596 li
level3{
gsave
clp
[2.81488e-14 -459.705 459.705 2.81488e-14 840.598 790.381 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81488e-14 -459.705 459.705 2.81488e-14 840.598 790.381 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
927.536 804.3 mo
917.301 804.3 li
917.301 804.277 li
917.301 804.276 li
917.301 772.112 li
927.536 772.112 li
927.536 804.276 li
927.536 804.277 li
927.536 804.3 li
927.536 761.878 mo
917.301 761.878 li
917.301 690.245 li
927.536 690.245 li
927.536 761.878 li
927.536 680.012 mo
917.301 680.012 li
917.301 608.47 li
927.536 608.47 li
927.536 680.012 li
927.536 598.237 mo
917.301 598.237 li
917.301 526.604 li
927.536 526.604 li
927.536 598.237 li
927.536 516.371 mo
917.301 516.371 li
917.301 444.83 li
927.536 444.83 li
927.536 516.371 li
927.536 434.596 mo
917.301 434.596 li
917.301 362.962 li
927.536 362.962 li
927.536 434.596 li
927.536 352.73 mo
917.301 352.73 li
917.301 303.345 li
920.821 299.585 924.243 295.972 927.536 292.528 cv
927.536 352.73 li
level3{
gsave
clp
[2.81488e-14 -459.705 459.705 2.81488e-14 922.418 790.381 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81488e-14 -459.705 459.705 2.81488e-14 922.418 790.381 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1009.31 293.562 mo
1009.31 804.3 li
999.168 804.3 li
999.168 285.933 li
1002.52 288.352 1005.87 290.956 1009.31 293.562 cv
cp
level3{
gsave
clp
[2.81488e-14 -459.705 459.705 2.81488e-14 1004.24 790.381 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81488e-14 -459.705 459.705 2.81488e-14 1004.24 790.381 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1081.41 362.962 mo
1084.76 367.149 1088.01 371.335 1091.18 375.706 cv
1091.18 804.3 li
1080.94 804.3 li
1080.94 362.404 li
1081.13 362.59 1081.22 362.777 1081.41 362.962 cv
cp
level3{
gsave
clp
[2.81487e-14 -459.705 459.705 2.81487e-14 1086.06 790.381 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81487e-14 -459.705 459.705 2.81487e-14 1086.06 790.381 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1081.41 362.962 mo
927.536 362.962 li
917.301 362.962 li
865.003 362.962 li
867.787 359.529 870.599 356.117 873.43 352.73 cv
917.301 352.73 li
927.536 352.73 li
1072.76 352.73 li
1075.55 355.893 1078.24 359.148 1080.94 362.404 cv
1081.13 362.59 1081.22 362.777 1081.41 362.962 cv
level3{
gsave
clp
[2.81492e-14 -459.712 459.712 2.81492e-14 922.418 790.388 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81492e-14 -459.712 459.712 2.81492e-14 922.418 790.388 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1127.64 444.83 mo
927.536 444.83 li
917.301 444.83 li
845.668 444.83 li
835.528 444.83 li
810.5 444.83 li
812.014 441.491 813.695 438.076 815.528 434.596 cv
835.528 434.596 li
845.668 434.596 li
917.301 434.596 li
927.536 434.596 li
1124.02 434.596 li
1125.32 437.945 1126.62 441.387 1127.64 444.83 cv
level3{
gsave
clp
[2.81504e-14 -459.732 459.732 2.81504e-14 922.418 790.402 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81504e-14 -459.732 459.732 2.81504e-14 922.418 790.402 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1138.25 526.604 mo
927.536 526.604 li
917.301 526.604 li
845.668 526.604 li
835.528 526.604 li
800.391 526.604 li
800.43 523.091 800.474 519.685 800.522 516.371 cv
835.528 516.371 li
845.668 516.371 li
917.301 516.371 li
927.536 516.371 li
1138.25 516.371 li
1138.25 526.604 li
level3{
gsave
clp
[2.81492e-14 -459.712 459.712 2.81492e-14 922.418 790.385 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81492e-14 -459.712 459.712 2.81492e-14 922.418 790.385 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1138.25 608.47 mo
927.536 608.47 li
917.301 608.47 li
845.668 608.47 li
835.528 608.47 li
800.097 608.47 li
800.091 605.037 800.087 601.639 800.085 598.237 cv
835.528 598.237 li
845.668 598.237 li
917.301 598.237 li
927.536 598.237 li
1138.25 598.237 li
1138.25 608.47 li
level3{
gsave
clp
[2.81492e-14 -459.712 459.712 2.81492e-14 922.418 790.384 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81492e-14 -459.712 459.712 2.81492e-14 922.418 790.384 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1138.25 690.245 mo
927.536 690.245 li
917.301 690.245 li
845.668 690.245 li
835.528 690.245 li
800.476 690.245 li
800.451 686.864 800.428 683.456 800.405 680.012 cv
835.528 680.012 li
845.668 680.012 li
917.301 680.012 li
927.536 680.012 li
1138.25 680.012 li
1138.25 690.245 li
level3{
gsave
clp
[2.81477e-14 -459.687 459.687 2.81477e-14 922.418 790.377 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81477e-14 -459.687 459.687 2.81477e-14 922.418 790.377 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1138.25 772.112 mo
927.536 772.112 li
917.301 772.112 li
845.668 772.112 li
835.528 772.112 li
801.219 772.112 li
801.184 768.895 801.147 765.474 801.109 761.878 cv
835.528 761.878 li
845.668 761.878 li
917.301 761.878 li
927.536 761.878 li
1138.25 761.878 li
1138.25 772.112 li
level3{
gsave
clp
[2.81477e-14 -459.687 459.687 2.81477e-14 922.418 790.38 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81477e-14 -459.687 459.687 2.81477e-14 922.418 790.38 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
851.974 596.902 mo
847.033 591.96 li
840.6 598.392 li
834.168 591.96 li
829.225 596.902 li
835.658 603.334 li
829.225 609.766 li
834.168 614.708 li
840.6 608.277 li
847.033 614.708 li
851.974 609.766 li
845.542 603.334 li
851.974 596.902 li
cp
level3{
gsave
clp
[2.10834e-14 344.319 -344.319 2.10834e-14 840.6 422.959 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10834e-14 344.319 -344.319 2.10834e-14 840.6 422.959 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
851.974 678.721 mo
847.033 673.778 li
840.6 680.21 li
834.168 673.778 li
829.225 678.721 li
835.658 685.153 li
829.225 691.585 li
834.168 696.528 li
840.6 690.096 li
847.033 696.528 li
851.974 691.585 li
845.542 685.153 li
851.974 678.721 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 840.6 422.949 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 840.6 422.949 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
851.974 760.539 mo
847.033 755.597 li
840.6 762.03 li
834.168 755.597 li
829.225 760.539 li
835.658 766.972 li
829.225 773.404 li
834.168 778.346 li
840.6 771.913 li
847.033 778.346 li
851.974 773.404 li
845.542 766.972 li
851.974 760.539 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 840.6 422.949 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 840.6 422.949 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
851.974 515.082 mo
847.033 510.141 li
840.6 516.573 li
834.168 510.141 li
829.225 515.082 li
835.658 521.516 li
829.225 527.948 li
834.168 532.89 li
840.6 526.457 li
847.033 532.89 li
851.974 527.948 li
845.542 521.516 li
851.974 515.082 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 840.6 422.952 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 840.6 422.952 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
851.974 433.662 mo
847.033 428.721 li
840.6 435.153 li
834.168 428.721 li
829.225 433.662 li
835.658 440.094 li
829.225 446.527 li
834.168 451.469 li
840.6 445.037 li
847.033 451.469 li
851.974 446.527 li
845.542 440.094 li
851.974 433.662 li
cp
level3{
gsave
clp
[2.10834e-14 344.319 -344.319 2.10834e-14 840.6 422.954 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10834e-14 344.319 -344.319 2.10834e-14 840.6 422.954 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
933.791 596.902 mo
928.848 591.96 li
922.416 598.392 li
915.984 591.96 li
911.042 596.902 li
917.474 603.334 li
911.042 609.766 li
915.984 614.708 li
922.416 608.277 li
928.848 614.708 li
933.791 609.766 li
927.359 603.334 li
933.791 596.902 li
cp
level3{
gsave
clp
[2.10834e-14 344.319 -344.319 2.10834e-14 922.416 422.959 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10834e-14 344.319 -344.319 2.10834e-14 922.416 422.959 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
933.791 678.721 mo
928.848 673.778 li
922.416 680.21 li
915.984 673.778 li
911.042 678.721 li
917.474 685.153 li
911.042 691.585 li
915.984 696.528 li
922.416 690.096 li
928.848 696.528 li
933.791 691.585 li
927.359 685.153 li
933.791 678.721 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 922.416 422.949 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 922.416 422.949 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
933.791 760.539 mo
928.848 755.597 li
922.416 762.03 li
915.984 755.597 li
911.042 760.539 li
917.474 766.972 li
911.042 773.404 li
915.984 778.346 li
922.416 771.913 li
928.848 778.346 li
933.791 773.404 li
927.359 766.972 li
933.791 760.539 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 922.416 422.949 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 922.416 422.949 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
933.791 515.082 mo
928.848 510.141 li
922.416 516.573 li
915.984 510.141 li
911.042 515.082 li
917.474 521.516 li
911.042 527.948 li
915.984 532.89 li
922.416 526.457 li
928.848 532.89 li
933.791 527.948 li
927.359 521.516 li
933.791 515.082 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 922.416 422.952 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 922.416 422.952 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
933.791 433.662 mo
928.848 428.721 li
922.416 435.153 li
915.984 428.721 li
911.042 433.662 li
917.474 440.094 li
911.042 446.527 li
915.984 451.469 li
922.416 445.037 li
928.848 451.469 li
933.791 446.527 li
927.359 440.094 li
933.791 433.662 li
cp
level3{
gsave
clp
[2.10834e-14 344.319 -344.319 2.10834e-14 922.416 422.954 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10834e-14 344.319 -344.319 2.10834e-14 922.416 422.954 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1015.61 596.902 mo
1010.66 591.96 li
1004.23 598.392 li
997.8 591.96 li
992.857 596.902 li
999.29 603.334 li
992.857 609.766 li
997.8 614.708 li
1004.23 608.277 li
1010.66 614.708 li
1015.61 609.766 li
1009.18 603.334 li
1015.61 596.902 li
cp
level3{
gsave
clp
[2.10834e-14 344.319 -344.319 2.10834e-14 1004.23 422.959 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10834e-14 344.319 -344.319 2.10834e-14 1004.23 422.959 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1015.61 678.721 mo
1010.66 673.778 li
1004.23 680.21 li
997.8 673.778 li
992.857 678.721 li
999.29 685.153 li
992.857 691.585 li
997.8 696.528 li
1004.23 690.096 li
1010.66 696.528 li
1015.61 691.585 li
1009.18 685.153 li
1015.61 678.721 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 1004.23 422.949 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 1004.23 422.949 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1015.61 760.539 mo
1010.66 755.597 li
1004.23 762.03 li
997.8 755.597 li
992.857 760.539 li
999.29 766.972 li
992.857 773.404 li
997.8 778.346 li
1004.23 771.913 li
1010.66 778.346 li
1015.61 773.404 li
1009.18 766.972 li
1015.61 760.539 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 1004.23 422.949 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 1004.23 422.949 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1015.61 515.082 mo
1010.66 510.141 li
1004.23 516.573 li
997.8 510.141 li
992.857 515.082 li
999.29 521.516 li
992.857 527.948 li
997.8 532.89 li
1004.23 526.457 li
1010.66 532.89 li
1015.61 527.948 li
1009.18 521.516 li
1015.61 515.082 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 1004.23 422.952 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 1004.23 422.952 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1015.61 433.662 mo
1010.66 428.721 li
1004.23 435.153 li
997.8 428.721 li
992.857 433.662 li
999.29 440.094 li
992.857 446.527 li
997.8 451.469 li
1004.23 445.037 li
1010.66 451.469 li
1015.61 446.527 li
1009.18 440.094 li
1015.61 433.662 li
cp
level3{
gsave
clp
[2.10834e-14 344.319 -344.319 2.10834e-14 1004.23 422.954 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10834e-14 344.319 -344.319 2.10834e-14 1004.23 422.954 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
933.791 351.445 mo
928.848 346.502 li
922.416 352.934 li
915.984 346.502 li
911.042 351.445 li
917.474 357.877 li
911.042 364.309 li
915.984 369.252 li
922.416 362.82 li
928.848 369.252 li
933.791 364.309 li
927.359 357.877 li
933.791 351.445 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 922.416 422.954 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 922.416 422.954 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1015.61 351.445 mo
1010.66 346.502 li
1004.23 352.934 li
997.8 346.502 li
992.857 351.445 li
999.29 357.877 li
992.857 364.309 li
997.8 369.252 li
1004.23 362.82 li
1010.66 369.252 li
1015.61 364.309 li
1009.18 357.877 li
1015.61 351.445 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 1004.23 422.954 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 1004.23 422.954 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1097.42 596.902 mo
1092.48 591.96 li
1086.05 598.392 li
1079.62 591.96 li
1074.67 596.902 li
1081.11 603.334 li
1074.67 609.766 li
1079.62 614.708 li
1086.05 608.277 li
1092.48 614.708 li
1097.42 609.766 li
1090.99 603.334 li
1097.42 596.902 li
cp
level3{
gsave
clp
[2.10834e-14 344.319 -344.319 2.10834e-14 1086.05 422.959 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10834e-14 344.319 -344.319 2.10834e-14 1086.05 422.959 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1097.42 678.721 mo
1092.48 673.778 li
1086.05 680.21 li
1079.62 673.778 li
1074.67 678.721 li
1081.11 685.153 li
1074.67 691.585 li
1079.62 696.528 li
1086.05 690.096 li
1092.48 696.528 li
1097.42 691.585 li
1090.99 685.153 li
1097.42 678.721 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 1086.05 422.949 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 1086.05 422.949 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1097.42 760.539 mo
1092.48 755.597 li
1086.05 762.03 li
1079.62 755.597 li
1074.67 760.539 li
1081.11 766.972 li
1074.67 773.404 li
1079.62 778.346 li
1086.05 771.913 li
1092.48 778.346 li
1097.42 773.404 li
1090.99 766.972 li
1097.42 760.539 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 1086.05 422.949 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 1086.05 422.949 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1097.42 515.082 mo
1092.48 510.141 li
1086.05 516.573 li
1079.62 510.141 li
1074.67 515.082 li
1081.11 521.516 li
1074.67 527.948 li
1079.62 532.89 li
1086.05 526.457 li
1092.48 532.89 li
1097.42 527.948 li
1090.99 521.516 li
1097.42 515.082 li
cp
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 1086.05 422.952 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 1086.05 422.952 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
1097.42 433.662 mo
1092.48 428.721 li
1086.05 435.153 li
1079.62 428.721 li
1074.67 433.662 li
1081.11 440.094 li
1074.67 446.527 li
1079.62 451.469 li
1086.05 445.037 li
1092.48 451.469 li
1097.42 446.527 li
1090.99 440.094 li
1097.42 433.662 li
cp
level3{
gsave
clp
[2.10834e-14 344.319 -344.319 2.10834e-14 1086.05 422.954 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10834e-14 344.319 -344.319 2.10834e-14 1086.05 422.954 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
753.66 804.276 mo
683.348 804.276 li
683.348 804.276 683.348 612.705 683.348 508.159 cv
683.348 363.37 826.311 265.44 891.104 228.491 cv
826.273 265.472 683.349 363.413 683.349 508.159 cv
683.349 612.705 683.349 804.276 683.349 804.276 cv
753.66 804.276 li
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/6 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,U
JQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R
<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%fn!,UJQ1<R<7uh%
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5
P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-4$5P[`[;@cN\^j-*s4P@<L8@H3P[j-!g1P$m:3
@,d;VifRX.O^R.0@,[2SiK%@)O'^b)?JpiMhi;""NEk=u>i(BDh25FmM-A\i=ke^6gP/haKNHiZ<S;q&
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~f\"j/f\+s2g"P06g=k97g=tB:gYCT>gt^]?gtgfBh;-oCh;7#FhVR,GhV[5Jhr!>Khr*GNi8EPOi8EPO
i8EPOi8ESQiSibSiSibSiSibSiSieUio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tW
io8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tW
io8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tWio8tW
~>
<~J:W9'JqJ].K7no3Knb>:L5(G;L51P?Ll$tFM2I1JMMd:KMMmCON/`gVNK&pWNK&pWNK0$ZNfK-[NfT6^
O,o?_O,oBaOH>QcOH>QcOH>QcOH>TeOcbcgOcbfiP*1ukP*1ukP*1ukP*2#mPEV2oPEV2oPEV2oPEV2o
PEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2o
PEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2oPEV2o
~>
<~;cH^q<)lq!<``@(='&I)='/R,=BSd0=^#!4>$G38>?b<9>?b<9>?kE<>[:W@?!U`A?!U`A?!^iD?=$rE
?=$uG?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI2K?smAM?smAM?smDO@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
801.598 804.276 mo
763.893 804.276 li
763.893 777.023 li
765.216 778.346 li
770.158 773.404 li
768.866 772.112 li
801.219 772.112 li
801.436 791.924 801.597 804.164 801.598 804.276 cv
753.66 804.276 mo
683.349 804.276 li
683.349 804.276 683.349 612.705 683.349 508.159 cv
683.349 363.413 826.273 265.472 891.104 228.491 cv
899.965 223.438 907.361 219.527 912.732 216.791 cv
966.372 253.467 li
966.372 253.467 949.982 269.05 927.536 292.528 cv
927.536 240.72 li
925.674 239.696 924 238.859 922.417 238.022 cv
920.836 238.859 919.162 239.696 917.301 240.72 cv
917.301 303.345 li
903.523 318.059 888.243 335.011 873.43 352.73 cv
850.689 352.73 li
851.974 351.445 li
847.033 346.502 li
845.668 347.867 li
845.668 285.933 li
842.319 288.352 838.969 290.956 835.528 293.562 cv
835.528 347.862 li
834.168 346.502 li
829.225 351.445 li
830.51 352.73 li
772.08 352.73 li
769.29 355.893 766.591 359.148 763.893 362.404 cv
763.893 362.404 li
763.707 362.59 763.615 362.777 763.429 362.962 cv
760.08 367.149 756.823 371.335 753.66 375.706 cv
753.66 430.029 li
752.352 428.721 li
747.409 433.663 li
748.343 434.596 li
720.82 434.596 li
719.518 437.945 718.216 441.387 717.192 444.83 cv
749.105 444.83 li
747.409 446.527 li
752.352 451.469 li
753.66 450.161 li
753.66 511.449 li
752.352 510.141 li
747.409 515.083 li
748.697 516.371 li
706.587 516.371 li
706.587 526.604 li
748.753 526.604 li
747.409 527.947 li
752.352 532.89 li
753.66 531.582 li
753.66 593.268 li
752.352 591.96 li
747.409 596.902 li
748.744 598.237 li
706.587 598.237 li
706.587 608.47 li
748.705 608.47 li
747.409 609.766 li
752.352 614.708 li
753.66 613.4 li
753.66 675.086 li
752.352 673.778 li
747.409 678.721 li
748.7 680.012 li
706.587 680.012 li
706.587 690.245 li
748.749 690.245 li
747.409 691.585 li
752.352 696.528 li
753.66 695.22 li
753.66 756.905 li
752.352 755.597 li
747.409 760.54 li
748.748 761.878 li
706.587 761.878 li
706.587 772.112 li
748.701 772.112 li
747.409 773.404 li
752.352 778.346 li
753.66 777.038 li
753.66 804.276 li
801.109 761.878 mo
768.819 761.878 li
770.158 760.54 li
765.216 755.597 li
763.893 756.92 li
763.893 695.205 li
765.216 696.528 li
770.158 691.585 li
768.818 690.245 li
800.476 690.245 li
800.669 717.36 800.904 742.291 801.109 761.878 cv
800.405 680.012 mo
768.867 680.012 li
770.158 678.721 li
765.216 673.778 li
763.893 675.101 li
763.893 613.385 li
765.216 614.708 li
770.158 609.766 li
768.862 608.47 li
800.097 608.47 li
800.135 632.331 800.252 656.811 800.405 680.012 cv
800.085 598.237 mo
768.823 598.237 li
770.158 596.902 li
765.216 591.96 li
763.893 593.283 li
763.893 531.567 li
765.216 532.89 li
770.158 527.947 li
768.814 526.604 li
800.391 526.604 li
800.152 547.838 800.069 572.53 800.085 598.237 cv
800.522 516.371 mo
768.87 516.371 li
770.158 515.083 li
765.216 510.141 li
763.893 511.464 li
763.893 450.146 li
765.216 451.469 li
770.158 446.527 li
768.462 444.83 li
810.5 444.83 li
805.262 456.391 802.049 467.027 801.598 476.195 cv
801.109 486.132 800.761 499.968 800.522 516.371 cv
815.528 434.596 mo
769.225 434.596 li
770.158 433.663 li
765.216 428.721 li
763.893 430.044 li
763.893 362.962 li
830.572 362.962 li
829.225 364.309 li
834.168 369.252 li
835.528 367.892 li
835.528 402.056 li
827.829 413.236 821.005 424.2 815.528 434.596 cv
845.668 387.867 mo
845.668 367.887 li
847.033 369.252 li
851.974 364.309 li
850.627 362.962 li
865.003 362.962 li
858.319 371.207 851.811 379.554 845.668 387.867 cv
level3{
gsave
clp
[2.64884e-14 -432.59 432.59 2.64884e-14 922.419 755.532 ]ct
/7 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ
@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<
42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`*tgH@QMG:3lGJg`*k^E@62;73l>Ae_dGOB?ol/33l55a_-]4=
?TGo/35Ai[^g/q7>r]T(35/WW^0EV1>;s3!2S<3O]3.&(=Z3lp27cmI\Q:Vu<]%<e1q-I@[T#&k;_kaY
1:0q7ZV`H_:bf4N0X4D,YYHjT9J<PB0!.buX@b(F8M$l4/#c#hW(&;774P0&.A]B\Ud?K)5UW6j-_NXM
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~TKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q
4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd
-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OL
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 .998385 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.64884e-14 -432.59 432.59 2.64884e-14 922.419 755.532 ]ct
clp
/7 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5BL1_o'C0_o'C0_o'C0_o'C0_ns:-_SX1,_SX1,
_SX1,_SO()_83t(_83t(_83q&^qdb$^qd_"^V@Ou^V@Ou^V@Ls^:q=q^:q:o]tM+m]tM(k]Y(kg]=Y\e
]=YYc]"5Ja]"5Ja]"5G_\[f8\\@B&Y\@B&X\$riT[^NWP[C*EM[C*EL['[3HZa7!DZEgd@Z*CR<Yct@9
Yct@8YHP.4Y-+q0Xf\_,XK8M(X/i;%WiE)!WMukrW2QYnVl-DhV5:#bV5:#bUnjf^USFTZU8"?TTV.sN
~>
<~@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:3JN?smAM?smAM?smAM
?sd8J?XI/I?XI,G?=$rE?=$rE?=$rE?=$rE?=$oC?!U]?>[1N=>[1K;>?b<9>?b<9>?b97>$>*5>$>'3
=]nj/=BJ[-=BJ[-=BJX+='&I(<`W7$<E3%!<E3$u<)cgq;c?Um;GpCi;,L1f;,L1e:f'ta:JXb]:/4PZ
:/4PY9h\5R91qoN91qoM8kM]I8P)KF84Z9B7n6'>7Rfj:77BX66psF26UO4.6:+"*5s[b$5<h@s5<h=q
~>
<~3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]T2\3B9)[3B9)[3B9)[3B9)[3B9)[3B9)[
3B9)[3B9)[3B9)[3B9&Y3&ilW3&ilW3&iiU2`EZS2`EZS2`EZS2`EZS2`EZS2`EWQ2E!HO2E!EM2)R6K
2)R6K2)R6K2)R3I1c.$G1c.$F1G^gC1G^gC1G^gB1,:U?1,:U>0ekC;0ekC;0ekC:0JG170JG160/"t2
/hSb//hSb//hSb./M/P*/1`>'/1`>'.k<,#.Olnt.Olnt.Olnt.4H\p-n$Jl-n$Jl-RU8h-71&d-71&d
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /7 /Gradient get_res exec grestore
}if
np
763.893 804.276 mo
753.66 804.276 li
753.66 777.038 li
758.585 772.112 li
758.982 772.112 li
763.893 777.023 li
763.893 804.276 li
758.935 761.878 mo
758.633 761.878 li
753.66 756.905 li
753.66 695.22 li
758.635 690.245 li
758.933 690.245 li
763.893 695.205 li
763.893 756.92 li
758.935 761.878 li
758.982 680.012 mo
758.586 680.012 li
753.66 675.086 li
753.66 613.4 li
758.591 608.47 li
758.977 608.47 li
763.893 613.385 li
763.893 675.101 li
758.982 680.012 li
758.939 598.237 mo
758.628 598.237 li
753.66 593.268 li
753.66 531.582 li
758.637 526.604 li
758.93 526.604 li
763.893 531.567 li
763.893 593.283 li
758.939 598.237 li
758.986 516.371 mo
758.582 516.371 li
753.66 511.449 li
753.66 450.161 li
758.784 445.038 li
763.893 450.146 li
763.893 511.464 li
758.986 516.371 li
759.34 434.596 mo
758.227 434.596 li
753.66 430.029 li
753.66 375.706 li
756.823 371.335 760.08 367.149 763.429 362.962 cv
763.615 362.777 763.707 362.59 763.893 362.404 cv
763.893 362.404 li
763.707 362.59 763.615 362.777 763.429 362.962 cv
763.893 362.962 li
763.893 430.044 li
759.34 434.596 li
level3{
gsave
clp
[2.81487e-14 -459.705 459.705 2.81487e-14 758.777 790.381 ]ct
/8 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-
@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,T
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm)Sh2c%$O($k*@GQuQh2c""O($h(@GHlOgl>dtNaUY&@,-cMgl5^rNF:M"
?e^NHgP]CmMdG+p?J:9Cg50+gLg8Vg>hOj:fnEY`KNd#\=kA7-f7@&TIok0L<RlIse9b-CGZ)t6;:0M^
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81487e-14 -459.705 459.705 2.81487e-14 758.777 790.381 ]ct
clp
/8 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?
gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?
gt^]?gt^]>gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K:g=k97g=k97g=k97g=k97g=k96g"G'3
g"G'3g"G'3f\"j/f\"j/f\"j/f\"j/f\"j/f@SX+f%/F'f%/F'e^`4#eC<!teC<!te'ldpdaHRldF$@h
~>
<~O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o<]NfK-[NfK-[NfK-[NfK-[
NfK-[NfK-[NfK-ZNK&pWNK&pWNK&pWNK&pWNK&pWNK&pVN/W^SN/W^RMi3LOMi3LNMMd:KMMd:JM2@(G
M2@(GLkpkCLPLY?L5(G;KnY57KS5#3K7ef/JqAT+JUrB'J:N-!IXZ`pI=6KjH[C*dH?sj]GB\7TG'8"N
~>
<~@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<PO?smAM?smAM
?smAM?smAM?smAM?smAM?smAL?XI/I?XI/I?XI/I?XI/I?XI/I?XI/H?=$rE?=$rD?!U`A?!U`A?!U`A
?!U`A>[1N=>?b<9>?b<9>?b<9>$>*5=]nm1=BJ[-='&I)='&I)<`W4#<)cgr<)cdp;GpCj;,L1f:f'q`
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /8 /Gradient get_res exec grestore
}if
np
835.528 402.056 mo
835.528 367.892 li
840.458 362.962 li
840.743 362.962 li
845.668 367.887 li
845.668 387.867 li
842.158 392.615 838.764 397.357 835.528 402.056 cv
840.804 352.73 mo
840.397 352.73 li
835.528 347.862 li
835.528 293.562 li
838.969 290.956 842.319 288.352 845.668 285.933 cv
845.668 347.867 li
840.804 352.73 li
level3{
gsave
clp
[2.81488e-14 -459.705 459.705 2.81488e-14 840.598 790.381 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81488e-14 -459.705 459.705 2.81488e-14 840.598 790.381 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
917.301 303.345 mo
917.301 240.72 li
919.162 239.696 920.836 238.859 922.417 238.022 cv
924 238.859 925.674 239.696 927.536 240.72 cv
927.536 292.528 li
924.243 295.972 920.821 299.585 917.301 303.345 cv
level3{
gsave
clp
[2.81488e-14 -459.705 459.705 2.81488e-14 922.418 790.381 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81488e-14 -459.705 459.705 2.81488e-14 922.418 790.381 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
865.003 362.962 mo
850.627 362.962 li
845.541 357.877 li
850.689 352.73 li
873.43 352.73 li
870.599 356.117 867.787 359.529 865.003 362.962 cv
840.743 362.962 mo
840.458 362.962 li
840.6 362.82 li
840.743 362.962 li
830.572 362.962 mo
763.893 362.962 li
763.429 362.962 li
763.615 362.777 763.707 362.59 763.893 362.404 cv
763.893 362.404 li
766.591 359.148 769.29 355.893 772.08 352.73 cv
830.51 352.73 li
835.658 357.877 li
830.572 362.962 li
840.6 352.934 mo
840.397 352.73 li
840.804 352.73 li
840.6 352.934 li
level3{
gsave
clp
[2.81492e-14 -459.712 459.712 2.81492e-14 922.418 790.388 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81492e-14 -459.712 459.712 2.81492e-14 922.418 790.388 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
810.5 444.83 mo
768.462 444.83 li
763.725 440.094 li
769.225 434.596 li
815.528 434.596 li
813.695 438.076 812.014 441.491 810.5 444.83 cv
749.105 444.83 mo
717.192 444.83 li
718.216 441.387 719.518 437.945 720.82 434.596 cv
748.343 434.596 li
753.842 440.094 li
749.105 444.83 li
758.784 435.153 mo
758.227 434.596 li
759.34 434.596 li
758.784 435.153 li
level3{
gsave
clp
[2.81504e-14 -459.732 459.732 2.81504e-14 922.418 790.402 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81504e-14 -459.732 459.732 2.81504e-14 922.418 790.402 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
800.391 526.604 mo
768.814 526.604 li
763.725 521.516 li
768.87 516.371 li
800.522 516.371 li
800.474 519.685 800.43 523.091 800.391 526.604 cv
758.93 526.604 mo
758.637 526.604 li
758.784 526.458 li
758.93 526.604 li
748.753 526.604 mo
706.587 526.604 li
706.587 516.371 li
748.697 516.371 li
753.842 521.516 li
748.753 526.604 li
758.784 516.572 mo
758.582 516.371 li
758.986 516.371 li
758.784 516.572 li
level3{
gsave
clp
[2.81492e-14 -459.712 459.712 2.81492e-14 922.418 790.385 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81492e-14 -459.712 459.712 2.81492e-14 922.418 790.385 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
800.097 608.47 mo
768.862 608.47 li
763.725 603.334 li
768.823 598.237 li
800.085 598.237 li
800.087 601.639 800.091 605.037 800.097 608.47 cv
758.977 608.47 mo
758.591 608.47 li
758.784 608.277 li
758.977 608.47 li
748.705 608.47 mo
706.587 608.47 li
706.587 598.237 li
748.744 598.237 li
753.842 603.334 li
748.705 608.47 li
758.784 598.392 mo
758.628 598.237 li
758.939 598.237 li
758.784 598.392 li
level3{
gsave
clp
[2.81492e-14 -459.712 459.712 2.81492e-14 922.418 790.384 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81492e-14 -459.712 459.712 2.81492e-14 922.418 790.384 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
800.476 690.245 mo
768.818 690.245 li
763.725 685.153 li
768.867 680.012 li
800.405 680.012 li
800.428 683.456 800.451 686.864 800.476 690.245 cv
758.933 690.245 mo
758.635 690.245 li
758.784 690.096 li
758.933 690.245 li
748.749 690.245 mo
706.587 690.245 li
706.587 680.012 li
748.7 680.012 li
753.842 685.153 li
748.749 690.245 li
758.784 680.21 mo
758.586 680.012 li
758.982 680.012 li
758.784 680.21 li
level3{
gsave
clp
[2.81477e-14 -459.687 459.687 2.81477e-14 922.418 790.377 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81477e-14 -459.687 459.687 2.81477e-14 922.418 790.377 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
801.219 772.112 mo
768.866 772.112 li
763.725 766.972 li
768.819 761.878 li
801.109 761.878 li
801.147 765.474 801.184 768.895 801.219 772.112 cv
758.982 772.112 mo
758.585 772.112 li
758.784 771.913 li
758.982 772.112 li
748.701 772.112 mo
706.587 772.112 li
706.587 761.878 li
748.748 761.878 li
753.842 766.972 li
748.701 772.112 li
758.784 762.029 mo
758.633 761.878 li
758.935 761.878 li
758.784 762.029 li
level3{
gsave
clp
[2.81477e-14 -459.687 459.687 2.81477e-14 922.418 790.38 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.81477e-14 -459.687 459.687 2.81477e-14 922.418 790.38 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
765.216 614.708 mo
763.893 613.385 li
758.977 608.47 li
758.784 608.277 li
758.591 608.47 li
753.66 613.4 li
752.352 614.708 li
747.409 609.766 li
748.705 608.47 li
753.842 603.334 li
748.744 598.237 li
747.409 596.902 li
752.352 591.96 li
753.66 593.268 li
758.628 598.237 li
758.784 598.392 li
758.939 598.237 li
763.893 593.283 li
765.216 591.96 li
770.158 596.902 li
768.823 598.237 li
763.725 603.334 li
768.862 608.47 li
770.158 609.766 li
765.216 614.708 li
level3{
gsave
clp
[2.10834e-14 344.319 -344.319 2.10834e-14 758.784 422.959 ]ct
/9 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-
@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,T
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_
UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UN,LmETj0;kbE.]UN,IlETa*:kG*%[UN,IlETa*:kFuqYU2]7g
E9<j4k+HYTTPrqbDrmX0je$GPSo*PZD<.7)j.1#HS87/RCZCjuigFN?QtYHFBAf(fi07g1P@WO4A)35U
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10834e-14 344.319 -344.319 2.10834e-14 758.784 422.959 ]ct
clp
/9 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~gtgfBh;7#FhV[5Jhr!>Khr*GNi8NYRiSibSiSrkVio8tWio8tWio8tWioB(Zj5]1[j5f:^jQ,C_jQ,C_
jQ,C_jQ,FajlPUcjlPUcjlPUcjlPXek2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tjikND$kkND$k
kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
~>
<~O-#HbOHGZgP*;)nPE_;sQ'R`%QC!r)Q^F/-R$jA1R@0J2R@9S6S"-"=S=H+>S=H+>S=Q4ASXuFEStDXI
T:_aJT:_aJT:_aJT:_dLTV.sNTV/!PTqS0RTqS3TU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BWUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZ
USFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZ
~>
<~@:E\T@UinX@q9+\A7]=`AS,OdAnPahB4tslBPD0pBkhBtC2.KuC27U#CM[g'Ci!p(Ci!p(Ci+$+D/F-,
D/F0.DJj?0DJj?0DJj?0DJjB2Df9Q4Df9Q4Df9T6E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8
E,]c8E,]c8E,]c9EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /9 /Gradient get_res exec grestore
}if
np
765.216 696.528 mo
763.893 695.205 li
758.933 690.245 li
758.784 690.096 li
758.635 690.245 li
753.66 695.22 li
752.352 696.528 li
747.409 691.585 li
748.749 690.245 li
753.842 685.153 li
748.7 680.012 li
747.409 678.721 li
752.352 673.778 li
753.66 675.086 li
758.586 680.012 li
758.784 680.21 li
758.982 680.012 li
763.893 675.101 li
765.216 673.778 li
770.158 678.721 li
768.867 680.012 li
763.725 685.153 li
768.818 690.245 li
770.158 691.585 li
765.216 696.528 li
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 758.784 422.949 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 758.784 422.949 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
765.216 778.346 mo
763.893 777.023 li
758.982 772.112 li
758.784 771.913 li
758.585 772.112 li
753.66 777.038 li
752.352 778.346 li
747.409 773.404 li
748.701 772.112 li
753.842 766.972 li
748.748 761.878 li
747.409 760.54 li
752.352 755.597 li
753.66 756.905 li
758.633 761.878 li
758.784 762.029 li
758.935 761.878 li
763.893 756.92 li
765.216 755.597 li
770.158 760.54 li
768.819 761.878 li
763.725 766.972 li
768.866 772.112 li
770.158 773.404 li
765.216 778.346 li
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 758.784 422.949 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 758.784 422.949 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
765.216 532.89 mo
763.893 531.567 li
758.93 526.604 li
758.784 526.458 li
758.637 526.604 li
753.66 531.582 li
752.352 532.89 li
747.409 527.947 li
748.753 526.604 li
753.842 521.516 li
748.697 516.371 li
747.409 515.083 li
752.352 510.141 li
753.66 511.449 li
758.582 516.371 li
758.784 516.572 li
758.986 516.371 li
763.893 511.464 li
765.216 510.141 li
770.158 515.083 li
768.87 516.371 li
763.725 521.516 li
768.814 526.604 li
770.158 527.947 li
765.216 532.89 li
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 758.784 422.952 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 758.784 422.952 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
765.216 451.469 mo
763.893 450.146 li
758.784 445.038 li
753.66 450.161 li
752.352 451.469 li
747.409 446.527 li
749.105 444.83 li
753.842 440.094 li
748.343 434.596 li
747.409 433.663 li
752.352 428.721 li
753.66 430.029 li
758.227 434.596 li
758.784 435.153 li
759.34 434.596 li
763.893 430.044 li
765.216 428.721 li
770.158 433.663 li
769.225 434.596 li
763.725 440.094 li
768.462 444.83 li
770.158 446.527 li
765.216 451.469 li
level3{
gsave
clp
[2.10834e-14 344.319 -344.319 2.10834e-14 758.784 422.954 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10834e-14 344.319 -344.319 2.10834e-14 758.784 422.954 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
847.033 369.252 mo
845.668 367.887 li
840.743 362.962 li
840.6 362.82 li
840.458 362.962 li
835.528 367.892 li
834.168 369.252 li
829.225 364.309 li
830.572 362.962 li
835.658 357.877 li
830.51 352.73 li
829.225 351.445 li
834.168 346.502 li
835.528 347.862 li
840.397 352.73 li
840.6 352.934 li
840.804 352.73 li
845.668 347.867 li
847.033 346.502 li
851.974 351.445 li
850.689 352.73 li
845.541 357.877 li
850.627 362.962 li
851.974 364.309 li
847.033 369.252 li
level3{
gsave
clp
[2.10844e-14 344.335 -344.335 2.10844e-14 840.6 422.954 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.10844e-14 344.335 -344.335 2.10844e-14 840.6 422.954 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
1184.75 804.277 mo
1138.23 804.277 li
1138.23 508.16 li
1138.23 358.774 965.559 260.265 922.424 237.994 cv
879.279 260.265 706.608 358.774 706.608 508.16 cv
706.608 804.277 li
660.093 804.277 li
660.093 508.16 li
660.093 424.564 704.274 342.953 787.855 272.153 cv
849.371 220.04 910.222 192.04 912.785 190.878 cv
922.424 186.485 li
932.062 190.878 li
934.625 192.04 995.467 220.04 1056.99 272.153 cv
1140.56 342.953 1184.75 424.564 1184.75 508.16 cv
1184.75 804.277 li
cp
1 .85098 .658824 rgb
f
913.892 221.459 mo
922.424 217.052 li
930.963 221.459 li
983.947 248.818 1156.84 350.348 1156.84 508.16 cv
1156.84 785.671 li
1166.14 785.671 li
1166.14 508.16 li
1166.14 430.205 1124.24 353.505 1044.96 286.348 cv
985.138 235.671 924.976 208.094 924.377 207.822 cv
922.424 206.931 li
920.498 207.807 li
919.871 208.094 859.692 235.681 799.884 286.348 cv
720.6 353.505 678.699 430.205 678.699 508.16 cv
678.699 785.671 li
688.002 785.671 li
688.002 508.16 li
688.002 350.329 860.9 248.813 913.892 221.459 cv
cp
level3{
gsave
clp
[2.55384e-14 -417.075 417.075 2.55384e-14 922.419 725.229 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.55384e-14 -417.075 417.075 2.55384e-14 922.419 725.229 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
1262.24 148.447 mo
1225.34 148.447 li
1222.05 148.447 1219.38 145.778 1219.38 142.487 cv
1219.38 137.102 li
1219.38 133.811 1216.71 131.143 1213.42 131.143 cv
1193.82 131.143 li
1190.53 131.143 1187.86 133.811 1187.86 137.102 cv
1187.86 142.487 li
1187.86 145.778 1185.19 148.447 1181.9 148.447 cv
1181.9 148.447 li
1145 148.447 li
1144.99 148.447 li
1141.7 148.447 1139.03 145.778 1139.03 142.487 cv
1139.03 137.102 li
1139.03 133.811 1136.36 131.143 1133.07 131.143 cv
1113.47 131.143 li
1110.18 131.143 1107.51 133.811 1107.51 137.102 cv
1107.51 142.487 li
1107.51 145.778 1104.85 148.447 1101.55 148.447 cv
1064.65 148.447 li
1061.36 148.447 1058.69 145.778 1058.69 142.487 cv
1058.69 137.102 li
1058.69 133.811 1056.02 131.143 1052.73 131.143 cv
1042.93 131.143 li
1033.13 131.143 li
1029.84 131.143 1027.17 133.811 1027.17 137.102 cv
1027.17 142.487 li
1027.17 145.778 1024.5 148.447 1021.21 148.447 cv
984.309 148.447 li
981.018 148.447 978.35 145.778 978.35 142.487 cv
978.35 137.102 li
978.35 133.811 975.681 131.143 972.389 131.143 cv
952.789 131.143 li
949.498 131.143 946.83 133.811 946.83 137.102 cv
946.83 142.487 li
946.83 144.133 946.164 145.623 945.086 146.702 cv
944.006 147.78 942.517 148.447 940.871 148.447 cv
940.87 148.447 li
903.967 148.447 li
900.675 148.447 898.007 145.778 898.007 142.487 cv
898.007 137.102 li
898.007 133.811 895.338 131.143 892.048 131.143 cv
872.448 131.143 li
869.158 131.143 866.489 133.811 866.489 137.102 cv
866.489 142.487 li
866.489 145.778 863.821 148.447 860.529 148.447 cv
823.625 148.447 li
820.334 148.447 817.665 145.778 817.665 142.487 cv
817.665 137.102 li
817.665 133.811 814.997 131.143 811.706 131.143 cv
801.907 131.143 li
792.107 131.143 li
788.815 131.143 786.147 133.811 786.147 137.102 cv
786.147 142.487 li
786.147 145.778 783.478 148.447 780.188 148.447 cv
743.283 148.447 li
739.992 148.447 737.323 145.778 737.323 142.487 cv
737.323 137.102 li
737.323 133.811 734.656 131.143 731.364 131.143 cv
711.764 131.143 li
708.474 131.143 705.805 133.811 705.805 137.102 cv
705.805 142.487 li
705.805 145.778 703.137 148.447 699.845 148.447 cv
699.841 148.447 li
662.942 148.447 li
662.938 148.447 li
659.646 148.447 656.977 145.778 656.977 142.487 cv
656.977 137.102 li
656.977 133.811 654.309 131.143 651.018 131.143 cv
631.419 131.143 li
628.127 131.143 625.459 133.811 625.459 137.102 cv
625.459 142.487 li
625.459 145.778 622.791 148.447 619.499 148.447 cv
582.595 148.447 li
579.305 148.447 576.636 145.778 576.636 142.487 cv
576.636 137.102 li
576.636 133.811 573.968 131.143 570.676 131.143 cv
560.876 131.143 li
551.076 131.143 li
547.786 131.143 545.117 133.811 545.117 137.102 cv
545.117 142.487 li
545.117 145.778 542.449 148.447 539.157 148.447 cv
502.254 148.447 li
498.963 148.447 496.294 145.778 496.294 142.487 cv
496.294 137.102 li
496.294 133.811 493.626 131.143 490.335 131.143 cv
470.735 131.143 li
467.443 131.143 464.775 133.811 464.775 137.102 cv
464.775 142.487 li
464.775 145.778 462.106 148.447 458.816 148.447 cv
439.663 148.447 li
421.912 148.447 li
418.62 148.447 415.951 145.778 415.951 142.487 cv
415.951 113.359 li
415.951 105.584 li
415.951 102.292 418.62 99.6245 421.912 99.6245 cv
464.775 99.6245 li
496.294 99.6245 li
545.117 99.6245 li
560.876 99.6245 li
576.636 99.6245 li
625.459 99.6245 li
656.977 99.6245 li
662.942 99.6245 li
699.841 99.6245 li
705.805 99.6245 li
737.323 99.6245 li
786.147 99.6245 li
801.907 99.6245 li
817.665 99.6245 li
866.489 99.6245 li
898.007 99.6245 li
903.967 99.6245 li
940.871 99.6245 li
946.83 99.6245 li
978.35 99.6245 li
1027.17 99.6245 li
1042.93 99.6245 li
1058.69 99.6245 li
1107.51 99.6245 li
1139.03 99.6245 li
1145 99.6245 li
1181.9 99.6245 li
1187.86 99.6245 li
1219.38 99.6245 li
1268.2 99.6245 li
1283.96 99.6245 li
1299.72 99.6245 li
1348.54 99.6245 li
1380.06 99.6245 li
1422.93 99.6245 li
1426.22 99.6245 1428.89 102.292 1428.89 105.584 cv
1428.89 113.278 li
1428.89 113.359 li
1428.89 142.487 li
1428.89 144.133 1428.22 145.623 1427.14 146.701 cv
1428.22 145.623 1428.89 144.133 1428.89 142.488 cv
1428.89 105.584 li
1428.89 102.293 1426.22 99.6245 1422.93 99.6245 cv
1380.06 99.6245 li
1348.54 99.6245 li
1299.72 99.6245 li
1283.96 99.6245 li
1268.2 99.6245 li
1219.38 99.6245 li
1187.86 99.6245 li
1181.9 99.6245 li
1145 99.6245 li
1139.03 99.6245 li
1107.51 99.6245 li
1058.69 99.6245 li
1042.93 99.6245 li
1027.17 99.6245 li
978.348 99.6245 li
946.83 99.6245 li
940.87 99.6245 li
903.967 99.6245 li
898.008 99.6245 li
866.489 99.6245 li
817.665 99.6245 li
801.907 99.6245 li
786.147 99.6245 li
737.323 99.6245 li
705.805 99.6245 li
699.841 99.6245 li
662.942 99.6245 li
656.977 99.6245 li
625.459 99.6245 li
576.636 99.6245 li
560.876 99.6245 li
545.117 99.6245 li
496.294 99.6245 li
480.409 99.6245 li
1337.8 109.074 li
1341.57 109.115 1344.72 111.965 1345.14 115.714 cv
1345.78 121.504 li
1346.26 125.857 1342.91 129.689 1338.53 129.791 cv
1280.43 131.143 li
1274.16 131.143 li
1270.87 131.143 1268.2 133.811 1268.2 137.102 cv
1268.2 142.487 li
1268.2 145.778 1265.53 148.447 1262.24 148.447 cv
level3{
gsave
clp
[1012.94 0 0 1012.94 415.951 124.036 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1012.94 0 0 1012.94 415.951 124.036 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
213.085 706.88 mo
190.865 706.88 94.4967 701.267 94.4967 701.267 cv
358.704 701.267 li
358.704 701.267 235.305 706.88 213.085 706.88 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
273.734 585.452 mo
235.726 585.452 li
230.581 585.452 226.409 581.28 226.409 576.134 cv
226.409 481.53 li
226.409 476.384 230.581 472.212 235.726 472.212 cv
273.734 472.212 li
278.88 472.212 283.051 476.384 283.051 481.53 cv
283.051 576.134 li
283.051 581.28 278.88 585.452 273.734 585.452 cv
230.933 585.444 mo
224.788 585.23 219.871 580.181 219.871 573.983 cv
219.871 468.992 li
219.871 462.657 225.006 457.523 231.339 457.523 cv
278.12 457.523 li
278.12 457.523 li
231.339 457.523 li
225.006 457.523 219.872 462.657 219.872 468.992 cv
219.872 573.983 li
219.872 580.181 224.788 585.23 230.933 585.444 cv
level3{
gsave
clp
[6.53668e-15 -106.752 106.752 6.53668e-15 254.73 578.258 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.53668e-15 -106.752 106.752 6.53668e-15 254.73 578.258 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
278.121 585.452 mo
273.734 585.452 li
273.734 585.452 li
278.12 585.452 li
284.454 585.452 289.589 580.317 289.589 573.983 cv
289.589 468.992 li
289.589 468.992 li
289.589 573.983 li
289.589 580.317 284.454 585.452 278.121 585.452 cv
289.391 466.856 mo
288.39 461.542 283.725 457.523 278.12 457.523 cv
278.121 457.523 li
283.725 457.523 288.39 461.542 289.391 466.856 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
278.12 585.452 mo
273.734 585.452 li
278.88 585.452 283.051 581.28 283.051 576.134 cv
283.051 481.53 li
283.051 476.384 278.88 472.212 273.734 472.212 cv
235.726 472.212 li
230.581 472.212 226.409 476.384 226.409 481.53 cv
226.409 576.134 li
226.409 581.28 230.581 585.452 235.726 585.452 cv
231.339 585.452 li
231.203 585.452 231.068 585.449 230.933 585.444 cv
224.788 585.23 219.872 580.181 219.872 573.983 cv
219.872 468.992 li
219.872 462.657 225.006 457.523 231.339 457.523 cv
278.121 457.523 li
283.725 457.523 288.39 461.542 289.391 466.856 cv
289.521 467.548 289.589 468.262 289.589 468.992 cv
289.589 573.983 li
289.589 580.317 284.454 585.452 278.12 585.452 cv
level3{
gsave
clp
[6.53668e-15 -106.752 106.752 6.53668e-15 254.73 578.258 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.53668e-15 -106.752 106.752 6.53668e-15 254.73 578.258 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
1609.15 585.452 mo
1571.14 585.452 li
1566 585.452 1561.83 581.28 1561.83 576.134 cv
1561.83 481.53 li
1561.83 476.384 1566 472.212 1571.14 472.212 cv
1609.15 472.212 li
1614.3 472.212 1618.47 476.384 1618.47 481.53 cv
1618.47 576.134 li
1618.47 581.28 1614.3 585.452 1609.15 585.452 cv
1566.35 585.444 mo
1560.2 585.23 1555.29 580.181 1555.29 573.983 cv
1555.29 468.992 li
1555.29 462.657 1560.42 457.523 1566.76 457.523 cv
1613.54 457.523 li
1613.54 457.523 li
1566.76 457.523 li
1560.42 457.523 1555.29 462.657 1555.29 468.992 cv
1555.29 573.983 li
1555.29 580.181 1560.2 585.23 1566.35 585.444 cv
level3{
gsave
clp
[6.53668e-15 -106.752 106.752 6.53668e-15 1590.15 578.258 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.53668e-15 -106.752 106.752 6.53668e-15 1590.15 578.258 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
1613.54 585.452 mo
1609.15 585.452 li
1609.15 585.452 li
1613.54 585.452 li
1619.87 585.452 1625.01 580.317 1625.01 573.983 cv
1625.01 468.992 li
1625.01 468.992 li
1625.01 573.983 li
1625.01 580.317 1619.87 585.452 1613.54 585.452 cv
1624.81 466.856 mo
1623.81 461.542 1619.14 457.523 1613.54 457.523 cv
1613.54 457.523 li
1619.14 457.523 1623.81 461.542 1624.81 466.856 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
1613.54 585.452 mo
1609.15 585.452 li
1614.3 585.452 1618.47 581.28 1618.47 576.134 cv
1618.47 481.53 li
1618.47 476.384 1614.3 472.212 1609.15 472.212 cv
1571.14 472.212 li
1566 472.212 1561.83 476.384 1561.83 481.53 cv
1561.83 576.134 li
1561.83 581.28 1566 585.452 1571.14 585.452 cv
1566.76 585.452 li
1566.62 585.452 1566.48 585.449 1566.35 585.444 cv
1560.2 585.23 1555.29 580.181 1555.29 573.983 cv
1555.29 468.992 li
1555.29 462.657 1560.42 457.523 1566.76 457.523 cv
1613.54 457.523 li
1619.14 457.523 1623.81 461.542 1624.81 466.856 cv
1624.94 467.548 1625.01 468.262 1625.01 468.992 cv
1625.01 573.983 li
1625.01 580.317 1619.87 585.452 1613.54 585.452 cv
level3{
gsave
clp
[6.53668e-15 -106.752 106.752 6.53668e-15 1590.15 578.258 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.53668e-15 -106.752 106.752 6.53668e-15 1590.15 578.258 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
1422.93 148.447 mo
1405.17 148.447 li
1422.93 148.447 li
1424.57 148.447 1426.06 147.779 1427.14 146.701 cv
1426.06 147.78 1424.57 148.447 1422.93 148.447 cv
.980392 .901961 .862745 rgb
f
1405.17 148.447 mo
1386.02 148.447 li
1382.73 148.447 1380.06 145.778 1380.06 142.487 cv
1380.06 142.487 li
1380.06 145.778 1382.73 148.447 1386.02 148.447 cv
1405.17 148.447 li
1342.58 148.447 mo
1305.68 148.447 li
1302.39 148.447 1299.72 145.778 1299.72 142.487 cv
1299.72 137.102 li
1299.72 133.811 1297.05 131.143 1293.76 131.143 cv
1283.96 131.143 li
1280.39 131.143 li
1280.43 131.143 li
1283.96 131.143 li
1293.76 131.143 li
1297.05 131.143 1299.72 133.811 1299.72 137.102 cv
1299.72 142.487 li
1299.72 145.778 1302.39 148.447 1305.68 148.447 cv
1342.58 148.447 li
1345.88 148.447 1348.54 145.778 1348.54 142.487 cv
1348.54 137.102 li
1348.54 133.811 1351.21 131.143 1354.5 131.143 cv
1374.1 131.143 li
1377.4 131.143 1380.06 133.811 1380.06 137.102 cv
1380.06 137.102 li
1380.06 133.811 1377.4 131.143 1374.1 131.143 cv
1354.5 131.143 li
1351.21 131.143 1348.54 133.811 1348.54 137.102 cv
1348.54 142.487 li
1348.54 145.778 1345.88 148.447 1342.58 148.447 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/10 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/V
C[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~os&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<
Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Y^H,JI.a^korri:Y^H)II.XXjoWNZ7YC#oFHh=LgoWEQ5Y']cB
Hh4@co;m90XEsH<HLe+^nu@!+Wd+'6GO_\Wn>UU#W-.R+FRQ&Jm\FsmUN5aqEU9B<m%A:_So3h`D<[L)
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/10 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kiq?rl0@R!lKdd%lg*m&lg4!)m-X3-mHs<.mI'E1mdBN2mdKW5n*f`6n*oi9nF5r:nF?&=naZ/>naZ/>
naZ/>naZ2@o()ABo()ABo()ABo()DDoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMVHo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
<~R@9S6S"-">SXuFFT:hjMTV.sNTV8'RU8+KYUSO]]UnsoaV5C,fVl6PmW2ZbqWMukrWMukrWMukrWN)tu
WiE)!WiE,#X/i;%X/i>'XK8M)XK8P+Xf\_-Xf\b/Y-+q1Y-+q1Y-+q1Y-+t3YHP.5YHP.5YHP.5YHP.5
YHP.5YHP.5YHP.6Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
~>
<~C27U$Ci+$+D/O6/DJsH3DfBZ7E,fl;EH6)@F)uDDF)uDDF*)MGFEM_KF`qqOG'8%PG'A.SGBe@WG^+IX
G^+LZH$O[\H$O[\H$O[\H$O^^H?sm`H?sm`H?sm`H?sm`H?sm`H?spbH[C*dH[C*dH[C*dH[C*dH[C*d
H[C*dH[C*dH[C*eI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /10 /Gradient get_res exec grestore
}if
np
1422.93 148.447 mo
1405.17 148.447 li
1386.02 148.447 li
1382.73 148.447 1380.06 145.778 1380.06 142.487 cv
1380.06 137.102 li
1380.06 137.102 li
1380.06 133.811 1377.4 131.143 1374.1 131.143 cv
1354.5 131.143 li
1351.21 131.143 1348.54 133.811 1348.54 137.102 cv
1348.54 142.487 li
1348.54 145.778 1345.88 148.447 1342.58 148.447 cv
1305.68 148.447 li
1302.39 148.447 1299.72 145.778 1299.72 142.487 cv
1299.72 137.102 li
1299.72 133.811 1297.05 131.143 1293.76 131.143 cv
1283.96 131.143 li
1280.43 131.143 li
1338.53 129.791 li
1342.91 129.689 1346.26 125.857 1345.78 121.504 cv
1345.14 115.714 li
1344.72 111.965 1341.57 109.115 1337.8 109.074 cv
480.409 99.6245 li
496.294 99.6245 li
545.117 99.6245 li
560.876 99.6245 li
576.636 99.6245 li
625.459 99.6245 li
656.977 99.6245 li
662.942 99.6245 li
699.841 99.6245 li
705.805 99.6245 li
737.323 99.6245 li
786.147 99.6245 li
801.907 99.6245 li
817.665 99.6245 li
866.489 99.6245 li
898.008 99.6245 li
903.967 99.6245 li
940.87 99.6245 li
946.83 99.6245 li
978.348 99.6245 li
1027.17 99.6245 li
1042.93 99.6245 li
1058.69 99.6245 li
1107.51 99.6245 li
1139.03 99.6245 li
1145 99.6245 li
1181.9 99.6245 li
1187.86 99.6245 li
1219.38 99.6245 li
1268.2 99.6245 li
1283.96 99.6245 li
1299.72 99.6245 li
1348.54 99.6245 li
1380.06 99.6245 li
1422.93 99.6245 li
1426.22 99.6245 1428.89 102.293 1428.89 105.584 cv
1428.89 142.488 li
1428.89 144.133 1428.22 145.623 1427.14 146.701 cv
1426.06 147.779 1424.57 148.447 1422.93 148.447 cv
level3{
gsave
clp
[1012.94 0 0 1012.94 415.951 124.036 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1012.94 0 0 1012.94 415.951 124.036 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
607.938 550.032 mo
605.516 550.032 602.734 548.787 599.877 545.572 cv
590.784 535.345 608.587 535.345 608.587 535.345 cv
620.323 535.345 616.257 550.033 607.938 550.032 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1307.32 242.193 mo
1305.85 242.193 1304.07 241.752 1302.03 240.664 cv
1289.88 234.205 1306.5 234.205 1306.5 234.205 cv
1314.26 234.205 1313.57 242.193 1307.32 242.193 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1192.22 318.448 mo
1190.56 318.448 1188.95 317.8 1187.64 316.214 cv
1179.62 306.5 1190.39 305.675 1194.29 305.675 cv
1195.08 305.675 1195.59 305.709 1195.59 305.709 cv
1206.92 306.935 1199.2 318.448 1192.22 318.448 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1791.32 281.244 mo
1789.66 281.243 1788.04 280.596 1786.73 279.009 cv
1778.72 269.298 1789.48 268.472 1793.38 268.472 cv
1794.18 268.472 1794.69 268.507 1794.69 268.507 cv
1806.02 269.731 1798.3 281.244 1791.32 281.244 cv
level3{
gsave
clp
[-360.766 4.4181e-14 -4.41811e-14 -360.766 1802.86 288.566 ]ct
/11 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~qS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm
`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm_iX`4OSZkVqSSEk_iX]3OSQeUq8/6h_N4N0O86YRq8&*e_2e<+
NqgDLpqMg`^Q&!%NVC/GpUuO[]o2TsMY=]?ot-(R\qp!gL\/'2o<sDF[=n+WKCQ:"nZdZ7YCQ)DIdX7a
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-360.766 4.4181e-14 -4.41811e-14 -360.766 1802.86 288.566 ]ct
clp
/11 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j]q"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXYp\4FVp\4FVp\4FVp\4FUp@e4R
p@e4Rp@e4Rp@e4Rp%A"Np%A"No^qeJo^qeJoCMSFoCMSFo()ABo()ABnaZ/>nF5r:nF5r:n*f`6mdBN2
~>
<~_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'@._SX1,_SX1,
_SX1,_SX1,_SX1,_SX1,_SX1+_83t(_83t(_83t(_83t'^qdb$^qdb#^V@Ou^V@Ot^:q=q^:q=p]tM+m
]tM+m]Y(ni]Y(ni]=Y\e]=Y\e]"5Ja\[f5[\$riU[^NWQ[C*EM['[0GZEgdAZEga?Yct=7Y-+n/XK8J'
~>
<~OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>NaO,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?^NfK-[NfK-[NfK-ZNK&pWNK&pWNK&pVN/W^SN/W^SN/W^SN/W^R
Mi3LOMi3LOMMd:KM2@(GM2@(GLkpkCLPLY?L5(G;L5(G;KnY25K7ef/JqAT+JUrB'J:N0#It)orI=6Kj
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /11 /Gradient get_res exec grestore
}if
np
1404.35 778.498 mo
1402.69 778.498 1401.08 777.85 1399.77 776.264 cv
1391.75 766.552 1402.52 765.726 1406.41 765.726 cv
1407.21 765.726 1407.72 765.761 1407.72 765.761 cv
1419.05 766.986 1411.33 778.498 1404.35 778.498 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
1396.05 62.5623 mo
1394.39 62.5622 1392.78 61.9145 1391.47 60.3283 cv
1383.45 50.6153 1394.22 49.7896 1398.11 49.7896 cv
1398.91 49.7896 1399.42 49.8243 1399.42 49.8243 cv
1410.75 51.0494 1403.03 62.5624 1396.05 62.5623 cv
level3{
gsave
clp
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
575.758 298.986 mo
574.101 298.986 572.486 298.339 571.177 296.752 cv
563.161 287.04 573.927 286.214 577.822 286.214 cv
578.62 286.214 579.131 286.249 579.131 286.249 cv
590.46 287.474 582.74 298.986 575.758 298.986 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
280.462 737.629 mo
278.806 737.629 277.191 736.981 275.881 735.395 cv
267.863 725.681 278.637 724.856 282.53 724.856 cv
283.327 724.856 283.836 724.891 283.836 724.891 cv
295.164 726.116 287.445 737.629 280.462 737.629 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1497.83 563.938 mo
1497 563.938 1496.2 563.614 1495.54 562.822 cv
1491.53 557.965 1496.92 557.552 1498.86 557.552 cv
1499.26 557.552 1499.52 557.57 1499.52 557.57 cv
1505.18 558.181 1501.32 563.939 1497.83 563.938 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
516.095 641.511 mo
515.267 641.51 514.46 641.187 513.805 640.394 cv
509.797 635.537 515.182 635.125 517.129 635.125 cv
517.528 635.125 517.783 635.142 517.783 635.142 cv
523.447 635.754 519.587 641.511 516.095 641.511 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
114.738 432.839 mo
112.217 432.839 109.76 431.854 107.767 429.44 cv
95.5688 414.66 111.952 413.403 117.881 413.403 cv
119.097 413.403 119.873 413.455 119.873 413.455 cv
137.112 415.318 125.365 432.839 114.738 432.839 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1234 65.8945 mo
1231.48 65.8939 1229.02 64.9083 1227.03 62.4952 cv
1214.83 47.7142 1231.22 46.4577 1237.14 46.4577 cv
1238.36 46.4577 1239.14 46.5106 1239.14 46.5106 cv
1256.38 48.3735 1244.63 65.8968 1234 65.8945 cv
level3{
gsave
clp
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
541.758 625.607 mo
539.239 625.606 536.78 624.62 534.788 622.207 cv
522.588 607.425 538.976 606.169 544.902 606.169 cv
546.116 606.169 546.892 606.222 546.892 606.222 cv
564.134 608.086 552.385 625.61 541.758 625.607 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1283.73 453.359 mo
1280.93 453.358 1277.95 452.418 1275.11 450.124 cv
1259.21 437.246 1283.93 434.174 1283.93 434.174 cv
1304.18 436.364 1295.62 453.361 1283.73 453.359 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1478.43 581.502 mo
1476.45 581.502 1474.33 580.836 1472.33 579.211 cv
1461.06 570.093 1478.57 567.919 1478.57 567.919 cv
1492.9 569.47 1486.84 581.502 1478.43 581.502 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1257.77 680.57 mo
1255.79 680.569 1253.68 679.904 1251.67 678.28 cv
1240.41 669.162 1257.91 666.987 1257.91 666.987 cv
1272.25 668.537 1266.19 680.571 1257.77 680.57 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
1668.66 412.898 mo
1666.68 412.898 1664.57 412.232 1662.56 410.609 cv
1651.3 401.491 1668.8 399.316 1668.8 399.316 cv
1683.14 400.866 1677.08 412.9 1668.66 412.898 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
133.132 444.038 mo
131.734 444.037 130.243 443.567 128.827 442.42 cv
120.872 435.982 133.232 434.445 133.232 434.445 cv
143.358 435.541 139.078 444.039 133.132 444.038 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
427.327 756.405 mo
424.807 756.405 422.348 755.419 420.356 753.005 cv
408.155 738.224 424.547 736.968 430.473 736.968 cv
431.686 736.968 432.462 737.021 432.462 737.021 cv
449.701 738.885 437.954 756.406 427.327 756.405 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
445.722 767.604 mo
444.324 767.604 442.832 767.133 441.415 765.986 cv
433.46 759.547 445.821 758.012 445.821 758.012 cv
455.947 759.106 451.668 767.605 445.722 767.604 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1601.52 750.68 mo
1599 750.68 1596.54 749.694 1594.55 747.281 cv
1582.35 732.499 1598.74 731.242 1604.67 731.242 cv
1605.88 731.242 1606.66 731.295 1606.66 731.295 cv
1623.9 733.159 1612.15 750.683 1601.52 750.68 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1619.92 761.878 mo
1618.52 761.878 1617.03 761.408 1615.61 760.261 cv
1607.66 753.822 1620.02 752.287 1620.02 752.287 cv
1630.14 753.381 1625.86 761.879 1619.92 761.878 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1210.68 91.8462 mo
1209.28 91.846 1207.79 91.376 1206.37 90.2294 cv
1198.42 83.7895 1210.78 82.2544 1210.78 82.2544 cv
1220.9 83.3485 1216.62 91.8468 1210.68 91.8462 cv
level3{
gsave
clp
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
1470.38 447.501 mo
1469.27 447.501 1468.02 447.069 1466.7 446.005 cv
1458.75 439.565 1471.25 439.565 1471.25 439.565 cv
1477.01 440.476 1474.87 447.501 1470.38 447.501 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
542.762 276.443 mo
541.65 276.443 540.394 276.012 539.079 274.948 cv
531.124 268.508 543.624 268.508 543.624 268.508 cv
549.392 269.418 547.246 276.444 542.762 276.443 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1325.95 228.125 mo
1324.84 228.125 1323.58 227.693 1322.27 226.629 cv
1319.19 224.141 1319.18 222.614 1320.31 221.677 cv
1327.68 227.748 li
1327.16 227.987 1326.58 228.125 1325.95 228.125 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1327.68 227.748 mo
1320.31 221.677 li
1322.11 220.189 1326.81 220.189 1326.81 220.189 cv
1331.78 220.972 1330.88 226.279 1327.68 227.748 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
1606.31 316.677 mo
1604.84 316.677 1603.07 316.236 1601.02 315.148 cv
1588.88 308.69 1605.5 308.69 1605.5 308.69 cv
1613.25 308.69 1612.57 316.677 1606.31 316.677 cv
level3{
gsave
clp
[-360.766 4.4181e-14 -4.41811e-14 -360.766 1802.86 288.566 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-360.766 4.4181e-14 -4.41811e-14 -360.766 1802.86 288.566 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
1624.95 302.61 mo
1623.83 302.61 1622.58 302.178 1621.26 301.114 cv
1613.31 294.674 1625.81 294.674 1625.81 294.674 cv
1631.58 295.585 1629.43 302.61 1624.95 302.61 cv
level3{
gsave
clp
[-360.766 4.4181e-14 -4.41811e-14 -360.766 1802.86 288.566 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-360.766 4.4181e-14 -4.41811e-14 -360.766 1802.86 288.566 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
887.616 93.4076 mo
886.147 93.4075 884.371 92.9668 882.325 91.8786 cv
870.182 85.4207 886.801 85.4207 886.801 85.4207 cv
894.556 85.4207 893.871 93.4081 887.616 93.4076 cv
level3{
gsave
clp
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
906.251 79.3405 mo
905.139 79.3405 903.883 78.9086 902.568 77.8448 cv
894.614 71.4049 907.115 71.4049 907.115 71.4049 cv
912.881 72.3157 910.736 79.3406 906.251 79.3405 cv
level3{
gsave
clp
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
1335.62 480.871 mo
1334.5 480.871 1333.25 480.439 1331.93 479.375 cv
1323.98 472.936 1336.48 472.936 1336.48 472.936 cv
1342.25 473.846 1340.1 480.871 1335.62 480.871 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1706.46 594.074 mo
1703.66 594.073 1700.68 593.133 1697.85 590.839 cv
1681.94 577.96 1706.66 574.889 1706.66 574.889 cv
1726.91 577.079 1718.35 594.076 1706.46 594.074 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1758.35 621.586 mo
1757.24 621.585 1755.98 621.153 1754.66 620.089 cv
1746.71 613.65 1759.21 613.65 1759.21 613.65 cv
1764.98 614.561 1762.83 621.586 1758.35 621.586 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 1624.97 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1236.25 720.909 mo
1235.14 720.909 1233.88 720.477 1232.57 719.413 cv
1224.61 712.973 1237.11 712.973 1237.11 712.973 cv
1242.88 713.885 1240.73 720.91 1236.25 720.909 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
1465.04 289.901 mo
1463.93 289.9 1462.67 289.469 1461.36 288.405 cv
1453.4 281.965 1465.9 281.965 1465.9 281.965 cv
1471.67 282.876 1469.52 289.901 1465.04 289.901 cv
level3{
gsave
clp
[-360.766 4.4181e-14 -4.41811e-14 -360.766 1802.86 288.566 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-360.766 4.4181e-14 -4.41811e-14 -360.766 1802.86 288.566 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
429.572 50.4254 mo
428.46 50.4254 427.204 49.9936 425.889 48.9297 cv
417.935 42.4898 430.434 42.4898 430.434 42.4898 cv
436.202 43.4002 434.056 50.4254 429.572 50.4254 cv
level3{
gsave
clp
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
513.306 435.828 mo
512.058 435.828 511.231 435.57 511.397 434.906 cv
511.911 432.848 514.174 432.519 515.572 432.519 cv
516.231 432.519 516.699 432.592 516.699 432.592 cv
516.795 432.592 516.889 432.591 516.982 432.591 cv
522.19 432.591 522.376 433.401 520.707 434.21 cv
519.038 435.019 515.514 435.828 513.306 435.828 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1190.66 226.539 mo
1189.72 226.539 1189.11 226.167 1189.23 225.213 cv
1189.62 222.25 1191.3 221.775 1192.35 221.775 cv
1192.84 221.775 1193.19 221.881 1193.19 221.881 cv
1193.26 221.88 1193.33 221.88 1193.4 221.88 cv
1197.29 221.88 1197.43 223.045 1196.18 224.209 cv
1194.93 225.374 1192.3 226.539 1190.66 226.539 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
594.898 274.857 mo
593.967 274.857 593.35 274.486 593.474 273.532 cv
593.858 270.568 595.547 270.094 596.591 270.094 cv
597.083 270.094 597.432 270.199 597.432 270.199 cv
597.503 270.199 597.572 270.198 597.641 270.198 cv
601.529 270.198 601.668 271.363 600.422 272.528 cv
599.177 273.693 596.546 274.858 594.898 274.857 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
195.202 303.209 mo
194.404 303.209 193.894 303.174 193.894 303.174 cv
182.566 301.949 190.286 290.436 197.27 290.436 cv
198.925 290.436 200.541 291.084 201.85 292.669 cv
209.867 302.383 199.097 303.209 195.202 303.209 cv
level3{
gsave
clp
[439.663 0 0 439.663 0 288.566 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[439.663 0 0 439.663 0 288.566 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
229.401 320.916 mo
223.635 320.004 225.779 312.98 230.264 312.98 cv
231.376 312.98 232.633 313.412 233.947 314.476 cv
241.902 320.916 229.401 320.916 229.401 320.916 cv
level3{
gsave
clp
[439.663 0 0 439.663 0 288.566 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[439.663 0 0 439.663 0 288.566 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
176.436 319.33 mo
175.944 319.33 175.595 319.224 175.595 319.224 cv
175.525 319.225 175.456 319.225 175.388 319.225 cv
171.496 319.225 171.357 318.06 172.602 316.895 cv
173.848 315.73 176.478 314.565 178.126 314.565 cv
179.057 314.565 179.675 314.938 179.552 315.892 cv
179.168 318.855 177.479 319.33 176.436 319.33 cv
level3{
gsave
clp
[439.663 0 0 439.663 0 288.566 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[439.663 0 0 439.663 0 288.566 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
169.514 774.495 mo
168.583 774.495 167.966 774.123 168.089 773.169 cv
168.473 770.206 170.161 769.73 171.205 769.73 cv
171.698 769.73 172.047 769.836 172.047 769.836 cv
172.118 769.836 172.187 769.835 172.256 769.835 cv
176.145 769.835 176.284 771 175.038 772.165 cv
173.792 773.33 171.162 774.495 169.514 774.495 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
649.984 404.875 mo
647.378 404.875 644.901 403.681 643.543 400.437 cv
641.61 395.82 650.006 395.669 651.117 395.669 cv
651.195 395.669 651.237 395.669 651.237 395.669 cv
652.01 395.613 652.722 395.586 653.374 395.586 cv
659.455 395.586 660.426 397.909 658.967 400.23 cv
657.508 402.553 653.62 404.875 649.984 404.875 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
764.463 265.678 mo
761.856 265.678 759.379 263.802 758.021 258.705 cv
756.088 251.455 764.478 251.216 765.594 251.216 cv
765.673 251.216 765.715 251.217 765.715 251.217 cv
766.489 251.129 767.2 251.087 767.853 251.087 cv
773.933 251.087 774.904 254.734 773.445 258.382 cv
771.986 262.03 768.098 265.678 764.463 265.678 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
245.15 420.698 mo
242.543 420.698 240.066 418.822 238.707 413.726 cv
236.775 406.474 245.169 406.235 246.282 406.235 cv
246.361 406.235 246.403 406.237 246.403 406.237 cv
247.177 406.148 247.888 406.106 248.54 406.106 cv
254.62 406.106 255.591 409.754 254.132 413.402 cv
252.673 417.05 248.785 420.698 245.15 420.698 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
1071.32 63.4713 mo
1068.72 63.4712 1066.24 61.5954 1064.88 56.4992 cv
1062.95 49.2488 1071.34 49.0098 1072.46 49.0098 cv
1072.53 49.0098 1072.58 49.011 1072.58 49.011 cv
1073.35 48.9223 1074.06 48.8803 1074.72 48.8803 cv
1080.79 48.8803 1081.76 52.528 1080.31 56.1759 cv
1078.85 59.8237 1074.96 63.4715 1071.32 63.4713 cv
level3{
gsave
clp
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
621.904 197.064 mo
619.483 197.064 616.7 195.819 613.843 192.604 cv
604.752 182.377 622.555 182.377 622.555 182.377 cv
634.29 182.377 630.223 197.065 621.904 197.064 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
49.4265 289.309 mo
47.0049 289.308 44.222 288.063 41.3648 284.849 cv
32.2726 274.622 50.0755 274.622 50.0755 274.622 cv
61.8116 274.622 57.7454 289.31 49.4265 289.309 cv
level3{
gsave
clp
[439.663 0 0 439.663 0 288.566 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[439.663 0 0 439.663 0 288.566 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
378.418 313.019 mo
375.997 313.019 373.214 311.774 370.357 308.559 cv
361.265 298.331 379.069 298.331 379.069 298.331 cv
390.804 298.331 386.737 313.02 378.418 313.019 cv
level3{
gsave
clp
[439.663 0 0 439.663 0 288.566 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[439.663 0 0 439.663 0 288.566 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
995.239 175.142 mo
993.771 175.142 991.995 174.701 989.949 173.613 cv
977.805 167.154 994.426 167.154 994.426 167.154 cv
1002.18 167.154 1001.49 175.142 995.239 175.142 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
802.515 195.115 mo
800.859 195.114 799.244 194.466 797.935 192.881 cv
789.919 183.168 800.688 182.342 804.583 182.342 cv
805.381 182.342 805.89 182.377 805.89 182.377 cv
817.219 183.601 809.499 195.116 802.515 195.115 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
397.593 557.893 mo
396.662 557.893 396.045 557.521 396.168 556.567 cv
396.552 553.604 398.24 553.129 399.283 553.129 cv
399.776 553.129 400.126 553.235 400.126 553.235 cv
400.197 553.234 400.267 553.234 400.336 553.234 cv
404.225 553.234 404.362 554.398 403.117 555.563 cv
401.871 556.728 399.24 557.893 397.593 557.893 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
329.888 516.205 mo
327.281 516.205 324.804 514.329 323.445 509.233 cv
321.513 501.983 329.901 501.743 331.018 501.743 cv
331.097 501.743 331.14 501.745 331.14 501.745 cv
331.914 501.656 332.625 501.614 333.278 501.614 cv
339.358 501.614 340.328 505.262 338.87 508.91 cv
337.411 512.557 333.523 516.205 329.888 516.205 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
367.94 445.642 mo
366.284 445.642 364.668 444.994 363.359 443.408 cv
355.343 433.696 366.111 432.87 370.006 432.87 cv
370.805 432.87 371.314 432.905 371.314 432.905 cv
382.643 434.129 374.923 445.644 367.94 445.642 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
82.4603 730.23 mo
79.854 730.229 77.3766 728.354 76.0187 723.258 cv
74.0854 716.006 82.4792 715.768 83.5922 715.768 cv
83.6706 715.768 83.7129 715.769 83.7129 715.769 cv
84.4865 715.68 85.198 715.638 85.8506 715.638 cv
91.9314 715.638 92.9015 719.286 91.4426 722.934 cv
89.9836 726.582 86.0959 730.231 82.4603 730.23 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
120.513 614.856 mo
118.857 614.856 117.242 614.209 115.932 612.622 cv
107.917 602.911 118.682 602.085 122.578 602.085 cv
123.377 602.085 123.888 602.12 123.888 602.12 cv
135.216 603.344 127.496 614.857 120.513 614.856 cv
level3{
gsave
clp
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.05651e-14 -335.854 335.854 2.05651e-14 219.871 675.228 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
712.642 199.082 mo
711.53 199.082 710.275 198.65 708.96 197.586 cv
701.005 191.147 713.505 191.147 713.505 191.147 cv
719.273 192.057 717.127 199.083 712.642 199.082 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
1013.87 161.075 mo
1012.76 161.075 1011.51 160.643 1010.19 159.579 cv
1002.24 153.139 1014.74 153.139 1014.74 153.139 cv
1020.51 154.05 1018.36 161.075 1013.87 161.075 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
1059.62 190.278 mo
1058.51 190.278 1057.25 189.846 1055.94 188.782 cv
1047.98 182.342 1060.48 182.342 1060.48 182.342 cv
1066.25 183.253 1064.1 190.278 1059.62 190.278 cv
level3{
gsave
clp
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.28731e-14 700.171 -700.171 4.28731e-14 922.419 175.224 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
733.621 87.05 mo
732.707 87.0499 732.101 86.7915 732.223 86.1287 cv
732.6 84.0704 734.258 83.7405 735.283 83.7405 cv
735.766 83.7405 736.108 83.814 736.108 83.814 cv
736.178 83.8135 736.245 83.8133 736.313 83.8133 cv
740.13 83.8133 740.267 84.6221 739.044 85.4314 cv
737.821 86.2408 735.239 87.0501 733.621 87.05 cv
level3{
gsave
clp
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
591.64 91.694 mo
589.731 91.6939 587.916 90.4998 586.921 87.2556 cv
585.505 82.6409 591.652 82.4887 592.469 82.4887 cv
592.527 82.4887 592.558 82.4895 592.558 82.4895 cv
593.125 82.433 593.647 82.4063 594.125 82.4063 cv
598.578 82.4063 599.289 84.7284 598.22 87.0501 cv
597.151 89.3721 594.304 91.6942 591.64 91.694 cv
level3{
gsave
clp
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1083.27 0 0 1083.27 380.785 49.8122 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 
/10 /11 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.2.1
%%For: (Lenovo) ()
%%Title: (2212.m02.i012.n041_e19.eps)
%%CreationDate: 2/17/2023 6:09 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3X+_oCqkQ>Z\Xl%"UYL7]S.488M3k645ZA#[;h3>?m>T]_I!MB4b.e,g1l]fp(7TKO`$&/Mj`>^R8pp1\l?p<[u]RoC[U"
%V+'4eV+&j@&lU>ad^2OEbfm^P+1SFt1+d9O1.Wp.D5JiQJn\jL6STi\c)R)TnC=pmYu>d\mJUY1kdFZKHDTJ7/PCfT:/0G^0&[a>
%qVYC(oj:V2iY8TTS_TN[[Sa3;)tdgnBhLork!\m$^O4gg[ibeNbj"9C<Y\/\DS$@cK=ir7be[n_((!t>b^DNk0?^J@dqP07[4h-=
%1q.%@=Wb3aa85on>F'dCdN!W`Xgo6CVpb:]PXI"rfUeE`MZmguJWpq"bCG0]Iq8TLraJo!#bFJ>s+t:BTCB02WKQD/ZbO80ALLjd
%"!j\[f8BS0lRDl`F1d[W_'?GCW&SX\b>?a6XKJM1[&E85Q8-WZ+9aEM4?UH\<`[f];d)"C"&)'pP,YKb9iG%g$ADFVGD,29T4RcK
%ZLljn8oE+EE3@kX/H5`B1/$*%Q>2hN-#6X`Q8LnG6)W^#O)*i8E7Nl'gQU)]^#W5P7?Q%g`Slt-9]3\a'LtpidVXUHf..jUdkVUP
%I(.k0DEGU=<(c9hZIa&28+dO%k=(j@,='!i<O9"]I$3QlTe!!SJY5_AZ=Pg'/<`B>9I1;^$Gd]:^RuhcKt.^t]@ST@Q>=[%(?g=C
%0OLM4S)og[B2apDmh]n@eft.\i1FA!?pqWoeq1=ajfG[RHA7sG3Q.ZDCSaA2MSa)dT6]W62<ZZXqPF4opk+&$=`bR2><(SX[gk'U
%CRFXeIs/NoXL%jt#JSu0eiSkng-ttf5BFA5rS3Z5gg[nP"EBd(^%:^^a1O7LH`_D>FGc.br#MZV3p"BZJ./-B9ipo"Km3?b_>f:9
%+1a:2(Qj8=?*F3K/+j+gfLn.sNr'sO"uN%O1O*3bM8IL6,TpG'<><Tc=d.E0A`-[Ode]h$r8k;D=52j.ekkI.S=7oc'sPs;iID7@
%DIGl@rI1+r$VmNr^2,iiX)_([2`n,ll)7plK\7`#*u75Yj'Uc7r<idP>[<S0@"+oh::]bLEpD0Z%W'SPQ.&"(89oF^=mX].]qgAc
%Jr$f8N0a4`O:A^Zd_`JV8qJ_b;^mJjcC(I`U0iW9puFM=MT;fU>:[+um(GVP^=YS3g/.JA>s5Amb,q\B/tqVnc$$X"E=[Q.g?nrN
%kZMn>X2YSe>+T>3.Wek]H52,OgA/H3[eA$rb*IF@gJYDbIgtd=@Bq*3dcWWp`_p\I;W(@8=1MpVTBAXkoJ7>pkfC-@puieob1Gju
%[FoXoAJk3.V7GVic)JRAFQnu79i3(3A3(.4MNfbWqWH>&J"An$8%,+CVQBAZK1GSVX;^-6nc.H%`"1pR_k0I!XR_fnVPZ]a2q0^m
%T]T3=;Q?\t*)dSs(fY/NSoo;/i$lI*o,epC>khF;oB7:dH+56#M5cuE.2s3q_8sN()5_sLi$uO;^nVglOPsXE#(P5"ZPIlp_=Qk4
%nThX"f0nbdfhaUa-j+4j@;]3:f^Rt[ahq'HT/HXOO$*e6OQ-e"!k.1A$Sq3W.i8Gr?l*j;I%aA=LVdVI(e=fU\#-uoXZ,/mrPsdX
%G47Wj7slB?&N-h)OL\uh[V8sSD<L9fI(^#+Ol9_R&(I,h+.YV#J'?PT"j`rn`91PM^F#C+F-^b8SqM?Sl';hK<mH;CTL[,/He-VV
%gYu>iZ4mcESrNeT``EbhT&'=h4CDGT/$#*F&3UC,?<8klVOO#kE+EhO^`K:;Qh'\Ih$&d-rsIZ"DT?QjKetR&>34@hr<ho?n2<r.
%@C,SYS!EQ*T4;9j'Opq@CP\;(Z]QTe905tgRp$["jHAjGjG9*2/K@qTY]ru(itbGp>A/&XQim5q#$+"jHYE[A\Z(9+:Y]i-CBce>
%gD3mPY^'pXciWLf)Ob%Md5i&Y0$.KSF_\82p`XehEl@t_<\CV&BE?KnU.%JnBQ>W&K=t4d[bT*D7%U@-nnf9*LmAMGKU**"ScZ>2
%/0Io**UI2Um%Os_d/Z8-']f1<:m7AOR)frM>MPZ5Nh1+Zm$u5kLS4kSG-"%5$=FZeY`C-`8I]c8m]ouFg[4#:lp'XMmFgu0cn_H4
%ZC_!-s(nM_/_N_s]c1+NqN)\<rpQBWaX2La[,=lS56_%*/`jb!iRqV3&7FoC;t(qY/=d#f%[[;b/,o5a4+-Vs.I[RhdY>1?n8gs0
%\cRqmCV$[$jE)=t]YJC4#.Hn0!BD&VfU[/KR2SA-kr`'j0PuoH&O&b[I_<G/*t'.=[/'alGL"FM;h0@5juOVB)?)@.l?*J.jeI;J
%@F!$5ZQ;PZWBMRt-1PF)OhJdoZJNnGJ&%;NkMaObKA*H^lde,(C#'=k0VrF,Ha$;#:Eb+uT,`?rQm(p[a"ZfBn7[))YN/hmL*9qf
%\!AO0Z5g?>H4K]MekcQ4=KliL25^**E!%<?Lck"anV3#)IsArC.CUo,6(K_q/MnHl5sZ>9b;uR2^j]sgbnWlIYgt.[ptWAoB^MIJ
%0\Q#5/-%AV#BXP-<YV.&#MT)O\bmi9M=rkcj@M0)Y;T\<Psh+%oU&?Sj;nhi4nM5R+3f<-i.2kjK``jEj:<.;46"ZMrJ0B!*uf6B
%M"m)-"i/HZIlL?Uq*0KrVZ1UP;f2Mi:8&psC?uP0>PB5WIn]iDr.,s20lQ75.<)0nh6M1lGJlL?IHSgqbA?A]3Sr'ir)j-j('cGr
%%>P_hcE9OT\%!;@PE6%@YR^Z9>[Z>5eI05RR>DFZX*H4C!kKC9(,7[ip_c,hDhnIYjI%ICJ0>,&pP)bJ$.]8%!9efD1\_')!k/9Q
%&ql%%,65\?Gh.;p=lpi)je*7d).5Pa?dPNR9%Wa7I31%c+NNEH*d\IbS,Qpf-]0K<1_F1&6kP4u!(e;n5ZQ=$c=!S_0K_.qCs6KO
%Q=nQ,[a%2E4pJ1%@!;;^j:O#%k!,jV^]D,f%PeQPF"iVn*$=6_JHPL+="]^=9#K^4h;BoI`[-A&@jjp5.3IX%I$k5WO/GF_d)-*\
%TLD$!4;N;)i%[1gBAJ'M#4lT'>/F+oTmb\9(]o853!HoNRLE^``i:qUFj;<eAsMDIP=D^J+)sXMrZ$u$H1@jri%#c:1S?<?:m\2;
%8?aaD1:eP'UQJ(>+3<%mHH^lOOQ-Opf(n?_'t]K]&(*rC3"d88BBXkT[eKqVdSt*\)%Tsrl</lIj+ddQ6j.*+NL/0YPUaI/)2Ad]
%W+"`)UBNNo@4)Ft/FsAV*tQc$:mc-.)?p+pZ'#WQ[Z,@A3Z6&fbL7DB)9A+VURNs/n6qCr\nUbe&$tCER'P#d_"]<nR'FZH$%i(K
%Q3FHf:E"<'c?YcX3,t[XakiA>-^u(:8fQsCQbq(s1ApfoB7%*oEq-KCFP)<V/u?+.X-FS7(\-*QVp]SJV.YlJf5*L_s8K,8Oed5%
%Y*>AmNMi/UE0!')o1m9,(#b_%r"(mX`(X@g!pC3kZMhDoQaKjHij?DJm&K2Q)iEjAq2HlYFBb;.HVcSb)cW"8jg62[o1n%WnV$C+
%:u&C1k4IcfN>gnYD+mY:0@9tQBsaYdWU:MUc;-!-9Wb!W`nOIn+1BA[i`-mkC[mp6H-Q-<(+D&r33Z/()@\cP>4+l/rQtXWr]R]e
%`CbR05P_VtfK?m@TZ*67N6('#eiV-N]BQGI84-?9@6>n4P\\B!0:c_I1,bn@LXP"?Sp\1J1[5FYl*Td$Z*d"734QTm<d]oj7],cN
%Q=nWRmZh"j]GfZ]*u*=<A5d3dprr$lmO"_UO^I3J]@TTBIRF%]if2&sS`M>\/*Dkf@YdY:ZU:Qd.G)=ECW!pC9rRYPU1D5g)D1MR
%'OO[![^JWI*+3*>f%^XIA`Ciq&6J:ol$rk5fr^TF&&jsc-I1CpF66@<cmHK^`0ZtgEYDe4*M&htEX@_npi<A2EiG^sM(^gXjW9jD
%\*8!<Xg1mK=$!+_nfG*q4n/R2Re,C;\rXR>.]0K$0!2ZKbBti<(u639kUlQ4HP[JMGG#*=]%a#)RF:lW6n&.3Ut&Uc\^./uMXc\>
%V51qoCMP"ZIo!/t8:#RH[UHpWY-k`onOif74tQ9\V"`a+=B*^``h0Lnj%hutoTWN6DM8#@T`Onli>+KiVodJZTA2.F9n+:\#ju`j
%lguq<pVcu!>#b#<^KBPE/,d'E*?`$=T);k3h[G9I>.ejSXF4i+RMS`H4Y/YSCf$qSGe7'-Auas:rq1a[opT)(T.Y:'gss1sgK1?*
%>&EF<g*[6A"kRAYdiBkU_hhMlfrV(mYaN_nN-Y]k*a4(nbk/;(2K<,%aZ\bE9\Q?F%Bb&391C$;/I@ZMq-e@Ua<7D0<Q8[*Y7lk6
%WWW5P%k-[aP?q--JNR%Y)k:NNI8tFEl.E*C3&md!V!bb;9,DXhfoVY?N-G20dC;KfkTuDS@!(Sm0o3/MEqQT<@+$+G$Dp8R+fo*E
%8LAXm%9)-^kuJ:tS5T=;K@lHPQBL(#R?BYFb%IX/Cg>pJmK:)_A;uX_6*dJ+<l[QI3oaG0()5ASoH0/BS;qdKY5Kl9n`#Obf6%>C
%fYi$j2<4@kp&V%s+(eupm\B:jnRBnb#I.J)!Ee7N<'7P"@^,:"]/f<)4bbQY.>d&M4%D?QjDK("#Ipg!*VnJG6:kbEhW/@%<80=h
%BS'45mXOnCK!fX";/qIGhVl!)1aXGD^CdErEhSuqT^f2I9jYhdSk;rLaB4nZ^iS8r6IM"</WZM/WQ`U$Y+/\?XW4neI^S).VJ<[L
%Njg[.aopmE[BI4#>8VCn]9aPZB]'lch[_[1oVGc8GZ"jkg^tc:m3hE#k3@bLdA=",/FkNT#4odnKA/\3UJ]&:'$j/&.QXtX[<H0Z
%N\$O3B\'4o':r9-Q[@Si)r)uB4nu[QoKq*!";HtjPbDA)T,"FTfYCHSEUI.nEKp,hM`9all+2@B$,^&5/!]XI&RJSP0i$hso/d]?
%^eim2RU_$]??u&f2-h8u8>AmSWDmc%IuY%)L]ZV=Wg%;%PKI'EnF;Duot_#u;eqUG0]&a3]p=\KMT&>udq?+6"Hjrt`g\j()+?K"
%?;UJNDoT:j(bKka2X9>ANTKZ5PT]-@]5ag/p34H79;aMR*2H2>O8n:nZ4X0+YpLtumY&t;5,=GlkqqOR6nWA$,t^e(\E2!j=c%0s
%_mAUKkI*ZK.^A$U;O!F9fAt)lOUXP8>)Vqo`h6:]nsrm@;LD#N;,S<YDL3s-3\m,)7JRHGR]Jpq_iQ[7[4!KsV-A+g->QKHW3\9f
%!Qr;bMis)]55^5^=Cu8F'#lLB\;)n6P>5V*3rh%(V<QasH[)2d8pWL@9/1=j4aK\q1lj_\`;f,%+b.7IA9,9=rB/mhV<6S$l$hu-
%SaKRXf.6[H<j1BRd=-BkZC0KGRaU3TLN,uOfZl-t3!]8W1EgfuNWAqu3HFDn5Rr`=CRi:TpN4Dg@b:U'm$]Z6CD4=';nJ?QdS0#]
%`3)i(g+[]pD:X%<gEpMa"gbXt%%a-"M,h1R<p_'([>@m&McH6S[IIG.Yq.P"ATc,.=9if'rJ+#9liA`ARWKcqdZ)9%NDea1U`0cb
%W0&0qQ-OqN[sn#bPLta:92(,uZ3:2.i%t:\"hp'>ck>:BF?W^RXk%h?=Yr.2C5f31PL$-Vf1PI"\^pYlq\qGoiB$A61"lq3@^kVc
%`1seF%6T"gNCHX&hAZ(7>97H>kW,A"`,iEUVhafHY44VMkp#a]Z6^cuk1oMG_>bN/Fp*.tX,VG+2b6MK;aFSJG0=++!_2R"HM-%i
%BE:RV5BP)H'_Kn=LGPcI&$8)Hqt@1>9i.`@%P2AE-K(1A=t3akYBrtON'JXlIuujh_[4fV0&s:Vf*R0kFl\%q"%t]RV3b^_+;<>^
%#,bUA?WGp*3b/*j*$k"3?I@8>i+1a/hc+1Jdtmn_J)/7r`VFq*:J\.lhq/SY^!fE9oMihi5lo;/[Hi?ZD![F/1B2^ikC:%6iXE%8
%YGA&%P<%O8DTcS9G;A>CRI_HtSF>OMV9,7rABm,N<&C$7]u-P_adhi"`16:EF/0ku-*G#=8u;N&jg+-^[2%n?mL!@=nn!72B=V>g
%gFH"-Zr1g'[@T[bM2*tYYU1FB`5A$g=;)3\g`BK"%s`gh//Ia[KSc2kpMSPc)=1G,]fjR_SUZ]gXAm'DcC]-b1WG%t_t)gPB;Erq
%[fYg7$Kt'<K2o%WdTg%!>4/iV$R[G[qtoJ$O'N:;2,CJG\*TZ`EfbOHe%>ZGF?&.Sa<H>XgQgb:Zgfq(;W^MRjXY8C?K4E1ptY@`
%\]HIL)GM1Y+/Rl3Gd4$\1R!pJXb;Z2!0J'Qo&E5&E\n(?9gV=ECX",8oU!gkKT%6$UIiO?&i,o/N,Cjj<9_<&qrBF1YD9h%)f?6=
%9QLjD)D:a6o(hs_2C#O5)`C<d@D:+?s(qb'(h8Au]ATgrVII;lElK.fl7TRcC%iMg-5!&Ii6CJpR&=a6-Ph.6(B1#p$(`+pE>L2m
%3]j`fpTTL0G&[IK3,PBfDXT[KT"*iF)WZ"YEk;QNUcE:@gB1&/#CfDWR@"DC&,@KJ1_&tc>YK!>S=IB:[g'k%4lXQi9U!;4EWT1k
%OIE3JS".4b2cUaUktA^Ki-h&4S=I;M3IPT][WccI^l9@d#Bnlf.b=.kn'gaSH1ijC>41V*!i9q2?YSHK[HT97r]Rj<Em&kp*DuGI
%`((r-IhNq.f2aa#9t-@U0toe$2K<V(.G$ZEjkN5F4FeltM<d0TlZma:Pj6"1VuGOa^N8D.9g#f[K5I>ucR0dfhfbS'HYD!K6b=js
%4rmKo4LBs#2Y#-@*nnLDb/?Z:A#_YTL2='K@CCW^-JtK+paEDgoMh8851l!J3gc4n9R`7"A)-53QPOLu#Q[&@WTUY\COB56#tdqO
%(q1*t\7[0'ak9YeI9nbreaY'k0.a9p&*0Z83Le0rna62*RXmoH>;8-WW0\_i3H/YPi)%a39b&0>4#u-!",G0mQFkOdIrsILZ'UC=
%&C2<\j(KNWRcg4Kn7-Q2VKbn'2Fe^KMYhKcAo0/h:9j1cG3e73G!:5;)],L\?V4Zh\*VtKEtV*I;r%QGrZ'sU@p3F;=E<%H[u7pD
%+ZGo?`12k1Pqf^!;J*C:OG]A_beQ&e1J+@<%N\..iJuHQm)&-"5*M1+P+$BgpTNE(KEB/?gJ1@&"=FSkrYG[5\*GWQTnipV[G-<n
%G2Ign.Z7FV&9XKS<M!UJ4,m+d13jOt3^Kb>"/RdK5qRFTV_PZmkTqO3gm(;]!i_da3c=4H\O,NdB<pl8ilt31\]Mc]lJ'?,rnKL3
%\PtsTETcc$c'u4aJ)?cQ4#_0B-LTZAFQZO.Akq-lM*(IYgpo/2`c/,*,sLD](fK*CJ%PD/'b=qtXMbD@s5`+Q4(GiK#QNV"@pJKS
%(%8Xm*k0hVW7:,8)u96/5h!;PqMo7?"`heuOE(*/iY8Rt,`boC35oq8pMrkl_H-R.3:B0+8rGVd2;p^r?8RE0e>Wc7FpH@nJUo3I
%6[`i4K%o8i=VU;-3VZs>8)KHEaBG!=be-)4E;;_gjHE2DdeQhEG/bA>%Ej[1-boBN+`+/7;V>%4<Zq?C,710a_*+p(p@B4U\,C*T
%8(I\^Lf^/,KqNVm%A\9gl0WZU<%Mjde%BXWmU=K\VeZqp1u>ALmlh_0ZQ`t@UfG/"(@!b@L6!ui'e_N&\mJMfS^C@*%J+$nf.-_'
%`f$C\\He2X*l&'N^CKB9rEEDPBPoddQgu`:G6H;V=<*Ptmg`mBrbnQ<F2s(S\dKPc,RTDH4!s5FGQNcj@0f*jS%U0b5'75t=aZdi
%N!C3d^/[gfb&D^`CO]plikV:OHcj6/OI2&%HHlGM5UKZt\*;^_s*tMu3aru!'u!Es_J'4+DgO`@"\E(qb%1_H@,5[=RcX6CeP5;4
%Y0#UhEX;.8%$#$?ilS\i)&GeSLMqBA9\gl+jfpP2Xtgk6n+>8"qM72CCN.pGC"ug'oTHcB38s>(e&Hg\i-d`)k@*2]4cj+H&VN<_
%@u2O6+l'PJM'g9erl9OYV;C!I+JXKL1B6'mVec3Jfog8?rE=Ub0AK&b?L9-?HY:2Afmf/KKp4Dtb7fr_%L0o.JsdJ9+Wh3unib>o
%IZlQCrjic&pl(0N<.N=I+-LXD__b5Y4G;0=p)_k`jbGd/QmsMtjXu2@6<u[!=D'USVA%e^UsES*h&Q[JBm6=6A/-06S[^5ARlhcH
%TMGO2VbX@=0X?/ZG0\PSL@7AU7?LISLNAcON&OcM.J"<k4=]%H7*10[ZE,LsdR;@Z?Hr$S2&f$0f`-mb)run9-GcIS;eoZtn8SA^
%k*!F`Ao3d%pO(]XiIsJDQH^FH2/aPsr[Za%2bZq4+*TO5E=Z+pVVge?Vq3._Gft0S<@[atR/Jmd7skQ)rh/[E>%A0&(8R1*E`[-E
%3j%",QVAiuna;]=E_9!@-C5jOdC-g#"DK3l`T4Au=t.)mM:6PlSaG!DqbV9]R*).!cb#P*)ZAgG5J%C(S`P:/?g5Ap4jI$Vpeq(G
%Q1E0plUolNC<i[1PkLOl0]I`!Pe:oB:8Lk&oT65JoVc*"/A^dMnLEM`V0ONU<sT]VXj.3@et[]HJmL=)k6pUC_Z,g2rf92+fAH;9
%b;J%0GW^H`o]g:qri='=igo!@k^ru4o,#d)?-l9JH\^]tUZ.#bA8)R("cEBNH1)m;!.JKRVQ-(3a]Uu4Fkt%JL99tVVI@WY!?W.W
%9gt+jOEJ`EV"Zmn-WjLGr\siL#!RG?g+VBFZm1"q,"nb&nDsZ\n5+35C</?HTH7$c[ZNqQXb3%Mmo8(cg\"aZJ'OOYfquWj'rK5l
%hC__2)LSc#VWjsbf==Z^O@-))j:aJf5&A795KM::(Q\RK0.*rBmZa?QjF@+Mg$%oo5>Lb&cYouU!dFtM5/=qB00mq_0D>!h04F0b
%VFB7d\;99h1Z(jrQV%X/M19gG]6[ee?rm;gg8c'u<sa>PfBU=MeZH72S2TkMk%lIhTOQrR&Mjdt1.'3T%2od#I5iMMn%IIk&=bbM
%qror\(iC?R#gSt5"mlU/l92`;GL&b3W9'=tL(SRmclG6ahn3gRMU0Pu>%bfLX'Mp3%)aJ[[fYe]<4sqG\Zo7g;A7!d>7(/S9"U)+
%5B!Hb=RNL=20F^-F?"NMl[MsB>.lgR>Ve52/+qo044$8bSbYRV8NM$$jrf0CIYF7n30;?:Dp=Xg8rHGGdDf\E7a]n-eY%nH8/flp
%euFsm%r6^X/b/tigoV[/3a8nU<Fo<sQ4@/tnt554>kg!q<@2.mGQSaV"8j4;.k.lF?plaB`r/YK(UGqMCT3Vf;S.Yj18`nd&T$fs
%Rr2nBgGE#)m2Hn@9AdH1b=u0_fB`IM4m2JrT^$CgU:o/0?OiZ=9"fN+'tEQSabXd,S,N$)NI%qrN#^qg[&s6(^Sp^aN`.C9a)B,;
%EYJ(1:8qaQl8qhLg[C`Jd5<U]GS6%/hV^W_J]I'C[C4f(X_CAVXe*/$X[6I2=hc?q^+CK#Ap0G(6F5N^eh<M1X&]-ZrcUcR*ap#R
%NHVj9rc8GW2CUXh?W2LoG^2l`$LiKA5aW=XJn*V[R[7n2ghI6jO5(OCBlJu2H>@Ba6KkR;dQfJt2Z-"md6%jG78e"[/NO'[o6VsZ
%JJt*YrO4hr/q/d+g'$O8Y6CEli>oDpPalp#D6p^K%FZVQ?>a`$lu[MG8q%QKCiWa=8`>%?oV5/Kg8H-/X1:r=*sR)$/Wh_<e,5X\
%]t!IZ/j%@T/+(q-SVH(-LC*_p4NHS[=#tC%D+j2kEn`T-'>uPfe?X0.etcCs2l'n'Vl'HYRdMIY^*R(lC.-rm3j#jF>l<h%g\%Fc
%mSk0TXHY(>7F*Gd)C`GHD/FAEQ(UDjDR5%?V&eJph$V4%IJBrG\H3&jCmI_,#8gTIs0jT4bBc">&N%6$dqq!^0"3^2g%A+P;QdQ.
%X50jaLD&uQ)>(?^F\,JrE5EI+>/JIURXF!`Xp)[[]laE[#Z9?-:*?asGqPPmmJ_2X6e9!]dS<>JOJGXR?'ZUGL[`5tA%ps6V5&@s
%KUB(/QWs[clY`I821:6tjgEPA5&Ai/:'L=&`=jL9atP]W_ej:n7FKWQO-#?'FLQ!7B8;ImgH.g*?:o*)Sd.r&47qJ.bt9!UpqU`g
%.]m(lD+)b]2bp1NG*8W3P\[_RlV=e9P8S?A1JH7sQl]9EF*i>BZRt:0iq6jr"3hI$j5ami4R$k/Q+!^FrGsR]?@p9jb2%Dch[+p`
%CiEs]_m\#@'1Br6"ZT'8L>6'2n;?9YZ\b=jX^CXR;hPVeetZLT]c-m0fC`bO:VG<hhdHg"%U[qi'e>gfDOJ=IS7"^q?eMN!K8IC_
%lN!<t/+,+[J3XKtLV:Y=-9PHn`@1+h)Ir6Z<Njg9eOKF[_6$[g(+=UfiVKh>1pFm+71\T`9^p2%5;3g"-rqV66_&%V2?:>Z;,@V/
%`CZGtoN@KF`0q*Zc[WtPmN(4&\>0.hZl<%BrS&-r^O8riFN2&RM_*_OHa=u[lYE$q]Dsj@]TRKBS=eoiElC)*0Ns7&o8@nuf4XeR
%Q'ecu;m9js>GLlL_1:-`$#@=lB(27:UXoQr/'<iXZXP>*cs(qkG<f;#UAYu%QCMVc#/-l2>o!#bXmOAi!.^A4kGXU+]bsa;MS,.m
%/ZQp$5u(WF/_<Vf?TeStRW-:r-MIn:kdX[m2r6snICU/Ek7.!:.d?oWILjY#DuB#m$Xl&cLH[q4"8PQ`eW52O>ni_M<_j50,Bshg
%StYJM:,&p4_^^LM^*tf+6V8O]&#WjI*Og/;*H:bjO&&:ODQ@+.7)pn='a=#n</+ps^0lWVMg;n`fTt7$+1pJgnK;6(&hq)M&tMZs
%1bsT(<EUJF*n\'IVX"_jmWGX<]EX<JU$ru<Apg0Mj"]M!Vqlm9#&nHf'5>,b-73kDL2*\rg-BQ`:@4t.,5*Mog!S^BlZe)Q"4sCb
%mfG([$%/0[cJ4['j_R1=K#/F$.1f`lS=g0oE4kJCY%\E.Eh.A:jCeV[Z_`E*!(53b=$%-(XB89$L&"*dMY1T'/L<5Z>2$*fUYl*,
%d(s/8Bq/L\.9L@H^I5P5b*Rb/Eef@N/PBH'&kdV's%Fc'=mt#?Dt7P/&$)brg="hnHY(*_BthY1?L1@(X"1fM9_26/b\F<l?7kWZ
%C>7j0S^2ee]ap[7NS2SD`h,JF17@rVCRNDq-W?GWgm]b6f$_%Zp\osj-mk_%C;/G3nDS@#s#eGl?S3ku@HJU.R^+jCYM;jU7^H0`
%5_!qIji9K2Gk-Of\c/_@o`kG$iIBuiCZQlA\`Y8&qH."B5E#HcSFoWo^k]HLbkub3gAcU&TB9M=T1;`%k*'WL)>s"=;b\9Kc<Th<
%nEJUY^:mo%[uQdD:L7%L/UO_SJe*cuJ%JQsRm6DgA,LCfrS-Uu3W.gN03caQ=6E<WVq2h+l=T6[O^Or'n`@_3j.k#3>!G67V`(-M
%F`LW-qrLa6^U1MC48R?nfiZQb<IitJ?e3OF07R0;Gk-/mm;5Alb.5OfWC$;`!XlR'ba#KBV=#aIO$>5>hbMh?T0KZAa3@\?nYU\J
%*%cX7W2sVIo1N08eV-78n2gQ0$Q;HYI,U"Ql1IQ-8A9N-"R\rZ+g2^-3"]L&qAX,5PIFnMIU*Er:G&>tp<MTcXTMF/P:KB,h;M""
%rOeV2S,!R:%rqoOQa?M\V.kq@BJ+Z-j6OS9lLg).g%tTDS,(CM\,>o>l.N*Z+3Jl';'OaXe2PU>Yb3h"r?GCG?Zn?!Df"eY`nTKE
%U&<pCo"t7K2LG,WA^Oabhqm!CeAn->T0H!#Dr,(A<ng?tk>L]lEpiGMX'23E=i0P6B(bb1G0Om;1tOruCueqTms`#XH@)oiRFP+"
%3*)ZBQ*&X'^%HIB=XWt;_t4,RoD:k'd=1h(D6(&:"L?3P?<,L&7@uS!c)'!FRVN\JfYY&p"ZslV]/NR[G!1'%a]pFYf9M9=*,@/Z
%]IH$(cWQ1ZWO7Z'cg"\_B4j(S=C7eP\2+*+9[C&abk+f<R[GY=rgq65SSFh1bsEcKnkC'=3op`croocKbl$o++.9%Mp/A-\Soc-4
%hg=P#i*XqPF*1.TA"5/P(1+E20.m*:&X>I7S!f`DZCI>3[^MZNX=TlSAk_F-ZS2#olig1Njiu$)bK?a,r;'hboCVEB2RDmj.\D!0
%o(=97pj)gb-@<HdT38`V^W=LHrHB.11>RmMh0tkk43'f[T7-\c@m$7[RPEJu1Ln,P;)@p#p,]O-SGAUV.IsT<R2<3-AnH2Yc!KPo
%ac"?dWu>3`jHlLAAI>',cSFgmc,Z63r?&3uY@ecG1L#3cl-.o$:+im?ba`6f?S9Q8p1KAebe*IO3HM^<ULfJIpW&\ccM+<^qtdYl
%bf@%+='3]0pW$n.lat=&bdShq=m#YCi%S)Uhft[%.'7B"Y3JbDF$2%gc;^,pr5dC^ZC@7(`R>osp+th'<+a><9MIJ:4&`K]l.N&H
%X7sY5$\ar<e7*4UgQ]A2XA#U0V[CC:l/.ib9Neu'k,)1FCS.M*T/b/p?8XtFQmu>]*):?uIB-(ZIG(VoD1@#J2ml`@dA@C'mqPeA
%m?=<E%l.\f3EMW;3]kQU9q>@Zk_k]XAZC+d)-!LQ?`"b=eeT%MIWB6u:E;>8:X<c/YGUL+kGQdeLW8XoVLGbHoiZEGg4BoXqY@Uc
%Ms4:Jh`jl>mCq8CIXNV_9Q-P0^R3mXr(`_FqYjrDqSVt'PNa`D@qs`NGFI"Kj^E<.]CPYW'Jj#V-sTKUAoj<"VtOG'4FZk&E;=b;
%lfQ`-H0+Gfa*QmXqUkdpp>b].gIC=F@?!Eqr*%>s52KF%eK5kqCV=t?RU+ctr-@O;s08mmrTWjkcJ,D?fABc&a,Te)FsaQDGlbn.
%beDujSlt8>q)lQ<S_B%Mc7R7&hjn&DaibKU1RhJ7Y%Dk6^6kNQ1paAt5"rBAc[;j"s-P6`0,l_)cbAem1bO[9fhBN8AtN=phT]YF
%X,U9,S6D=dhIiHm?^5\R:sA:'EUn9rkP]O?p1X0QMqO0[2U?"V\ZF%^])&>Xg=g7a[^.rCqII$W](fg`?$cN=48G%fZLVnpo99+,
%](TZMn$)Fps7>O!-`?(:`fmTsX.:US`eT6qea9KF-gg5$0@:\%=acF#b?iiik7$*ISpU"`C<s##XLt1[!?4%C<'-V@qu#+rcB[6C
%[c],cfpHR<hbME\ah,OfV8C+K]Xb_h3rebd.m(NAA$%W'T=ll%^OK0ASc;a:]U^^Z*apep5:VuuFCsp\_UIl<Vs1,!QaIo2?bY*o
%T>">J]2.>/et&]\lL*9%k8!1Oe*HRk:J]a<ZVLu#o9Wf"'WZ\kYk!,*HsuE3I'KpQCot!^](<YHi(UOj(;B6>fnK.LJI0:XRld+b
%5>sJKG+Up)XFGQ)hV'ABgFK_0T7-L?Y<FIc;qIXAc`^+\VeS`RMi0Bl$]F0<@W!p0qr;egD<7M+GbT[g(VbA^h-%D9*aC:?/jIM3
%L&@j>X>,'.ahG?$?np?D-Zc3=PO7OoZd.=cf@e<9>%MF5NV\$:n_i>QaXU$N981[WY=j5cD0>+'nXH^TTT8lsO8Z9Fo%[L<\Z?iJ
%?ct*FB1%-shOg*00%Wk[o672ef:ZM0ZSf3$`A"_^^VjFuc<mh.8)@[pF]2`3XAEQ;fD?r<b`?d>;-l@f:fcoJ($0;klNcPMe*Nr0
%EXtn+a7f-=Fai_^VAe1d2mo<.4')+#r#><erV2ZSIJ_I@VG?kr-q7EU(Da@occoV[c%h!%mJYMSD9`%K\>?U_a";_uqIs0C:X(>:
%ZV[%:O-fS&p#=u-XT*P=e23a\c+c(dp?f8mO^C.+NXcQFN:Y1s`V<kkQo1LbedU$!05]VQ\,#^aHh1cJ\Md+*qGX_#_SKhsn'l[_
%qK9]%>KCU2a46G\X8M\AGC+Z)Q!u93gO2.JHd].UX^=6#^U]E!k?H9)/O(h:Gdk>u0pMe2ol>-LK6u-N/g%c/K47k&^TH!e[)1tF
%b1bR5f#lCoQgL'dl'j%ND+?d<0$d8XcX.F$Q_3_R't9brf&ukl5;#-KHa3A:6fH#Le'e/P?0A6_ip>argD>i.]"7`So5/RA`S1-S
%e_R]1[oUg=m[sog2Th$4Q]$cUl^+ZabqCaE)Vb-BSW.8t0:NEkI^QPl\b%@aW_ZqAcHTm+Q)`Gq>it@=l^[6f.d,AU+"hW4Q_tY1
%mn]ISr0-<qht-QR:,W'[+ZK""o:+5)7^KT)`>#Vi:Xqd,fj66M[bG^-([%88CQI@s8o*SGDJSXa?8fFhjn(%3f(c[p\@sf3>$fNZ
%:Zp>j5A,$&jepW>)c'5D[l.9QY3_-Rp\K-pI';A[bUh)Tf[L_>YFAbf]3*;>Q^QjYk)Y5lk%iY!>Bmiihn4F:rb?lSFnKJ1EpME+
%gXWF]r;?;kj%mY2eouJIq.@@9m(QVFV\e20*aO2>F*6KF^7F$Ue9_#Oj4BL(i%3Ph4Nm-Z3NMsaqo+tTHU5+OTB)S]?_)T@^,+(j
%-TeBjHsu4%\?,%Ec`^l&(X1('h41bLC%kT!hVG:ts1Ge,h:Yo`>Pfm#H_7/rch;gh?U*4FY+4bTXd>YAqe,<"m<=sO(S,d$7XaRX
%Sio"7`Orfb0]io.QM0EmQg/edi5AfFGu3<[IWN$[c5n'F/fgH(IbgK3*+c!20-"+b0:s?R0@0#+?+)E3O.R1`VN:>@hC]n"4FHhi
%\9YH%IA24>_+o0V<d.:kB%OeicK>]q.-<@1H#\6.d@-IaD-j<H^GfJKq>Ph]@;b3*jn2C=_nrn'k(g>ta6+PYHr@&,)5hlPEVXAH
%ji=-/bOpqHp%duNm%X1Fdp)M9l_i1_o@;1Y08c1DKphMPc_&N&X'[VhZEmBOQ^-Cgo.S/Q%_'4&O"09nbqZ*1mU\RgHnCg`O3b,P
%a6RABF3H`s^;!kH2Qpt?^(kDLqV0Utm@s2slhn*\o$tj]oC:B1U!q]KIs8VIYeP[:;EEJqDa$<K-sF7M'.B`&fOCJ1os\.#a`r")
%^%AHU2bV\b:\1a_7b6Do(E`6dV6FuZTt^M']\#;ohmp82Gbn`HMRmr@G;sqmH/5K5Y1.['Q)jk[lH*&f]%JWMTBB:umuE`!Q#""d
%#Y_uPqo,]+LS#B_h]%nd0<X]q9'Q1_/SAD!^,MS)oC[<.j[4g6eZ&;ne`s3uLXkZkA`HMPadi=*[f1r.Xqd;a(\MEQ[U"CS>!8up
%SZb4q..Z5:A,l&b>GJooGlu%`YeI7)5>J\XWFeWE]$4=00.5#NVrhT,IceNH^X^[cB8Z2/rDeKu)IKi/3W;\shJtqd)Gh_GPTX6c
%"5(Ji(3#Yg2&?q<e@1M7i=2]N1oUjoLanYhFY!?,o>9m`kD[_VkP3*rMGnSC](A(,%.9[ogrgb&=\Ko:Fr8;AI_%V39"WlW\02*?
%!]*Eq$,6d>@f=4X"tK>u2U6nC$X8lgLMqLB2f[p\<4h'F]_)YD[l*&%,7QG\G4;G-s.m;$N32);95$hSag'=tVVD!5YnnrYLkiF%
%&r5GK+Yrc>Q>8c;8qa`bW>/_K*qq27CWOsY!2\mK?hRIa9t]\LG(dSJi%^G#(Zpa\5d6F#"HHcu;T[\[0=?B<`*ZS`9knsiB;[)M
%puhI"^(NuL.lo9[dQ9,b$4<Q'=['CGk!cYipECLTY'6ZGF:G3UP?^nSGW!--0:d,X.bD?-,bfS1,UbXrTE^@@g3(W<kXsqp]HT@6
%`UVg^NNlWaiD#2<1pr$mFuVI6$pK1:Z6h?u9(pF1*U#bjlPH9^jd+Dq?/ra>g%kX,KUdtFEe=S.Z\mU8[>p^;lAj?+5,Aq6K4GjA
%&1H[X\Q8"Q8U/3>*;fd?ciOeH*3A`:$+&?B<l2Ch[qZ`P=I?NukDi?.o]o;BfXm]_HZ[f;T%BKQ,sM:\O/oCV3[%$'1luLpDYF4C
%?:%`rIII^T+>W.fOFM;lDc03B<qm&`Nl\<B0X<r(]1m**RJlTP*)Jnq0uu,j3ON4LSi&c`r11a6;_*\>3IMk5[+_GGq+99<27/6e
%$\sI3IT14o;%[\To1h(]f]7L\%m/r^2`L$0p&VI2W"BO1:K4!9jad2(V='JQn%uA]j%?Uk@<rI0%QEE,%)Bq!S+Uj#^$Y`@Rfi/u
%i)PAV7Obm^_p,R]ZX>lf>.o12XB44AbSnoOgk\sM!POD-(fM,sG`CaImCDh7\=$nFR"@s2CMb/J',tQUlZM'L4r_9iJ9/Kj@$JML
%GdI.!`*YhlM>^*7gQRh-mLmp,&D^@n=B<-aLML]%M^bYH>uI-gZib9H;^DeJV)KZnK*ZknX_8b<_@='L=R3$MaN6UT\XDXlU=eZ6
%Dam3OI\W.b[q\.@e^)XjX`$jB4f_4]bT?<rG/8@:>5.6I6]]Lk4+*ksGI*&pTi"H>pPE:$M4?htUo21XV;`8#fP:Zgl*Usr@1-Lq
%+l1fs@=^XDBsk:dkiON^)o#CbQLMOAM(E!$l)Fi-^$8eD&9n*CV4JPF(**Ims/%BeC,T0g?O%[Lfgf9mBsILrE(Q=JPlEYIX\OMl
%o+rHQf,#bk9?gMgXl5.UJf;85,u5=jH)i$)J`79BE2XtjPLLjK=leDGm1&mi1\Hs[TKlt!L8;>k1U^,ZL[Wg(XBoPU@n,BBcY,kl
%R&>qL.M8*`S#%ZRNMngrm*C+eH%tJfAa:-KflLoc&ksTH?U`V'kpp3S*?t0%$sP*gY"?o+lm'#R`PKS),!oS)*dYRiW]ro:G,W@$
%VMD)C%U^McQ[?0I!Fo5734T.1GVqUYRfiTTMcr2HW\g.\ogkHh&-HUSI9?!PIbl]d6O"f',j6DrXr]>de(T4%M'i?E6-k7oQ'ee@
%/W0(qImOu/d-)%)PMGq6]97"f9%A70XcO!*I1gn0FfiFU%d_E2QePN<d;;_nFU$'-p8[Q<Hd'qb5mC:?ISIm;g&6e=Q`MZuN%`-j
%+<kVsM+>d'%o4*20I:AZ\UQZ(LOX-:J+3WC9UN$4o(Y7NZ`(!9"6qS="![?QhD_V&bs)46b[(VAbqe33B;!Fu.cm'?d)%u4'@ZaX
%g>N]kWnOXJQ"Dr0N-EPXQgL>b-j"_96f`@JTs7n,\cedSUFqji[gk=fdai`\@('Jp7^jsmiLK`u7_I@n0IUnaim_`9re?Uao7Y^;
%J^bX8:4Ipt'mnpQ;,kHN:rJms#]HC#]5gM]diDgf/$-geY_29oLqD6)UFe0ALg:7*rLD+0o]e<9@\Z6lS37).k%1tChW!+IY7i!o
%,6pIm0"b5`m%EZppI`m0DeZ<[:qt[N(GY4V,D:i1410#06F&^:XuI.T7"e-4(GlE0HF_T[3oX^NXL7oI*(ADpD1BISX03eA:KJ4<
%HZfpJFR#XIBG!g[K1H9hEI^0]Ul,8X96Af08^o?\d3!,kV:-2m`:O+PXj23!;':eO"6XEN%e6ldjO"9cJLdrE4U_DFc^^5VLHgVP
%P<"Vt7)BN<EC'FgeDRTWTQ:9N+uVFMl1l<TPRCAef:LViSofD\&D[;SM`Z\?VcNA3k9n5[aY"-PC!Vi&+%@I#,Z5\\gh]"t6j,W!
%04#^G5$BI*b&%SdW<&P4X?aO!%8=$6`D>lT`g9H5?rT<2N/FlkDnI^t&]0/kKTIPC:$S'Gmpa'DCnm9YmgN?C>H65m8H_"m>SMDO
%%EVd[?9c^>I;Kqg'J.?3cb##T"b;QUiET)0)?>o[*"8)"W-ae^:sA\@$XIdD<o%GSE!+@8)FaNhEg=<.i\gS%YSS4EeoeM(:pi1q
%<-9[U5.1QW2-gXb](K[7D\S2nkeu''oJV@g9#)X;K?Y_I(MLrt<CTM"g\;lE]/TD(S:mfkDC'kEj>N"Moa*F!!<]KYH:0B*i%oE1
%h&OYRaod-_[_rkQ;KNrYd#knfroft7Sf0Q>DV)Ck61MQ^>Y*Y!ke24=DW)B0k[qb^016H4nNb-!CS4R34jK]A*fK)8W5ru2qiCto
%G\[Q!TB,sS8,m\*s7pl5%"33=U9<-OAf7JQW0h0t2_7=r,$EI&QEF'TU9:c&U?Y"Le?$l]mZElSX%9S'L2#jL!T2JhXC]PC[&>`#
%P3SLC*KZEZMlIt6AOD.S\dI-VR(]M5=\ZdXF]HOe1'e/!7[@bg+Vf9&eZ8e:6F*04A<>lHc:k/:IpKIf9JMb;9s_.*@2iOL6F*;j
%XK=f*hi<jW/Sc;m5;YK<.eq-4odj&I9@E=L'3QV<YGo;OE:O:&kGi<#<L(g"%Yg:WC_LkDN3$i"HA#m^+B6<m?q<2,5Dm]b03:Hj
%jX_ZH#)4G_RE1\r8>Ju]$1h\bSlM1.Lte.2MKq9d.=dpQa5/Xs>XPGhOtMAq::%<Q8^8f?.0Fp-ad2I_(gF<tNV#;8b$UkuWa)l0
%;pmK[X'6LV!=^gd2LoUoW(?BXR+aB>-#79ZP?Y&`APL@PUjS<cD@FZN5?.'.X_2Loep6BopdRH.Qf<PdbGGHFP\o/59n)&\B%f.$
%'4-c#i%Dd2a#<G0*m7AR:$9"EYXmA>V>"+b6LV6<Yc`naC]SUMJgaSe<jJ_0ImBp=Za+1g3lPn=\tWV[AC\J%b:FrTWa5q[T``G6
%5(f;+VM0G%eZt'KC7\Iof[VQ)9ES!HTm-*5%HsLCL4s>"YQTkq#.-hJ0e'>4dqg;'qB8.WAt!%dctRXQ`X5#gR]cJZ":<1*J(rI=
%]s-0`[@r"(=p1e/Xlu'@dnL9c[LD8c^@l'5TglgT$OfJNGZ=p*,X\HUmOY\%CoCrjY:UZ#)DmXd2&3&2)D3;'ZD-nP<>0IMj*b9#
%j.Lb4#?rb&(8eNC<_&Vnl"YqV<#pX7dggUGXF*EoR#:Q)CT9)H*Ab5=&ZQ7b-p`nAA8[E)1)b*BGll\"eM0bY,I@M'ZpeZ\Ad,9C
%%1O[qY$B>Y^i\#S5Vo*dn5!IaPic&)k:4Q%$aug04T#SHj!)PUUuQ$?G@4iR'WA%kon.e71UW=G0LFp4@]+t+6?>t7QIQhu5:hZ<
%r&Shc$S(6f,mS9eA[!D*KN6C>^s8=I*TO.,3b`%&NH/$Q5PXFl1=2[:=iI(1'LZYgWJ!s48uQ/sTn?u8Mcl8j)Ut#)W"Tc?C-%Lm
%29&TiLL)U&d2]B3HWEh),\Vk1KM%Y)a^JDi-CB0s,<We+_DE$<WX`(L@b?M]9\#i:0H_l&L[\Dl;A,g7V(<o4RXHsD*)#tX9$*10
%L>"%J;Jc-Z<]LU>V43,Rj$5ki$&at'[S\gE09e"]9JVmU&J.K6L)r\C81Xt3,7[&r-E#2q+=R(K\S!OP#W/d;#)p`qYfL@jGTO!o
%)9QdG',*\6;ZfAr#2"s6#GnXr=raecOEJ9Eefh(<\VGFfpsD=71cI)$5NSNJ=Y;l6`uqbYq^>9R$:%A><2o\s+rSauWEPMp1k<H#
%9E>-kaVrlH$35UXB2-%?0*8mK)9,C1^i,n)8;ph%K\oTT'@J<\$GVu1!*_BnMnj8(J\#M7OpCKGdKoatA.$(#3IouqD7m^3*/3>(
%X1Y<6;>BNu`DVsLr.^)Zl"?k+ah^BLJ3Z5MhipUg2^),p:!!G6p.I`],Cn<nSJ3@O^F]FsN'i$q^BK`0o1<+?1AIuf2\sPr=!NI6
%D*XFqJ&!$LV?Tt/B.XL5-5h4*a?)U[hT=,+feK+O+\>$[PQ\Sgq-:2WW?0P6o9k10S/R"J;F&U_C=(QhZq)@nPAF4)iDXb-kjC",
%4p7XeL%Z=ja;]mGL<A-T23'4>;[GQ_(qsf,MR!X*RY5oP[fPdKP^ibPidFE1<C"DV?8fA8V)!/\<HoHP"'t''2u!TWJg>leWiC;=
%K'k],Q3GM%TK<6HDX)\YTuWk7L#EI4`W.f,_#S&ffQ1"G^9RfcgFs\$?oUW.B'PsB@2:9(C+7ObNIeIBZA!7hG+@W"-E%-IRYBQ,
%Z]MG)@kk?_1)YDKC"Uhi9<AF5$k<>sP67Qm,BN`ll;Et>iqh$(;2##Ib;&*7\2QaJ9U2pb6uUgL'_h[W5R`rN@1m-^!.5tI!@K=!
%^e%--5TXG!(YKcJ"<`:N"+%Qs!Jij:"iqH/!JM[^Al(cDRKJL[[c[[LOp"Lp&5"6f1-uK*b##c&,Jk,@4VNMeJWic^WWLD(@<<VJ
%DuqK0#Ck0P6,TF11.!3Z-"Okl64KD66VT.<UJ;;_d:lTT1WiZ9i!mSs7YI\J%Z!i93([Kl^t/$q-7FV1"@EKXn<6cK<ncauX#=OD
%%2]Mn_O/4C]cHZP0eX00V5ttY1p$rV7+H/>mSK)),bYQ7&n6Ar/Z>Dg.)%"iJM<3_M1m*iVKRa9.q4Nl_F;Pf`lm\lXG[LX8Rj+?
%%(Ia;+itkP7YKq$,ls8#aak87*?te=.S:>RS7#b0!e%:i:aMT@BFDjZ$XbJU2%E(k<J*e94M2]OD2)qeATAjqbURNc_N@8k!BeIS
%*DJ2&Q2t9Q48Qc$L`1/mJ%e_X((;+?WCAF_$NKuira)4LlcV#9VjdrN<.glG_Kc94*?ZiHG8nPGNC+3t"#CCFWeCI$*pE^@0'e6a
%a?4i[.UH"1X._8F,Qm)]L*(=AaT*t2!$XYa-HJ6`II&`uq\/]4$l.#I;YZVgL(p4(!!A2nH%%+4^ht@m'Y6mlZrgAVe7c+?k1>\2
%,KN/t[U\BkjkqlH%(2HVa9#m*/!QAdHjcSjMoG<&`IsPH1c73.ZJd,&$_eo`@R?qCVW=DP#k7oH)1j)j$>;^[=G4X5?h2k[_G(1F
%[1*3iH.QF(XZ[XAQ9],:RtOJG8]a7C_0@I9o-l?*fWGkM-7@P_N16i+^8BEq3(:-UFH]E=@3a2f+K7(KWF%5L,.o:6b'Q_j3.o%-
%fj[@_!EEc4P8OthURPb_/?6fAN,p*PU</4TD3[OHRF2B0$(:@UP(Q5UMZ<htMspeZ^Laa]-M*W;>E<PTL)OVrO(^:<aoRc+9r92Y
%9gOeYPE<\jg5m';)A=(kqe7f;WlZ*)e="H'gshGS9N>Oi)nZ94W&J7Z<D59EhNUK39ZWI;PjGka_[*`k,3fWQ$1Ukt]eO7,,=>^E
%28Hfm7RTe9a^A@1W5;FF@5/p((/o8+<g/RLKHV\&"F=$S2.4$^M**lh!,ZY?_gbaSd5TT""]-+G-6Z<";R51L?051[E^H,?k%dGF
%QXDu'd>P7BJ-7o>&Rjl'_DKf;V$IE:UnAVcPQql.+V=p"oIstsi/[%]E?csn;dum&WA1q[WmE7g'tR/=V"7E_kkpYpbSI#^HV16T
%pdV3U6)R[:'G2f48h!aKn!#<k!i:X8?AV'"l3)(dc$<GGX;O'oSZdo'"N,+l&Lr)A#*VVkVA,^AKM$P-V>C%Li=*]4KVc.ON*jZ#
%fC7u.+u_SmX"4f21Mep@K/smU/MaXeU?a*4$7$nEh[#Kh2bNaICP*g$6&H+4.pJ,GL^kG)^p]LFX)1SI^.Ql.(m35]1'1=1i$b93
%N`)n75T=4V$5m;i*A;F[K.5r;>\;@aeco&ca^fe,9`qu**6F_4"SW1eE0!oqQLS@B:"@Gl:J+Ps/&j_IeZ:1n^^7BSWZ$F;Jo#Rl
%_*ENFU6u!U7lQUpDhKCg:!&(G&[K^rTUAq::Vus\@fsDJ2^:r=j'EKIHGM:o,ZlsM=#[p!1t>,'KI5>Hab9*pEmRA5#(mP>,YU)r
%#Ff=!EA;P(2rrVIbFk++aXE@("qXqFa_2A3&T/4:jX)8YD.PDGJO0Y@"Xfoc,)[kR(Vc\4SfdHmfiFUKVV@D:P+g#7,ajd($&u0V
%O=?):3G:D`_jF:*J\bpAN8[5IScJ.gE>F0;"\(Qt,`F.'\hRA"+]0!_EeMDb*4FBaF"\2\AN',rZk+!'aENV4'inafIC^UF,#DYY
%PZaeT:`A:>+]E8VZJS2A61Z/f?\$/@HOM+8:lV6&(0=TA+c.6@k<K-rX/K!+.>`#-O9N"J:jm.IbOGgF=sF&cBIh%m:$"aA6GFpK
%kWG]!:.2&!#Z.NT?^*&,Wh9tD9SgQ_';?=s"HeY6KI@%F656AK&B3Ej,*>DW!PJ&obNh5gNjH!Jm`eMe1'0n<d7]*p?N(cmK=9DR
%4d+Nk,nH41=n3`Bc1fMLWZKDGm<LcK[7Y)dE,NhjoS-&J=ZD7UE*+,W8ZRHB2F?CZD+\WQ(;kYP/r5<SfZ$1-_0@dS5VJ?&c8IY6
%(nK6aQA/&q!'>hiBK13R6'p&?_?]js2TXf4D\bgA(JPpPXl@UE0g6/!B8-fHI&+o0bFlQRo\)PV'iX-#jD`TNBn;FM[_`j.AjP$k
%*[Ff$K2<[LN/'aa9Fr@+>^?X-Y9"kXoc:%J9*u59bK@+VW#YN3*+/u9nOVG*#q?sK).h,YnCtG>0D5KiU'Np_8^Ei5o*)IN"<`iI
%nHi,1EBLX.[))k8KkCu'LofD<";t>M)d*M!W8U?VL/Zg'D%J#alHB@IFFpZ2,qo^m)b!g01TPjKYW:j2^]=$&S/5H;%,q<BaWa-e
%P*$]%8i/6)Ud^-edB]ci7#;]O<j6m$2J_$S4CUCX@RI5l86ToY]eUhD@,jIF\OOe8hcUF(B/r3ZDu]qqaB)X!#/dF=mM-OrV@8=W
%1/\K:a2%AJ1@@G9IbfB7f)8#RTZmhHhr0Ir'An=iBIe2D?[(Iq+SU7,.)PW.?48GqdDD^ao&uB'-eReN:c@'![+WFuDR4<mG6j\?
%`,.D>'G9!)@Zo!="?'KOZIu=_c,S-K'\?1WM\/;b*Rj#+/-.3b\f"D6M:KEW2&nq-8`:^AO:58jI.OE^O@Kr'P*=.3,rEq[[s;#p
%@\%K?e\hbSBUrRAJ%,>l5\)q,d$4?2K^M]S:"CR'-d"<*io/ku)gtm'o$Il"Y?M.g!(OdSRQC;]]R-"ap_(@qbY^ls!1+bbN0TFH
%<hQ5G.SRP^*Y9Z?'ba9CX=B[J/7-/C#"fq<CYF/1--lFW]#@)kS'YsG,%br%;$3MHJ8"bc["ZMU;e/)M-og.8a,TbuU"52"RQ>JE
%n`ndIcMAY*,cXKa0Ne%CIlLGb0gcUUa`<.tTO<6,&nqQ2"U.lL&E'2G71$l@)9t3M$/k.o\cmLN2i6,h;VR.gfYmI-((ZX^0?-t9
%`NW&*g+ae2nR]T@I52@UfU*[3B'!e;iEZPZ^;6_eJbK@D'B$e3FB$`s`69u]E??8#UKBL1W-j/NL1\r$\:a"I)=dR%+oMP6%k[KU
%*@`D=i`%4oE7?UuX-j`(:W**(^ml0831:2WTJAY^;K9C@iXIBqa[*&6Zf,XdBEHJYkn8.b^*;IQ<K4$$=\@9A7s<GT*+7GZ#$>th
%@ju8Q047*W5kc)G<R>.U<ahWZ<"m1Np(]QE"R,!pI=\'O_L?=1b2KphmC!J<_?acqE07i.E?b]8+6Tk*9p#*)8Bj'?VV-D0StVb/
%+Ap*"P]<kT;#KFOBLS:,Khi#m7)^7/,,:"6=*62'9U^i"KOY<:V#g?CV")1?@8f^KJI?*1R=nV/GO1F,YZY;I$"s[KgX'f@)u;Br
%c`a"lYn7mA75=/%K7]L,a!YIi^moA%%$$bWXhn-[K*SB;(KHu)!b`B^*>!hnH!g8Z]Ul.TP=&O#(raLK]UEN:JmgFU+Wt/g`/#tI
%INrYa\4&>F3fKV['5Mqt"'cTE_5EC7lY1<%Ks[L-#+oS5_q&:q6\V[4fjs#KJ.kra%2;+Kn.T]g,HTA1)B63S,G=9Jo7l+p[#bhu
%WJGKg1r;:>o3%t1*$5Kii*(S+BT'/kK0#D;R38Tk1N:PN.YdO^3gebXCI&N5$Y`#J6<__QKE<j'$/XX<$g<ZjjW.*ZC:Il>n-K5P
%Mg3=$0I/*Y&5)FN;6YQb0PR#<Jqee=[r=AeBI[n$OjP-R"S=]79btDR%33k0fAFM<Q=39tBU35'^:4^Sd"!1g5S3is@Y"Q>YVN!X
%%E>fO%#;!9,IlMGprb'9EK,ZaP+Dt?i=[:InQ,E/<Xr4'#$H]a_T\*2<)1g<`pdP2#%7Q#WF@o&5FP.R<DACO*/AruQNA'0Fq$ip
%6#RJ@TlM<9n0t.:NF;f)'TM`[7!1I-&2s%Y\4ZWJmWqf3au2L5((R(4NO-<0'uG9CJ!4agOJm^<8:c0koW8t)X5Rk8L?]&Z(+kQf
%9ZjP-$kgb%\h.Br\9T[I=:bVM65nfa8.4.VW8JF!6gt=X]>fX:@88L'6=5W6'r#D5-57(i1CX"EAO?OHX,of<,\TJRCt[Pq&iLPm
%@477(!+7@fH`F/;q#n26+^FddpkiH+AMFT)$K4rT"FLR_dI8n!M&N#i))3=Q&d<p)0_bZciZ$]m)@@M8O@5QU'"829.5B0\9(V^3
%643@T'#P2NM4s$e&:OEjT`oV"&d+%0T`o&!'#X6p'#S-364=(J8@*r25KX?UU/3&:fa$],'SO.57AFRm+:I%k&KHSC&en]MkjJX2
%U4.^VWuk)`)lb(dKeBH-r6'=EG\JWe&XGo\C[m\BJZ8a*jX'DUA*>7BketD;o8n3Y&u-JbkF:q(Do`3QFlJuI'j#!_I.+.fP6H^+
%Xl9RE_i3p_(F0Gq"B/mqp^!m;TP#pY,baB&0_Ba7RkHt1"EBnD_j:O`Q6N89FV=!<TslFm?/]RO/HsCX^J2fQY7/'sm\#u&d1-O(
%,L'-5lengQq-lJC.Y^?Tq%5CjGD$(\;Nau51-fhCKB.a01lP*.Z#AKJUhi<I$81GkNS'+rDhfG,B7Dc`g'\qV@P1]S)Aqi4[bIR0
%J0a'Yk)g?_!08Cp#:]ITIHF7#L-u^uO8kn*$bbM0WX>7q'n9_ENE`V\hat8!&-OWO#+al7Ir@&E6G<7"6bV;g1=Vp$!C<dqI7c@g
%W.7qMc[i_d>`=`5eJPml?L;`@^23us`CL@rqc700E,))L\;Sq)W0adG-Y'Btq&scZ/3g-S&L`OiY]3:PgO9XbTh;;Ko*R*Vd@&jL
%ML.FQl-89;LgY$?"T^8Mk6T/IM&3=!?FUXK7sF2b#XmWAV>0utCb@@,kp6rFFuTWGB_(*#TE.oPi::>_"7qkDes9n>cbkApr/?oT
%)<ZdrfTV+2gN0E)J4B9VRUG<5JuY&-H&njtW/AlH;8XCOfeCEY_f.7H^]Epc&98_q^E#l*Sf>.dHnNM&0j\dE%:)@jeS%8O7;($'
%\got'0QH8k+A;->oTCKke=*"?U3b98/7c7EQl=k!THtrYlm3]X&.rKgN'hC6042J470TZ)3,+(>,/]F<V,Sp"%>2-50W]Cq_sY@?
%\G22A?%[U%C#6'A3a4r0U[2,CW;6+Ip+0H#b&Eb;;Hb#J1,JfLXR:K-6fa`lZ#gi;@">VZUR'3]F)O+l)^Xu--CI6HE%'+R+T^JD
%(lgVl9gPUBdkO+*(ht^=0^NY'21k931-?aPnP55R#18*MO)EGK+;E<h.S(RU&AV;'8SN$@1)m]Zoc1C!)2h@mDpHJ"<p\UmAB?0W
%p=oTRV'n*R>rDZO!RosJZ\J'3]F4sf"f%i2il!!4>)!)8Dn1L\4$>-_;Rlku7CP1#*Lj5$"^#1Vh7?N%U$eR\A/`0V7K]Eah%#;q
%@U*.?]ch1Oe/WiH6\39t$jXrmQh/P7i[t>_-S_l;Ge:4*R"m+ohlNs<TW>e0qj'L*=TTG>%)XoSM&S+JNa':5VH\_2qP&U)poY2:
%Mj5-NkG3*Xg??.A?JJ07Rm7f[C%r+K(KABD0r1PVEIjRubj]3"!0uRCBomg2h$-JF<J/PHJ]Qn?cNF!#;p$#rh+.r]^o2q<B[0\<
%AGIFU/cVWY`73^(R!aR[1)lIe(<ES,hHX`=@TcZDJ1(FunuX#A:8d@3Hj_F8[`i)]VdWB_F2Q,L+G]@&I/>L*is`sS#,Yf=h+';%
%#GEW[R<W`[Y6;k;I,c\tTsNg%HtAatbNiZoUIVJ#?1$"Mp<D=O[&NfZ1p4Hq49/!0L5t#ie0mt:;#Lg2PB%\bB#^`RNW7.5cB-EM
%_JNnBAb=t>5M+-BaDef#K`BR]Di`R@:M'^]`djQsjYkg^s6u87X,44AmHqhS#P&d1O>`=00tbVeT);DOY6sIMESXtWX)[$LMArc'
%Wsst_6hSZlKrj^72mQVPj,ke,(6\bU_!TDZ<gsHS!6%%5:,'*]2992f1#KgI%ID)e92a]W(@!e!MTB`c:1@sBL67?2Q?`ReCKB[!
%oZc-#Gb<H[3XD@"IjpfrA#bR$GqmekK@rb>au?Bc\G28_1u&aSnh"iB0$Nt?O/84+l:f[t"k+sCerLG0?SfBjb(*!.1b#Tm[JYZG
%7'7lSog:92"25n?H!q.Z>EY;ZN96&&;R;?r'b\%':K_X&hBF"ZJW%kLH9B2+AgZ1s^4d>A*o@9`7H5m<Nq2a?'+plU$p'<Dc'rAl
%-T;JEa28RPK$:X:R0W"4+EMIX9%S=jJi>Y*T]/pI6pkpJ?+#rbL7jO4Jh7G*/0ej2Z%q"%1rS=.f67bBUnD-'*]k+](!d-gh_S:8
%>^+5!4fTY^/SQ*I2q/CBK`j":e.;gJSt]FVWX.Kfcr5gP7tlgS%]W[;MWfEp:bs:FU2&h@bk&__m]/l@W$7U=o$`T+W.n]9>@B8V
%TN-_ec)<%)dQm"^Se:Y2MWg@77T8;U&-&_2P,F0<)?3Af;*Kp]*#:rlK;KrsUA9Q/6*&AWJ\g'Vf:cpCBSRM/ju$RD^b`9CBSWJF
%&iO%1M0>geW#^:BpU.nr8$bS>i*<(/l]ECVJa6!'?+6R!dJ1jE1H*0>dKX.kZ]/Wh\-amPPY^]C#A8lunPgIR;NM7DZ%p]#W.L,,
%Ug5h/:d8Us&pQ*,5ucWCAu)1DiV3Ik"/N^`]>s\u-^l1]\q,0p/6q>n2fl,C[`kgZl@Bo''gGG=33HH?hAT8UTE>_53S)_*B`jcY
%fgaJD*tBIK;,[Q#ihW%a;\.PG1b>XK1-^@mM<P7:98$(3%2FOs+b:"''h%1WO]a^^"<hHO,>@:d1m=bR_@Ne#[;UR]%'gV@Ds!Vt
%Z)fnhZ+*T-`_\.@:"F;q#=Y3klCd.IZi[)`2@S_b;'AMNQ+Y*QKFldkF(Y\ASN$Z_79Ta?7CEnUMAf<U.V_W*MO)Y+/[3\&i=i!o
%h-:dK9#VOn[^Xj<MGh-Jc4=,N8FBUm>S>pi6fOM<;(L'Fo3Nh&j@ocRL-2BT;oj`ge52BlUnQ9elk:9MJVYL%JWh9^MEF<:-qY5^
%V.iBABXXUh7&nVYKb:*0W"^I)eQ2Y?J.bk84#4+pGG+3G4?lO%]hiIb*/[W]SeL<:`'[C:-qTj_PW?R.69QM(;'[H,;IiC^V^S13
%<)HYa<j[`r)lcE($=+Vg0hRE3OJ#S!c/:Z['"#RJ@9A"$-D%a[o3lrUh@$07]SW<2OQR='$MdM_)N$;51mC$)IR6CG+Anp\J5ToN
%TVn^g7B*#e,cPGnbr!q28-QSM0Ns\Z'4DT+B\o&O"SG"_@Mrd-PT%l;71`#9b^6&5O>RW7)KM>l:E^a9;F<H6P(k0YYYV2f"<n3G
%+E15W#=Y4N5:B,=qE`R;U!mgF"c63PRgYu\WA-+?P_o^a>IoqJFjncY"4^*g#R.2UoBlWW<Pu]P$!J%=Wjmu9<+6u8YNSjN(e=fg
%iMIY398aIgL)r^]r(\2[q#Z8+,V=S2,[UU98KA(1-2"*K7GDLi\1Pm%@e&4V5)^2QijCpUH!N,Slfj^tR+sVF>$i<7b1qlBOWKqb
%J>n,Z'W)5/;sYso6Xd!VAL)+@G7+8$N_kg.dLnf:ng34Xe:@U";I>kn[#O2el:@]\h0^%k:lWSZ!*)6s_3AIVnU)4L02PBa4?lO%
%4b0P?%KWS]k6-5@nPGl.6qNSs;CC*m-jYN`,Un;/,Zb%38IYr)-'b<@7D!6ITn5\td)CXb6IiRO.9,EC#2a$`U`\gA-tZhbg6K2\
%F(BT-h?0bbhGC.#GY[e,O:R&F6C*b@U"h*p'08IR,"YF8--942:f7Gu<_7F*;UI7gCT&D=)K^%/UgQ&46jc>$?P,r^%uX6IWqK0Z
%K4*5YH1uihJh[t>$@YqO.:bf>WXrYcD('E3re,SoTLdRbJ4cOW"Fq-`+CLJu#>H_%:@eo0,Z9D85)^>[`oTb,.UI[:i,+1)8n-i*
%MR%C-+@<nZhn4;d<La:LYU;lTWi"bFlMRAQ!^JWGK=Vd$X15Ieiocaudde,d/2i]PCSk*d)]gD(,\[R`,l&&Q9'S[W.]G'q/)!Ja
%eMR:c`(1o[q(P^NW^1k!b3K,0?<>a;`8nWQOo%W(]/$j)G,.Xj4i")U%0`eak7iFRq,":FA/RrXb+4,KTd(7"P-b?kP'dQ9-$:><
%Q.2.t'lB`AL,osH6T6)V$W^bXUgTHL*W0<i,UMtC)Pq@[,U)dW0U_Y8X+E>7X9tO4"=h>W_5\%m9c?WpTKf+m'I]-?"B:Oh#ll8/
%+CLI6QDPDaUA9NN&ue57%n6q-j!#1Feak_1;bbgRc^@Z-3\t'0)c:7F=6;Z]Wo+<iX+KLKJ-u*KYUX0$8K5gC_EX_='Io9Q"BL\5
%"TfuM+CLI6QR!:tUUc*t&ue/U(Iea4j$KP,K_["!-Rf<&OhPTu\h[k#L@iTu#?DReTib=!S)R3e)N%OK'I.<ZM,Wag["I@+U)aA8
%'($h:PGe`&W^K!`=s7sUDl=b?3cst%`)nlL8:ji!)'HV(,qG46-]-T&#h8?/KS%agR1Ghe`s&Y%?A]L-^<?Fbl$2]'[_;PDBTtWB
%<!;*2CptY*GMEF3/$\"oU2=+3UVV/e\(i`tf^'/emfB!NB3`=-d^5`[1g:Q>VcDsC_B9l8lXOL9=:H-%4(GUq&a;<&a,Pn&UWGT%
%M40R@PBXJ%]@0>(02W;?ne.o8Q^9*+EHu8%iURVI':5&ALSQ5j,l&(XP<'6i+n_[G7GDLi_W@V:kiTcR<@%!s&f&63DY4?QiQV_f
%Xsr]a;%]NII5C>c,K.M5*?dcZOZOFqLlRRjL8G\Q%H0;bC5@7.=s?V&09J>q"47]Y?^b$&NTMaG)Hqo65)`H2iaW#>&\Km!(S8#'
%.!MOlI<D>9F.soX1@Ln]I,0@nO5D*X&RE5Zl89e)l-Qu3@WjRXU*Ho*`umh!iasq"N($21DGeB577BaN'"oF`P"5hW",VnsqU2aF
%D)>T'GBmr.BuC-<N&3#Yj/j$.]WS2h2]P5P$\le!:o!!#3dne7=6<P"XQbjmO/Rlm%?65NT$p5cO:R>.#['XFL2s1h#,*7u,!jY?
%kQT(p6omjZ85t8lQ_kL7U\TX*&ue5W+%@1aM91lL7<ip4YM`,Q&fs(iXhIYpKZs&*ADSO\,+(`l,(eu'e02atUEW$h1he@\&nV[^
%66d*g.>_Am>Y1`De:9qU87cL=d4Ul+W$%3`FR`bG;3A?o8Q<V9CoPNg_2FcHp5S]s6q-rahBOKoGXJ5MK'+u=+ll"c,!qTX[%Z8h
%S3c?ENCf5=,^r&M'ql+8"VMOneKmdUb@n&PL.#e'c%V9L7H-Xm]"AfnX#qQ5LK=;U7dS9d7DW`B]R.Rc"D;CQ6nk.N3eVHc>XZXf
%OuAObNACk=TJ6bI+!c;$oRk(CLk:_u#Z2/%<_/eD)eqp>%c)LLEEjbA8/`;\PNCoi\j<#89\-l*V2'gMOgmrsb^78sH<^X07J![2
%"p*]IgrLNG&'g>XI2nhd^opXtD$pm@!D?m(L5Hd5S!F7NgO5?=_RH`/npKl80\KYZX5Wk4G[VZ)Yo5h2>/hMMYaaQjoAH+sH$spa
%/6FEO$9k8L%KG3VcidMG:Te.46bPhjq6:oah1VUBKG5IB=:>ZbADIJ'ZKQjmU>Frr6;D(&:K2<e[A)[F'R6`7hS:QZOC(><"$,/p
%54.POiWeF5Um&^GK734dIK=JV\fc=Dem_T@P=EObBJMg,RpSd+i&rj3d:$X+F;USdN^njZ<&T1@99>8(U/r(m>=]&n/bkh&e`^Qo
%GbcE;oOJlBE_'1"jp&V4I'^Cnj.Z9VIaDnGP(EpfHIo"R-@`qFQU8OV@;EGu-\?p$0rX";/"5F&OCR2l[es`Hmk+e="?L4AkG3e_
%^`2LSF_N1/$DEWiS-h08he`p:Wi:6:!$_Y7@PCeE6:GXfj7Nis?Odo07>Np>YTQfGG3d"'="fhGrPQsa2=[JKeVe4"#([7$G_S#X
%3ZbYHd^86*6Vjq39HLi\%Bkl?nPD^2MglTElkGYFBVbj^j>V4-#fD0fc#AQF#F3G9:fRnZ+$Ap(QfWOk-:,sd0]m%V$#P,Q#G.i*
%)r@jZr5Lhe`&fLRW-GbA/G!rQYQu3kn,tk5?Qt7N/Nah&A.Mcd?.8a`9HYC1kD3gaASukXmoc5c"dpje:\\(R?I:YP\r?ttk+WSj
%jB'_ZhC2BP;]&H>VS[t+6$ibadYgFAAKo#JcMUlhP,OVQK$'pg5ni`]ELY">\ZDLF8.#,KplmNNaDd"j3&4KrNPn1<!7T+<N7ZE8
%JDIMT:au"*AQX3JV^`1m5^o@4:J>WK"s2r9Ka57!PIELSUMo!+\E@.uk:%8'/BI`9?jo';#30)!rd^+:XhPusF#)AqmuYM=%%go]
%Q+`)en>6OLOFd]!JDna1"o`[9`?Rf7X@B0sC_Ti4)k`D;DaqV6'#Rg0c9Pd+J:dUUD'fi=Aqs5**MXP3]6I_dV9o,D`NKO/-A[,9
%[jb1]%<&`8_+h`I]N[a#.'kTpN)B0E^_%>3r+[B4_Ef,WNL)>0?pKV=0-jHhKuBX,k]$+AYsT!Tm\\`9mV-pJPbgm[Vh5lFpZE)+
%c9C`e9*6*hojRWNSb!Ht6*O;7"?/\OfM3ED'gCU[b^dhTHrc*0&l1LYm\M(s"A9!(MPe>HD_/jMq1f[$7R7\m'K!QrG_$2sB*<&U
%TkbQ2)GY7u_Y"%rL<RO31JrZ'%>RT*F&S1,+:)QcRUB/e$QF^8L>Nmc2V?%8L7&oj(+8BZPZ`5I';"i\5dX[aC15_l);qVqQJs2!
%,o;XKCC*l-Q4O.H_2G\qF^Lh7@<Bf#=G4GJLMA7MF$l$ug/K(eW"L.J/b0\lU6'st1bp>6L>hN(9TSHa?:8VLPS3GU;Xgdf#kq_k
%"h.:$4B3*65I+#k&L>4V6583"7)*khq5nirZd/V*ob^\b.OUs64$pm0piUCrN2YbsX,Q8DJhmRT+Ligu:]s8p;/fJG7:Q?LW&bqT
%n.9%NBi9]&(s]<pM"&m%n@glN<!?g/8&h$[6F\IXJsh5Q[gS^$]UM;&D9#9Tpo3)&Qi*.";i)uuMW&=ROQ'7TO(i/n&IAUk@<f<h
%U0sH5MFQR0<jk`q9BCB>1D](V!YobZ4nd9/(KKpuiW6bK'bU<+r/uq+o^,WtmgMR.jI'U$'&j^kEH#iarnmqc$sJW-7JBEoMo+CF
%6)"u)6m<g@%%)jE1khY)eO%`gl4G2ur=<(ba?9OV4/b.b65&p48cFAeFINhqO9@9PP/d8>5T$Eh/!Lc3.O0r1p0bhS!$6CI?gScG
%DW$r!3X#V;7$pK#JpE"d1_-G'%#l[F#*=T0(^+EAM<>49m=N>Ba(R@Ph.mRr`f$b]$jhTV+cS03TS[jO\_S#cdlZUp^Y(6Z9-$]q
%DH^5.QTF!7:'W?k:T.=-A:=i:6o[boJs1lO[nB5P>;caF_F[K>`j?"!Fi3c'RAI+p5q,#.4+%jKX/qeDDhK;O7u2b<Jg_OlkNj][
%<A,ArQ=i[WGPo='3S+5hJ%2T%:82KCWkqP#V)]CjRM(nNX<:C$-&;\M$"AFu'H@>lK'U74p,jhIBq2$KW+KOO3l>1=Ljg7ejg%QR
%^*!\>$_$!o8/#jW_cscXQc#-\qqYbtTAQ5S(bu!-HXl`i-tn2M<>:'8W#u\\&Y`YP+o2WM4,4$4.&_t=Lg,1)6#idHNY!p(N9,-n
%nQK*'r,FL9e9"lkTEoEJU0slAMT2[O@RjOpTtT$a-pr!7b2=(#7Mq"Qp@<PB`TrhI_'b-V&s=Y5"d*b'&;/P:gh7?i1bEULXU%Gm
%4mgDlDt!$r/ieqRIW*SW3&^mBnjLrFe(s__Uc8ofLiII!/$UKQ=V.^PCAe9bqpb(A4`bqpbUtD=#)QFu@^gMU=&2V7]t`'G34p$j
%i\6j'/^TQ%SHsXqgeVhihG<SMgg@,dq3#CECJilt+&B'Too+CIX4eJrW97g^;pk&)G0k>We+@b#9cM!12PB;XI:4\YNa\Q%[-qOX
%*8Yn2VmLr3_rRYRKP'.;c80FS*:l"bm6].'Sb^LFSK#jQUNXY&(aZS0iYf7aNd28f-LD;lWJ8cj@ClZ7J\0bn&&Hs7V&?eDG;F3i
%%hHHMiB0fl)Z&tdWbY]"BAdZ5beW%6RE'gE(=ln@fObcA^s,9<@(S!P_`#F-0YV>TmtY%V_qQjU1>A?@1N7Q3beW'+F*Ma"<?7aE
%&+'X.R3F^U3t6Yq0$-3`H<d=#%MPRLB@Iq_3Jqu2P<\<udsI_M;^9k3n!a,bI#P$b)Rrege^Gf+qho!72i[cNJU,fm4Zm$I$3fEI
%g`H4C?WpZTh(KONVl/Fcpr%BRV0?;0a'X;lfpfJNr9[R(^]"0)b;Xp]r>+$5$GDaC0E14N^O>_@lYg[5I/`qS?[_V1n,E+\gQt&"
%&%@&LakuX'UW`;mS'1eqX3n&d4m3Z@konqug7An8\A\s?o-[#O<q0Ha)**.DCcrYXLHY7-0r>Kli%&@<WKVYK)*KG0@/kZ=+oV3k
%b4e<TFt57Zg?OGmPu@A[mo^<)`"(Aq,sJOO$#\ZKi`nbR*-P?3]YOoo#fst4a\:WU1oe.aWY65HV%n/I0^D0=g3lm]m#/b3lsP*Y
%a\n1W]C%22qjq&Um?hM<fT]Fm_>>aq3.gn6]jnXGb/Lp*kCRX$i5us:gd2rlBB@=h#+kk;.)Uq\C<@eE[^_l:-;Aj1$`GS,2\T`R
%:H*Se[^[.JZ?F'0p\qQbs,aWEj4s$`O8&Tc$hTK9c9I_?o*+ODCYI%b[%%)!g4`tRiq^(tmA;.a:,oE'4D\f#.V;(._P3r>B[n,n
%nIuXbHgq)rs5ZN?NessiU//\]2RUGE,J(8$2M#4oYHUP>\uuZ>oBDDKG>'f/Cs$\b#2W_G`<1@3gH2:s7dlhXi!K4Ga:n+H:\ae9
%o_uq+NOnn$aI8O@:![5h^ljahhO1d;&&dAMR.3bNqt;A`7,rLT9]@jMSBi4tIZ2a!jps1`If9nu*sc\LGZ]M&H<TI3FF`13_uuYr
%`!kMZFMbC,aOQ.HXdCoU:iC28_#nWD**QO*b-)lS*(+88fHk<^a3($(^rh.:`]VO*r^;X'B8V\8'H8\S2ZC)uX18#[*[u7U3W-[+
%HFNdA2>MLW;)@F]ORLPa+4&<M,UY-)1S$E\ZX_E+ba(>0DXB6DA/<$jKecQ_AkWm)cAj:Ab`34lnZ!8"ktLhG?#YAi9B6/Z]U'Z=
%'N=#X9_n+s4&b_M=(b/'?t[V,nD2BSpigAnO)h*G7D9i5e>dOSg5W&^Y;pQ5DF5)AVM.5#*U6WOO%Cp,`$f8Y,f8ao-!q&k0gd%T
%aL`f78%0WaH&1rZ7=+JVpV`bo#*gTpX!ZCi+dcf%]Thi5F(=e8S<3G`@:nHFRGKQdl"tL=kE@\b?THU,PqtT'R[r^1j@jJncLc;A
%9Q.Z]BDU&#B6oRO8=PH[B=`VSc?'*K-`eEV9`OrU`E3&9Sm.RY41\*>PugQdo/J23.V/.6@mu?cY8Uq@pVnsSPk78-ELMF@oq/XS
%8gSja,#+sr\LU[o7NS`H&B\9h&2L*8kWpi&WcVi1Tf)YPJA<Eph_<Bk4lc$15SgKEcA:I.9upDB4\a<pDD-a`??aX&Ptn?h:Soiu
%jF3Nn)6,/2?m`F1RPNWZV.ea1OFDM,`*Y[C]o>cA!6O5V=jf<l10p+q@1_j2\cr(4FUOQZB4&I(PSc:=%pX;7p'4Z@U0WC?29k1^
%ok<7F$BsqP_'?VQ3]Z;N!0%E\(c8VL?G_pLUE_QDA?L0bQ5r66-thBd-o)#q#LM+\MB&X,PPt@ra1uP1P+0lfaj9XbFtKPm-A9;d
%A%7L(Y*)I%AVP(\'n*m&R1e7Ao1No"Cf7;j%2uJnT%5"HSgh&d_qUZA[sg*gZH,JM]<Co/='YMdqk1H'S*&`Xc&L3M;qjoT\t#d1
%WF`%m0`A5c;jro5P%R>2V>#Ui\4eq4A;72*>193&FCTPg=5Bj]kiJh@2b$aI!O2g-:N<KJ(`g>h3"m=&O>us*)#c!nc2Lnt4*S\q
%-E1g4RRDdOFB]tj5ZH7f5<e[[UEe$PB#\ql.G`Lh69;P,fK"cr*95Rh`c]7s.)%1k^l>#R^/g!nfBB$S^qDe8Egr.TW>^NPGNHst
%ZBqP6!EAE=b%PDZLh+D@*7-Oci#1^TKY*!l1Q,-G$;@Z]/!X\6Ug6uH,_Cc#ag\.AO,@qg\AsD74AU1!T1"p*]g1ZN[c1n+dG,?V
%/3/p99QUNSZ0Y5:ZQ2-B'%8(Z8fVlR<-S.?AJ<Oi.'Ar"l4-1h!`PB1l]5*XW[JPL2d/UpnM`E*]1Tmqg#ZKWlo:IAk:tS_Qijt!
%V"X+BbriNk:q-e9.9IaWCN[YTW29$KAMh9*e9pc2jCcN9hWTefTTug5eC6"ipe11%2RV;\=[R`A3g,o%2)A?=To>!HQqWi.UDUoZ
%0m@?*-:Nfkio2K\ob(3"N35KP`l.3W"<!FNYMq%u4V7<`'1B!FZ$.r2d-dd<Cfh$S>:u!GOjXuHJi=Q)X\=!%c)XH0\E?&.2r7R[
%')S![>s0YgSjuh;cgaYA/34u=50\RkEnDY`)27)\Utdi2XsaHhTt&PRPr5QFKZS/TgPrj>[#9o?jV'rUX9BMo7-%\D+dn=)J*."2
%Z(4Q@e=E0#Cpsj/c"U-\W\Ve4/oSYH\ZoFO:J#,6lCUif@<&TjARM-#FcqI@)k0W%au;Q26,b$\9H2Y0XD,HA6u'ofMlTr'6%*Nj
%GngGCVA)<U-fJ6O=3_F@KtXWp%eJVpf$Y.(HnVLKPXp'hoK9Rt'irGHlF#5-G(?\re-$;3MXl8UW4KY.C?7YFo'q7Q!jE@)djpVs
%,p-1,mC(]*IW\+:87@?3EmT%E4r/eu;BRTrp9B<F0pF8JcD#<=<038n8iVA;:U6N@U!qsg$+TbT&f-8qEeS1_=m!0h(b>KTGUHb0
%=YeR1:H_sq,fq+(j%AiI26P!+(8)klB,O1B9sDm*KNa<63\i;c$IQAB)*LrYWYfL5h@J)qlja7:,8nC[Sdi\d<6%KIZ*9EOerhft
%7VN^3/L5R"e`n&!T`^n;+"TsVfk#7Z$\JI'>f%!9\GfHa61sha9"h`q]g0`sBrr#hG#jf.<W,r2C/+Ie0#-Wf'X`V*l%<th2YL.h
%j`[S;::dfE-k\Q\$pQXPRTp;Td[j^5af]cT195H:7jN`KRl"hN\Wpc_2nsGLs-sR="'24.k5klXS5Vl\bBHkhN6RSoOoXbS;a>!9
%ntqrRN+&LS9V>mX:/iVRN_X7o2kDBNb.NjoR_2ZN_:,&655`9gNf7j3Q.'Gf&VH[(I`Ab^JZ;+\^aOF;H60HM8FqfSf[a=cG/HS1
%P-2%l';0bF`@VK3:LGD?1bDlfNhV4`*oB4<Z'DU_WFe/;7r-W'AK>IqBKO="G[;/>O5RS7N<V$f\e!C98rG'V<Pra`a%kqbO8@%U
%#Zngd[#+5")TY38ZAf(8Lql3TVVR[.?<kiUruDnooLG1,@1g0qg*1ph=RUP66#ID@2b@d@##kf?)3\B+[C\flC;a@>ib2R1R16u4
%.C,HGQTqZuGRuuqJqN^)Zhn`nA<XCG+6@%b1EKkQD4A'tJft:41'C`C*a^eY.]KtWQ!Ts"!':pJ"DV(?0d;&fiAF]([QU9YWII8i
%h)#aYd2na^>:1hN`8+s"8ccrdUFhR"]h$+X.c\OI1q&Y)8Qd4%5gAF/dGV3nNs!e4G$E?'iNMm:5p=s5.m2S`$QJpG1\TMP@X31&
%<K^X(;e5_#11)MBQ+""TL5j+!`!``h*1Bd;hVDM#m^s4;.9dc%D7V7iis*a@8$b>#>)Z9T#17g/+CeE@+MC%F.2Xg_!Wa^5GN^04
%m[:&6+l&bee8BU:[Ae%h=J/PGngKQ@oA6hSDAR0m:!%MEie1mlYo7I#d&$*87dho_17\R/I`_luM>,C+[)AY@'KU=!fCi4h!9q(X
%BoH`jS@1JJ4Q+j3-B2%f@_n]d_dS_Mh[%N.o4emY;"X#_SE@8G4urIS;[m5(E7pja4'U0[MQ^^GlKnYpi,NpXZ36:Z`\1lKfYq*k
%3ZsJubHf6r(X-CAjAjV[ikC[RLL[1F)>8?AV="P=nX@r'j2=[bUcX4mV=3Q*.DJF9<RQCWN05'W$,i&^JjZ-lePiT/H@+U_j'Yu@
%KQf50m(ug`DA>d90n&TKoW'('U\7*l:oWaV69S*_)LA,]]&j=qKWJ9\;R%a07J/.Mb"_Ct/d&/a2-a>-9sb;"\l(slBR]@cTo)a,
%OlQc-+2qT_;<3eg^g;tXO-@jK^#Xbq1nrHgZqM0#&t\l.8T'GcV=1a*ce_:VK^%ZK(JHlT\5k0)ig)XZ?'7("8Y"fr>/)mf@Y6rh
%DD\%*Agr!br<"ONm@'\MDn`)uV@skt&"N'N>4h3@_`_P.Qb1sl)NXs[XV.^g['9`MZUM^daK-*&8A#Q+Pb!Cbd[h\j&o^N/,&kJ2
%IT7]-1>fO6.3ZRP%-]MrJ/3N"$l**SVL6a<K>%B44t&Ci%gN!_L^<&)>a.TJKtjGK"chtR;hZYt8[$KAij]<YCspfB>,o''jTX_"
%1!([E?,o\j8Q@q6K.rc]>rpnMDHW_cWaEgl*oDLQ+le"A.q$!"I:TG&2Q>?D]G!Tm9jM3hcr8DA[fm48)81le=7&I)+]CPV2D#e_
%ear>6/REjZG!&C]WZkt,(\n9RrmB=Edl)dZ%ZW1Br_:8.)1n-Bp-,[&?@A?P4G=+C@!/El9nJ9?^FR#;=DgS=._mY-l5#ei@)jkN
%V\sk>.Z]VU.[t\Zobl0F&1`DKZiY-g[>mpa@R6GJ[=Q"-N(V=QEWK0;ZC@@<4V0+R;@.*&("LH$5<iZK4_,`Ul<kPD<i"oTTUJoh
%QO5.?A7X'BFE+o7\)_;0&gc$Q<h2K*6:CIhG.Kn_6K6][/VpuI,L`P<9OPC'm7etI3/cj2PV!b9'/E(4-Aa!kM<V>"0(jCN&HnI/
%NA/X;[aV.sYUJ19l(jjY^Pk:RM@@n$="cn(?B#N:1Tf)0*Bq`+C6EeP%VKi*`BaD9(9L^mI7CSHa;DfdhC"9XdYAd5+I3qD!+),k
%michA"%E8Bq\dO7%b4','p#L79B%]Tr=H0@8uF<rD9%0.8bMl"PnNpak70t^1e3]5B:K.RUJmQS#[5<'8=Q<Eh(>Y(@8R/)l,p>M
%hCr-l?6S#[a?YY$glZimS%GI2XBY0;$*=%F\k:.j68ri$!p-1mS<q%\-I82K"d8,(o"N2N\\PQ=!%l:4dL];E3b\isAVo^HMUnG"
%9bRE2^A9<<i!9^$3UtV9eK._h-E@:(a,6W_/$\>tC"Q5BhS_V3)_n0_Z3LVc2k/Hm'MA!%KgKTqETS@cif4@k"q1C3K%SL4=sGm[
%FY8aa5*5#AUh2^8D/j,F-].u=8:*UY5^9Iaq#n;cU.e%koNA_;1RGg`kc4T5ljBNf$R>g97J'nhP4XGSqUE&p=XRTH&ps)'>h#b>
%fd2lR3VTnrq;RC$DI'P(JV>f%"bLaZVFh'GQ[%CW`&4WLEMK%6`ej)X!f9ZR6lFh:i9%9G"$"\R%+?s-^fSB%\+B/XdD,hVENqKt
%SaZ):Qg_)pHR#UtNbRj&;7[Z:B?uE<l#E9YC[U$CE;8.J*Z*])[uLcO='b%`%'LJsTR?I:jicPrri[+ks75I"duserrklot?N%p6
%Qf%f:X#D.!k*mH!5/4\BI/Ormo%!cm5Ma&!oBM+?hnOGZqr(?.s"=q4[/](EO+71Js74QUrX[cQ&oR~>
%AI9_PrivateDataEnd
