%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.2
%%For: Lenovo
%%CreationDate: 2/17/2023
%%BoundingBox: 0 0 990 803
%%HiResBoundingBox: 0 0 989.7502 802.9010
%%CropBox: 0 0 989.7502 802.9010
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.2.1 x236 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c004 79.164570, 2020/11/18-15:51:46        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   dc:headline="Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set"
   xmp:MetadataDate="2023-02-17T18:07:16+02:00"
   xmp:ModifyDate="2023-02-17T18:07:18.215+02:00"
   xmp:CreateDate="2023-02-17T18:07:16+02:00"
   xmp:CreatorTool="Adobe Illustrator 25.2 (Windows)"
   xmpMM:InstanceID="xmp.iid:3cbaf022-e552-7842-83d8-43d5065bb0ba"
   xmpMM:DocumentID="xmp.did:3cbaf022-e552-7842-83d8-43d5065bb0ba"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set of element sculpt architecture illustration</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Lenovo</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>element</rdf:li>
     <rdf:li> sculpt</rdf:li>
     <rdf:li> architecture</rdf:li>
     <rdf:li> recreation</rdf:li>
     <rdf:li> sandbox</rdf:li>
     <rdf:li> construction</rdf:li>
     <rdf:li> tower</rdf:li>
     <rdf:li> generator</rdf:li>
     <rdf:li> summertime</rdf:li>
     <rdf:li> fantasy</rdf:li>
     <rdf:li> outdoor</rdf:li>
     <rdf:li> activities</rdf:li>
     <rdf:li> background</rdf:li>
     <rdf:li> preschool</rdf:li>
     <rdf:li> collection</rdf:li>
     <rdf:li> play</rdf:li>
     <rdf:li> sea</rdf:li>
     <rdf:li> illustration</rdf:li>
     <rdf:li> set</rdf:li>
     <rdf:li> object</rdf:li>
     <rdf:li> coast</rdf:li>
     <rdf:li> game</rdf:li>
     <rdf:li> isolated</rdf:li>
     <rdf:li> cartoon</rdf:li>
     <rdf:li> decorative</rdf:li>
     <rdf:li> city</rdf:li>
     <rdf:li> house</rdf:li>
     <rdf:li> build</rdf:li>
     <rdf:li> sandy</rdf:li>
     <rdf:li> fortress</rdf:li>
     <rdf:li> coastline</rdf:li>
     <rdf:li> castle</rdf:li>
     <rdf:li> vector</rdf:li>
     <rdf:li> sand</rdf:li>
     <rdf:li> design</rdf:li>
     <rdf:li> detail</rdf:li>
     <rdf:li> handmade</rdf:li>
     <rdf:li> building</rdf:li>
     <rdf:li> roughness</rdf:li>
     <rdf:li> color</rdf:li>
     <rdf:li> sandcastle</rdf:li>
     <rdf:li> figure</rdf:li>
     <rdf:li> simple</rdf:li>
     <rdf:li> stairs</rdf:li>
     <rdf:li> fragment</rdf:li>
     <rdf:li> piece</rdf:li>
     <rdf:li> casual</rdf:li>
     <rdf:li> diy</rdf:li>
     <rdf:li> creative</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="208"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgA0AEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYqpXVwlvA0r9FGw8T4ZXlyCEbLPHAyNBjq6hLBdLdtvyNJl8VP9O2abHqDG&#xA;fEfi7Q4RKPD8mTI6uiuhqrAFSO4ObwEEWHUkUaLeFDsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirH9VvPrNz6SH9zCd/ds02rzccqHIOz02LhjZ5lAXC&#xA;8oXHtX7t8xC5MTumHlrUag2Uh3FTCfbqV/jmx0Gf+A/BxNbh/jHxT/Nm652KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxVTuZTDA8gFSorTK8s+GJLOEeKQCWLrknIcohTvQnpmANee5yzpB3oq51W3ji&#xA;5RMJHJ2XfMjLq4xHp3LTj08id9kPDrZaRRIgVCaFgTtlENfZ3GzbLSbbFVu9XijC+jSUn7XWgy3N&#xA;rBH6d2GPTE89lltrKvJxmURqRs2/XI4tdZqWzLJpaG27V3raxyBYAsi03ap6+GOXWgGo7rj0tjfZ&#xA;uz1uKQsLjjDT7JqaHDh1ol9WyMulI+ndC3nmX0pmSGNXjGysSRXIZNfRoCw2Y9FY3O6P0fUWv7Zp&#xA;mQIVcpQGo2ANfxzK0+bxI24+ow+HKkdl7Q7FXYql+s3/ANVtuKf30vwoPn3zE1mfgjQ5lydLh45W&#xA;eQSKNOKgdT1J8Sc0wdkTbZRSSabkUJ9sVtLUeSGUOh4uhqD4EZGMiDYbyARRZrp96l5apMuxOzr4&#xA;MOozocGUZI26LNiMJUictanYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqp3EXrQPHWnIUrkMkOKJHe&#xA;yhLhILFNTkk064EU0ZfkvJWShFOncg5o82I4zRdxhIyCwhDrCf75k/4X+uVW2+F5tfpmP/fEn3D+&#xA;uNr4Xm0dZj/3zL9w/rgtPhebR1qL/fEv3D+uNr4PmFj61b0+KGSnuB/XG0jCe9Y2tW5/Yf8AD+uP&#xA;EnwS61mW/vIreJP3shohagA2qampyWOPHIAIyDgiSeTNdH057C0MTuHdnLsR0BIAoK/LN3psPhxo&#xA;ul1GXxJWEdmQ0OxVbJIkcbO5oqipORlIRFlMYkmgxWa4e8u2uW+wNoh7ZocuQzlxF3MICEeEN5BX&#xA;Yql1wvGZx71+/fKy5ETsjdD1H6ndcXNIJfhf2PZsytJn4Jb8i4+qw8cduYZfm9dK7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYqxTzf/AL2w/wDGL/jY5qe0PqHudroPpPvSLMBznYq0WoQKE179hire&#xA;KtEVFG3r1xVAzQNGa9V7HIkN0ZWj/LH/AB3rT/WP/ETmRpP70OPrP7qT0jN+887FXYqkmuXZkcWc&#xA;Z+EbzEfqzV67NZ4B8XYaTFQ4j8EvAAAA2A6DMBy3GtDTr2xVpeXEcqBu9MClB3y0kB8R+rIybcfJ&#xA;DZFsZV5e1H6xb/V5D++hG3unb7umbrRZ+KPCeYdRrMPDLiHIpvmc4TsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVeZef8AzDd2Xn/StLYK1he2m5p8Szc5OJr4HiBmp1/1D3O77Oxg4Set/qY357813Wh2&#xA;1vDYor312W4M4qqIlOTEePxbZggOdhxCR35ILyH5z1HVbqXTdUVDcpGZYZ0HEOoIDBgNq/F2wkM8&#xA;+ERFhV88+cbzRXgsNPRZL6dDK0kgqqR1KggClSSD92ABGHEJbnkl3k3z7q13qsWmauqP9ZqILlF4&#xA;kOAW4sBtQ08MJDPNgAFhPvPHme40LT4vqkYkvbpykPPdVCirMR3pUYAGrDj4jvySfyP511PUtQbS&#xA;9XVHkkRnt50HGpX7SEDbpuMJDZmwiIsJ9p2uXUH5haFpNuAEmZpLpyKngVdVUeG6nLdIP3gaNTEH&#xA;DIl7Nm+eZdiqHv7sW0BYf3jbIPf+zKNRm4I31bcOPjl5McFaliasxqx8Tmjdq4ioIrSvcYpdih2K&#xA;oa+X4FbwNPvyMmzHzQKqwZiWqD0HhkG61e0upLW4SeP7SHp4juPpyzHkMJAhryQE4kFm9tcRXECT&#xA;RGqOKj29jnQ45iQsOinAxNFUybBoso6kDBYTTYIPQ1xtFOJA6mmFWua+I+/BYTRbwoa5p/MPvwWE&#xA;0WwQdxuMKGiyjqQPngtNODqdgQfkcbWm8KHYq7FXlf5mW4fz1ostN0ijp/yNfNR2gfWPc77sz+5l&#xA;7/0Bi/nu1WfULGorxhl/4kmYJNOw03IoTyfZrBr6OB/uiUfiuC2Wf6V3nS0W416NyP8Aj0jAr/xk&#xA;kxJXT/T8Uu0jT1j1vTXA3Fwv6jjxNmT6SyDz7bLO+ngivH1v1JhJpo03VKPK9isPmOycDcCX/k2c&#xA;Ftub6CyXSrcN+ZWlTU3RVFf+Rv8AXL9Kf3g97ian+4l+O57Rm/eYdirHtWadbgtcAhSSIzSq07UI&#xA;zS6vj4rly6O00/Dw1FA/WYP5/wBeYtuRwFr6zB/P+vGwvCWvXt/5/wATjYTwl3rW/wDOfvbBYXhK&#xA;1ntG+01fmWOOyQJNf6D7fjjsvqd/oPt+OOy+pOtBjlQlo1ItXBO9aVHcVzZaETB/olwNYQef1J1m&#xA;zcBjepczfSENQBt+9Rmi1P8AeF22CuAOtLp7aX1FHIEUKnvgw5jjlYXLjExSpe6g90FBXgq70BrU&#xA;5PPqTkroxxYRBCBt9juPwzHbqTFtamMJTgAxFOdT9+Zx10jGq3cUaQXdpWSa9Nu5zActGWWqyWkZ&#xA;j4B1JqKmlMy8GqOMVVtGXTiZtL9Ru5LqZpmFCdlWuwA7ZTmymcrLfixiApvQGYaxBvSocMB/qE5Z&#xA;oz+8H46MNUP3ZZjm7dO7FXYqwbzxpMVxr1levIwaCIcYxSh4uxFdq981HaA9Y9zuez8hGMjzY9qu&#xA;hwajLFK8rxPEGUFaEEMQd6g+GYBFudjymKnpvl6CxuxcrM8jhGQK3ED4iCTsPbEBM8xkKb1Py/Bf&#xA;3S3LTPHIIxGQvEggEsOoP8xxIWGYxFKNt5WtobqG4M8jmBuaqQoBIBArQe+PCylnJFUitU0mDU/S&#xA;LSvG0BYAqBvypWvIe2JFsIZDBQsPLdvaXkd0JpJHjDBFbiB8Qoeg8MQGU8xkKRvl/Tkl822N3zYO&#xA;h48BShChyO1f2su0o/ehq1U6wyD1POgebdiqX63/ALyJ/wAZB+o5ha/6B7/1uVpPq+CSZqXYOoPD&#xA;FK0RoO1fngpbd6cf8o+4Y0tlY8cLDjxB3oeNKjGkglAOvFyp7GmQbwbW4Es30r/jm23/ABjX9WdF&#xA;p/7uPudDqP7w+9FZc0pRrllL6D3VpH6k4oWi8R3I98wNXpruUebm6XML4ZcmK/pa8/3wv/BZqbLt&#xA;PDj3u/S97/vhf+Cxsr4ce9r9LXn/ACzr/wAFjZT4ce936XvP+Wdfvxsr4Ue9adWvP+WcffjZXwo9&#xA;6x9YuF+1CBX3OC0jEO9SOrSuQBECT0ArjbLwh3sz0DR/Riju7lCt2ymsZ6JUn8eObnS6bhAkfqdP&#xA;qtRxExH0pzma4TsVdirEvOBpqFv7x/xOantD6x7na6D6D70jzAc52KuxV2KuxVosAQCdz0GKrvLP&#xA;/HftP9Zv+InLtJ/ehGs/ui9IzfvOuxVL9c/3kT/jIP1HMLX/AED3/rcrSfV8EjzUOxdiqA1vXNN0&#xA;XT5L/UJfTgTYU3ZmPREHdjhZwgZGgwm2/O3QJLsRzWVzBbk0FweLEDxZFNfurjTlHRSrm9Atbi3u&#xA;beO5tnWWCZQ8cq7hlIqDXA4ZBBoqN7FuJB32bIyDZjPRC5FsZvpX/HNtv+Ma/qzotP8A3cfc6HUf&#xA;3h96Ky5pdirzmWvqtTpyNc5uXN6KPJbgStViwrQr7HFSuxV2KrJU5xle/b54lINFD6erLqVsGFCJ&#xA;o/8AiQw4vrHvZZfoPuL1POkeZdirsVdirEPOZpqNr/xj/i2antD6x7nbdn/QfekdcwXNdXFWlLU+&#xA;KlfbAkt1wodXFLW1a/diq/yx/wAd+0/12/4ict0n96GOs/ui9JzfvOuxVL9c/wB5E/4yD/iJzC1/&#xA;0D3/AK3K0n1fBIHDGnFuNDv7jNQ7EL64Vebfm1E1zeaTbsawqs0hTsWqg3wEufouRLCm0yJk4FBx&#xA;8KYLc23qP5YCRPKqQsxZYZ5kSvZeVafeThBdZqx62R3Er8XV1AT9lvE9sBLVEIOuQbWcaV/xzbb/&#xA;AIxr+rOi0/8Adx9zodR/eH3orLml2KvKfMmpvpemXl9HGJZIfsITQFmYKK07VOc4eb0mKPEQEvl8&#xA;xyjyj+m/q4MxiDegSePMsE60rSu+CmwY/Xwrp/MM0flMa2IAZmhSQQVPEO5C9aVoC2KBj9fC668w&#xA;zR+U/wBNxwD1mhSRYGJ4hnIWhIFSAWxUY/XwrbzzFLB5S/TkduDM8UbiBmJUPKypuepALVxpIx3P&#xA;hdfeYpYvKQ1xIAZmijdYCx4h5WVNyNyFLVxpY4/Xwo/Q779IHSb4p6ZufRkKVrQlhtXbDD6x72OW&#xA;NRkPe9Xzo3mXYq7FXYqwjz48y6naBBUelU7V7tmo7Q+se53PZoHAfex0T3lTVdu22YG7sOGLfr3f&#xA;8v4Y7o4Yu9e7/l/DHdeGLX1i6BApuem2O6eEN+vd/wAp+7HdeGLQnuyPske1Md14Yq3lOW4PmOzD&#xA;DYu1dv8AIbLtJ/ehr1oHgyep50DzTsVS7Xf95E/4yD/iJzC1/wBA9/63K0n1fBIq5qXYurirA/zE&#xA;TlqenV3pFNv/ALJMhJ2Gj5FjHojI25bPfy9HHQXH/LzN/wASycXXav6/gyK4P7h/lhLjx5pbXK3I&#xA;Z1pP/HNtv+Ma/qzotN/dx9zoNR/eH3orLml2KvIvOCc9EvU8Sv8AydXOblzem0/1BKZIf+dCEX+S&#xA;op/z2GC24f3q+6hr5DSL/imIf8lFxtA/vXXUNfIaRf8AFMQ/5KLjaj+9W30IPkGOL/iuAfdKmNrH&#xA;+9dfQg+QY4v+K4B90qY2sf71NfKy8bXRV8FhH/DDJY/rHva8/KXxeu50bzDsVdirsVYZ53NNRt/a&#xA;Kv8AwxzU9ofWPc7fs76D72OmUAVJoMwXYU3zxWnc8VparOCeRBH7Ip0wKV3PCtO54rSp5Vcf4is9&#xA;/wBtv+InLdJ/ehhrP7qT1DN+827FUt17/eNP+Mg/4i2YWv8AoHv/AFuVo/q+CQEEsDyIA7djmodk&#xA;3XFUr1ny7p+rvDJctIkkHII8TBTRqVBqGHbARbbjzGHJL/8AAekf8tFz/wAGn/NGDhDb+bl5JxpO&#xA;l2ml2YtLbl6YZnLOeTFmNSSckBTRkmZmyiLg/uH+WJYx5pbXK3IZ3pP/ABzLX/jGv6s6LT/3cfc6&#xA;DUf3h96Ly5pdirynzFE8um3SRqXaoPEbmiuCfwGc3Pq9NgNEJdLa3A8q+iUPMIGMdDyp6nLp/q9s&#xA;j0bAR4i+e2m/wqsPpt6gijJSh5fCwY7fLHooI8R09vN/hVYeDeoscZKUPLZgx2+WPRQR4lrbm2mP&#xA;lRYRG3qiOImOh5AK6sduuwGPRYkeJbru2mHlQQGNvVVIi0dCSArqx2HgBj0WJHiWjtCikh/RMUil&#xA;HT0QynqDyHXJ4/qHvYZjYl8XrGdG8w7FWKM3VmPXck5zhLugFWG5mgSYRHi8kbIrfysR8LfQctw5&#xA;jC66hhPGJVfQpZZ6fNHcNcXMxnlIorNUn51bfKiSdy3ymKoCkdi1pXfaM09wZY3VA32lI7/RgboZ&#xA;aFIu0tltbdYq8m6sRtU4sJSs2unjWSNkbowocUA0k40l0cFpAyA7inXFyPEVJg3MUoFHUYGIQt3a&#xA;tNwaN/TlQ1Vx1+8Ys4yrnyR51K8bS4bO5lMpiYs0rMSWr9kGvh75fPPKUBE9GgYYiZkBzQsYkFeZ&#xA;B32p4ZQ3GmT35R/LdkZmP2l377K2bDUG8Eb/ABzddh2zSr8ckk42X85/z+jNds59ydxsv5z/AJ/R&#xA;jstydxsv5z/n9GOy3J3Gy/nP+f0Y7LcncbL+c/5/RjstyU7hbL0X+M9P8+2A0mJlaX8bP+c/5/Rk&#xA;dm+5PRtE4/oiz47r6S0P0Z0Wm/u4+55zU/3kvejcvaHYq83mJ9R6bmp2+nOclzeijyW1yKW64q0K&#xA;AU3PzxVuuKrXBI+E0NcUhbD/AMdSz/4yR/8AExksf1j3rL6Je4vTc6N5t2KsI8wara6Lera3CSSl&#xA;0EqtGoI4liorUjf4c0OfF4cqLvNNE5Y8Q2S3/Gemf75n/wCBT/mvKbcj8pLvDX+NNL/31P8A8Cn/&#xA;ADXja/lJeTv8aaX/AL6n/wCBT/mvG1/KS8nf400v/fU//Ap/zXja/lJeTR856Uf91T1/1U/5rwWn&#xA;8pLvC0+cdMP+6p/+BT/mrG1/Ky8lJ/NmnGtI5vlxT/mrG2X5aXkh38yWLGoSX7l/5qxtkNPJb/iK&#xA;y/kk+5f+asbX8vJ3+IbL+ST7l/5qxtfy8kTpupwahfQ2UKuss7cVZwAoPvQk5PHHikAOrDLAwiZH&#xA;ozTXIBZ6JbQEet6ciqdu/Ft++bDVw4cQHcf1up0suPKTy2/Uxz11/wCWf8P7M1duy4fN3rr/AMs/&#xA;4f2Y2vD5u9df+Wf8P7MbXh81pmqSPq9Fp9oDev3YprzXeuv/ACz/AIf2Y2jh81OeZfRf/R+3h/Zi&#xA;SyjHfmlwnU1/0elPYf0yDfw+b0rQzXR7M041iXbw2zotN/dx9zzep/vJe9G5e0OxV5tKf3r/AOsf&#xA;15zkub0ceS2uBLVcVcDt1r74FbrhV1cVWQn/AHK2f/GWP/iYw4/rHvWX0S9xenZ0bzbsVY955sba&#xA;bQprh4wZ7coYpO45OqkV8KHMTWwBgT1Dndn5CMgHQvNPTbNM9BbvTbFbaEbmvIDrt8sU270q9hii&#xA;3ej/AJIxW2hAf2lX6Binib9Bf5R92K8Sx7VWHSh8RjSRJCvbSRk13B6HI0zErW8GxTbPvywsLVlu&#xA;7x4w1zGypFIdyqlTWnzzZ9nwG56ul7WyS2j0TfXNYS4raohAikNXJ6lar0+nIavUcfpA5Fp0un4f&#xA;UeoSjnmC5lLV4qSRsWNTipXc8Vp3PFadzxWlOd/3L/LAUxG6Xc8g3sw8s6+k4h054ysiJRJAahuP&#xA;iO22bfR6oGoEOo1mlMbmCyPNi652KvMpW/ev/rH9ec5Lm9JHks5g7A9OuBNN8sVprmK0ruOoxWnc&#xA;sVpvliqyBv8AcrZ/8ZY/+JjDj+se9ZfRL3F6lnRvNOxVJ/Nwr5eux/xj/wCTq5jaz+7P46uXof70&#xA;fH7nm5jAFc0jv7d6YxW3elitsp02FY9PiEShWZQSadSe5xcOZuW6D121suKXFxcQ2i14tLMwRSTu&#xA;BUkb4s8UyNqtDaLa6bNcs8F7bXoiFWSF1k4k9CeJNMaZ5MhrkQm89vHIjmiGHidgO+AhpjKvexUx&#xA;AE4XMtM9F02yuopWnQvxbhxJIHSvanji05chiRSO/wAOaPyI+q/D483/AFcsaYePPvTHTI00tHjs&#xA;R6KSEM4+1Ujb9rlluPNKH0lx8oGQ3Lda9tC7s7LVmJZjU9TvlZNm2QNClv1O3/k/E/1wJ4i4Wdv3&#xA;Tf5nFeIu+p2/8n4n+uFeItfVLf8Ak/E/1wLxF31S3/l/E/1xXiK1rO3IIKbHruf64p4ionTLL/ff&#xA;/DN/XBTLxJL7WKOznE9sOEq1AapPUUOxqMnCRgbHNjP1ijyRra3qg/3d/wAKn9Mv/OZO/wC5p/K4&#xA;+5RfzBqq/wDHxSuw+FP6Y/nMnf8AckaTH3fex66ISStftb5jW5sRshzcIPH6AcFs+F31lPf7jja8&#xA;LYnX/MHCvC2JAe+KKb9TFaU1uEi1G1lc0SN0Zj7K1ThiakCkxuBAeo2up6ddNxtrqKZqcuKOrMB7&#xA;gGudBHLGXIgvNzxTjzBCJybWlXmoV0G6H/GP/k4uY2s/uj+OrlaL+9Hx+559wzSO9tr0hy5d+nti&#xA;m2+GKLTXSb2UslswBQA8W7im+LTkiObE/wA3LNLpdJRxyUNO3HtWiDEmnI0XVJfyy02O081B4148&#xA;raUNTv8AEhxtt1Z9HxelapeSxH0owAGG5xcHHEHdJuGLfadaGKW0n+v/AAGLj5uaY4WpLb7WPq05&#xA;hWPmVA5Emm53yJLdDFYtEaffrdxs3HgymjLWvywg2xyQ4SiFLlmDLQA/Ca1riwKX6jqy28voiP1N&#xA;qsSadcBLbjxWLV9P1BbxGPHg6HcVr16YQbYzhwoli4I4ioPU16YsEBqGqi1mESpzNKsSaUrgJbce&#xA;LiFr7DUBdq/w8HSlRWuxwg2jJDhRDgkbGny/txYBL72/W1cRIgYkcjvQCuAmm6EOLdq1vRchgV4s&#xA;vatdsQVnCl0mFiF1vp9tchpJgSQaDcgfhipmRyddaLbfV3MCETAVT4jufDfFY5Te6X2Gl3UlyBcw&#xA;skI3YkgV8AMW2eQAbFNP0Np/8h/4I4tPiySm70u7juGWGJni/YbbocW+OQEbo9NItlhj9RGaTbmQ&#xA;x69/oxavFNoLWdH/AHCvaIWkVviStag/PAQ2Ysu+6n5ftr2yu/rrKYpYqiIGhqWBB2+RyWORgbHN&#xA;OoMZx4ehT9PM+rVDFhQHdGUbj6MyRrcjhHRY0/8AM4rodz/sP+Ti5sdZ/dH8dXX6P+9H46MD45pH&#xA;eO44q0QB1NK7DFKZ6dacCs7NuQaL88WmcujHvzDQv+jnoeCmVS3YFgpAr78TkZORo+qW+SIiPMId&#xA;QSEgk5kdByK0r86YI823VfR8Wa6ha+r+9DbqOmTcKEq2QljZpcSlXJCqK7dcWc5UE2t7SO3QrGTv&#xA;uSd8WiUrS+/MouW4zSKKDZWIHTwGAtsOXJBG1jYkksSdySd8FNnGW44BGaxu6E7Eq1D+GGlMrVKz&#xA;/wDLRL/wZxpjt3BSa1RmLMzFjuSTUn78FMhMuWFYaukjoQN2U0NPoxpeK1RWmYAi5moenxnCjbuC&#xA;k1qjMWZmZj1JNSfwwUnjbS2Ebckd0bxU0P4Y0pnapSb/AJaJf+DOGkWO4KRto3YkuzN3JIJ+nBTL&#xA;jIWtbempeN2VlBNRt+rGl4rVdO1Ozt/U+vTAcqenzq3StabHxGIKMmMn6Qjh5h0MCguVA8ArD+GS&#xA;tq8Cfc3/AIj0T/lqX7m/pja+BPucfMeiEU+tL9zf0xtfAn3NDzFogFPrQ+5v6Y2nwJ9zR8xaL/y1&#xA;L9zf0xtfAn3LT5h0b/lpX7m/pja+BPuWNr+jn/j5X7m/pjafAn3KMmt6S3/HwPub+mC2Qwz7l+ny&#xA;Rapdi2snEkpBYjcAKOpNfnlmPGZmgwy/u43LkzTzL/xxLn/Yf8nFzcaz+6P46un0f94Px0YNTNI7&#xA;t1MVapiqKS5IRV7AUI8cWHC097KWomwHc+OKRANC9mU1Y8l7gDAvCFWK4E7iBarzqK0NBsScUGNb&#xA;oy1tI4GYqxYkU3wtcpWrl1FKmlTQfPFjSCuo+UxPy/Vi2ROyiYARQjbFNtGFi1KDhT6a4ptd6OKL&#xA;d6OK216Ptitu9H2xW3el7Yrbfo4rbvRxW1NbRUbku1ftDxwUyMm5Yf3T7fsn9WEoB3SS9t1bhUA0&#xA;r/DIxcqMkI1mlCRGCfCgyTITb+pRfyD7sV4y19Ri/kGK8Za+ox8h8Ap3OK8bf1CH+TGl4ytbToiN&#xA;hQ+IwUnxChpLJo2+Lcdj2wMxO1noYE8T0b8udIs4tPbUeFbuVmj5nsgpsB7nNvoMY4eLq6LtTNIz&#xA;4P4U+8yf8cW4/wBh/wAnFy/Wf3R/HVw9J/eD8dGD0zSO6dTFXUxVelvM4qiEjxxQZBa8boeLqVPg&#xA;cU25VLMAOp2wKjbe1EUocvWnQAeO2FrMrRRlPan34saW+o1a0H3n+mK0tUmQciKGpBHy2xCTskfn&#xA;k3EXlTUGt5GilKKqyIaMA8iqaEexxbdPvMPFv0ZPF+8juJkkT4kcOQQw3BFMNu1e9aM0s2kWM0zc&#xA;5pbeJ5HPdmQEnb3wOnntIh55+ayXc+r2dqJ5EtUt/V9JDQGRnZeRp7DDbm6QDhJSv8vYbu0822SJ&#xA;PJ6NwJUnjZiVYLC7rUezKDjbZqQDAvY+GB1dvAtStby91G6urm5lklkmerciNgxAAHgAMNu5iAAA&#xA;Hpn5WG6Pl2aGeVphb3TxQlzUrH6cbBa+FWOLgasAS+CL/MY3CeVLkQSNE8rxRs6Gh4vIAwqPEYGO&#xA;m3m8gFjdWpFzBczRzQ/vI3DmoZdwcNuz2Oz35Az2SuxqzRgsfcrgLpuqV3EdeP05EORaj6WSW18V&#xA;rJK3GNSzeAxQZUvl0+5iQs8ZAHfbFAmCoiI0FRQ9xiytVWxnZeSxkg9DTAjjCxoGU0YUI7YU2p8V&#xA;LFCp+Z6HAlBz24SSgGx3GRLbGVh6H5FFNAUf8Wv+sZu9B/d/F0PaP978Ef5j/wCONcf7D/k4uT1n&#xA;90fx1adJ/eD8dGEZo3dOxV2KpxbrW1QA8aqNxhaDzSnzRrug6LBDPq1wYVlJSIKpdmIFT8Kgmg7n&#xA;GmzFCUtoo60toXhS5hJKyoGj57bOKgmmNMZS6LJRLG3FiPEEYCWQFrOb4LTwu9R8bXhV7I1Qo32q&#xA;lj4bmuEFjMJb51Tl5ZvR4+n/AMnUxPJnpvrDzGW2Hpvt2P6shbtHrWiqw0OwC0r9WhpXp9gZYHUZ&#xA;PrPvYX+YMPPXrev/ACyD/k42Rk5uk+g+9AeU4AvmnTT/AJU3/JiTADu2aj+7P46vUuOWOreMm2Bk&#xA;lNP92Sf8TOVW7kcmdflxGF0i9H/L43/JmLJxcDWfUPcifP8AHy8uSD/i6D/k6uMmOl+t5vc2w+ry&#xA;7fsN+rIW7Ic3sca/6An/ABiH/Ecs6On/AIktmXpkQ3qIjUVoKVNT88ktplpAAeXxoMWrIjLkwRW0&#xA;8k78YFVnlcnZVUVJ+gDGmsE2KYGv5j+RGkVfVulUsB6jRHiATSp70w05ngZPJn3FJI1VSeBAKuvS&#xA;mBw7rdKtRVfrJA7ADA3QOyF4Dwws7Ql4n7wfL+ORLZA7M78kimhr/wAZHzc6D+7+LpO0P734IzzH&#xA;/wAca4/2H/E1yzWf3R/HVq0n94Px0YTmjd07FXYqi9Pmk9UR8vgNdsLXMbMT/NS3Wc6UCK8TOR9y&#xA;YCXJ0XVPvL3mXTNQS2sEV0ukiDFCNh6YCn4h1643bVlwyjZ6JvdW8kjhlp0piQ1QkAhHQoxUkVHX&#xA;ItoNrQNqE1wJVbeVY3JboRTbJAsJRtUvbS21SwmtJCwjlFCRsQQQQR8iMlzYRJhK0gb8vrNl4m7k&#xA;32JCr070yPC5H5w9zJ7eCOCCOCIUjiVUQdaKooMk4pNm0p1vyva6rcxXLyvFLGhjJWhDLWo2PgcB&#xA;Ft2LOYClLSvJ1lYX8d76zyyRBvSBoACwKk7dfhJGIinJqTIVSf0yTjsXk8hWLTSOlxIiO5dUoDx5&#xA;GpFT75Dhcsas1yTbRtGh0m1e1t2ZzI5leR+hYgL26fCowgU05MhmbKrq+lQanYvZzEqrFWV16qyk&#xA;Mp+8YSLY48hibCQt+X1iw4vdSFDs4AUEr3Fe1RkeFyPzh7mTMqC2IT7AQhfkBTJdHGHNKpR0yIb1&#xA;OmSQ3G7o9UJUjofHApCN1ur+Xr+vVrSWv0xHC1Y/rHveKSacv1dtv2D+rI27m3uBdk02IqaEIm/0&#xA;ZJ0wHqS01JqTU4G1qmFUJej4l+WRLZBnHkv/AI4a/wDGR/15udB/d/F03aH978EX5j/441x/sP8A&#xA;ia5ZrP7o/jq1aT+8H46MJzRu6dirsVR9rHFGiyn7RFanoK4WqRJSHzrp15fCye2iMohMgcLSo5ha&#xA;Gnh8ORkHI0sxG7QPlPR9RtNaFxPA0USQupZqCpcrQD/gcYhs1GSJjQLOFkRuhybgUg57aYysyiqk&#xA;1yBDbGYpQyLY1QVr3xVE2s0cYYOaV6ZIFrnElGIyuoZTUHJNRFNkA9cKtGtQKVB6nwxVumKHUxV1&#xA;MVdTFXUxV1MVWTD90/8Aqn9WAso80ol7ZEN5WZJVa0iikc89wvbFjIkIm/T6zp9zaxkBpYniWvQF&#xA;lIFfvxLCG0gXnzeUddaIp9VALDjUyR0FdqmjZXwl2X5iHe9FVU9BIX3ooBp7CmWOs62l8yKkrKNw&#xA;OmBtB2WYUoS9G6H55EtmNm3kv/jiL/xkfNzoP7v4um7Q/vPgi/Mf/HGuP9h/xNcs1n90fx1atJ/e&#xA;D8dGE5o3dNGtDTr2xVy8qDlse4GKqgmYcf8AJ6YUUteadiSDTaiiv68CgBwkmWjA1YdRU0xTQVra&#xA;7cTp6gom9TX2wsZR2TJJIpG5IwYgU2OLUQQgWgm5H4emQpuEgp077VwMnVxVF288Ih4O1OoI+eTB&#xA;apRNohGhRQoYBR03wsCCW/Vi/nX7xjaKLfqJ/MPvxWmgI+ZcU5HatcV3XYUOxV2KuJA3O2Kqc0iC&#xA;J/iG4IH04CyiN0qlGwORDepFqEChNdtsKr1crWnfrhQ5pZCvEGg6V9sCgLA5JI327nocUrhcXAFK&#xA;Bqd64rQWguSWenIntipbxVC3vRPpwFnjZr5L/wCOIv8AxkfNzoP7v4un7Q/vPgkF7q1/eVWaQmOt&#xA;RGKBR938c1uTPOfM7OfjwRhyCCZuKk0rTsMpbg0tWUHda9tsVLuB/mOK27h/lHFbbof5j+H9MVbx&#xA;V2KoiykVJGJIFRQV6YWEgjXcPC3EhiQRt40xYDYpcVlArwI+YOQpvsNFsCWueKppbzQGONeS8qAU&#xA;71plgLjyBtWIUdaYsXAKe34Yq3QeGFXYodirsVQ8iy+hJ6pB7rTIlsFXsgcg3OxVSmB5DiQPoyQQ&#xA;p0k/mH3f24VdR/Efd/birYr3xVvFXYqtDqXKitR1xWlK6iLryB+yDtgIZQNIrRvMt7pieiqrLblu&#xA;TI1eQr14kHbMjBq5YxXRq1GkjkN8ivezu0dkaFwymhHE5A45A1SjJE72s+rz/wC+m/4E4OA9yeMd&#xA;7vq8/wDvtv8AgTjwHuXjHe70Zv8AfbfccHAe5eId60283INwfbalDTHgPcniDfpS/wC+2/4E/wBM&#xA;eA9yOId7vSl/32//AAJ/pjwnuXiHe705f99v/wAC39MeE9ybHe1wl/32/wDwDf0x4T3LY71eBnRK&#xA;FGG/dSP1jGiGJpbdSuYWABrt298iUwG6B5yfyt9xyNN2zmeYAkRsfahxpdl8JmMiDg25HY+ONIJF&#xA;MhdEcUYVHXLKcQGm8aKHY0VdjRV2NFXcl8RjSqVwQYWA3J2AG+JBZR5peEK9Fp47ZXTfbqHwxpbW&#xA;yQykghGI8aHJiB7mJkO9YYJqfYb7jh4D3LxBoQTKACjk+PE48B7k8Qd6Uv8Avtv+BP8ATHgPcjiH&#xA;e70pf99v/wACf6Y8J7k8Q73enL/vt/8AgW/pjwnuWx3tcJf99v8A8A39MeE9y2O9ZKk3psBFISRT&#xA;7Dd/oxMT3JBF80Ilheu6okEhZjQDiepyIxyPRsOSI3sP/9k="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:f2b29506-bb3a-4358-9973-eb49c6d09137"
    stRef:documentID="xmp.did:f2b29506-bb3a-4358-9973-eb49c6d09137"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:df1b4794-538b-41ca-abb3-652f1acab45d"
      stEvt:when="2022-12-22T12:47:07+02:00"
      stEvt:softwareAgent="Adobe Illustrator 27.0 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:f2b29506-bb3a-4358-9973-eb49c6d09137"
      stEvt:when="2022-12-22T13:34:36+02:00"
      stEvt:softwareAgent="Adobe Illustrator 27.0 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:3cbaf022-e552-7842-83d8-43d5065bb0ba"
      stEvt:when="2023-02-17T18:07:16+02:00"
      stEvt:softwareAgent="Adobe Illustrator 25.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="989.750175"
    stDim:h="802.900990"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="29"
         xmpG:blue="27"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="29"
         xmpG:blue="27"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                        
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -802.901 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 802.901 li
989.75 802.901 li
989.75 0 li
cp
clp
864.777 520.18 mo
846.65 520.18 li
843.605 520.18 841.137 517.712 841.137 514.667 cv
841.137 509.687 li
841.137 506.643 838.67 504.175 835.625 504.175 cv
801.495 504.175 li
798.45 504.175 795.982 506.643 795.982 509.687 cv
795.982 514.667 li
795.982 517.712 793.514 520.18 790.471 520.18 cv
772.343 520.18 li
769.299 520.18 766.831 517.712 766.831 514.667 cv
766.831 509.687 li
766.831 506.643 764.364 504.175 761.319 504.175 cv
732.621 504.175 li
732.673 502.968 731.828 501.92 729.507 501.669 cv
729.507 501.669 729.231 501.65 728.799 501.65 cv
727.01 501.65 722.541 501.972 723.876 505.281 cv
723.618 505.475 723.378 505.691 723.158 505.927 cv
723.158 479.045 li
723.158 475.205 720.044 472.092 716.203 472.092 cv
712.744 472.092 li
712.744 250.391 li
712.744 245.815 709.828 241.919 705.753 240.461 cv
703.642 239.705 702.193 237.767 702.151 235.528 cv
702.168 236.345 702.423 237.095 702.779 237.79 cv
878.386 241.099 li
881.707 241.162 884.697 243.127 886.07 246.151 cv
895.031 265.885 li
895.464 266.84 896.068 267.707 896.812 268.444 cv
907.694 279.226 li
909.328 280.844 910.246 283.048 910.246 285.347 cv
910.246 482.378 li
910.246 485.26 910.029 487.4 909.729 488.979 cv
909.29 491.291 910.198 493.576 912.003 495.084 cv
913.911 496.678 915.1 499.07 915.1 501.701 cv
915.1 507.767 li
914.32 505.669 912.301 504.175 909.932 504.175 cv
893.82 504.175 li
893.812 502.778 892.614 501.449 889.489 501.112 cv
889.489 501.112 884.237 501.764 884.46 504.175 cv
875.8 504.175 li
872.757 504.175 870.289 506.643 870.289 509.687 cv
870.289 514.667 li
870.289 517.712 867.822 520.18 864.777 520.18 cv
784.539 513.902 mo
784.539 513.902 778.31 514.676 782.32 517.922 cv
783.033 518.5 783.785 518.737 784.49 518.737 cv
787.486 518.738 789.643 514.454 784.539 513.902 cv
791.764 510.213 mo
791.07 510.213 789.156 510.36 790.581 512.088 cv
790.814 512.37 791.102 512.486 791.397 512.486 cv
792.64 512.486 794.013 510.437 791.997 510.219 cv
791.997 510.219 791.906 510.213 791.764 510.213 cv
771.148 486.142 mo
726.488 491.534 li
852.445 491.534 li
771.148 486.142 li
752.705 460.208 mo
752.705 460.208 746.369 460.208 749.605 463.847 cv
750.622 464.992 751.612 465.435 752.474 465.435 cv
755.435 465.436 756.882 460.208 752.705 460.208 cv
817.492 460.195 mo
816.106 460.195 812.275 460.489 815.127 463.946 cv
815.593 464.511 816.168 464.741 816.758 464.741 cv
819.243 464.741 821.99 460.643 817.958 460.208 cv
817.958 460.208 817.777 460.195 817.492 460.195 cv
906.291 453.835 mo
906.291 453.835 901.842 453.835 904.674 456.127 cv
905.142 456.505 905.589 456.659 905.985 456.659 cv
907.581 456.659 908.345 454.16 906.291 453.835 cv
783.174 451.983 mo
783.174 451.983 778.726 451.983 781.557 454.275 cv
782.025 454.654 782.472 454.808 782.868 454.808 cv
784.463 454.808 785.227 452.308 783.174 451.983 cv
856.193 450.992 mo
856.193 450.992 850.278 450.992 854.6 453.291 cv
855.328 453.678 855.96 453.835 856.483 453.835 cv
858.709 453.836 858.953 450.992 856.193 450.992 cv
863.422 446.003 mo
863.422 446.003 858.973 446.003 861.805 448.296 cv
862.273 448.675 862.72 448.828 863.115 448.828 cv
864.711 448.829 865.475 446.328 863.422 446.003 cv
765.785 442.235 mo
765.287 442.235 764.483 442.353 764.299 443.085 cv
764.24 443.321 764.535 443.413 764.979 443.413 cv
765.766 443.413 767.02 443.125 767.614 442.837 cv
768.208 442.549 768.141 442.261 766.286 442.261 cv
766.254 442.261 766.221 442.261 766.187 442.261 cv
766.187 442.261 766.02 442.235 765.785 442.235 cv
804.445 410.429 mo
804.049 410.429 801.062 410.483 801.749 412.125 cv
802.233 413.28 803.115 413.705 804.042 413.705 cv
805.336 413.705 806.72 412.878 807.239 412.052 cv
807.758 411.226 807.413 410.399 805.248 410.399 cv
805.016 410.399 804.763 410.409 804.488 410.429 cv
804.488 410.429 804.473 410.429 804.445 410.429 cv
831.644 393.604 mo
831.273 393.604 830.672 393.773 830.536 394.827 cv
830.492 395.167 830.711 395.299 831.043 395.299 cv
831.629 395.299 832.565 394.885 833.009 394.47 cv
833.452 394.056 833.403 393.641 832.019 393.641 cv
831.994 393.641 831.969 393.641 831.944 393.642 cv
831.944 393.642 831.819 393.604 831.644 393.604 cv
740.516 387.771 mo
739.13 387.771 735.297 388.065 738.15 391.522 cv
738.616 392.086 739.19 392.317 739.78 392.317 cv
742.265 392.318 745.013 388.219 740.981 387.783 cv
740.981 387.783 740.799 387.771 740.516 387.771 cv
896.338 386.065 mo
896.338 386.065 891.939 386.61 894.771 388.903 cv
895.275 389.311 895.806 389.478 896.303 389.478 cv
898.419 389.478 899.942 386.454 896.338 386.065 cv
890.875 378.575 mo
888.766 378.575 882.933 379.022 887.275 384.283 cv
887.984 385.142 888.859 385.492 889.756 385.493 cv
893.538 385.493 897.72 379.257 891.583 378.593 cv
891.583 378.593 891.307 378.575 890.875 378.575 cv
728.343 381.469 mo
728.343 381.469 723.895 381.469 726.726 383.761 cv
727.194 384.14 727.641 384.294 728.036 384.294 cv
729.632 384.294 730.396 381.793 728.343 381.469 cv
747.195 382.034 mo
746.824 382.034 746.223 382.203 746.085 383.258 cv
746.041 383.597 746.261 383.729 746.592 383.729 cv
747.179 383.729 748.115 383.315 748.559 382.9 cv
749.002 382.486 748.953 382.071 747.569 382.071 cv
747.545 382.071 747.52 382.071 747.494 382.071 cv
747.494 382.071 747.37 382.034 747.195 382.034 cv
807.348 375.315 mo
806.953 375.315 803.964 375.399 804.652 377.981 cv
805.135 379.795 806.017 380.462 806.945 380.462 cv
808.239 380.462 809.622 379.164 810.142 377.865 cv
810.661 376.567 810.316 375.269 808.152 375.269 cv
807.919 375.269 807.666 375.284 807.391 375.315 cv
807.391 375.315 807.376 375.315 807.348 375.315 cv
889.79 363.05 mo
889.79 363.05 li
889.79 366.118 892.277 368.605 895.344 368.605 cv
895.344 368.605 li
898.352 368.605 900.802 366.214 900.897 363.229 cv
900.899 363.169 900.9 363.11 900.9 363.05 cv
900.9 296.505 li
900.9 296.505 li
900.9 293.437 898.412 290.95 895.344 290.95 cv
892.277 290.95 889.79 293.437 889.79 296.505 cv
889.79 363.05 li
889.79 363.05 li
864.631 368.605 mo
864.631 368.605 li
867.699 368.605 870.186 366.118 870.186 363.05 cv
870.186 296.505 li
870.186 293.485 867.776 291.028 864.775 290.952 cv
864.727 290.951 864.679 290.95 864.631 290.95 cv
861.563 290.95 859.076 293.437 859.076 296.505 cv
859.076 363.05 li
859.076 363.05 li
859.076 363.098 859.076 363.146 859.077 363.193 cv
859.154 366.195 861.611 368.605 864.631 368.605 cv
828.363 363.05 mo
828.363 363.05 li
828.363 366.118 830.849 368.605 833.917 368.605 cv
836.985 368.605 839.472 366.118 839.472 363.05 cv
839.472 296.505 li
839.472 296.505 li
839.472 293.437 836.985 290.95 833.917 290.95 cv
830.849 290.95 828.363 293.437 828.363 296.505 cv
828.363 363.05 li
828.363 363.05 li
797.649 363.05 mo
797.649 363.05 li
797.649 366.118 800.135 368.605 803.203 368.605 cv
806.271 368.605 808.758 366.118 808.758 363.05 cv
808.758 296.505 li
808.758 296.505 li
808.758 293.437 806.271 290.95 803.203 290.95 cv
800.135 290.95 797.649 293.437 797.649 296.505 cv
797.649 363.05 li
797.649 363.05 li
766.935 363.05 mo
766.935 363.05 li
766.935 366.118 769.422 368.605 772.49 368.605 cv
775.557 368.605 778.044 366.118 778.044 363.05 cv
778.044 296.505 li
778.044 293.485 775.634 291.028 772.633 290.952 cv
772.585 290.951 772.538 290.95 772.49 290.95 cv
769.422 290.95 766.935 293.437 766.935 296.505 cv
766.935 363.05 li
766.935 363.05 li
741.776 368.605 mo
741.776 368.605 li
744.843 368.605 747.33 366.118 747.33 363.05 cv
747.33 296.505 li
747.33 296.505 li
747.33 293.437 744.843 290.95 741.776 290.95 cv
738.707 290.95 736.221 293.437 736.221 296.505 cv
736.221 363.05 li
736.221 363.05 li
736.221 363.086 736.221 363.122 736.222 363.157 cv
736.279 366.176 738.743 368.605 741.776 368.605 cv
880.29 363.199 mo
880.29 363.199 874.374 363.199 878.697 365.498 cv
879.425 365.885 880.057 366.042 880.579 366.042 cv
882.805 366.042 883.05 363.199 880.29 363.199 cv
756.436 350.813 mo
756.436 350.813 750.1 350.813 753.335 354.454 cv
754.352 355.598 755.343 356.041 756.205 356.041 cv
759.166 356.041 760.613 350.813 756.436 350.813 cv
878.467 346.885 mo
878.467 346.885 874.018 346.885 876.849 349.177 cv
877.317 349.556 877.764 349.71 878.16 349.71 cv
879.756 349.71 880.52 347.21 878.467 346.885 cv
786.906 342.589 mo
786.906 342.589 782.456 342.589 785.287 344.882 cv
785.755 345.26 786.202 345.414 786.598 345.414 cv
788.195 345.414 788.958 342.913 786.906 342.589 cv
753.776 317.424 mo
753.411 317.424 752.821 317.541 752.687 318.274 cv
752.644 318.51 752.859 318.602 753.185 318.602 cv
753.76 318.602 754.679 318.314 755.115 318.026 cv
755.55 317.737 755.501 317.45 754.141 317.45 cv
754.118 317.45 754.094 317.45 754.07 317.45 cv
754.07 317.45 753.948 317.424 753.776 317.424 cv
888.505 280.968 mo
888.11 280.968 885.122 281.053 885.81 283.634 cv
886.293 285.448 887.175 286.115 888.103 286.115 cv
889.397 286.115 890.78 284.817 891.3 283.518 cv
891.819 282.22 891.473 280.922 889.309 280.922 cv
889.077 280.922 888.824 280.937 888.548 280.968 cv
888.548 280.968 888.533 280.968 888.505 280.968 cv
843.131 280.356 mo
841.744 280.356 837.913 280.65 840.766 284.107 cv
841.232 284.671 841.807 284.902 842.396 284.902 cv
844.881 284.902 847.629 280.805 843.597 280.369 cv
843.597 280.369 843.415 280.356 843.131 280.356 cv
769.225 279.214 mo
769.225 279.214 764.826 279.761 767.657 282.053 cv
768.161 282.462 768.691 282.629 769.189 282.629 cv
771.305 282.629 772.829 279.604 769.225 279.214 cv
778.608 266.474 mo
776.498 266.474 770.668 266.922 775.009 272.182 cv
775.718 273.041 776.593 273.392 777.49 273.392 cv
781.272 273.393 785.455 267.156 779.318 266.493 cv
779.318 266.493 779.041 266.474 778.608 266.474 cv
731.637 263.679 mo
731.345 263.679 729.158 263.733 729.661 265.376 cv
730.016 266.53 730.662 266.955 731.341 266.956 cv
732.289 266.956 733.303 266.129 733.684 265.303 cv
734.064 264.476 733.811 263.65 732.226 263.65 cv
732.056 263.65 731.87 263.659 731.668 263.679 cv
731.668 263.679 731.657 263.679 731.637 263.679 cv
835.067 257.223 mo
835.067 257.223 829.151 257.223 833.473 259.523 cv
834.201 259.91 834.833 260.067 835.356 260.067 cv
837.583 260.067 837.827 257.223 835.067 257.223 cv
842.296 252.236 mo
842.296 252.236 837.847 252.236 840.678 254.527 cv
841.146 254.906 841.593 255.059 841.989 255.06 cv
843.585 255.06 844.349 252.559 842.296 252.236 cv
924.377 250.311 mo
924.411 245.769 927.315 241.91 931.367 240.461 cv
927.316 241.91 924.411 245.769 924.377 250.311 cv
702.151 235.527 mo
702.151 235.522 702.151 235.517 702.151 235.512 cv
702.151 235.517 702.151 235.522 702.151 235.527 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.952941 .745098 .564706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.901961 .603922 .458824 ]
/N 4.97729 
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~oCDJCo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()ABo'u8?naZ/>naZ/>naZ/>naZ/>naZ/>nF5r:nF5r:nF5r:nF5r9
n*f`6n*f`6n*f`5mdBN2mdBN2mHs<.mHs<.m-O**m-O*)lg*m&lg!d#lK[Wul07Hrkih6okND$kk2tgg
~>
<~^:h4n]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m
]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tD"j
]Y(ni]Y(ni]Y(ni]Y(ni]=Y\e]=Y\e]=Y\e]"5Ja]"5Ja]",A^\[f8]\[]/Z\@B&X\$riU\$i`R[^NTO
[C*BK['[0GZa6sCZEga?Z*:I:YHP.4Y-+n/XfSV)X/i8#WMuhpVl-DhV59u`USFQXTqS-OT:VXFS=H(;
~>
<~OH5H`O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,f6\NfK-[NfK-[NfK-[NfK-[NK&pWNK&pWNK&pWNJrgTN/W^SN/W^RMi3LOMi3LNMMd:KMMd7I
M2@(GLkpkCLkgb@LPLV=L5(D9KnY25KS4u1K7ec-Jq8K(J:N0"It)orI=6NkI!g9fH?sj^G^+IWGBS.P
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
931.367 240.461 mo
931.367 240.461 li
933.49 239.7 934.945 237.744 934.97 235.489 cv
935.04 229.352 li
934.97 235.489 li
934.945 237.744 933.49 239.7 931.367 240.461 cv
931.367 240.461 li
702.151 235.528 mo
702.151 235.527 702.151 235.527 702.151 235.527 cv
702.151 235.527 702.151 235.527 702.151 235.528 cv
702.151 235.512 mo
702.151 235.504 702.151 235.496 702.151 235.489 cv
702.08 229.352 li
702.151 235.489 li
702.151 235.496 702.151 235.504 702.151 235.512 cv
.980392 .901961 .862745 rgb
f
939.083 520.18 mo
920.956 520.18 li
917.911 520.18 915.444 517.712 915.444 514.667 cv
915.444 509.687 li
915.444 509.012 915.322 508.365 915.1 507.767 cv
915.1 501.701 li
915.1 499.07 913.911 496.678 912.003 495.084 cv
910.198 493.576 909.29 491.291 909.729 488.979 cv
910.029 487.4 910.246 485.26 910.246 482.378 cv
910.246 285.347 li
910.246 283.048 909.328 280.844 907.694 279.226 cv
896.812 268.444 li
896.068 267.707 895.464 266.84 895.031 265.885 cv
886.07 246.151 li
884.697 243.127 881.707 241.162 878.386 241.099 cv
702.779 237.79 li
702.423 237.095 702.168 236.345 702.151 235.528 cv
702.151 235.527 702.151 235.527 702.151 235.527 cv
702.151 235.522 702.151 235.517 702.151 235.512 cv
702.151 235.504 702.151 235.496 702.151 235.489 cv
702.08 229.352 li
730.949 229.352 li
759.683 229.352 li
804.193 229.352 li
818.56 229.352 li
832.927 229.352 li
877.438 229.352 li
906.171 229.352 li
935.04 229.352 li
934.97 235.489 li
934.945 237.744 933.49 239.7 931.367 240.461 cv
931.367 240.461 li
927.315 241.91 924.411 245.769 924.377 250.311 cv
924.376 250.337 924.376 250.364 924.376 250.391 cv
924.376 481.311 li
924.376 481.311 li
924.376 487.135 929.097 491.855 934.92 491.855 cv
941.819 491.855 li
946.713 491.855 950.682 495.823 950.682 500.719 cv
950.682 504.175 li
950.107 504.175 li
947.063 504.175 944.595 506.643 944.595 509.687 cv
944.595 514.667 li
944.595 517.712 942.127 520.18 939.083 520.18 cv
906.291 263.65 mo
906.291 263.65 901.842 263.65 904.674 265.942 cv
905.142 266.32 905.589 266.474 905.985 266.474 cv
907.581 266.474 908.345 263.974 906.291 263.65 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9
I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I.""^m]([&WdF06Hg[n\m](X$WdF-5HgRh[mAbO#WI+$3HgReZmAP?tW-[g.
H0hGSm&#$oV0M=%GO)&Kl_AXgU35apFQoH?l(<(^Soa+cET`g1kF$8NQu;#OD<7!ujH=9<O(dO5BAnb[
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
mHs<.mHs<-m-O**m-O**m-O**m-O**m-O**m-O**m-O**m-O*)lg*m&lg*m&lg*m&lg*m&lg*m%lK[["
lK[["lK[["l07Hsl07Hskih6okih6okih6okND$kk2tggk2tggjlPUcjQ,C_jQ,C_j5]1[io8tWiSibS
~>
<~WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!
WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE%tWMukrWMukrWMukrWMukr
WMukrWMukrWMukrWMukrWMukrWMukqW2QYnW2QYnW2QYmVl-GjVl-GiVP^5fVP^5eV5:#aUnjf]USFTZ
USFTZU8"BVTqS0RTV.sNT:_aJSt;OFSXl:@S"#n:R[TY4R$a8.Q^=#(Q'ISuPEV/mOcb`dNfK-[NK&mT
~>
<~H[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*d
H[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C'bH?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm_H$O[\H$O[[G^+IXG^+IWGB\7TGB\7SG'8%P
G'8%PF`hhLFEDVHF)uDDF)uDDF)uDDEcQ/>E,]c8Df9Q4DJj?0D/F-,Ci!p(CMR["Bk_6oB4kjiAnGUc
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
935.582 229.352 mo
935.04 229.352 li
906.171 229.352 li
877.438 229.352 li
832.927 229.352 li
818.56 229.352 li
804.193 229.352 li
759.683 229.352 li
730.949 229.352 li
702.08 229.352 li
701.538 229.352 li
693.199 229.352 686.438 222.591 686.438 214.252 cv
686.438 190.276 li
686.438 187.275 688.87 184.842 691.872 184.842 cv
725.515 184.842 li
728.516 184.842 730.949 187.275 730.949 190.276 cv
730.949 195.185 li
730.949 198.185 733.38 200.617 736.381 200.617 cv
754.25 200.617 li
757.25 200.617 759.683 198.185 759.683 195.185 cv
759.683 190.276 li
759.683 187.275 762.116 184.842 765.117 184.842 cv
798.759 184.842 li
801.76 184.842 804.193 187.275 804.193 190.276 cv
804.193 195.184 li
804.193 198.185 806.625 200.617 809.625 200.617 cv
818.56 200.617 li
827.494 200.617 li
830.494 200.617 832.927 198.185 832.927 195.185 cv
832.927 190.276 li
832.927 187.275 835.36 184.842 838.361 184.842 cv
872.004 184.842 li
875.005 184.842 877.438 187.275 877.438 190.276 cv
877.438 195.185 li
877.438 198.185 879.87 200.617 882.871 200.617 cv
900.739 200.617 li
903.739 200.617 906.171 198.185 906.171 195.185 cv
906.171 190.276 li
906.171 187.275 908.605 184.842 911.605 184.842 cv
945.248 184.842 li
948.249 184.842 950.682 187.275 950.682 190.276 cv
950.682 214.252 li
950.682 222.591 943.921 229.352 935.582 229.352 cv
877.252 219.669 mo
876.881 219.669 876.28 219.838 876.143 220.892 cv
876.099 221.232 876.319 221.365 876.65 221.365 cv
877.237 221.365 878.173 220.95 878.616 220.535 cv
879.06 220.121 879.009 219.706 877.625 219.706 cv
877.601 219.706 877.576 219.706 877.551 219.707 cv
877.551 219.707 877.427 219.669 877.252 219.669 cv
917.565 217.346 mo
917.565 217.346 913.116 217.346 915.947 219.638 cv
916.415 220.017 916.862 220.171 917.258 220.171 cv
918.854 220.171 919.617 217.67 917.565 217.346 cv
786.123 213.836 mo
784.737 213.836 780.903 214.13 783.757 217.588 cv
784.223 218.152 784.798 218.383 785.387 218.383 cv
787.873 218.383 790.62 214.285 786.588 213.849 cv
786.588 213.849 786.407 213.836 786.123 213.836 cv
773.951 207.534 mo
773.951 207.534 769.501 207.534 772.333 209.827 cv
772.801 210.205 773.248 210.359 773.643 210.359 cv
775.24 210.359 776.003 207.859 773.951 207.534 cv
792.803 208.099 mo
792.431 208.099 791.83 208.268 791.694 209.323 cv
791.65 209.662 791.869 209.795 792.2 209.795 cv
792.787 209.795 793.723 209.38 794.166 208.966 cv
794.61 208.551 794.56 208.136 793.177 208.136 cv
793.152 208.136 793.127 208.137 793.102 208.137 cv
793.102 208.137 792.978 208.099 792.803 208.099 cv
852.955 201.38 mo
852.559 201.38 849.571 201.465 850.259 204.046 cv
850.742 205.86 851.624 206.527 852.552 206.527 cv
853.846 206.527 855.23 205.229 855.749 203.931 cv
856.268 202.632 855.923 201.334 853.759 201.334 cv
853.526 201.334 853.273 201.349 852.997 201.381 cv
852.997 201.381 852.982 201.38 852.955 201.38 cv
927.982 201.658 mo
926.596 201.658 922.763 201.952 925.615 205.409 cv
926.081 205.973 926.656 206.204 927.245 206.204 cv
929.731 206.204 932.48 202.106 928.448 201.67 cv
928.448 201.67 928.266 201.658 927.982 201.658 cv
702.692 194.416 mo
700.582 194.416 694.751 194.863 699.092 200.124 cv
699.801 200.983 700.676 201.334 701.573 201.334 cv
705.355 201.334 709.537 195.098 703.401 194.435 cv
703.401 194.435 703.124 194.416 702.692 194.416 cv
level3{
gsave
clp
[264.244 0 0 264.244 686.438 207.097 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .85098 .658824 ]
/C1 [.952941 .745098 .564706 ]
/N 4.97729 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.244 0 0 264.244 686.438 207.097 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8N#srr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrVc]nrVc]nrVc]nrVc]nrVc]nrVc]mr;?Kjr;?Kjr;?Kj
r;?Hhqtp9fqtp9fqtp6dqYL'bqYL'aq>'j^q>'j]q"XXZq"XUXp\4FVp@e4Rp@e1Pp%A"Mo^qeJoCMSF
~>
<~g"=s0f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f[na,f@SX+f@SX+f@SX+f@SX+f%/F'f%/F'f%/F'f%&=$e^`4#e^`4"eC<!teC<!se'ldpe'lan
daHRldF$@hdEp7ed*U+bcd0n^cHa\Zc-=JVbfn8RbK@uMaiVZGaN2EB`l?$;`Pod6_o'@._83t'^q[Xu
~>
<~W2HPkVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVP^5fVP^5fVP^5fVP^5fVP^5fV5:#bV5:#bV5:#bV50o_Unjf^Unjf]USFTZUSFTYU8"BV
U8"?TTqS0RTV.sNTV.pLT:_aISt;OESXl=AS=H+=S"#n9R[TY4R@'A/Q^=&)QBmf$Q'@MsPEV/mOcb`e
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
852.445 491.534 mo
726.488 491.534 li
771.148 486.142 li
852.445 491.534 li
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
752.474 465.435 mo
751.612 465.435 750.622 464.992 749.605 463.847 cv
746.369 460.208 752.705 460.208 752.705 460.208 cv
756.882 460.208 755.435 465.436 752.474 465.435 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
856.483 453.835 mo
855.96 453.835 855.328 453.678 854.6 453.291 cv
850.278 450.992 856.193 450.992 856.193 450.992 cv
858.953 450.992 858.709 453.836 856.483 453.835 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
816.758 464.741 mo
816.168 464.741 815.593 464.511 815.127 463.946 cv
812.275 460.489 816.106 460.195 817.492 460.195 cv
817.777 460.195 817.958 460.208 817.958 460.208 cv
821.99 460.643 819.243 464.741 816.758 464.741 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
739.78 392.317 mo
739.19 392.317 738.616 392.086 738.15 391.522 cv
735.297 388.065 739.13 387.771 740.516 387.771 cv
740.799 387.771 740.981 387.783 740.981 387.783 cv
745.013 388.219 742.265 392.318 739.78 392.317 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
791.397 512.486 mo
791.102 512.486 790.814 512.37 790.581 512.088 cv
789.156 510.36 791.07 510.213 791.764 510.213 cv
791.906 510.213 791.997 510.219 791.997 510.219 cv
794.013 510.437 792.64 512.486 791.397 512.486 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
889.756 385.493 mo
888.859 385.492 887.984 385.142 887.275 384.283 cv
882.933 379.022 888.766 378.575 890.875 378.575 cv
891.307 378.575 891.583 378.593 891.583 378.593 cv
897.72 379.257 893.538 385.493 889.756 385.493 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
777.49 273.392 mo
776.593 273.392 775.718 273.041 775.009 272.182 cv
770.668 266.922 776.498 266.474 778.608 266.474 cv
779.041 266.474 779.318 266.493 779.318 266.493 cv
785.455 267.156 781.272 273.393 777.49 273.392 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
701.573 201.334 mo
700.676 201.334 699.801 200.983 699.092 200.124 cv
694.751 194.863 700.582 194.416 702.692 194.416 cv
703.124 194.416 703.401 194.435 703.401 194.435 cv
709.537 195.098 705.355 201.334 701.573 201.334 cv
level3{
gsave
clp
[264.244 0 0 264.244 686.438 207.097 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~qS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm
`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm_iX`4OSZkVqSSEk_iX]3OSQeUq8/6h_N4N0O86YRq8&*e_2e<+
NqgDLpqMg`^Q&!%NVC/GpUuO[]o2TsMY=]?ot-(R\qp!gL\/'2o<sDF[=n+WKCQ:"nZdZ7YCQ)DIdX7a
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.244 0 0 264.244 686.438 207.097 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j]q"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXYp\4FVp\4FVp\4FVp\4FUp@e4R
p@e4Rp@e4Rp@e4Rp%A"Np%A"No^qeJo^qeJoCMSFoCMSFo()ABo()ABnaZ/>nF5r:nF5r:n*f`6mdBN2
~>
<~_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'@._SX1,_SX1,
_SX1,_SX1,_SX1,_SX1,_SX1+_83t(_83t(_83t(_83t'^qdb$^qdb#^V@Ou^V@Ot^:q=q^:q=p]tM+m
]tM+m]Y(ni]Y(ni]=Y\e]=Y\e]"5Ja\[f5[\$riU[^NWQ[C*EM['[0GZEgdAZEga?Yct=7Y-+n/XK8J'
~>
<~OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>NaO,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?^NfK-[NfK-[NfK-ZNK&pWNK&pWNK&pVN/W^SN/W^SN/W^SN/W^R
Mi3LOMi3LOMMd:KM2@(GM2@(GLkpkCLPLY?L5(G;L5(G;KnY25K7ef/JqAT+JUrB'J:N0#It)orI=6Kj
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
723.876 505.281 mo
722.541 501.972 727.01 501.65 728.799 501.65 cv
729.231 501.65 729.507 501.669 729.507 501.669 cv
731.828 501.92 732.673 502.968 732.621 504.175 cv
727.188 504.175 li
725.945 504.175 724.798 504.587 723.876 505.281 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
893.82 504.175 mo
884.46 504.175 li
884.237 501.764 889.489 501.112 889.489 501.112 cv
892.614 501.449 893.812 502.778 893.82 504.175 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
784.49 518.737 mo
783.785 518.737 783.033 518.5 782.32 517.922 cv
778.31 514.676 784.539 513.902 784.539 513.902 cv
789.643 514.454 787.486 518.738 784.49 518.737 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
896.303 389.478 mo
895.806 389.478 895.275 389.311 894.771 388.903 cv
891.939 386.61 896.338 386.065 896.338 386.065 cv
899.942 386.454 898.419 389.478 896.303 389.478 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
769.189 282.629 mo
768.691 282.629 768.161 282.462 767.657 282.053 cv
764.826 279.761 769.225 279.214 769.225 279.214 cv
772.829 279.604 771.305 282.629 769.189 282.629 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
782.868 454.808 mo
782.472 454.808 782.025 454.654 781.557 454.275 cv
778.726 451.983 783.174 451.983 783.174 451.983 cv
785.227 452.308 784.463 454.808 782.868 454.808 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
728.036 384.294 mo
727.641 384.294 727.194 384.14 726.726 383.761 cv
723.895 381.469 728.343 381.469 728.343 381.469 cv
730.396 381.793 729.632 384.294 728.036 384.294 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
863.115 448.828 mo
862.72 448.828 862.273 448.675 861.805 448.296 cv
858.973 446.003 863.422 446.003 863.422 446.003 cv
865.475 446.328 864.711 448.829 863.115 448.828 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
835.356 260.067 mo
834.833 260.067 834.201 259.91 833.473 259.523 cv
829.151 257.223 835.067 257.223 835.067 257.223 cv
837.827 257.223 837.583 260.067 835.356 260.067 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
841.989 255.06 mo
841.593 255.059 841.146 254.906 840.678 254.527 cv
837.847 252.236 842.296 252.236 842.296 252.236 cv
844.349 252.559 843.585 255.06 841.989 255.06 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
905.985 456.659 mo
905.589 456.659 905.142 456.505 904.674 456.127 cv
901.842 453.835 906.291 453.835 906.291 453.835 cv
908.345 454.16 907.581 456.659 905.985 456.659 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
764.979 443.413 mo
764.535 443.413 764.24 443.321 764.299 443.085 cv
764.483 442.353 765.287 442.235 765.785 442.235 cv
766.02 442.235 766.187 442.261 766.187 442.261 cv
766.221 442.261 766.254 442.261 766.286 442.261 cv
768.141 442.261 768.208 442.549 767.614 442.837 cv
767.02 443.125 765.766 443.413 764.979 443.413 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
831.043 395.299 mo
830.711 395.299 830.492 395.167 830.536 394.827 cv
830.672 393.773 831.273 393.604 831.644 393.604 cv
831.819 393.604 831.944 393.642 831.944 393.642 cv
831.969 393.641 831.994 393.641 832.019 393.641 cv
833.403 393.641 833.452 394.056 833.009 394.47 cv
832.565 394.885 831.629 395.299 831.043 395.299 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
746.592 383.729 mo
746.261 383.729 746.041 383.597 746.085 383.258 cv
746.223 382.203 746.824 382.034 747.195 382.034 cv
747.37 382.034 747.494 382.071 747.494 382.071 cv
747.52 382.071 747.545 382.071 747.569 382.071 cv
748.953 382.071 749.002 382.486 748.559 382.9 cv
748.115 383.315 747.179 383.729 746.592 383.729 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
804.042 413.705 mo
803.115 413.705 802.233 413.28 801.749 412.125 cv
801.062 410.483 804.049 410.429 804.445 410.429 cv
804.473 410.429 804.488 410.429 804.488 410.429 cv
804.763 410.409 805.016 410.399 805.248 410.399 cv
807.413 410.399 807.758 411.226 807.239 412.052 cv
806.72 412.878 805.336 413.705 804.042 413.705 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
806.945 380.462 mo
806.017 380.462 805.135 379.795 804.652 377.981 cv
803.964 375.399 806.953 375.315 807.348 375.315 cv
807.376 375.315 807.391 375.315 807.391 375.315 cv
807.666 375.284 807.919 375.269 808.152 375.269 cv
810.316 375.269 810.661 376.567 810.142 377.865 cv
809.622 379.164 808.239 380.462 806.945 380.462 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
785.387 218.383 mo
784.798 218.383 784.223 218.152 783.757 217.588 cv
780.903 214.13 784.737 213.836 786.123 213.836 cv
786.407 213.836 786.588 213.849 786.588 213.849 cv
790.62 214.285 787.873 218.383 785.387 218.383 cv
level3{
gsave
clp
[264.244 0 0 264.244 686.438 207.097 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.244 0 0 264.244 686.438 207.097 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
773.643 210.359 mo
773.248 210.359 772.801 210.205 772.333 209.827 cv
769.501 207.534 773.951 207.534 773.951 207.534 cv
776.003 207.859 775.24 210.359 773.643 210.359 cv
level3{
gsave
clp
[264.244 0 0 264.244 686.438 207.097 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.244 0 0 264.244 686.438 207.097 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
876.65 221.365 mo
876.319 221.365 876.099 221.232 876.143 220.892 cv
876.28 219.838 876.881 219.669 877.252 219.669 cv
877.427 219.669 877.551 219.707 877.551 219.707 cv
877.576 219.706 877.601 219.706 877.625 219.706 cv
879.009 219.706 879.06 220.121 878.616 220.535 cv
878.173 220.95 877.237 221.365 876.65 221.365 cv
level3{
gsave
clp
[264.244 0 0 264.244 686.438 207.097 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.244 0 0 264.244 686.438 207.097 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
792.2 209.795 mo
791.869 209.795 791.65 209.662 791.694 209.323 cv
791.83 208.268 792.431 208.099 792.803 208.099 cv
792.978 208.099 793.102 208.137 793.102 208.137 cv
793.127 208.137 793.152 208.136 793.177 208.136 cv
794.56 208.136 794.61 208.551 794.166 208.966 cv
793.723 209.38 792.787 209.795 792.2 209.795 cv
level3{
gsave
clp
[264.244 0 0 264.244 686.438 207.097 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.244 0 0 264.244 686.438 207.097 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
852.552 206.527 mo
851.624 206.527 850.742 205.86 850.259 204.046 cv
849.571 201.465 852.559 201.38 852.955 201.38 cv
852.982 201.38 852.997 201.381 852.997 201.381 cv
853.273 201.349 853.526 201.334 853.759 201.334 cv
855.923 201.334 856.268 202.632 855.749 203.931 cv
855.23 205.229 853.846 206.527 852.552 206.527 cv
level3{
gsave
clp
[264.244 0 0 264.244 686.438 207.097 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.244 0 0 264.244 686.438 207.097 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
888.103 286.115 mo
887.175 286.115 886.293 285.448 885.81 283.634 cv
885.122 281.053 888.11 280.968 888.505 280.968 cv
888.533 280.968 888.548 280.968 888.548 280.968 cv
888.824 280.937 889.077 280.922 889.309 280.922 cv
891.473 280.922 891.819 282.22 891.3 283.518 cv
890.78 284.817 889.397 286.115 888.103 286.115 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
756.205 356.041 mo
755.343 356.041 754.352 355.598 753.335 354.454 cv
750.1 350.813 756.436 350.813 756.436 350.813 cv
760.613 350.813 759.166 356.041 756.205 356.041 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
880.579 366.042 mo
880.057 366.042 879.425 365.885 878.697 365.498 cv
874.374 363.199 880.29 363.199 880.29 363.199 cv
883.05 363.199 882.805 366.042 880.579 366.042 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
842.396 284.902 mo
841.807 284.902 841.232 284.671 840.766 284.107 cv
837.913 280.65 841.744 280.356 843.131 280.356 cv
843.415 280.356 843.597 280.369 843.597 280.369 cv
847.629 280.805 844.881 284.902 842.396 284.902 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
927.245 206.204 mo
926.656 206.204 926.081 205.973 925.615 205.409 cv
922.763 201.952 926.596 201.658 927.982 201.658 cv
928.266 201.658 928.448 201.67 928.448 201.67 cv
932.48 202.106 929.731 206.204 927.245 206.204 cv
level3{
gsave
clp
[264.244 0 0 264.244 686.438 207.097 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.244 0 0 264.244 686.438 207.097 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
786.598 345.414 mo
786.202 345.414 785.755 345.26 785.287 344.882 cv
782.456 342.589 786.906 342.589 786.906 342.589 cv
788.958 342.913 788.195 345.414 786.598 345.414 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
878.16 349.71 mo
877.764 349.71 877.317 349.556 876.849 349.177 cv
874.018 346.885 878.467 346.885 878.467 346.885 cv
880.52 347.21 879.756 349.71 878.16 349.71 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
905.985 266.474 mo
905.589 266.474 905.142 266.32 904.674 265.942 cv
901.842 263.65 906.291 263.65 906.291 263.65 cv
908.345 263.974 907.581 266.474 905.985 266.474 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/V
C[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%7&l'Z>OR;1uSC?_.$l'Z;MR;1rRC?V(#ka?2LQtkiPC?V%"ka6)IQtb`M
B]k^qkE]fEQ"]<EBBGFkk*'E=P%Ea;AE8h_jH!j4O(740@H*5Sieh.&M-o4s?K$TDi.P=lJQgo\=l"L-
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6o
kih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6o
kih6okih6nkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$jk2tggk2tggk2tggk2tggk2tgfjlPUc
jlPUcjlPUcjQ,C_jQ,C_j5]1[j5]1[j5]1[io8tWiSibSiSibSi8EPOi8EPOi8EPOhr!>KhVR,Gh;-oC
~>
<~R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2
R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0G0R$a8.R$a8.R$a8.R$a8.
R$a8.R$a8.R$a8.R$a8.R$a8.R$a8-Q^=&*Q^=&*Q^=&*Q^=&*Q^=&)QBmi&QBmi%Q'IW!Pa%DrPEV2o
PEV2oP*1ukOcbcgOH>QcO,o?_NfK-[NfK*YN/W^SMi3IMM2@(GLkphAL5(D9KS5#3K7ec,J:N0#It)oq
~>
<~C2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.Ku
C2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.HsBk_9qBk_9q
Bk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9pBP;'mBP;'lB4kjiB4kjiB4kjiB4kjhAnGXe
AnGXeAS#FaA7T4]@q0"Y@q0"Y@q0"Y@U`bS?smAM?smAM?XI/I?=$rE?!U`A>[1K;>$>*5=]nm1=BJX+
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
917.258 220.171 mo
916.862 220.171 916.415 220.017 915.947 219.638 cv
913.116 217.346 917.565 217.346 917.565 217.346 cv
919.617 217.67 918.854 220.171 917.258 220.171 cv
level3{
gsave
clp
[264.244 0 0 264.244 686.438 207.097 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.244 0 0 264.244 686.438 207.097 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
753.185 318.602 mo
752.859 318.602 752.644 318.51 752.687 318.274 cv
752.821 317.541 753.411 317.424 753.776 317.424 cv
753.948 317.424 754.07 317.45 754.07 317.45 cv
754.094 317.45 754.118 317.45 754.141 317.45 cv
755.501 317.45 755.55 317.737 755.115 318.026 cv
754.679 318.314 753.76 318.602 753.185 318.602 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
731.341 266.956 mo
730.662 266.955 730.016 266.53 729.661 265.376 cv
729.158 263.733 731.345 263.679 731.637 263.679 cv
731.657 263.679 731.668 263.679 731.668 263.679 cv
731.87 263.659 732.056 263.65 732.226 263.65 cv
733.811 263.65 734.064 264.476 733.684 265.303 cv
733.303 266.129 732.289 266.956 731.341 266.956 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
741.776 368.605 mo
738.743 368.605 736.279 366.176 736.222 363.157 cv
736.279 366.176 738.744 368.605 741.776 368.605 cv
741.776 367.47 mo
739.296 367.47 737.287 365.461 737.287 362.981 cv
737.287 299.193 li
737.287 296.713 739.296 294.704 741.776 294.704 cv
744.255 294.704 746.265 296.713 746.265 299.193 cv
746.265 362.981 li
746.265 365.461 744.255 367.47 741.776 367.47 cv
736.221 363.05 mo
736.221 363.05 li
736.221 296.505 li
736.221 293.437 738.707 290.95 741.776 290.95 cv
744.843 290.95 747.33 293.437 747.33 296.505 cv
747.33 296.505 li
747.33 293.437 744.843 290.95 741.776 290.95 cv
738.708 290.95 736.221 293.437 736.221 296.505 cv
736.221 363.05 li
level3{
gsave
clp
[3.91493e-15 -63.9357 63.9357 3.91493e-15 741.776 365.07 ]ct
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.847059 .509804 .341176 ]
/C1 [.847059 .509804 .341176 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.847059 .509804 .341176 ]
/C1 [.690196 .321569 .219608 ]
/N 2.06553 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.690196 .321569 .219608 ]
/C1 [.690196 .321569 .219608 ]
/N 1 
>>
]
/Bounds [1.89999e-07 .998385 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91493e-15 -63.9357 63.9357 3.91493e-15 741.776 365.07 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~f[na,f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX*f%/F'f%/F'f%/F'f%/F'e^`4#
e^`4#e^`4#e^W*ueC<!teC<!te'ldpe'ldpe'landaHRldaHRkdF$@hdF$=fd*U.dd*U+bcd0q`cd'h]
cHa_[c-=MXc-4DUbfn;SbKJ)PbK@uMb0%iJaiVZGaN2HDaN)?Aa2Z-=`l?!:`Pog7`5KU3_o'C0_SX1,
_83t(^qdb$^V@Ou^:q=q]tM+m]Y(ni]=Y\d]"5J`\[f5[\@B#W\$i`R[^ENN['[3HZa7!DZEga?Z*:I:
~>
<~Jq8K(JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'J:N0#J:N0#J:N0#J:N0"It)rtIt)rt
It)rsIXZ`pIXZ`pIXQWmI=6NlI=6KjI!g<hI!g9fH[C*dH[:!aH?sm`H$O[\H$OXZG^+IXGB\7TGB\4R
G'8%OF`hhLFEDVHFE;MEF)uABEcQ2?EH,u;E,]c7Df9Q4DJj?0D/F-,Ci!p(CMR^#C2.KtBk_9pBP;$k
B4kggAn>ObARo=^@q0"X@U`eT@:<PO?sd8J?=$rD?!U]?>[(E:>$>'3=]ed.='&I(<`W4#<)cgq;c6Lk
~>
<~=&r@&<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`N."<E3%!<E3%!<E3%!
<E3%!<)cgr<)cgr<)cgr<)cgq;c?Un;c?Un;c?Um;GpCj;GpCj;Gp@h;,L1f;,L1f:f'tb:f'tb:esk_
:JXb^:JOY[:/4PZ:/+GW9he>V9MA,R9MA,Q91qoN91qlL8kM]J8P)KF8P)HD84Z9B7n6'>7n6$<7Rfj:
77BX6779O36psC06UO4-6:+"*5s[e&5sR\#5X7Ou5<h=q5!D.n4Ztqj4?P_g4$,Mc3]];_3B9)[3&ilW
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
772.49 367.47 mo
770.01 367.47 768 365.461 768 362.981 cv
768 299.193 li
768 296.713 770.01 294.704 772.49 294.704 cv
774.969 294.704 776.978 296.713 776.978 299.193 cv
776.978 362.981 li
776.978 365.461 774.969 367.47 772.49 367.47 cv
level3{
gsave
clp
[3.91493e-15 -63.9357 63.9357 3.91493e-15 772.489 365.07 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91493e-15 -63.9357 63.9357 3.91493e-15 772.489 365.07 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
803.203 367.47 mo
800.725 367.47 798.714 365.461 798.714 362.981 cv
798.714 299.193 li
798.714 296.713 800.725 294.704 803.203 294.704 cv
805.682 294.704 807.692 296.713 807.692 299.193 cv
807.692 362.981 li
807.692 365.461 805.682 367.47 803.203 367.47 cv
level3{
gsave
clp
[3.91493e-15 -63.9357 63.9357 3.91493e-15 803.203 365.07 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91493e-15 -63.9357 63.9357 3.91493e-15 803.203 365.07 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
833.917 367.47 mo
831.438 367.47 829.429 365.461 829.429 362.981 cv
829.429 299.193 li
829.429 296.713 831.438 294.704 833.917 294.704 cv
836.396 294.704 838.406 296.713 838.406 299.193 cv
838.406 362.981 li
838.406 365.461 836.396 367.47 833.917 367.47 cv
level3{
gsave
clp
[3.91493e-15 -63.9357 63.9357 3.91493e-15 833.917 365.07 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91493e-15 -63.9357 63.9357 3.91493e-15 833.917 365.07 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
864.631 368.605 mo
861.611 368.605 859.154 366.195 859.077 363.193 cv
859.154 366.195 861.612 368.605 864.631 368.605 cv
864.631 367.47 mo
862.152 367.47 860.142 365.461 860.142 362.981 cv
860.142 299.193 li
860.142 296.713 862.152 294.704 864.631 294.704 cv
867.11 294.704 869.119 296.713 869.119 299.193 cv
869.119 362.981 li
869.119 365.461 867.11 367.47 864.631 367.47 cv
859.076 363.05 mo
859.076 363.05 li
859.076 296.505 li
859.076 293.437 861.563 290.95 864.631 290.95 cv
864.679 290.95 864.727 290.951 864.775 290.952 cv
864.727 290.951 864.679 290.95 864.631 290.95 cv
861.564 290.95 859.076 293.437 859.076 296.505 cv
859.076 363.05 li
level3{
gsave
clp
[3.91493e-15 -63.9357 63.9357 3.91493e-15 864.63 365.07 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91493e-15 -63.9357 63.9357 3.91493e-15 864.63 365.07 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
895.344 368.605 mo
898.352 368.605 900.802 366.214 900.897 363.229 cv
900.802 366.214 898.352 368.605 895.344 368.605 cv
895.344 367.47 mo
892.865 367.47 890.856 365.461 890.856 362.981 cv
890.856 299.193 li
890.856 296.713 892.865 294.704 895.344 294.704 cv
897.823 294.704 899.833 296.713 899.833 299.193 cv
899.833 362.981 li
899.833 365.461 897.823 367.47 895.344 367.47 cv
889.79 363.05 mo
889.79 363.05 li
889.79 296.505 li
889.79 293.437 892.277 290.95 895.344 290.95 cv
898.412 290.95 900.9 293.437 900.9 296.505 cv
900.9 296.505 li
900.9 293.437 898.411 290.95 895.344 290.95 cv
892.277 290.95 889.79 293.437 889.79 296.505 cv
889.79 363.05 li
level3{
gsave
clp
[3.91493e-15 -63.9357 63.9357 3.91493e-15 895.345 365.07 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91493e-15 -63.9357 63.9357 3.91493e-15 895.345 365.07 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
895.344 368.605 mo
892.277 368.605 889.79 366.118 889.79 363.05 cv
889.79 296.505 li
889.79 293.437 892.277 290.95 895.344 290.95 cv
898.411 290.95 900.9 293.437 900.9 296.505 cv
900.9 363.05 li
900.9 363.11 900.899 363.169 900.897 363.229 cv
900.802 366.214 898.352 368.605 895.344 368.605 cv
895.344 368.605 li
895.344 294.704 mo
892.865 294.704 890.856 296.713 890.856 299.193 cv
890.856 362.981 li
890.856 365.461 892.865 367.47 895.344 367.47 cv
897.823 367.47 899.833 365.461 899.833 362.981 cv
899.833 299.193 li
899.833 296.713 897.823 294.704 895.344 294.704 cv
level3{
gsave
clp
[3.91493e-15 -63.9357 63.9357 3.91493e-15 895.345 365.07 ]ct
/6 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ
@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<
42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`*tgH@QMG:3lGJg`*k^E@62;73l>Ae_dGOB?ol/33l55a_-]4=
?TGo/35Ai[^g/q7>r]T(35/WW^0EV1>;s3!2S<3O]3.&(=Z3lp27cmI\Q:Vu<]%<e1q-I@[T#&k;_kaY
1:0q7ZV`H_:bf4N0X4D,YYHjT9J<PB0!.buX@b(F8M$l4/#c#hW(&;774P0&.A]B\Ud?K)5UW6j-_NXM
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~TKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q
4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd
-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OL
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 .998385 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91493e-15 -63.9357 63.9357 3.91493e-15 895.345 365.07 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5BL1_o'C0_o'C0_o'C0_o'C0_ns:-_SX1,_SX1,
_SX1,_SO()_83t(_83t(_83q&^qdb$^qd_"^V@Ou^V@Ou^V@Ls^:q=q^:q:o]tM+m]tM(k]Y(kg]=Y\e
]=YYc]"5Ja]"5Ja]"5G_\[f8\\@B&Y\@B&X\$riT[^NWP[C*EM[C*EL['[3HZa7!DZEgd@Z*CR<Yct@9
Yct@8YHP.4Y-+q0Xf\_,XK8M(X/i;%WiE)!WMukrW2QYnVl-DhV5:#bV5:#bUnjf^USFTZU8"?TTV.sN
~>
<~@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:3JN?smAM?smAM?smAM
?sd8J?XI/I?XI,G?=$rE?=$rE?=$rE?=$rE?=$oC?!U]?>[1N=>[1K;>?b<9>?b<9>?b97>$>*5>$>'3
=]nj/=BJ[-=BJ[-=BJX+='&I(<`W7$<E3%!<E3$u<)cgq;c?Um;GpCi;,L1f;,L1e:f'ta:JXb]:/4PZ
:/4PY9h\5R91qoN91qoM8kM]I8P)KF84Z9B7n6'>7Rfj:77BX66psF26UO4.6:+"*5s[b$5<h@s5<h=q
~>
<~3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]T2\3B9)[3B9)[3B9)[3B9)[3B9)[3B9)[
3B9)[3B9)[3B9)[3B9&Y3&ilW3&ilW3&iiU2`EZS2`EZS2`EZS2`EZS2`EZS2`EWQ2E!HO2E!EM2)R6K
2)R6K2)R6K2)R3I1c.$G1c.$F1G^gC1G^gC1G^gB1,:U?1,:U>0ekC;0ekC;0ekC:0JG170JG160/"t2
/hSb//hSb//hSb./M/P*/1`>'/1`>'.k<,#.Olnt.Olnt.Olnt.4H\p-n$Jl-n$Jl-RU8h-71&d-71&d
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
864.631 368.605 mo
864.631 368.605 li
864.631 368.605 li
867.699 368.605 870.185 366.118 870.185 363.05 cv
870.185 296.505 li
870.185 293.485 867.776 291.028 864.775 290.952 cv
867.776 291.028 870.186 293.485 870.186 296.505 cv
870.186 363.05 li
870.186 366.118 867.699 368.605 864.631 368.605 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/7 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-
@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,T
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm)Sh2c%$O($k*@GQuQh2c""O($h(@GHlOgl>dtNaUY&@,-cMgl5^rNF:M"
?e^NHgP]CmMdG+p?J:9Cg50+gLg8Vg>hOj:fnEY`KNd#\=kA7-f7@&TIok0L<RlIse9b-CGZ)t6;:0M^
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/7 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?
gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?
gt^]?gt^]>gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K:g=k97g=k97g=k97g=k97g=k96g"G'3
g"G'3g"G'3f\"j/f\"j/f\"j/f\"j/f\"j/f@SX+f%/F'f%/F'e^`4#eC<!teC<!te'ldpdaHRldF$@h
~>
<~O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o<]NfK-[NfK-[NfK-[NfK-[
NfK-[NfK-[NfK-ZNK&pWNK&pWNK&pWNK&pWNK&pWNK&pVN/W^SN/W^RMi3LOMi3LNMMd:KMMd:JM2@(G
M2@(GLkpkCLPLY?L5(G;KnY57KS5#3K7ef/JqAT+JUrB'J:N-!IXZ`pI=6KjH[C*dH?sj]GB\7TG'8"N
~>
<~@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ
@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<PO?smAM?smAM
?smAM?smAM?smAM?smAM?smAL?XI/I?XI/I?XI/I?XI/I?XI/I?XI/H?=$rE?=$rD?!U`A?!U`A?!U`A
?!U`A>[1N=>?b<9>?b<9>?b<9>$>*5=]nm1=BJ[-='&I)='&I)<`W4#<)cgr<)cdp;GpCj;,L1f:f'q`
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /7 /Gradient get_res exec grestore
}if
np
864.631 368.605 mo
864.631 368.605 li
861.612 368.605 859.154 366.195 859.077 363.193 cv
859.076 363.146 859.076 363.098 859.076 363.05 cv
859.076 296.505 li
859.076 293.437 861.564 290.95 864.631 290.95 cv
864.679 290.95 864.727 290.951 864.775 290.952 cv
867.776 291.028 870.185 293.485 870.185 296.505 cv
870.185 363.05 li
870.185 366.118 867.699 368.605 864.631 368.605 cv
864.631 294.704 mo
862.152 294.704 860.142 296.713 860.142 299.193 cv
860.142 362.981 li
860.142 365.461 862.152 367.47 864.631 367.47 cv
867.11 367.47 869.119 365.461 869.119 362.981 cv
869.119 299.193 li
869.119 296.713 867.11 294.704 864.631 294.704 cv
level3{
gsave
clp
[3.91493e-15 -63.9357 63.9357 3.91493e-15 864.63 365.07 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91493e-15 -63.9357 63.9357 3.91493e-15 864.63 365.07 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
833.917 368.605 mo
830.849 368.605 828.363 366.118 828.363 363.05 cv
828.363 296.505 li
828.363 293.437 830.849 290.95 833.917 290.95 cv
836.985 290.95 839.472 293.437 839.472 296.505 cv
839.472 363.05 li
839.472 366.118 836.985 368.605 833.917 368.605 cv
833.917 294.704 mo
831.438 294.704 829.429 296.713 829.429 299.193 cv
829.429 362.981 li
829.429 365.461 831.438 367.47 833.917 367.47 cv
836.396 367.47 838.406 365.461 838.406 362.981 cv
838.406 299.193 li
838.406 296.713 836.396 294.704 833.917 294.704 cv
level3{
gsave
clp
[3.91493e-15 -63.9357 63.9357 3.91493e-15 833.917 365.07 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91493e-15 -63.9357 63.9357 3.91493e-15 833.917 365.07 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
803.203 368.605 mo
800.135 368.605 797.649 366.118 797.649 363.05 cv
797.649 296.505 li
797.649 293.437 800.135 290.95 803.203 290.95 cv
806.271 290.95 808.758 293.437 808.758 296.505 cv
808.758 363.05 li
808.758 366.118 806.271 368.605 803.203 368.605 cv
803.203 294.704 mo
800.725 294.704 798.714 296.713 798.714 299.193 cv
798.714 362.981 li
798.714 365.461 800.725 367.47 803.203 367.47 cv
805.682 367.47 807.692 365.461 807.692 362.981 cv
807.692 299.193 li
807.692 296.713 805.682 294.704 803.203 294.704 cv
level3{
gsave
clp
[3.91493e-15 -63.9357 63.9357 3.91493e-15 803.203 365.07 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91493e-15 -63.9357 63.9357 3.91493e-15 803.203 365.07 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
772.49 368.605 mo
769.422 368.605 766.935 366.118 766.935 363.05 cv
766.935 363.05 li
766.935 366.118 769.422 368.605 772.49 368.605 cv
775.557 368.605 778.043 366.118 778.043 363.05 cv
778.043 296.505 li
778.043 293.485 775.634 291.028 772.633 290.952 cv
775.634 291.028 778.044 293.485 778.044 296.505 cv
778.044 363.05 li
778.044 366.118 775.557 368.605 772.49 368.605 cv
level3{
gsave
clp
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.82294e-14 297.71 -297.71 1.82294e-14 818.56 234.235 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
772.49 368.605 mo
769.422 368.605 766.935 366.118 766.935 363.05 cv
766.935 296.505 li
766.935 293.437 769.422 290.95 772.49 290.95 cv
772.538 290.95 772.585 290.951 772.633 290.952 cv
775.634 291.028 778.043 293.485 778.043 296.505 cv
778.043 363.05 li
778.043 366.118 775.557 368.605 772.49 368.605 cv
772.49 294.704 mo
770.01 294.704 768 296.713 768 299.193 cv
768 362.981 li
768 365.461 770.01 367.47 772.49 367.47 cv
774.969 367.47 776.978 365.461 776.978 362.981 cv
776.978 299.193 li
776.978 296.713 774.969 294.704 772.49 294.704 cv
level3{
gsave
clp
[3.91493e-15 -63.9357 63.9357 3.91493e-15 772.489 365.07 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91493e-15 -63.9357 63.9357 3.91493e-15 772.489 365.07 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
741.776 368.605 mo
741.776 368.605 li
738.744 368.605 736.279 366.176 736.222 363.157 cv
736.221 363.122 736.221 363.086 736.221 363.05 cv
736.221 296.505 li
736.221 293.437 738.708 290.95 741.776 290.95 cv
744.843 290.95 747.33 293.437 747.33 296.505 cv
747.33 363.05 li
747.33 366.118 744.843 368.605 741.776 368.605 cv
741.776 294.704 mo
739.296 294.704 737.287 296.713 737.287 299.193 cv
737.287 362.981 li
737.287 365.461 739.296 367.47 741.776 367.47 cv
744.255 367.47 746.265 365.461 746.265 362.981 cv
746.265 299.193 li
746.265 296.713 744.255 294.704 741.776 294.704 cv
level3{
gsave
clp
[3.91493e-15 -63.9357 63.9357 3.91493e-15 741.776 365.07 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.91493e-15 -63.9357 63.9357 3.91493e-15 741.776 365.07 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
239.315 388.882 mo
219.361 388.882 li
216.009 388.882 213.293 386.166 213.293 382.815 cv
213.293 377.333 li
213.293 373.982 210.576 371.265 207.225 371.265 cv
169.656 371.265 li
166.304 371.265 163.588 373.982 163.588 377.333 cv
163.588 382.815 li
163.588 384.182 163.135 385.444 162.372 386.458 cv
162.112 386.117 161.679 385.854 161.037 385.753 cv
161.037 385.753 155.214 385.753 158.842 388.737 cv
158.417 388.832 157.975 388.882 157.521 388.882 cv
137.567 388.882 li
134.216 388.882 131.499 386.166 131.499 382.815 cv
131.499 377.333 li
131.499 373.982 128.783 371.265 125.431 371.265 cv
87.8618 371.265 li
84.5106 371.265 81.7938 373.982 81.7938 377.333 cv
81.7938 382.815 li
81.7938 386.166 79.077 388.882 75.7268 388.882 cv
58.4193 388.882 li
58.4193 383.035 li
58.4193 378.555 62.0569 374.919 66.5364 374.919 cv
66.7133 374.919 li
71.1933 374.919 74.8304 371.281 74.8304 366.801 cv
74.8304 118.451 li
74.8304 117.559 74.689 116.701 74.4276 115.899 cv
229.959 120.608 li
238.155 120.856 245.492 125.754 248.865 133.227 cv
250.316 136.443 252.537 139.251 255.332 141.402 cv
271.883 154.143 li
277.159 158.204 280.249 164.485 280.249 171.142 cv
280.249 319.788 li
84.6705 319.788 li
85.7406 308.447 li
80.6067 244.68 li
80.6067 319.788 li
74.8661 319.788 li
74.8661 334.596 li
80.6067 334.596 li
80.6067 362.856 li
83.2732 334.596 li
280.249 334.596 li
280.249 371.265 li
251.449 371.265 li
248.098 371.265 245.382 373.982 245.382 377.333 cv
245.382 382.815 li
245.382 386.166 242.665 388.882 239.315 388.882 cv
119.258 366.045 mo
116.314 366.045 115.992 369.804 119.641 369.804 cv
119.641 369.804 127.461 369.804 121.747 366.765 cv
120.785 366.253 119.949 366.045 119.258 366.045 cv
195.762 348.428 mo
190.762 348.428 185.233 356.673 193.346 357.55 cv
193.346 357.55 193.711 357.574 194.282 357.574 cv
197.07 357.574 204.784 356.983 199.042 350.028 cv
198.105 348.892 196.948 348.428 195.762 348.428 cv
206.737 336.216 mo
203.939 336.216 201.925 340.215 206.69 340.73 cv
206.69 340.73 212.506 340.007 208.763 336.977 cv
208.096 336.437 207.394 336.216 206.737 336.216 cv
159.352 291.289 mo
155.437 291.289 153.524 298.199 159.047 298.199 cv
159.047 298.199 167.424 298.199 163.145 293.387 cv
161.801 291.875 160.491 291.289 159.352 291.289 cv
226.726 290.18 mo
226.726 290.18 226.887 290.214 227.115 290.214 cv
227.597 290.214 228.377 290.059 228.555 289.09 cv
228.612 288.778 228.327 288.656 227.896 288.656 cv
227.135 288.656 225.92 289.037 225.345 289.418 cv
224.769 289.799 224.833 290.18 226.631 290.18 cv
226.662 290.18 226.694 290.18 226.726 290.18 cv
257.378 287.861 mo
257.378 287.861 257.542 287.911 257.774 287.911 cv
258.265 287.911 259.06 287.687 259.241 286.293 cv
259.299 285.844 259.008 285.668 258.57 285.668 cv
257.795 285.668 256.557 286.217 255.971 286.765 cv
255.384 287.313 255.45 287.861 257.282 287.861 cv
257.314 287.861 257.346 287.861 257.378 287.861 cv
267.577 274.315 mo
264.292 274.315 260.659 279.732 265.99 280.308 cv
265.99 280.308 266.23 280.325 266.605 280.325 cv
268.437 280.325 273.505 279.936 269.733 275.366 cv
269.117 274.62 268.357 274.315 267.577 274.315 cv
121.569 257.961 mo
119.458 257.961 118.449 261.267 121.163 261.695 cv
121.163 261.695 127.045 261.695 123.302 258.665 cv
122.683 258.165 122.092 257.961 121.569 257.961 cv
183.72 253.208 mo
181.609 253.208 180.6 256.514 183.314 256.943 cv
183.314 256.943 189.197 256.943 185.453 253.912 cv
184.835 253.412 184.244 253.208 183.72 253.208 cv
223.904 239.159 mo
219.989 239.159 218.076 246.07 223.598 246.07 cv
223.598 246.07 231.975 246.07 227.697 241.257 cv
226.352 239.745 225.043 239.159 223.904 239.159 cv
74.8403 229.068 mo
74.8403 229.068 li
84.3763 229.068 li
85.4846 229.068 86.3724 227.383 86.3724 225.343 cv
86.3724 185.647 li
86.3724 185.647 li
86.3724 173.804 81.2274 164.224 74.8403 164.224 cv
74.8403 229.068 li
236.345 229.058 mo
236.345 229.058 li
265.805 229.058 li
265.945 229.058 266.084 229.047 266.22 229.025 cv
267.737 228.782 268.908 227.222 268.908 225.334 cv
268.908 225.334 li
268.908 225.334 268.908 225.334 268.908 225.334 cv
268.908 185.625 li
268.908 185.625 li
268.908 173.806 260.924 164.225 251.074 164.225 cv
241.225 164.225 233.24 173.806 233.24 185.625 cv
233.24 225.334 li
233.24 227.39 234.63 229.058 236.344 229.058 cv
236.345 229.058 li
170.256 229.025 mo
170.418 229.047 170.585 229.058 170.753 229.058 cv
206.105 229.058 li
206.274 229.058 206.44 229.047 206.603 229.025 cv
208.425 228.782 209.829 227.222 209.829 225.334 cv
209.829 225.334 li
209.829 225.334 209.829 225.334 209.829 225.334 cv
209.829 185.625 li
209.829 185.625 li
209.829 173.806 200.248 164.225 188.429 164.225 cv
176.611 164.225 167.029 173.806 167.029 185.625 cv
167.029 225.334 li
167.029 227.222 168.434 228.782 170.256 229.025 cv
125.356 164.23 mo
115.693 164.487 107.925 173.967 107.925 185.625 cv
107.925 225.334 li
107.925 227.39 109.315 229.058 111.028 229.058 cv
140.489 229.058 li
140.629 229.058 140.768 229.047 140.903 229.025 cv
142.422 228.782 143.592 227.222 143.592 225.334 cv
143.592 225.334 li
143.592 225.334 143.592 225.334 143.592 225.334 cv
143.592 185.625 li
143.592 185.625 li
143.592 173.806 135.608 164.225 125.759 164.225 cv
125.759 164.225 li
125.624 164.225 125.49 164.227 125.356 164.23 cv
156.821 206.872 mo
155.11 206.872 153.28 208.588 152.594 210.305 cv
151.907 212.021 152.364 213.738 155.225 213.738 cv
155.532 213.738 155.867 213.718 156.231 213.677 cv
156.231 213.677 156.251 213.677 156.288 213.677 cv
156.812 213.677 160.762 213.565 159.852 210.152 cv
159.213 207.754 158.047 206.872 156.821 206.872 cv
160.658 162.921 mo
158.947 162.921 157.118 164.014 156.432 165.106 cv
155.745 166.199 156.202 167.292 159.063 167.292 cv
159.371 167.292 159.705 167.279 160.069 167.253 cv
160.069 167.253 160.089 167.253 160.127 167.253 cv
160.653 167.253 164.599 167.181 163.69 165.01 cv
163.051 163.483 161.885 162.921 160.658 162.921 cv
175.501 143.619 mo
173.791 143.619 171.961 145.335 171.275 147.052 cv
170.589 148.768 171.045 150.485 173.906 150.485 cv
174.214 150.485 174.548 150.465 174.912 150.423 cv
174.912 150.423 174.932 150.424 174.969 150.424 cv
175.494 150.424 179.442 150.311 178.533 146.9 cv
177.893 144.501 176.728 143.619 175.501 143.619 cv
92.2424 147.002 mo
92.2424 147.002 92.4067 147.052 92.6385 147.052 cv
93.1297 147.052 93.9246 146.829 94.1054 145.434 cv
94.1635 144.985 93.8727 144.81 93.4345 144.81 cv
92.6589 144.81 91.4213 145.358 90.8351 145.906 cv
90.2489 146.454 90.3145 147.003 92.1452 147.003 cv
92.1772 147.003 92.2094 147.002 92.2424 147.002 cv
220.075 139.515 mo
220.075 139.515 220.295 139.55 220.605 139.55 cv
221.263 139.55 222.328 139.395 222.57 138.426 cv
222.648 138.114 222.258 137.992 221.671 137.992 cv
220.632 137.992 218.974 138.373 218.188 138.754 cv
217.403 139.135 217.49 139.516 219.944 139.516 cv
219.987 139.516 220.03 139.516 220.075 139.515 cv
310.348 374.919 mo
310.348 374.919 li
310.126 374.919 li
305.644 374.919 302.01 371.285 302.01 366.802 cv
302.01 366.802 li
302.01 371.281 305.647 374.919 310.126 374.919 cv
310.348 374.919 li
310.348 374.919 li
67.0086 110.295 mo
67.0078 110.295 67.0075 110.295 67.0067 110.295 cv
67.0074 110.295 67.008 110.295 67.0086 110.295 cv
66.9688 110.294 mo
66.9661 110.294 66.9633 110.294 66.9606 110.293 cv
66.9634 110.294 66.966 110.294 66.9688 110.294 cv
66.9307 110.293 mo
66.9267 110.293 66.9224 110.292 66.9184 110.292 cv
66.9225 110.292 66.9266 110.293 66.9307 110.293 cv
66.8892 110.292 mo
66.8848 110.292 66.8803 110.291 66.876 110.291 cv
66.8803 110.291 66.8848 110.292 66.8892 110.292 cv
66.8438 110.291 mo
66.8397 110.291 66.8351 110.291 66.831 110.291 cv
66.8352 110.291 66.8396 110.291 66.8438 110.291 cv
66.8071 110.29 mo
66.8028 110.29 66.7985 110.29 66.7941 110.29 cv
66.7982 110.29 66.803 110.29 66.8071 110.29 cv
66.7612 110.29 mo
66.7576 110.29 66.7535 110.29 66.75 110.29 cv
66.7537 110.29 66.7575 110.29 66.7612 110.29 cv
66.7159 110.29 mo
66.715 110.29 66.7141 110.29 66.7133 110.29 cv
66.5364 110.29 li
66.3409 110.29 66.1468 110.283 65.9547 110.269 cv
66.0014 110.27 66.0478 110.27 66.0946 110.27 cv
310.786 110.27 li
310.835 110.27 310.882 110.27 310.93 110.269 cv
310.738 110.283 310.544 110.29 310.348 110.29 cv
310.126 110.29 li
310.126 110.29 li
66.7143 110.29 li
66.7147 110.29 66.7154 110.29 66.7159 110.29 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
318.465 383.035 mo
318.465 378.555 314.827 374.919 310.348 374.919 cv
314.831 374.919 318.465 378.552 318.465 383.035 cv
74.4276 115.899 mo
74.3871 115.898 li
73.3471 112.731 70.468 110.42 67.0086 110.295 cv
70.476 110.419 73.3925 112.724 74.4276 115.899 cv
67.0067 110.295 mo
66.9941 110.295 66.9815 110.294 66.9688 110.294 cv
66.9813 110.294 66.9943 110.295 67.0067 110.295 cv
66.9606 110.293 mo
66.9506 110.293 66.9407 110.293 66.9307 110.293 cv
66.9408 110.293 66.9505 110.293 66.9606 110.293 cv
66.9184 110.292 mo
66.9088 110.292 66.8988 110.292 66.8892 110.292 cv
66.899 110.292 66.9086 110.292 66.9184 110.292 cv
66.876 110.291 mo
66.8651 110.291 66.8547 110.291 66.8438 110.291 cv
66.8547 110.291 66.8651 110.291 66.876 110.291 cv
66.831 110.291 mo
66.823 110.29 66.8152 110.29 66.8071 110.29 cv
66.815 110.29 66.8231 110.29 66.831 110.291 cv
66.7941 110.29 mo
66.7829 110.29 66.7723 110.29 66.7612 110.29 cv
66.7724 110.29 66.7829 110.29 66.7941 110.29 cv
66.75 110.29 mo
66.7386 110.29 66.7272 110.29 66.7159 110.29 cv
66.7273 110.29 66.7385 110.29 66.75 110.29 cv
.980392 .901961 .862745 rgb
f
318.465 388.882 mo
301.155 388.882 li
297.803 388.882 295.087 386.166 295.087 382.815 cv
295.087 377.333 li
295.087 373.982 292.37 371.265 289.02 371.265 cv
280.249 371.265 li
280.249 334.596 li
301.992 334.596 li
301.992 319.788 li
280.249 319.788 li
280.249 171.142 li
280.249 164.485 277.159 158.204 271.883 154.143 cv
255.332 141.402 li
252.537 139.251 250.316 136.443 248.865 133.227 cv
245.492 125.754 238.155 120.856 229.959 120.608 cv
74.4276 115.899 li
73.3925 112.724 70.476 110.419 67.0086 110.295 cv
67.008 110.295 67.0074 110.295 67.0067 110.295 cv
66.9943 110.295 66.9813 110.294 66.9688 110.294 cv
66.966 110.294 66.9634 110.294 66.9606 110.293 cv
66.9505 110.293 66.9408 110.293 66.9307 110.293 cv
66.9266 110.293 66.9225 110.292 66.9184 110.292 cv
66.9086 110.292 66.899 110.292 66.8892 110.292 cv
66.8848 110.292 66.8803 110.291 66.876 110.291 cv
66.8651 110.291 66.8547 110.291 66.8438 110.291 cv
66.8396 110.291 66.8352 110.291 66.831 110.291 cv
66.8231 110.29 66.815 110.29 66.8071 110.29 cv
66.803 110.29 66.7982 110.29 66.7941 110.29 cv
66.7829 110.29 66.7724 110.29 66.7612 110.29 cv
66.7575 110.29 66.7537 110.29 66.75 110.29 cv
66.7385 110.29 66.7273 110.29 66.7159 110.29 cv
66.7154 110.29 66.7147 110.29 66.7143 110.29 cv
310.126 110.29 li
305.647 110.29 302.01 113.927 302.01 118.451 cv
302.01 366.801 li
302.01 366.801 li
302.01 366.802 li
302.01 371.285 305.644 374.919 310.126 374.919 cv
310.348 374.919 li
310.348 374.919 li
314.827 374.919 318.465 378.555 318.465 383.035 cv
318.465 383.035 li
318.465 388.882 li
283.104 284.922 mo
280.993 284.922 279.984 288.228 282.698 288.656 cv
282.698 288.656 288.579 288.656 284.837 285.626 cv
284.218 285.125 283.627 284.922 283.104 284.922 cv
292.457 229.068 mo
292.457 229.068 li
301.992 229.068 li
301.992 226.919 li
301.992 174.095 li
301.992 174.095 li
301.992 164.224 li
301.992 164.224 li
295.606 164.224 290.461 173.804 290.461 185.647 cv
290.461 225.343 li
290.461 225.343 li
290.461 225.367 290.461 225.391 290.462 225.415 cv
290.482 227.423 291.361 229.068 292.457 229.068 cv
261.298 125.621 mo
259.188 125.621 258.178 128.927 260.892 129.356 cv
260.892 129.356 266.774 129.356 263.031 126.325 cv
262.412 125.825 261.821 125.621 261.298 125.621 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
280.249 334.596 mo
83.2732 334.596 li
84.6705 319.788 li
280.249 319.788 li
280.249 334.596 li
249.627 328.928 mo
248.374 328.928 247.033 330.02 246.53 331.113 cv
246.027 332.205 246.362 333.298 248.458 333.298 cv
248.683 333.298 248.928 333.286 249.195 333.259 cv
249.195 333.259 249.209 333.259 249.237 333.259 cv
249.623 333.259 252.514 333.188 251.848 331.016 cv
251.38 329.49 250.526 328.928 249.627 328.928 cv
102.74 320.457 mo
99.454 320.457 95.8209 325.874 101.152 326.45 cv
101.152 326.45 101.392 326.467 101.767 326.467 cv
103.6 326.467 108.668 326.078 104.895 321.508 cv
104.279 320.761 103.519 320.457 102.74 320.457 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
301.992 334.596 mo
280.249 334.596 li
280.249 319.788 li
301.992 319.788 li
301.992 334.596 li
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
80.6067 334.596 mo
74.8661 334.596 li
74.8661 319.788 li
80.6067 319.788 li
80.6067 334.596 li
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
80.6067 362.856 mo
80.6067 334.596 li
83.2732 334.596 li
80.6067 362.856 li
84.6705 319.788 mo
80.6067 319.788 li
80.6067 244.68 li
85.7406 308.447 li
84.6705 319.788 li
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
83.2732 334.596 mo
80.6067 334.596 li
80.6067 319.788 li
84.6705 319.788 li
83.2732 334.596 li
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
206.603 229.025 mo
208.425 228.782 209.829 227.222 209.829 225.334 cv
209.829 225.334 li
209.829 227.222 208.425 228.782 206.603 229.025 cv
170.256 229.025 mo
168.434 228.782 167.029 227.222 167.029 225.334 cv
167.029 185.625 li
167.029 173.806 176.611 164.225 188.429 164.225 cv
200.248 164.225 209.829 173.806 209.829 185.625 cv
209.829 185.625 li
209.829 173.806 200.248 164.225 188.429 164.225 cv
176.611 164.225 167.029 173.806 167.029 185.625 cv
167.029 225.334 li
167.029 227.222 168.434 228.782 170.256 229.025 cv
202.831 226.919 mo
174.028 226.919 li
172.352 226.919 170.994 225.561 170.994 223.885 cv
170.994 191.532 li
170.994 181.901 178.8 174.095 188.429 174.095 cv
198.06 174.095 205.865 181.901 205.865 191.532 cv
205.865 223.885 li
205.865 225.561 204.507 226.919 202.831 226.919 cv
level3{
gsave
clp
[2.69924e-15 -44.0821 44.0821 2.69924e-15 188.429 224.512 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.69924e-15 -44.0821 44.0821 2.69924e-15 188.429 224.512 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
236.345 229.058 mo
236.344 229.058 li
234.63 229.058 233.24 227.39 233.24 225.334 cv
233.24 185.625 li
233.24 173.806 241.225 164.225 251.074 164.225 cv
260.924 164.225 268.908 173.806 268.908 185.625 cv
268.908 185.625 li
268.908 173.806 260.924 164.225 251.074 164.225 cv
241.225 164.225 233.24 173.806 233.24 185.625 cv
233.24 225.334 li
233.24 227.39 234.63 229.058 236.345 229.058 cv
266.22 229.025 mo
267.737 228.782 268.908 227.222 268.908 225.334 cv
268.908 225.334 li
268.908 227.222 267.737 228.782 266.22 229.025 cv
263.076 226.919 mo
239.073 226.919 li
237.676 226.919 236.545 225.561 236.545 223.885 cv
236.545 191.532 li
236.545 181.901 243.05 174.095 251.074 174.095 cv
259.1 174.095 265.605 181.901 265.605 191.532 cv
265.605 223.885 li
265.605 225.561 264.472 226.919 263.076 226.919 cv
level3{
gsave
clp
[2.69924e-15 -44.0821 44.0821 2.69924e-15 251.074 224.512 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.69924e-15 -44.0821 44.0821 2.69924e-15 251.074 224.512 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
292.457 229.068 mo
291.361 229.068 290.482 227.423 290.462 225.415 cv
290.482 227.423 291.362 229.068 292.457 229.068 cv
301.992 226.919 mo
294.225 226.919 li
293.322 226.919 292.599 225.546 292.599 223.884 cv
292.599 191.547 li
292.599 181.899 296.79 174.095 301.992 174.095 cv
301.992 226.919 li
level3{
gsave
clp
[2.69922e-15 -44.0816 44.0816 2.69922e-15 296.227 224.512 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.69922e-15 -44.0816 44.0816 2.69922e-15 296.227 224.512 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
140.903 229.025 mo
142.422 228.782 143.592 227.222 143.592 225.334 cv
143.592 225.334 li
143.592 227.222 142.422 228.782 140.903 229.025 cv
137.761 226.919 mo
113.757 226.919 li
112.361 226.919 111.229 225.561 111.229 223.885 cv
111.229 191.532 li
111.229 181.901 117.734 174.095 125.759 174.095 cv
133.784 174.095 140.289 181.901 140.289 191.532 cv
140.289 223.885 li
140.289 225.561 139.157 226.919 137.761 226.919 cv
143.592 185.625 mo
143.592 173.806 135.608 164.225 125.759 164.225 cv
125.624 164.225 125.49 164.227 125.356 164.23 cv
125.49 164.227 125.624 164.225 125.759 164.225 cv
125.759 164.225 li
135.608 164.225 143.592 173.806 143.592 185.625 cv
143.592 185.625 li
level3{
gsave
clp
[2.69924e-15 -44.0821 44.0821 2.69924e-15 125.759 224.512 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.69924e-15 -44.0821 44.0821 2.69924e-15 125.759 224.512 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
74.8403 229.068 mo
74.8403 229.068 li
74.8403 164.224 li
81.2274 164.224 86.3724 173.804 86.3724 185.647 cv
86.3724 185.647 li
86.3724 173.804 81.2274 164.224 74.8403 164.224 cv
74.8403 174.095 li
80.0433 174.095 84.2341 181.899 84.2341 191.547 cv
84.2341 223.884 li
84.2341 225.546 83.5116 226.919 82.6082 226.919 cv
74.8403 226.919 li
74.8403 229.068 li
level3{
gsave
clp
[2.69922e-15 -44.0816 44.0816 2.69922e-15 80.6062 224.512 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.69922e-15 -44.0816 44.0816 2.69922e-15 80.6062 224.512 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
206.105 229.058 mo
170.753 229.058 li
170.585 229.058 170.418 229.047 170.256 229.025 cv
168.434 228.782 167.029 227.222 167.029 225.334 cv
167.029 185.625 li
167.029 173.806 176.611 164.225 188.429 164.225 cv
200.248 164.225 209.829 173.806 209.829 185.625 cv
209.829 225.334 li
209.829 227.222 208.425 228.782 206.603 229.025 cv
206.44 229.047 206.274 229.058 206.105 229.058 cv
188.429 174.095 mo
178.8 174.095 170.994 181.901 170.994 191.532 cv
170.994 223.885 li
170.994 225.561 172.352 226.919 174.028 226.919 cv
202.831 226.919 li
204.507 226.919 205.865 225.561 205.865 223.885 cv
205.865 191.532 li
205.865 181.901 198.06 174.095 188.429 174.095 cv
level3{
gsave
clp
[2.69924e-15 -44.0821 44.0821 2.69924e-15 188.429 224.512 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.69924e-15 -44.0821 44.0821 2.69924e-15 188.429 224.512 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
265.805 229.058 mo
236.345 229.058 li
234.63 229.058 233.24 227.39 233.24 225.334 cv
233.24 185.625 li
233.24 173.806 241.225 164.225 251.074 164.225 cv
260.924 164.225 268.908 173.806 268.908 185.625 cv
268.908 225.334 li
268.908 227.222 267.737 228.782 266.22 229.025 cv
266.084 229.047 265.945 229.058 265.805 229.058 cv
251.074 174.095 mo
243.05 174.095 236.545 181.901 236.545 191.532 cv
236.545 223.885 li
236.545 225.561 237.676 226.919 239.073 226.919 cv
263.076 226.919 li
264.472 226.919 265.605 225.561 265.605 223.885 cv
265.605 191.532 li
265.605 181.901 259.1 174.095 251.074 174.095 cv
level3{
gsave
clp
[2.69924e-15 -44.0821 44.0821 2.69924e-15 251.074 224.512 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.69924e-15 -44.0821 44.0821 2.69924e-15 251.074 224.512 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
301.992 229.068 mo
292.457 229.068 li
292.457 229.068 li
291.362 229.068 290.482 227.423 290.462 225.415 cv
290.461 225.391 290.461 225.367 290.461 225.343 cv
290.461 185.647 li
290.461 173.804 295.606 164.224 301.992 164.224 cv
301.992 174.095 li
296.79 174.095 292.599 181.899 292.599 191.547 cv
292.599 223.884 li
292.599 225.546 293.322 226.919 294.225 226.919 cv
301.992 226.919 li
301.992 229.068 li
level3{
gsave
clp
[2.69922e-15 -44.0816 44.0816 2.69922e-15 296.227 224.512 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.69922e-15 -44.0816 44.0816 2.69922e-15 296.227 224.512 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
140.489 229.058 mo
111.028 229.058 li
109.315 229.058 107.925 227.39 107.925 225.334 cv
107.925 185.625 li
107.925 173.967 115.693 164.487 125.356 164.23 cv
115.693 164.487 107.926 173.967 107.926 185.625 cv
107.926 225.334 li
107.926 227.39 109.315 229.058 111.028 229.058 cv
140.489 229.058 li
140.629 229.058 140.768 229.047 140.903 229.025 cv
140.768 229.047 140.629 229.058 140.489 229.058 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
140.489 229.058 mo
111.028 229.058 li
109.315 229.058 107.926 227.39 107.926 225.334 cv
107.926 185.625 li
107.926 173.967 115.693 164.487 125.356 164.23 cv
125.49 164.227 125.624 164.225 125.759 164.225 cv
135.608 164.225 143.592 173.806 143.592 185.625 cv
143.592 225.334 li
143.592 227.222 142.422 228.782 140.903 229.025 cv
140.768 229.047 140.629 229.058 140.489 229.058 cv
125.759 174.095 mo
117.734 174.095 111.229 181.901 111.229 191.532 cv
111.229 223.885 li
111.229 225.561 112.361 226.919 113.757 226.919 cv
137.761 226.919 li
139.157 226.919 140.289 225.561 140.289 223.885 cv
140.289 191.532 li
140.289 181.901 133.784 174.095 125.759 174.095 cv
level3{
gsave
clp
[2.69924e-15 -44.0821 44.0821 2.69924e-15 125.759 224.512 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.69924e-15 -44.0821 44.0821 2.69924e-15 125.759 224.512 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
84.3763 229.068 mo
74.8403 229.068 li
74.8403 226.919 li
82.6082 226.919 li
83.5116 226.919 84.2341 225.546 84.2341 223.884 cv
84.2341 191.547 li
84.2341 181.899 80.0433 174.095 74.8403 174.095 cv
74.8403 164.224 li
81.2274 164.224 86.3724 173.804 86.3724 185.647 cv
86.3724 225.343 li
86.3724 227.383 85.4846 229.068 84.3763 229.068 cv
level3{
gsave
clp
[2.69922e-15 -44.0816 44.0816 2.69922e-15 80.6062 224.512 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.69922e-15 -44.0816 44.0816 2.69922e-15 80.6062 224.512 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
310.786 110.27 mo
66.0946 110.27 li
66.0478 110.27 66.0014 110.27 65.9547 110.269 cv
60.6585 110.194 56.3886 105.877 56.3886 100.564 cv
56.3886 79.714 li
56.3886 77.3688 58.2895 75.4674 60.6342 75.4674 cv
86.9448 75.4674 li
89.3041 75.4674 91.2342 77.398 91.2342 79.7576 cv
91.2342 83.5666 li
91.2342 85.9118 93.1356 87.8132 95.4808 87.8132 cv
109.445 87.8132 li
111.81 87.8132 113.692 85.8863 113.692 83.5666 cv
113.692 79.714 li
113.692 77.3497 115.618 75.4674 117.938 75.4674 cv
144.292 75.4674 li
146.612 75.4674 148.538 77.3497 148.538 79.714 cv
148.538 83.5666 li
148.538 85.9118 150.439 87.8132 152.784 87.8132 cv
166.793 87.8132 li
169.128 87.8132 171.039 85.9021 171.039 83.5666 cv
171.039 79.714 li
171.039 77.3688 172.941 75.4674 175.285 75.4674 cv
201.595 75.4674 li
203.941 75.4674 205.841 77.3688 205.841 79.714 cv
205.841 83.523 li
205.841 85.8917 207.762 87.8132 210.131 87.8132 cv
224.097 87.8132 li
226.46 87.8132 228.343 85.8863 228.343 83.5666 cv
228.343 79.714 li
228.343 77.3497 230.269 75.4674 232.589 75.4674 cv
258.943 75.4674 li
261.263 75.4674 263.189 77.3497 263.189 79.714 cv
263.189 83.5666 li
263.189 85.9118 265.09 87.8132 267.436 87.8132 cv
281.401 87.8132 li
283.76 87.8132 285.691 85.8826 285.691 83.523 cv
285.691 79.714 li
285.691 77.3688 287.592 75.4674 289.936 75.4674 cv
316.246 75.4674 li
318.591 75.4674 320.492 77.3688 320.492 79.714 cv
320.492 100.564 li
320.492 105.876 316.224 110.192 310.93 110.269 cv
310.882 110.27 310.835 110.27 310.786 110.27 cv
175.989 105.324 mo
175.989 105.324 170.178 105.324 174.423 107.582 cv
175.139 107.962 175.76 108.116 176.274 108.116 cv
178.461 108.117 178.7 105.324 175.989 105.324 cv
289.266 104.217 mo
289.266 104.217 284.945 104.753 287.726 107.005 cv
288.221 107.406 288.743 107.57 289.232 107.57 cv
291.31 107.57 292.806 104.599 289.266 104.217 cv
73.0757 104.299 mo
72.7877 104.299 70.6417 104.352 71.1371 105.966 cv
71.4848 107.1 72.1191 107.517 72.7867 107.517 cv
73.7178 107.517 74.7136 106.705 75.0873 105.894 cv
75.4609 105.082 75.2123 104.27 73.6556 104.27 cv
73.4882 104.27 73.3059 104.279 73.1074 104.299 cv
73.1074 104.299 73.0962 104.299 73.0757 104.299 cv
123.011 104.736 mo
122.652 104.736 122.072 104.852 121.941 105.571 cv
121.898 105.803 122.11 105.893 122.43 105.893 cv
122.996 105.893 123.899 105.61 124.326 105.327 cv
124.754 105.045 124.706 104.762 123.373 104.762 cv
123.349 104.762 123.324 104.762 123.3 104.762 cv
123.3 104.762 123.18 104.736 123.011 104.736 cv
183.091 100.423 mo
183.091 100.423 178.72 100.423 181.501 102.675 cv
181.961 103.047 182.4 103.198 182.789 103.198 cv
184.357 103.198 185.108 100.742 183.091 100.423 cv
298.485 91.7004 mo
296.412 91.7004 290.684 92.1401 294.949 97.3079 cv
295.645 98.1516 296.504 98.4962 297.385 98.4964 cv
301.101 98.4971 305.21 92.3702 299.182 91.7189 cv
299.182 91.7189 298.911 91.7004 298.485 91.7004 cv
240.902 92.5931 mo
240.512 92.5931 237.578 92.6767 238.253 95.2115 cv
238.728 96.9933 239.595 97.6491 240.506 97.6491 cv
241.778 97.6492 243.137 96.3738 243.647 95.0985 cv
244.158 93.8232 243.818 92.5477 241.693 92.5477 cv
241.465 92.5477 241.216 92.5625 240.945 92.5935 cv
240.945 92.5935 240.93 92.5931 240.902 92.5931 cv
level3{
gsave
clp
[264.105 0 0 264.105 56.3883 92.8688 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.105 0 0 264.105 56.3883 92.8688 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
297.385 98.4964 mo
296.504 98.4962 295.645 98.1516 294.949 97.3079 cv
290.684 92.1401 296.412 91.7004 298.485 91.7004 cv
298.911 91.7004 299.182 91.7189 299.182 91.7189 cv
305.21 92.3702 301.101 98.4971 297.385 98.4964 cv
level3{
gsave
clp
[264.105 0 0 264.105 56.3883 92.8688 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.105 0 0 264.105 56.3883 92.8688 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
289.232 107.57 mo
288.743 107.57 288.221 107.406 287.726 107.005 cv
284.945 104.753 289.266 104.217 289.266 104.217 cv
292.806 104.599 291.31 107.57 289.232 107.57 cv
level3{
gsave
clp
[264.105 0 0 264.105 56.3883 92.8688 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.105 0 0 264.105 56.3883 92.8688 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
176.274 108.116 mo
175.76 108.116 175.139 107.962 174.423 107.582 cv
170.178 105.324 175.989 105.324 175.989 105.324 cv
178.7 105.324 178.461 108.117 176.274 108.116 cv
level3{
gsave
clp
[264.105 0 0 264.105 56.3883 92.8688 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.105 0 0 264.105 56.3883 92.8688 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
182.789 103.198 mo
182.4 103.198 181.961 103.047 181.501 102.675 cv
178.72 100.423 183.091 100.423 183.091 100.423 cv
185.108 100.742 184.357 103.198 182.789 103.198 cv
level3{
gsave
clp
[264.105 0 0 264.105 56.3883 92.8688 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.105 0 0 264.105 56.3883 92.8688 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
240.506 97.6491 mo
239.595 97.6491 238.728 96.9933 238.253 95.2115 cv
237.578 92.6767 240.512 92.5931 240.902 92.5931 cv
240.93 92.5931 240.945 92.5935 240.945 92.5935 cv
241.216 92.5625 241.465 92.5477 241.693 92.5477 cv
243.818 92.5477 244.158 93.8232 243.647 95.0985 cv
243.137 96.3738 241.778 97.6492 240.506 97.6491 cv
level3{
gsave
clp
[264.105 0 0 264.105 56.3883 92.8688 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.105 0 0 264.105 56.3883 92.8688 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
122.43 105.893 mo
122.11 105.893 121.898 105.803 121.941 105.571 cv
122.072 104.852 122.652 104.736 123.011 104.736 cv
123.18 104.736 123.3 104.762 123.3 104.762 cv
123.324 104.762 123.349 104.762 123.373 104.762 cv
124.706 104.762 124.754 105.045 124.326 105.327 cv
123.899 105.61 122.996 105.893 122.43 105.893 cv
level3{
gsave
clp
[264.105 0 0 264.105 56.3883 92.8688 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.105 0 0 264.105 56.3883 92.8688 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
72.7867 107.517 mo
72.1191 107.517 71.4848 107.1 71.1371 105.966 cv
70.6417 104.352 72.7877 104.299 73.0757 104.299 cv
73.0962 104.299 73.1074 104.299 73.1074 104.299 cv
73.3059 104.279 73.4882 104.27 73.6556 104.27 cv
75.2123 104.27 75.4609 105.082 75.0873 105.894 cv
74.7136 106.705 73.7178 107.517 72.7867 107.517 cv
level3{
gsave
clp
[264.105 0 0 264.105 56.3883 92.8688 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[264.105 0 0 264.105 56.3883 92.8688 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
158.842 388.737 mo
155.214 385.753 161.037 385.753 161.037 385.753 cv
161.679 385.854 162.112 386.117 162.372 386.458 cv
161.518 387.593 160.275 388.419 158.842 388.737 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
159.047 298.199 mo
153.524 298.199 155.437 291.289 159.352 291.289 cv
160.491 291.289 161.801 291.875 163.145 293.387 cv
167.424 298.199 159.047 298.199 159.047 298.199 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
266.605 280.325 mo
266.23 280.325 265.99 280.308 265.99 280.308 cv
260.659 279.732 264.292 274.315 267.577 274.315 cv
268.357 274.315 269.117 274.62 269.733 275.366 cv
273.505 279.936 268.437 280.325 266.605 280.325 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
194.282 357.574 mo
193.711 357.574 193.346 357.55 193.346 357.55 cv
185.233 356.673 190.762 348.428 195.762 348.428 cv
196.948 348.428 198.105 348.892 199.042 350.028 cv
204.784 356.983 197.07 357.574 194.282 357.574 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
206.69 340.73 mo
201.925 340.215 203.939 336.216 206.737 336.216 cv
207.394 336.216 208.096 336.437 208.763 336.977 cv
212.506 340.007 206.69 340.73 206.69 340.73 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
260.892 129.356 mo
258.178 128.927 259.188 125.621 261.298 125.621 cv
261.821 125.621 262.412 125.825 263.031 126.325 cv
266.774 129.356 260.892 129.356 260.892 129.356 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
282.698 288.656 mo
279.984 288.228 280.993 284.922 283.104 284.922 cv
283.627 284.922 284.218 285.125 284.837 285.626 cv
288.579 288.656 282.698 288.656 282.698 288.656 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
119.641 369.804 mo
115.992 369.804 116.314 366.045 119.258 366.045 cv
119.949 366.045 120.785 366.253 121.747 366.765 cv
127.461 369.804 119.641 369.804 119.641 369.804 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
121.163 261.695 mo
118.449 261.267 119.458 257.961 121.569 257.961 cv
122.092 257.961 122.683 258.165 123.302 258.665 cv
127.045 261.695 121.163 261.695 121.163 261.695 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
220.605 139.55 mo
220.295 139.55 220.075 139.515 220.075 139.515 cv
220.03 139.516 219.987 139.516 219.944 139.516 cv
217.49 139.516 217.403 139.135 218.188 138.754 cv
218.974 138.373 220.632 137.992 221.671 137.992 cv
222.258 137.992 222.648 138.114 222.57 138.426 cv
222.328 139.395 221.263 139.55 220.605 139.55 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
92.6385 147.052 mo
92.4067 147.052 92.2424 147.002 92.2424 147.002 cv
92.2094 147.002 92.1772 147.003 92.1452 147.003 cv
90.3145 147.003 90.2489 146.454 90.8351 145.906 cv
91.4213 145.358 92.6589 144.81 93.4345 144.81 cv
93.8727 144.81 94.1635 144.985 94.1054 145.434 cv
93.9246 146.829 93.1297 147.052 92.6385 147.052 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
257.774 287.911 mo
257.542 287.911 257.378 287.861 257.378 287.861 cv
257.346 287.861 257.314 287.861 257.282 287.861 cv
255.45 287.861 255.384 287.313 255.971 286.765 cv
256.557 286.217 257.795 285.668 258.57 285.668 cv
259.008 285.668 259.299 285.844 259.241 286.293 cv
259.06 287.687 258.265 287.911 257.774 287.911 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
159.063 167.292 mo
156.202 167.292 155.745 166.199 156.432 165.106 cv
157.118 164.014 158.947 162.921 160.658 162.921 cv
161.885 162.921 163.051 163.483 163.69 165.01 cv
164.599 167.181 160.653 167.253 160.127 167.253 cv
160.089 167.253 160.069 167.253 160.069 167.253 cv
159.705 167.279 159.371 167.292 159.063 167.292 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
155.225 213.738 mo
152.364 213.738 151.907 212.021 152.594 210.305 cv
153.28 208.588 155.11 206.872 156.821 206.872 cv
158.047 206.872 159.213 207.754 159.852 210.152 cv
160.762 213.565 156.812 213.677 156.288 213.677 cv
156.251 213.677 156.231 213.677 156.231 213.677 cv
155.867 213.718 155.532 213.738 155.225 213.738 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
173.906 150.485 mo
171.045 150.485 170.589 148.768 171.275 147.052 cv
171.961 145.335 173.791 143.619 175.501 143.619 cv
176.728 143.619 177.893 144.501 178.533 146.9 cv
179.442 150.311 175.494 150.424 174.969 150.424 cv
174.932 150.424 174.912 150.423 174.912 150.423 cv
174.548 150.465 174.214 150.485 173.906 150.485 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
223.598 246.07 mo
218.076 246.07 219.989 239.159 223.904 239.159 cv
225.043 239.159 226.352 239.745 227.697 241.257 cv
231.975 246.07 223.598 246.07 223.598 246.07 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
101.767 326.467 mo
101.392 326.467 101.152 326.45 101.152 326.45 cv
95.8209 325.874 99.454 320.457 102.74 320.457 cv
103.519 320.457 104.279 320.761 104.895 321.508 cv
108.668 326.078 103.6 326.467 101.767 326.467 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
183.314 256.943 mo
180.6 256.514 181.609 253.208 183.72 253.208 cv
184.244 253.208 184.835 253.412 185.453 253.912 cv
189.197 256.943 183.314 256.943 183.314 256.943 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
227.115 290.214 mo
226.887 290.214 226.726 290.18 226.726 290.18 cv
226.694 290.18 226.662 290.18 226.631 290.18 cv
224.833 290.18 224.769 289.799 225.345 289.418 cv
225.92 289.037 227.135 288.656 227.896 288.656 cv
228.327 288.656 228.612 288.778 228.555 289.09 cv
228.377 290.059 227.597 290.214 227.115 290.214 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
248.458 333.298 mo
246.362 333.298 246.027 332.205 246.53 331.113 cv
247.033 330.02 248.374 328.928 249.627 328.928 cv
250.526 328.928 251.38 329.49 251.848 331.016 cv
252.514 333.188 249.623 333.259 249.237 333.259 cv
249.209 333.259 249.195 333.259 249.195 333.259 cv
248.928 333.286 248.683 333.298 248.458 333.298 cv
level3{
gsave
clp
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.78006e-14 290.707 -290.707 1.78006e-14 188.442 121.958 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
715.526 801.564 mo
720.042 799.382 723.158 794.758 723.158 789.406 cv
723.158 756.401 li
825.173 756.401 li
825.173 756.401 769.243 753.857 759.17 753.857 cv
753.377 753.857 736.462 754.699 723.138 755.414 cv
722.756 748.303 716.869 742.655 709.663 742.655 cv
709.356 742.655 li
701.903 742.655 695.861 736.613 695.861 729.16 cv
695.861 559.102 li
875.974 563.473 li
882.771 563.638 889.353 565.881 894.836 569.898 cv
914.747 584.489 li
916.346 585.66 918.13 586.528 919.952 587.306 cv
931.767 592.359 939.613 603.76 940.119 616.592 cv
945.057 741.792 li
945.191 745.194 943.996 748.39 941.893 750.821 cv
940.204 752.775 941.331 755.806 943.888 756.165 cv
950.312 757.068 955.089 762.566 955.089 769.052 cv
955.089 784.773 li
955.089 791.877 949.394 797.668 942.291 797.786 cv
715.526 801.564 li
775.655 779.753 mo
775.655 779.753 767.722 780.739 772.828 784.871 cv
773.737 785.607 774.694 785.909 775.591 785.909 cv
779.407 785.909 782.153 780.456 775.655 779.753 cv
933.123 781.032 mo
933.123 781.032 927.458 781.032 931.064 783.951 cv
931.66 784.434 932.229 784.63 932.733 784.63 cv
934.766 784.63 935.739 781.446 933.123 781.032 cv
784.856 775.054 mo
783.974 775.054 781.532 775.241 783.349 777.443 cv
783.646 777.802 784.012 777.949 784.387 777.949 cv
785.97 777.949 787.72 775.34 785.152 775.062 cv
785.152 775.062 785.036 775.054 784.856 775.054 cv
909.304 763.464 mo
909.304 763.464 898.1 764.857 905.311 770.694 cv
906.595 771.733 907.947 772.159 909.214 772.16 cv
914.604 772.16 918.484 764.456 909.304 763.464 cv
733.535 732.049 mo
733.535 732.049 725.467 732.049 729.587 736.685 cv
730.882 738.142 732.144 738.706 733.241 738.706 cv
737.012 738.706 738.855 732.049 733.535 732.049 cv
816.041 732.033 mo
814.277 732.033 809.394 732.407 813.028 736.81 cv
813.621 737.529 814.353 737.823 815.104 737.823 cv
818.269 737.823 821.768 732.604 816.633 732.049 cv
816.633 732.049 816.403 732.033 816.041 732.033 cv
809.924 714.239 mo
809.924 714.239 li
831.912 714.239 li
833.866 714.239 835.45 715.822 835.45 717.776 cv
835.45 725.149 841.427 731.128 848.8 731.128 cv
865.443 731.128 li
865.443 731.128 li
872.302 731.128 877.863 725.568 877.863 718.708 cv
877.863 718.708 li
877.863 702.067 li
877.863 702.067 li
877.863 700.122 877.447 698.274 876.699 696.608 cv
877.985 695.825 878.252 693.624 876.11 693.286 cv
876.11 693.286 875.421 693.286 874.676 693.41 cv
872.247 690.56 868.642 688.745 864.612 688.715 cv
864.61 688.715 864.608 688.715 864.606 688.715 cv
864.593 688.715 864.58 688.715 864.567 688.715 cv
864.564 688.715 864.561 688.715 864.558 688.715 cv
864.542 688.715 864.527 688.715 864.511 688.715 cv
864.511 688.715 li
863.542 688.715 862.668 688.321 862.03 687.692 cv
861.38 687.051 860.973 686.163 860.973 685.177 cv
860.973 685.177 li
860.973 658.474 li
860.977 658.454 li
860.98 657.969 861.077 657.507 861.257 657.088 cv
861.289 657.042 li
861.47 656.637 861.718 656.267 862.03 655.959 cv
862.668 655.328 863.542 654.937 864.511 654.937 cv
864.511 654.937 li
864.526 654.937 864.542 654.937 864.558 654.937 cv
864.561 654.937 864.564 654.937 864.568 654.937 cv
864.58 654.936 864.593 654.936 864.606 654.936 cv
864.608 654.936 864.61 654.936 864.613 654.936 cv
871.939 654.881 877.863 648.924 877.863 641.584 cv
877.863 641.584 li
877.863 624.943 li
877.863 624.943 li
877.863 618.1 872.329 612.551 865.493 612.524 cv
865.492 612.524 865.492 612.524 865.491 612.524 cv
865.475 612.523 865.459 612.523 865.443 612.523 cv
848.8 612.523 li
841.427 612.523 835.45 618.5 835.45 625.874 cv
835.45 625.875 li
835.45 626.117 835.425 626.352 835.379 626.58 cv
834.925 626.662 834.373 627 834.229 628.114 cv
834.208 628.274 834.233 628.398 834.294 628.49 cv
833.665 629.063 832.83 629.412 831.912 629.412 cv
805.208 629.412 li
803.255 629.412 801.671 627.829 801.671 625.875 cv
801.671 625.874 li
801.671 625.874 li
801.671 618.5 795.693 612.523 788.32 612.523 cv
771.677 612.523 li
764.819 612.523 759.258 618.083 759.258 624.943 cv
759.258 641.584 li
759.258 648.958 765.236 654.937 772.61 654.937 cv
774.564 654.937 776.147 656.52 776.147 658.473 cv
776.147 685.177 li
776.147 687.131 774.563 688.715 772.61 688.715 cv
765.236 688.715 759.258 694.692 759.258 702.067 cv
759.258 718.708 li
759.258 725.568 764.819 731.128 771.677 731.128 cv
788.32 731.128 li
788.32 731.128 li
788.32 731.128 li
795.693 731.128 801.671 725.149 801.671 717.776 cv
801.671 715.822 803.255 714.239 805.208 714.239 cv
805.208 714.239 li
805.208 714.239 li
809.924 714.239 li
750.195 709.162 mo
749.561 709.162 748.535 709.312 748.301 710.245 cv
748.226 710.545 748.6 710.663 749.166 710.663 cv
750.166 710.663 751.763 710.296 752.521 709.929 cv
753.278 709.562 753.194 709.195 750.833 709.195 cv
750.791 709.195 750.749 709.195 750.705 709.195 cv
750.705 709.195 750.494 709.162 750.195 709.162 cv
930.703 703.259 mo
930.703 703.259 925.035 703.259 928.642 706.178 cv
929.238 706.66 929.807 706.856 930.311 706.856 cv
932.344 706.856 933.316 703.672 930.703 703.259 cv
752.812 668.74 mo
752.306 668.74 748.504 668.809 749.379 670.9 cv
749.995 672.371 751.118 672.912 752.3 672.912 cv
753.947 672.912 755.709 671.86 756.37 670.808 cv
757.031 669.755 756.591 668.703 753.835 668.703 cv
753.539 668.703 753.217 668.715 752.866 668.74 cv
752.866 668.74 752.847 668.74 752.812 668.74 cv
719.591 619.13 mo
717.826 619.13 712.947 619.504 716.58 623.906 cv
717.173 624.625 717.905 624.919 718.655 624.919 cv
721.82 624.92 725.32 619.701 720.185 619.146 cv
720.185 619.146 719.953 619.13 719.591 619.13 cv
918.027 616.955 mo
918.027 616.955 912.425 617.651 916.03 620.569 cv
916.672 621.09 917.348 621.303 917.982 621.303 cv
920.677 621.303 922.617 617.452 918.027 616.955 cv
911.07 607.418 mo
908.383 607.418 900.956 607.987 906.485 614.687 cv
907.388 615.781 908.502 616.227 909.644 616.228 cv
914.461 616.229 919.786 608.286 911.972 607.442 cv
911.972 607.442 911.621 607.418 911.07 607.418 cv
704.091 611.104 mo
704.091 611.104 698.425 611.104 702.031 614.023 cv
702.627 614.505 703.197 614.7 703.7 614.7 cv
705.733 614.701 706.705 611.517 704.091 611.104 cv
728.099 611.823 mo
727.626 611.823 726.86 612.038 726.686 613.381 cv
726.63 613.813 726.91 613.982 727.332 613.982 cv
728.078 613.982 729.271 613.454 729.835 612.926 cv
730.4 612.398 730.337 611.87 728.573 611.87 cv
728.543 611.87 728.512 611.87 728.48 611.87 cv
728.48 611.87 728.322 611.823 728.099 611.823 cv
804.7 603.266 mo
804.193 603.266 800.392 603.375 801.267 606.661 cv
801.883 608.971 803.005 609.821 804.187 609.821 cv
805.834 609.822 807.597 608.168 808.258 606.514 cv
808.919 604.861 808.48 603.207 805.724 603.207 cv
805.428 603.207 805.106 603.227 804.755 603.267 cv
804.755 603.267 804.736 603.266 804.7 603.266 cv
739.867 572.065 mo
739.867 572.065 731.797 572.065 735.917 576.7 cv
737.212 578.157 738.474 578.722 739.571 578.722 cv
743.342 578.722 745.185 572.065 739.867 572.065 cv
822.371 572.049 mo
820.605 572.049 815.725 572.423 819.359 576.825 cv
819.952 577.544 820.684 577.838 821.434 577.838 cv
824.599 577.838 828.099 572.62 822.964 572.065 cv
822.964 572.065 822.733 572.049 822.371 572.049 cv
778.668 561.591 mo
778.668 561.591 773.002 561.591 776.609 564.51 cv
777.204 564.993 777.774 565.188 778.278 565.188 cv
780.31 565.188 781.283 562.004 778.668 561.591 cv
975.168 563.449 mo
976.141 563.101 976.976 562.505 977.601 561.745 cv
976.976 562.505 976.142 563.101 975.168 563.449 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
977.601 561.745 mo
978.359 560.823 978.809 559.66 978.824 558.406 cv
978.927 549.33 li
978.824 558.406 li
978.81 559.66 978.36 560.823 977.601 561.745 cv
.980392 .901961 .862745 rgb
f
979.017 802.218 mo
713.913 802.218 li
714.467 802.034 715.006 801.815 715.526 801.564 cv
942.291 797.786 li
949.394 797.668 955.089 791.877 955.089 784.773 cv
955.089 769.052 li
955.089 762.566 950.312 757.068 943.888 756.165 cv
941.331 755.806 940.204 752.775 941.893 750.821 cv
943.996 748.39 945.191 745.194 945.057 741.792 cv
940.119 616.592 li
939.613 603.76 931.767 592.359 919.952 587.306 cv
918.13 586.528 916.346 585.66 914.747 584.489 cv
894.836 569.898 li
889.353 565.881 882.771 563.638 875.974 563.473 cv
695.861 559.102 li
695.861 549.33 li
721.676 549.33 li
766.831 549.33 li
795.982 549.33 li
841.137 549.33 li
870.289 549.33 li
915.444 549.33 li
944.595 549.33 li
978.927 549.33 li
978.824 558.406 li
978.809 559.66 978.359 560.823 977.601 561.745 cv
976.976 562.505 976.141 563.101 975.168 563.449 cv
975.168 563.449 li
971.035 564.929 968.076 568.881 968.076 573.524 cv
968.076 743.767 li
968.076 743.767 li
968.076 749.674 972.866 754.463 978.774 754.463 cv
979.017 754.463 li
984.925 754.463 989.714 759.252 989.714 765.16 cv
989.714 791.522 li
989.714 797.429 984.925 802.218 979.017 802.218 cv
938.359 572.049 mo
938.359 572.049 932.694 572.049 936.299 574.968 cv
936.895 575.45 937.464 575.646 937.968 575.646 cv
940 575.646 940.973 572.461 938.359 572.049 cv
908.418 565.165 mo
908.418 565.165 900.886 565.165 906.39 568.092 cv
907.317 568.585 908.122 568.785 908.788 568.785 cv
911.622 568.786 911.933 565.165 908.418 565.165 cv
917.625 558.813 mo
917.625 558.813 911.959 558.813 915.565 561.732 cv
916.16 562.214 916.73 562.409 917.234 562.409 cv
919.267 562.41 920.239 559.225 917.625 558.813 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
979.37 549.33 mo
978.927 549.33 li
944.595 549.33 li
915.444 549.33 li
870.289 549.33 li
841.137 549.33 li
795.982 549.33 li
766.831 549.33 li
721.676 549.33 li
695.861 549.33 li
695.861 529.058 li
716.203 529.058 li
720.044 529.058 723.158 525.944 723.158 522.104 cv
723.158 505.927 li
723.378 505.691 723.618 505.475 723.876 505.281 cv
724.798 504.587 725.945 504.175 727.188 504.175 cv
732.621 504.175 li
761.319 504.175 li
764.364 504.175 766.831 506.643 766.831 509.687 cv
766.831 514.667 li
766.831 517.712 769.299 520.18 772.343 520.18 cv
790.471 520.18 li
793.514 520.18 795.982 517.712 795.982 514.667 cv
795.982 509.687 li
795.982 506.643 798.45 504.175 801.495 504.175 cv
835.625 504.175 li
838.67 504.175 841.137 506.643 841.137 509.687 cv
841.137 514.667 li
841.137 517.712 843.605 520.18 846.65 520.18 cv
864.777 520.18 li
867.822 520.18 870.289 517.712 870.289 514.667 cv
870.289 509.687 li
870.289 506.643 872.757 504.175 875.8 504.175 cv
884.46 504.175 li
893.82 504.175 li
909.932 504.175 li
912.301 504.175 914.32 505.669 915.1 507.767 cv
915.322 508.365 915.444 509.012 915.444 509.687 cv
915.444 514.667 li
915.444 517.712 917.911 520.18 920.956 520.18 cv
939.083 520.18 li
942.127 520.18 944.595 517.712 944.595 514.667 cv
944.595 509.687 li
944.595 506.643 947.063 504.175 950.107 504.175 cv
950.682 504.175 li
984.239 504.175 li
987.283 504.175 989.75 506.643 989.75 509.687 cv
989.75 538.95 li
989.75 544.683 985.103 549.33 979.37 549.33 cv
857.913 539.634 mo
857.913 539.634 852.247 539.634 855.853 542.553 cv
856.449 543.035 857.018 543.231 857.522 543.231 cv
859.555 543.231 860.527 540.047 857.913 539.634 cv
805.155 530.305 mo
805.155 530.305 797.622 530.305 803.126 533.233 cv
804.054 533.726 804.859 533.926 805.525 533.926 cv
808.359 533.926 808.67 530.305 805.155 530.305 cv
951.998 528.87 mo
951.998 528.87 946.396 529.567 950.001 532.485 cv
950.643 533.005 951.319 533.218 951.953 533.218 cv
954.648 533.219 956.588 529.367 951.998 528.87 cv
736.479 529.544 mo
736.014 529.544 735.262 529.694 735.091 530.627 cv
735.036 530.927 735.311 531.045 735.725 531.045 cv
736.458 531.045 737.629 530.678 738.183 530.311 cv
738.738 529.944 738.676 529.577 736.945 529.577 cv
736.915 529.577 736.884 529.577 736.853 529.577 cv
736.853 529.577 736.698 529.544 736.479 529.544 cv
814.362 523.952 mo
814.362 523.952 808.696 523.952 812.301 526.872 cv
812.897 527.354 813.466 527.55 813.97 527.55 cv
816.003 527.55 816.976 524.366 814.362 523.952 cv
963.95 512.645 mo
961.263 512.645 953.836 513.215 959.365 519.914 cv
960.268 521.008 961.382 521.455 962.524 521.455 cv
967.342 521.455 972.666 513.514 964.852 512.669 cv
964.852 512.669 964.5 512.645 963.95 512.645 cv
889.304 513.802 mo
888.8 513.802 884.995 513.91 885.87 517.198 cv
886.486 519.507 887.609 520.357 888.79 520.357 cv
890.438 520.357 892.2 518.704 892.862 517.05 cv
893.523 515.397 893.083 513.744 890.328 513.744 cv
890.032 513.744 889.71 513.763 889.359 513.803 cv
889.359 513.803 889.34 513.802 889.304 513.802 cv
level3{
gsave
clp
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
/8 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.952941 .745098 .564706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .85098 .658824 ]
/C1 [.952941 .745098 .564706 ]
/N 4.97729 
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
clp
/8 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~oCMSFoCV\Io^qhLp%A"Op@e4Rp@n=Up\4FWq"XXZq"X[\q>'j^q>'m`qYL'bqYL'cqtp9fqtp9fqtp9g
r;?Kjr;?Kjr;?Kjr;?NlrVc]nrVc]nrVc]nrVc]nrVc]nrVlfqrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
~>
<~^:q@s^qde&_8=(,_o0L4`Poj:`lH-@aN2KFai_cKbKJ)Qbfn;Uc-=MYcHa_]cd0qad*U.ddF$@hdF-Ik
daHRme'ldpe'lgreC<!teC<%!e^`4#e^`4#f%/F'f%/F'f%/F'f%8O*f@SX+f@SX+f@SX+f@SX+f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
~>
<~OH>QdOcklkPEV5qQ'IW#QBml(Q^F/-R@0J3R[T_8S"#q<S=H.@SXl@DSt;RHT:_aKTV.sNTV8'QTqS0S
U8"BVU8"EXUSFTZUSFW\Unjf^Unjf^V5:#bV5:#bV5:#bV5C,eVP^5fVP^5fVP^5fVP^5fVPg>iVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /8 /Gradient get_res exec grestore
}if
np
733.241 738.706 mo
732.144 738.706 730.882 738.142 729.587 736.685 cv
725.467 732.049 733.535 732.049 733.535 732.049 cv
738.855 732.049 737.012 738.706 733.241 738.706 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
815.104 737.823 mo
814.353 737.823 813.621 737.529 813.028 736.81 cv
809.394 732.407 814.277 732.033 816.041 732.033 cv
816.403 732.033 816.633 732.049 816.633 732.049 cv
821.768 732.604 818.269 737.823 815.104 737.823 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
718.655 624.919 mo
717.905 624.919 717.173 624.625 716.58 623.906 cv
712.947 619.504 717.826 619.13 719.591 619.13 cv
719.953 619.13 720.185 619.146 720.185 619.146 cv
725.32 619.701 721.82 624.92 718.655 624.919 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
784.387 777.949 mo
784.012 777.949 783.646 777.802 783.349 777.443 cv
781.532 775.241 783.974 775.054 784.856 775.054 cv
785.036 775.054 785.152 775.062 785.152 775.062 cv
787.72 775.34 785.97 777.949 784.387 777.949 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
909.644 616.228 mo
908.502 616.227 907.388 615.781 906.485 614.687 cv
900.956 607.987 908.383 607.418 911.07 607.418 cv
911.621 607.418 911.972 607.442 911.972 607.442 cv
919.786 608.286 914.461 616.229 909.644 616.228 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
962.524 521.455 mo
961.382 521.455 960.268 521.008 959.365 519.914 cv
953.836 513.215 961.263 512.645 963.95 512.645 cv
964.5 512.645 964.852 512.669 964.852 512.669 cv
972.666 513.514 967.342 521.455 962.524 521.455 cv
level3{
gsave
clp
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
/9 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9
I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~qS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm
`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm_iX`4OSZkVqSSEk_iX]3OSQeUq8/6h_N4N0O86YRq8&*e_2e<+
NqgDLpqMg`^Q&!%NVC/GpUuO[]o2TsMY=]?ot-(R\qp!gL\/'2o<sDF[=n+WKCQ:"nZdZ7YCQ)DIdX7a
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
clp
/9 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~mI'E1mdKW5n*oi9nF5r:nF?&=nac8Ao()ABo(2JEoCMSFoCV\Io^qeJo_%nMp%A"Np%J+Qp@e4Rp@e4R
p@e4Rp@e7Tp\4FVp\4FVp\4FVp\4IXq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"X[\q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
~>
<~WiN2%XKAV-Y-5%5Yd(I=ZEgdAZEpmE['d<L[C3NP[^W`T\%&rY\[oA`]">Sd]=Y\e]=beh]Y(ni]Y2"l
]tM+m]tM.o^:q=q^:q@s^V@Ou^V@S"^qdb$^qde&_83t(_83t(_83t(_84"*_SX1,_SX1,_SX1,_SX1,
_SX1,_SX1,_SX1-_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
~>
<~H[L3hI=?WpIt3'"J:W9&JV&K*JqJ].K7no3Knb>:L5(G;L51P>LPUbBLl$tFM2@(GM2I1JMMmCNMi3LO
Mi3OQN/W^SN/W^SN/W^SN/WaUNK&pWNK&pWNK&sYNfK-[NfK-[NfK0]O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?`OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /9 /Gradient get_res exec grestore
}if
np
909.214 772.16 mo
907.947 772.159 906.595 771.733 905.311 770.694 cv
898.1 764.857 909.304 763.464 909.304 763.464 cv
918.484 764.456 914.604 772.16 909.214 772.16 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
775.591 785.909 mo
774.694 785.909 773.737 785.607 772.828 784.871 cv
767.722 780.739 775.655 779.753 775.655 779.753 cv
782.153 780.456 779.407 785.909 775.591 785.909 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
917.982 621.303 mo
917.348 621.303 916.672 621.09 916.03 620.569 cv
912.425 617.651 918.027 616.955 918.027 616.955 cv
922.617 617.452 920.677 621.303 917.982 621.303 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
951.953 533.218 mo
951.319 533.218 950.643 533.005 950.001 532.485 cv
946.396 529.567 951.998 528.87 951.998 528.87 cv
956.588 529.367 954.648 533.219 951.953 533.218 cv
level3{
gsave
clp
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
703.7 614.7 mo
703.197 614.7 702.627 614.505 702.031 614.023 cv
698.425 611.104 704.091 611.104 704.091 611.104 cv
706.705 611.517 705.733 614.701 703.7 614.7 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
876.699 696.608 mo
876.177 695.444 875.493 694.368 874.676 693.41 cv
875.421 693.286 876.11 693.286 876.11 693.286 cv
878.252 693.624 877.985 695.825 876.699 696.608 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
805.525 533.926 mo
804.859 533.926 804.054 533.726 803.126 533.233 cv
797.622 530.305 805.155 530.305 805.155 530.305 cv
808.67 530.305 808.359 533.926 805.525 533.926 cv
level3{
gsave
clp
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
813.97 527.55 mo
813.466 527.55 812.897 527.354 812.301 526.872 cv
808.696 523.952 814.362 523.952 814.362 523.952 cv
816.976 524.366 816.003 527.55 813.97 527.55 cv
level3{
gsave
clp
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
932.733 784.63 mo
932.229 784.63 931.66 784.434 931.064 783.951 cv
927.458 781.032 933.123 781.032 933.123 781.032 cv
935.739 781.446 934.766 784.63 932.733 784.63 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
930.311 706.856 mo
929.807 706.856 929.238 706.66 928.642 706.178 cv
925.035 703.259 930.703 703.259 930.703 703.259 cv
933.316 703.672 932.344 706.856 930.311 706.856 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
857.522 543.231 mo
857.018 543.231 856.449 543.035 855.853 542.553 cv
852.247 539.634 857.913 539.634 857.913 539.634 cv
860.527 540.047 859.555 543.231 857.522 543.231 cv
level3{
gsave
clp
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
749.166 710.663 mo
748.6 710.663 748.226 710.545 748.301 710.245 cv
748.535 709.312 749.561 709.162 750.195 709.162 cv
750.494 709.162 750.705 709.195 750.705 709.195 cv
750.749 709.195 750.791 709.195 750.833 709.195 cv
753.194 709.195 753.278 709.562 752.521 709.929 cv
751.763 710.296 750.166 710.663 749.166 710.663 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
834.294 628.49 mo
834.233 628.398 834.208 628.274 834.229 628.114 cv
834.373 627 834.925 626.662 835.379 626.58 cv
835.228 627.33 834.839 627.994 834.294 628.49 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
727.332 613.982 mo
726.91 613.982 726.63 613.813 726.686 613.381 cv
726.86 612.038 727.626 611.823 728.099 611.823 cv
728.322 611.823 728.48 611.87 728.48 611.87 cv
728.512 611.87 728.543 611.87 728.573 611.87 cv
730.337 611.87 730.4 612.398 729.835 612.926 cv
729.271 613.454 728.078 613.982 727.332 613.982 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
752.3 672.912 mo
751.118 672.912 749.995 672.371 749.379 670.9 cv
748.504 668.809 752.306 668.74 752.812 668.74 cv
752.847 668.74 752.866 668.74 752.866 668.74 cv
753.217 668.715 753.539 668.703 753.835 668.703 cv
756.591 668.703 757.031 669.755 756.37 670.808 cv
755.709 671.86 753.947 672.912 752.3 672.912 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
804.187 609.821 mo
803.005 609.821 801.883 608.971 801.267 606.661 cv
800.392 603.375 804.193 603.266 804.7 603.266 cv
804.736 603.266 804.755 603.267 804.755 603.267 cv
805.106 603.227 805.428 603.207 805.724 603.207 cv
808.48 603.207 808.919 604.861 808.258 606.514 cv
807.597 608.168 805.834 609.822 804.187 609.821 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
888.79 520.357 mo
887.609 520.357 886.486 519.507 885.87 517.198 cv
884.995 513.91 888.8 513.802 889.304 513.802 cv
889.34 513.802 889.359 513.803 889.359 513.803 cv
889.71 513.763 890.032 513.744 890.328 513.744 cv
893.083 513.744 893.523 515.397 892.862 517.05 cv
892.2 518.704 890.438 520.357 888.79 520.357 cv
level3{
gsave
clp
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
739.571 578.722 mo
738.474 578.722 737.212 578.157 735.917 576.7 cv
731.797 572.065 739.867 572.065 739.867 572.065 cv
745.185 572.065 743.342 578.722 739.571 578.722 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
908.788 568.785 mo
908.122 568.785 907.317 568.585 906.39 568.092 cv
900.886 565.165 908.418 565.165 908.418 565.165 cv
911.933 565.165 911.622 568.786 908.788 568.785 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
821.434 577.838 mo
820.684 577.838 819.952 577.544 819.359 576.825 cv
815.725 572.423 820.605 572.049 822.371 572.049 cv
822.733 572.049 822.964 572.065 822.964 572.065 cv
828.099 572.62 824.599 577.838 821.434 577.838 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
778.278 565.188 mo
777.774 565.188 777.204 564.993 776.609 564.51 cv
773.002 561.591 778.668 561.591 778.668 561.591 cv
781.283 562.004 780.31 565.188 778.278 565.188 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
917.234 562.409 mo
916.73 562.409 916.16 562.214 915.565 561.732 cv
911.959 558.813 917.625 558.813 917.625 558.813 cv
920.239 559.225 919.267 562.41 917.234 562.409 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
937.968 575.646 mo
937.464 575.646 936.895 575.45 936.299 574.968 cv
932.694 572.049 938.359 572.049 938.359 572.049 cv
940.973 572.461 940 575.646 937.968 575.646 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
735.725 531.045 mo
735.311 531.045 735.036 530.927 735.091 530.627 cv
735.262 529.694 736.014 529.544 736.479 529.544 cv
736.698 529.544 736.853 529.577 736.853 529.577 cv
736.884 529.577 736.915 529.577 736.945 529.577 cv
738.676 529.577 738.738 529.944 738.183 530.311 cv
737.629 530.678 736.458 531.045 735.725 531.045 cv
level3{
gsave
clp
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-326.255 3.99547e-14 -3.99547e-14 -326.255 977.668 526.753 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
825.173 756.401 mo
723.158 756.401 li
723.158 756.149 li
723.158 756.149 li
723.158 755.903 723.151 755.657 723.138 755.414 cv
736.462 754.699 753.377 753.857 759.17 753.857 cv
769.243 753.857 825.173 756.401 825.173 756.401 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
31.8084 802.218 mo
11.8148 802.218 li
5.31227 802.218 .0403871 796.946 .0403871 790.444 cv
.0403871 761.426 li
.0403871 754.923 5.31128 749.652 11.8148 749.652 cv
12.0824 749.652 li
18.5857 749.652 23.8579 744.379 23.8579 737.876 cv
23.8579 447.602 li
23.8579 442.491 20.6019 438.141 16.0515 436.512 cv
13.6801 435.664 12.0564 433.479 12.0272 430.96 cv
11.9138 420.97 li
11.914 420.97 li
12.0252 430.724 li
251.64 436.539 li
259.12 436.72 266.367 439.189 272.404 443.611 cv
294.321 459.672 li
296.08 460.962 298.043 461.915 300.049 462.773 cv
305.098 464.932 309.488 468.143 313.002 472.092 cv
298.177 472.092 li
294.337 472.092 291.224 475.205 291.224 479.045 cv
291.224 484.935 li
291.11 484.928 290.762 484.911 290.272 484.911 cv
287.315 484.911 279.139 485.538 285.225 492.912 cv
286.219 494.117 287.445 494.608 288.703 494.608 cv
289.549 494.608 290.41 494.386 291.224 494.007 cv
291.224 522.104 li
291.224 523.305 291.528 524.435 292.065 525.421 cv
292.065 532.755 li
292.065 535.717 289.664 538.117 286.703 538.117 cv
271.521 538.117 li
268.559 538.117 266.158 540.518 266.158 543.479 cv
266.158 565.768 li
266.158 568.73 263.758 571.13 260.797 571.13 cv
247.742 571.13 li
247.742 571.107 247.742 571.083 247.742 571.06 cv
247.742 571.06 li
247.742 554.418 li
247.742 554.418 li
247.742 547.078 241.819 541.121 234.492 541.067 cv
234.49 541.067 234.488 541.067 234.486 541.067 cv
234.473 541.067 234.46 541.067 234.447 541.067 cv
234.444 541.067 234.441 541.067 234.437 541.067 cv
234.422 541.067 234.407 541.067 234.391 541.067 cv
234.391 541.067 li
233.423 541.067 232.548 540.674 231.909 540.043 cv
231.91 540.044 li
231.26 539.404 230.854 538.515 230.854 537.529 cv
230.854 537.529 li
230.854 510.825 li
230.858 510.806 li
230.86 510.321 230.957 509.859 231.137 509.439 cv
231.169 509.394 li
231.35 508.988 231.598 508.618 231.909 508.311 cv
232.548 507.681 233.423 507.288 234.391 507.288 cv
234.391 507.288 li
234.406 507.288 234.422 507.288 234.437 507.288 cv
234.441 507.288 234.444 507.288 234.448 507.288 cv
234.46 507.288 234.473 507.288 234.485 507.288 cv
234.488 507.288 234.49 507.288 234.493 507.288 cv
241.82 507.234 247.742 501.276 247.742 493.937 cv
247.742 493.937 li
247.742 477.295 li
247.742 477.295 li
247.742 470.452 242.209 464.902 235.373 464.875 cv
235.372 464.875 235.372 464.875 235.371 464.875 cv
235.355 464.875 235.338 464.875 235.323 464.875 cv
218.681 464.875 li
211.307 464.875 205.33 470.853 205.33 478.227 cv
205.33 480.18 203.746 481.764 201.792 481.764 cv
177.279 481.764 li
176.976 480.892 176.074 480.276 174.31 480.276 cv
173.985 480.276 173.63 480.297 173.244 480.341 cv
173.244 480.341 173.222 480.341 173.183 480.341 cv
173.052 480.341 172.72 480.347 172.301 480.405 cv
171.832 479.804 171.552 479.049 171.552 478.228 cv
171.552 478.227 li
171.552 478.227 li
171.552 470.853 165.574 464.875 158.2 464.875 cv
141.559 464.875 li
134.699 464.875 129.138 470.435 129.138 477.295 cv
129.138 493.937 li
129.138 501.31 135.116 507.288 142.49 507.288 cv
142.491 507.288 li
144.444 507.288 146.027 508.871 146.027 510.825 cv
146.027 537.529 li
146.027 539.483 144.444 541.067 142.49 541.067 cv
135.116 541.067 129.138 547.044 129.138 554.418 cv
129.138 571.06 li
129.138 577.919 134.699 583.48 141.559 583.48 cv
158.2 583.48 li
158.2 583.48 li
158.2 583.48 li
165.574 583.48 171.552 577.502 171.552 570.128 cv
171.552 570.127 li
171.552 568.174 173.135 566.59 175.088 566.59 cv
175.088 566.59 li
175.088 566.59 li
179.805 566.59 li
201.792 566.59 li
203.746 566.59 205.33 568.174 205.33 570.127 cv
205.33 570.128 li
205.33 570.128 li
205.33 577.502 211.307 583.48 218.681 583.48 cv
235.323 583.48 li
235.323 583.48 li
237.075 583.48 238.742 583.117 240.253 582.462 cv
240.253 598.78 li
240.253 601.742 237.853 604.143 234.891 604.143 cv
219.708 604.143 li
216.747 604.143 214.347 606.543 214.347 609.503 cv
214.347 614.441 li
209.101 616.241 205.33 621.217 205.33 627.074 cv
205.33 629.027 203.746 630.611 201.792 630.611 cv
175.088 630.611 li
173.135 630.611 171.552 629.027 171.552 627.074 cv
171.552 619.7 165.574 613.722 158.2 613.722 cv
141.559 613.722 li
134.699 613.722 129.138 619.282 129.138 626.142 cv
129.138 642.783 li
129.138 650.157 135.116 656.135 142.49 656.135 cv
142.491 656.135 li
144.444 656.135 146.027 657.719 146.027 659.673 cv
146.027 686.376 li
146.027 688.33 144.444 689.913 142.49 689.913 cv
135.116 689.913 129.138 695.892 129.138 703.266 cv
129.138 719.907 li
129.138 726.766 134.699 732.326 141.559 732.326 cv
158.2 732.326 li
158.2 732.326 li
158.2 732.326 li
165.574 732.326 171.552 726.35 171.552 718.976 cv
171.552 718.975 li
171.552 717.021 173.135 715.438 175.088 715.438 cv
175.088 715.438 li
175.088 715.438 li
179.805 715.438 li
201.792 715.438 li
203.746 715.438 205.33 717.021 205.33 718.975 cv
205.33 718.976 li
205.33 718.976 li
205.33 726.35 211.307 732.326 218.681 732.326 cv
235.323 732.326 li
235.323 732.326 li
237.082 732.326 238.757 731.96 240.273 731.3 cv
240.511 734.041 242.811 736.193 245.614 736.193 cv
260.797 736.193 li
263.758 736.193 266.158 738.593 266.158 741.555 cv
266.158 763.845 li
266.158 766.805 268.559 769.205 271.521 769.205 cv
286.703 769.205 li
288.665 769.205 290.38 770.258 291.315 771.83 cv
291.315 789.405 li
291.315 790.963 291.579 792.46 292.065 793.853 cv
292.065 796.857 li
292.065 797.179 292.093 797.494 292.147 797.8 cv
31.8084 802.218 li
141.212 777.489 mo
141.212 777.489 132.48 778.574 138.1 783.124 cv
139.101 783.934 140.154 784.266 141.141 784.266 cv
145.342 784.266 148.366 778.263 141.212 777.489 cv
49.2161 774.761 mo
48.2437 774.761 45.5599 774.967 47.5594 777.39 cv
47.8859 777.786 48.2888 777.947 48.7019 777.947 cv
50.4435 777.947 52.3692 775.075 49.5433 774.77 cv
49.5433 774.77 49.4158 774.761 49.2161 774.761 cv
151.34 772.317 mo
150.369 772.317 147.681 772.523 149.682 774.946 cv
150.008 775.341 150.411 775.503 150.824 775.503 cv
152.566 775.503 154.492 772.631 151.666 772.325 cv
151.666 772.325 151.539 772.317 151.34 772.317 cv
63.0754 760.314 mo
60.119 760.314 51.9408 760.94 58.0276 768.317 cv
59.0215 769.52 60.248 770.012 61.5051 770.012 cv
66.8075 770.013 72.6694 761.271 64.0678 760.34 cv
64.0678 760.34 63.6809 760.314 63.0754 760.314 cv
123.066 748.984 mo
111.98 748.984 63.8998 751.784 63.8998 751.784 cv
195.72 751.784 li
195.72 751.784 134.153 748.984 123.066 748.984 cv
94.8485 724.979 mo
94.8485 724.979 85.9661 724.979 90.5018 730.081 cv
91.9275 731.685 93.3161 732.306 94.5243 732.306 cv
98.675 732.307 100.704 724.979 94.8485 724.979 cv
185.667 724.961 mo
183.723 724.961 178.351 725.373 182.351 730.219 cv
183.004 731.01 183.81 731.334 184.636 731.334 cv
188.12 731.334 191.972 725.59 186.32 724.979 cv
186.32 724.979 186.065 724.961 185.667 724.961 cv
113.186 699.785 mo
112.489 699.785 111.359 699.949 111.102 700.977 cv
111.019 701.307 111.432 701.436 112.054 701.436 cv
113.156 701.436 114.915 701.032 115.748 700.629 cv
116.581 700.225 116.487 699.821 113.883 699.821 cv
113.839 699.821 113.794 699.821 113.748 699.821 cv
113.748 699.821 113.515 699.785 113.186 699.785 cv
116.067 552.413 mo
115.512 552.413 111.325 552.489 112.288 554.791 cv
112.966 556.41 114.202 557.005 115.502 557.005 cv
117.316 557.005 119.256 555.847 119.984 554.689 cv
120.712 553.53 120.228 552.372 117.195 552.372 cv
116.869 552.372 116.514 552.385 116.128 552.413 cv
116.128 552.413 116.107 552.413 116.067 552.413 cv
79.4986 497.803 mo
77.5544 497.803 72.1843 498.215 76.183 503.061 cv
76.836 503.852 77.642 504.175 78.4681 504.175 cv
81.9525 504.176 85.8048 498.431 80.1523 497.82 cv
80.1523 497.82 79.8974 497.803 79.4986 497.803 cv
62.437 488.969 mo
62.437 488.969 56.2005 488.969 60.1694 492.181 cv
60.8251 492.712 61.4517 492.928 62.0064 492.928 cv
64.2439 492.928 65.3147 489.423 62.437 488.969 cv
88.8623 489.76 mo
88.3416 489.76 87.4997 489.997 87.308 491.475 cv
87.2462 491.951 87.5542 492.136 88.0188 492.136 cv
88.8408 492.136 90.1532 491.555 90.7748 490.974 cv
91.3964 490.393 91.3271 489.812 89.387 489.812 cv
89.3527 489.812 89.318 489.812 89.2825 489.813 cv
89.2825 489.813 89.1082 489.76 88.8623 489.76 cv
101.817 445.995 mo
101.817 445.995 92.9344 445.995 97.4704 451.098 cv
98.896 452.702 100.284 453.323 101.493 453.323 cv
105.643 453.324 107.672 445.995 101.817 445.995 cv
192.636 445.978 mo
190.693 445.978 185.319 446.39 189.319 451.236 cv
189.972 452.027 190.778 452.351 191.604 452.351 cv
195.088 452.351 198.941 446.607 193.288 445.995 cv
193.288 445.995 193.034 445.978 192.636 445.978 cv
144.529 434.467 mo
144.529 434.467 138.292 434.467 142.26 437.68 cv
142.916 438.211 143.543 438.426 144.098 438.426 cv
146.336 438.427 147.406 434.921 144.529 434.467 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
297.426 802.218 mo
31.8084 802.218 li
292.147 797.8 li
292.593 800.311 294.787 802.218 297.426 802.218 cv
353.024 472.092 mo
323.332 472.092 li
323.332 472.092 li
313.002 472.092 li
309.488 468.143 305.098 464.932 300.049 462.773 cv
298.043 461.915 296.08 460.962 294.321 459.672 cv
272.404 443.611 li
266.367 439.189 259.12 436.72 251.64 436.539 cv
12.0252 430.724 li
11.914 420.97 li
49.7054 420.97 li
81.7938 420.97 li
131.499 420.97 li
163.588 420.97 li
213.293 420.97 li
245.382 420.97 li
295.087 420.97 li
327.176 420.97 li
364.967 420.97 li
364.854 430.96 li
364.825 433.479 363.201 435.664 360.829 436.512 cv
356.28 438.141 353.024 442.491 353.024 447.602 cv
353.024 472.092 li
320.311 445.979 mo
320.311 445.979 314.074 445.979 318.043 449.191 cv
318.699 449.722 319.326 449.937 319.881 449.937 cv
322.118 449.938 323.189 446.433 320.311 445.979 cv
287.354 438.401 mo
287.354 438.401 279.061 438.401 285.12 441.623 cv
286.141 442.166 287.027 442.386 287.76 442.386 cv
290.881 442.386 291.223 438.401 287.354 438.401 cv
297.488 431.408 mo
297.488 431.408 291.251 431.408 295.22 434.621 cv
295.876 435.152 296.503 435.367 297.057 435.367 cv
299.295 435.368 300.365 431.862 297.488 431.408 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
365.454 420.97 mo
364.967 420.97 li
327.176 420.97 li
295.087 420.97 li
245.382 420.97 li
213.293 420.97 li
163.588 420.97 li
131.499 420.97 li
81.7938 420.97 li
49.7054 420.97 li
11.914 420.97 li
11.9138 420.97 li
11.4266 420.97 li
5.11553 420.97 -.000247774 415.855 -.000247774 409.544 cv
-.000247774 377.333 li
-.000247774 373.982 2.71659 371.265 6.06773 371.265 cv
43.6376 371.265 li
46.9885 371.265 49.7054 373.982 49.7054 377.333 cv
49.7054 382.815 li
49.7054 386.166 52.4217 388.882 55.7729 388.882 cv
58.4193 388.882 li
75.7268 388.882 li
79.077 388.882 81.7938 386.166 81.7938 382.815 cv
81.7938 377.333 li
81.7938 373.982 84.5106 371.265 87.8618 371.265 cv
125.431 371.265 li
128.783 371.265 131.499 373.982 131.499 377.333 cv
131.499 382.815 li
131.499 386.166 134.216 388.882 137.567 388.882 cv
157.521 388.882 li
157.975 388.882 158.417 388.832 158.842 388.737 cv
160.275 388.419 161.518 387.593 162.372 386.458 cv
163.135 385.444 163.588 384.182 163.588 382.815 cv
163.588 377.333 li
163.588 373.982 166.304 371.265 169.656 371.265 cv
207.225 371.265 li
210.576 371.265 213.293 373.982 213.293 377.333 cv
213.293 382.815 li
213.293 386.166 216.009 388.882 219.361 388.882 cv
239.315 388.882 li
242.665 388.882 245.382 386.166 245.382 382.815 cv
245.382 377.333 li
245.382 373.982 248.098 371.265 251.449 371.265 cv
280.249 371.265 li
289.02 371.265 li
292.37 371.265 295.087 373.982 295.087 377.333 cv
295.087 382.815 li
295.087 386.166 297.803 388.882 301.155 388.882 cv
318.465 388.882 li
321.108 388.882 li
324.459 388.882 327.176 386.166 327.176 382.815 cv
327.176 377.333 li
327.176 373.982 329.892 371.265 333.242 371.265 cv
370.814 371.265 li
374.164 371.265 376.881 373.982 376.881 377.333 cv
376.881 409.544 li
376.881 415.855 371.765 420.97 365.454 420.97 cv
231.759 410.297 mo
231.759 410.297 225.522 410.297 229.491 413.51 cv
230.147 414.041 230.774 414.256 231.328 414.256 cv
233.566 414.257 234.636 410.751 231.759 410.297 cv
173.684 400.028 mo
173.684 400.028 165.392 400.028 171.451 403.251 cv
172.472 403.794 173.358 404.013 174.091 404.013 cv
177.211 404.013 177.553 400.028 173.684 400.028 cv
335.324 398.448 mo
335.324 398.448 329.159 399.215 333.127 402.428 cv
333.834 403 334.578 403.234 335.275 403.234 cv
338.242 403.235 340.378 398.995 335.324 398.448 cv
26.8342 398.566 mo
26.4278 398.566 23.3595 398.641 24.0658 400.944 cv
24.5622 402.563 25.4678 403.159 26.4206 403.159 cv
27.7494 403.159 29.1703 402 29.7034 400.842 cv
30.2363 399.683 29.8816 398.525 27.6594 398.525 cv
27.4209 398.525 27.161 398.538 26.8782 398.566 cv
26.8782 398.566 26.8628 398.566 26.8342 398.566 cv
98.0884 399.19 mo
97.5774 399.19 96.7493 399.354 96.5609 400.382 cv
96.5003 400.712 96.8026 400.841 97.2585 400.841 cv
98.0657 400.841 99.3545 400.437 99.9645 400.034 cv
100.575 399.63 100.506 399.226 98.5986 399.226 cv
98.566 399.226 98.5331 399.226 98.4994 399.226 cv
98.4994 399.226 98.329 399.19 98.0884 399.19 cv
183.819 393.036 mo
183.819 393.036 177.582 393.036 181.551 396.249 cv
182.207 396.779 182.833 396.995 183.388 396.995 cv
185.626 396.995 186.696 393.49 183.819 393.036 cv
348.481 380.588 mo
345.524 380.588 337.347 381.215 343.434 388.59 cv
344.428 389.794 345.654 390.286 346.912 390.286 cv
352.213 390.286 358.075 381.545 349.474 380.615 cv
349.474 380.615 349.087 380.588 348.481 380.588 cv
266.312 381.862 mo
265.756 381.862 261.569 381.981 262.534 385.599 cv
263.211 388.141 264.447 389.077 265.747 389.077 cv
267.561 389.078 269.501 387.258 270.229 385.437 cv
270.956 383.618 270.472 381.797 267.439 381.797 cv
267.113 381.797 266.759 381.818 266.372 381.863 cv
266.372 381.863 266.351 381.862 266.312 381.862 cv
level3{
gsave
clp
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
94.5243 732.306 mo
93.3161 732.306 91.9275 731.685 90.5018 730.081 cv
85.9661 724.979 94.8485 724.979 94.8485 724.979 cv
100.704 724.979 98.675 732.307 94.5243 732.306 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
184.636 731.334 mo
183.81 731.334 183.004 731.01 182.351 730.219 cv
178.351 725.373 183.723 724.961 185.667 724.961 cv
186.065 724.961 186.32 724.979 186.32 724.979 cv
191.972 725.59 188.12 731.334 184.636 731.334 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
78.4681 504.175 mo
77.642 504.175 76.836 503.852 76.183 503.061 cv
72.1843 498.215 77.5544 497.803 79.4986 497.803 cv
79.8974 497.803 80.1523 497.82 80.1523 497.82 cv
85.8048 498.431 81.9525 504.176 78.4681 504.175 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
150.824 775.503 mo
150.411 775.503 150.008 775.341 149.682 774.946 cv
147.681 772.523 150.369 772.317 151.34 772.317 cv
151.539 772.317 151.666 772.325 151.666 772.325 cv
154.492 772.631 152.566 775.503 150.824 775.503 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
48.7019 777.947 mo
48.2888 777.947 47.8859 777.786 47.5594 777.39 cv
45.5599 774.967 48.2437 774.761 49.2161 774.761 cv
49.4158 774.761 49.5433 774.77 49.5433 774.77 cv
52.3692 775.075 50.4435 777.947 48.7019 777.947 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
288.703 494.608 mo
287.445 494.608 286.219 494.117 285.225 492.912 cv
279.139 485.538 287.315 484.911 290.272 484.911 cv
290.762 484.911 291.11 484.928 291.224 484.935 cv
291.224 494.007 li
290.41 494.386 289.549 494.608 288.703 494.608 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
346.912 390.286 mo
345.654 390.286 344.428 389.794 343.434 388.59 cv
337.347 381.215 345.524 380.588 348.481 380.588 cv
349.087 380.588 349.474 380.615 349.474 380.615 cv
358.075 381.545 352.213 390.286 346.912 390.286 cv
level3{
gsave
clp
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
61.5051 770.012 mo
60.248 770.012 59.0215 769.52 58.0276 768.317 cv
51.9408 760.94 60.119 760.314 63.0754 760.314 cv
63.6809 760.314 64.0678 760.34 64.0678 760.34 cv
72.6694 761.271 66.8075 770.013 61.5051 770.012 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
141.141 784.266 mo
140.154 784.266 139.101 783.934 138.1 783.124 cv
132.48 778.574 141.212 777.489 141.212 777.489 cv
148.366 778.263 145.342 784.266 141.141 784.266 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
335.275 403.234 mo
334.578 403.234 333.834 403 333.127 402.428 cv
329.159 399.215 335.324 398.448 335.324 398.448 cv
340.378 398.995 338.242 403.235 335.275 403.234 cv
level3{
gsave
clp
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
62.0064 492.928 mo
61.4517 492.928 60.8251 492.712 60.1694 492.181 cv
56.2005 488.969 62.437 488.969 62.437 488.969 cv
65.3147 489.423 64.2439 492.928 62.0064 492.928 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
174.091 404.013 mo
173.358 404.013 172.472 403.794 171.451 403.251 cv
165.392 400.028 173.684 400.028 173.684 400.028 cv
177.553 400.028 177.211 404.013 174.091 404.013 cv
level3{
gsave
clp
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
183.388 396.995 mo
182.833 396.995 182.207 396.779 181.551 396.249 cv
177.582 393.036 183.819 393.036 183.819 393.036 cv
186.696 393.49 185.626 396.995 183.388 396.995 cv
level3{
gsave
clp
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
231.328 414.256 mo
230.774 414.256 230.147 414.041 229.491 413.51 cv
225.522 410.297 231.759 410.297 231.759 410.297 cv
234.636 410.751 233.566 414.257 231.328 414.256 cv
level3{
gsave
clp
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
112.054 701.436 mo
111.432 701.436 111.019 701.307 111.102 700.977 cv
111.359 699.949 112.489 699.785 113.186 699.785 cv
113.515 699.785 113.748 699.821 113.748 699.821 cv
113.794 699.821 113.839 699.821 113.883 699.821 cv
116.487 699.821 116.581 700.225 115.748 700.629 cv
114.915 701.032 113.156 701.436 112.054 701.436 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
88.0188 492.136 mo
87.5542 492.136 87.2462 491.951 87.308 491.475 cv
87.4997 489.997 88.3416 489.76 88.8623 489.76 cv
89.1082 489.76 89.2825 489.813 89.2825 489.813 cv
89.318 489.812 89.3527 489.812 89.387 489.812 cv
91.3271 489.812 91.3964 490.393 90.7748 490.974 cv
90.1532 491.555 88.8408 492.136 88.0188 492.136 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
115.502 557.005 mo
114.202 557.005 112.966 556.41 112.288 554.791 cv
111.325 552.489 115.512 552.413 116.067 552.413 cv
116.107 552.413 116.128 552.413 116.128 552.413 cv
116.514 552.385 116.869 552.372 117.195 552.372 cv
120.228 552.372 120.712 553.53 119.984 554.689 cv
119.256 555.847 117.316 557.005 115.502 557.005 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
177.279 481.764 mo
175.088 481.764 li
173.956 481.764 172.949 481.232 172.301 480.405 cv
172.72 480.347 173.052 480.341 173.183 480.341 cv
173.222 480.341 173.244 480.341 173.244 480.341 cv
173.63 480.297 173.985 480.276 174.31 480.276 cv
176.074 480.276 176.976 480.892 177.279 481.764 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
265.747 389.077 mo
264.447 389.077 263.211 388.141 262.534 385.599 cv
261.569 381.981 265.756 381.862 266.312 381.862 cv
266.351 381.862 266.372 381.863 266.372 381.863 cv
266.759 381.818 267.113 381.797 267.439 381.797 cv
270.472 381.797 270.956 383.618 270.229 385.437 cv
269.501 387.258 267.561 389.078 265.747 389.077 cv
level3{
gsave
clp
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
101.493 453.323 mo
100.284 453.323 98.896 452.702 97.4704 451.098 cv
92.9344 445.995 101.817 445.995 101.817 445.995 cv
107.672 445.995 105.643 453.324 101.493 453.323 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
287.76 442.386 mo
287.027 442.386 286.141 442.166 285.12 441.623 cv
279.061 438.401 287.354 438.401 287.354 438.401 cv
291.223 438.401 290.881 442.386 287.76 442.386 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
191.604 452.351 mo
190.778 452.351 189.972 452.027 189.319 451.236 cv
185.319 446.39 190.693 445.978 192.636 445.978 cv
193.034 445.978 193.288 445.995 193.288 445.995 cv
198.941 446.607 195.088 452.351 191.604 452.351 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
144.098 438.426 mo
143.543 438.426 142.916 438.211 142.26 437.68 cv
138.292 434.467 144.529 434.467 144.529 434.467 cv
147.406 434.921 146.336 438.427 144.098 438.426 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
297.057 435.367 mo
296.503 435.367 295.876 435.152 295.22 434.621 cv
291.251 431.408 297.488 431.408 297.488 431.408 cv
300.365 431.862 299.295 435.368 297.057 435.367 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
319.881 449.937 mo
319.326 449.937 318.699 449.722 318.043 449.191 cv
314.074 445.979 320.311 445.979 320.311 445.979 cv
323.189 446.433 322.118 449.938 319.881 449.937 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
97.2585 400.841 mo
96.8026 400.841 96.5003 400.712 96.5609 400.382 cv
96.7493 399.354 97.5774 399.19 98.0884 399.19 cv
98.329 399.19 98.4994 399.226 98.4994 399.226 cv
98.5331 399.226 98.566 399.226 98.5986 399.226 cv
100.506 399.226 100.575 399.63 99.9645 400.034 cv
99.3545 400.437 98.0657 400.841 97.2585 400.841 cv
level3{
gsave
clp
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
26.4206 403.159 mo
25.4678 403.159 24.5622 402.563 24.0658 400.944 cv
23.3595 398.641 26.4278 398.566 26.8342 398.566 cv
26.8628 398.566 26.8782 398.566 26.8782 398.566 cv
27.161 398.538 27.4209 398.525 27.6594 398.525 cv
29.8816 398.525 30.2363 399.683 29.7034 400.842 cv
29.1703 402 27.7494 403.159 26.4206 403.159 cv
level3{
gsave
clp
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[-210.883 2.58257e-14 -2.58258e-14 -210.883 263.257 396.118 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
195.72 751.784 mo
63.8998 751.784 li
63.8998 751.784 111.98 748.984 123.066 748.984 cv
134.153 748.984 195.72 751.784 195.72 751.784 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
865.443 731.128 mo
866.964 731.128 868.405 730.816 869.752 730.315 cv
870.263 730.124 870.745 729.892 871.22 729.64 cv
871.359 729.567 871.497 729.494 871.631 729.416 cv
872.068 729.163 872.489 728.895 872.889 728.591 cv
873.04 728.479 873.178 728.352 873.325 728.233 cv
873.937 727.725 874.494 727.166 874.998 726.551 cv
875.198 726.312 875.412 726.086 875.592 725.832 cv
875.776 725.571 875.923 725.29 876.086 725.016 cv
876.304 724.653 876.512 724.287 876.692 723.9 cv
876.815 723.636 876.922 723.366 877.027 723.091 cv
877.2 722.636 877.341 722.169 877.461 721.692 cv
877.52 721.451 877.588 721.218 877.634 720.973 cv
877.771 720.236 877.863 719.485 877.863 718.708 cv
877.863 725.568 872.302 731.128 865.443 731.128 cv
788.32 731.128 mo
771.677 731.128 li
764.819 731.128 759.258 725.568 759.258 718.708 cv
759.258 702.067 li
759.258 694.692 765.236 688.715 772.61 688.715 cv
774.563 688.715 776.147 687.131 776.147 685.177 cv
776.147 658.473 li
776.147 656.52 774.564 654.937 772.61 654.937 cv
765.236 654.937 759.258 648.958 759.258 641.584 cv
759.258 624.943 li
759.258 618.083 764.819 612.523 771.677 612.523 cv
788.32 612.523 li
795.693 612.523 801.671 618.5 801.671 625.874 cv
801.671 625.874 li
801.671 618.5 795.693 612.523 788.32 612.523 cv
793.846 612.523 798.326 618.5 798.326 625.874 cv
798.326 625.875 li
798.326 627.829 799.513 629.412 800.977 629.412 cv
805.208 629.412 li
805.208 629.412 li
803.255 629.412 801.671 627.829 801.671 625.875 cv
801.671 625.875 li
801.671 627.829 803.255 629.412 805.208 629.412 cv
831.912 629.412 li
832.83 629.412 833.665 629.063 834.294 628.49 cv
834.839 627.994 835.228 627.33 835.379 626.58 cv
835.425 626.352 835.45 626.117 835.45 625.875 cv
835.45 625.874 li
835.45 618.5 841.427 612.523 848.8 612.523 cv
865.443 612.523 li
865.459 612.523 865.475 612.523 865.491 612.524 cv
865.475 612.523 865.459 612.523 865.443 612.523 cv
848.8 612.523 li
841.427 612.523 835.45 618.5 835.45 625.874 cv
835.45 625.875 li
835.45 627.828 833.866 629.412 831.912 629.412 cv
809.931 629.412 li
833.902 630.39 li
833.944 630.391 833.985 630.392 834.027 630.392 cv
835.75 630.392 837.121 628.934 837.121 627.076 cv
837.121 620.128 842.174 614.739 848.46 614.739 cv
848.67 614.739 848.881 614.745 849.093 614.757 cv
863.625 615.585 li
869.493 615.919 874.198 621.404 874.198 627.84 cv
874.198 640.218 li
874.198 647.925 867.986 654.274 860.419 654.397 cv
858.433 654.429 856.828 656.084 856.828 658.093 cv
856.828 685.558 li
856.828 687.566 858.433 689.222 860.419 689.254 cv
867.986 689.377 874.198 695.726 874.198 703.433 cv
874.198 715.812 li
874.198 722.246 869.493 727.731 863.625 728.066 cv
849.093 728.895 li
848.882 728.907 848.67 728.913 848.461 728.913 cv
842.174 728.913 837.121 723.525 837.121 716.574 cv
837.121 714.717 835.75 713.258 834.028 713.258 cv
833.986 713.258 833.944 713.259 833.902 713.261 cv
809.924 714.239 li
805.208 714.239 li
805.208 714.239 li
800.977 714.239 li
799.513 714.239 798.326 715.822 798.326 717.776 cv
798.326 725.149 793.846 731.128 788.32 731.128 cv
788.32 731.128 li
774.143 713.301 mo
774.143 713.301 765.909 713.301 771.925 716.501 cv
772.939 717.04 773.819 717.259 774.546 717.259 cv
777.645 717.259 777.985 713.301 774.143 713.301 cv
784.206 706.358 mo
784.206 706.358 778.013 706.358 781.954 709.548 cv
782.605 710.075 783.228 710.289 783.778 710.289 cv
786 710.289 787.063 706.808 784.206 706.358 cv
854.188 704.392 mo
854.188 704.392 847.994 704.392 851.936 707.582 cv
852.587 708.109 853.209 708.323 853.76 708.323 cv
855.982 708.323 857.045 704.842 854.188 704.392 cv
827.976 703.516 mo
827.976 703.516 li
830.149 703.516 li
833.286 703.516 835.831 700.972 835.831 697.834 cv
835.831 645.817 li
835.831 645.817 li
835.831 642.679 833.286 640.135 830.149 640.135 cv
806.971 640.135 li
803.833 640.135 801.289 642.679 801.289 645.817 cv
801.289 697.834 li
801.289 697.834 li
801.289 700.972 803.833 703.516 806.971 703.516 cv
809.145 703.516 li
809.145 703.516 li
809.145 703.516 li
827.976 703.516 li
850.256 638.811 mo
850.256 638.811 844.133 639.571 848.073 642.762 cv
848.776 643.33 849.514 643.563 850.207 643.563 cv
853.154 643.563 855.274 639.353 850.256 638.811 cv
863.321 621.076 mo
860.384 621.076 852.264 621.698 858.309 629.021 cv
859.296 630.217 860.514 630.705 861.763 630.705 cv
867.027 630.705 872.848 622.025 864.307 621.102 cv
864.307 621.102 863.922 621.076 863.321 621.076 cv
781.725 622.34 mo
781.169 622.34 777.017 622.459 777.974 626.051 cv
778.647 628.576 779.874 629.505 781.166 629.505 cv
782.967 629.505 784.893 627.698 785.616 625.891 cv
786.338 624.084 785.857 622.276 782.846 622.276 cv
782.522 622.276 782.169 622.297 781.786 622.341 cv
781.786 622.341 781.764 622.34 781.725 622.34 cv
877.863 702.067 mo
877.863 701.217 877.765 700.393 877.613 699.59 cv
877.558 699.3 877.468 699.026 877.395 698.744 cv
877.267 698.252 877.128 697.769 876.948 697.302 cv
876.815 696.956 876.661 696.626 876.501 696.295 cv
876.329 695.943 876.146 695.602 875.944 695.268 cv
875.718 694.89 875.487 694.523 875.226 694.17 cv
875.075 693.967 874.909 693.781 874.746 693.588 cv
872.317 690.66 868.706 688.746 864.612 688.715 cv
868.642 688.745 872.247 690.56 874.676 693.41 cv
875.493 694.368 876.177 695.444 876.699 696.608 cv
877.447 698.274 877.863 700.122 877.863 702.067 cv
877.863 702.067 li
864.606 688.715 mo
864.593 688.715 864.58 688.715 864.567 688.715 cv
864.58 688.715 864.593 688.715 864.606 688.715 cv
864.558 688.715 mo
864.542 688.715 864.527 688.715 864.511 688.715 cv
864.511 688.715 li
864.511 688.715 li
864.527 688.715 864.542 688.715 864.558 688.715 cv
864.511 654.937 mo
864.526 654.937 864.542 654.937 864.558 654.937 cv
864.542 654.937 864.526 654.937 864.511 654.937 cv
864.568 654.937 mo
864.58 654.936 864.593 654.936 864.606 654.936 cv
864.593 654.936 864.58 654.936 864.568 654.937 cv
864.613 654.936 mo
868.707 654.905 872.318 652.992 874.746 650.063 cv
874.909 649.869 875.075 649.684 875.226 649.482 cv
875.487 649.128 875.718 648.761 875.944 648.383 cv
876.146 648.049 876.329 647.708 876.501 647.355 cv
876.661 647.023 876.815 646.694 876.948 646.349 cv
877.128 645.881 877.267 645.398 877.395 644.906 cv
877.468 644.624 877.558 644.351 877.613 644.061 cv
877.765 643.257 877.863 642.434 877.863 641.584 cv
877.863 648.924 871.939 654.881 864.613 654.936 cv
877.863 624.943 mo
877.863 624.166 877.771 623.414 877.634 622.679 cv
877.589 622.433 877.52 622.198 877.46 621.958 cv
877.341 621.48 877.201 621.015 877.028 620.561 cv
876.922 620.285 876.815 620.015 876.692 619.749 cv
876.512 619.365 876.304 618.999 876.087 618.637 cv
875.924 618.362 875.776 618.079 875.592 617.817 cv
875.419 617.575 875.215 617.361 875.027 617.132 cv
874.513 616.503 873.946 615.932 873.32 615.414 cv
873.176 615.296 873.039 615.172 872.891 615.061 cv
872.489 614.757 872.068 614.487 871.63 614.234 cv
871.496 614.156 871.36 614.085 871.222 614.012 cv
869.503 613.1 867.573 612.533 865.493 612.524 cv
872.329 612.551 877.863 618.1 877.863 624.943 cv
877.863 624.943 li
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
864.612 688.715 mo
864.61 688.715 864.608 688.715 864.606 688.715 cv
864.608 688.715 864.61 688.715 864.612 688.715 cv
864.567 688.715 mo
864.564 688.715 864.561 688.715 864.558 688.715 cv
864.561 688.715 864.564 688.715 864.567 688.715 cv
864.511 688.715 mo
862.557 688.715 860.973 687.131 860.973 685.177 cv
860.973 686.163 861.38 687.051 862.03 687.692 cv
862.668 688.321 863.542 688.715 864.511 688.715 cv
860.973 685.177 mo
860.973 685.177 li
860.973 658.473 li
860.973 656.52 862.557 654.937 864.511 654.937 cv
864.511 654.937 li
864.511 654.937 li
863.542 654.937 862.668 655.328 862.03 655.959 cv
861.718 656.267 861.47 656.637 861.289 657.042 cv
861.257 657.088 li
861.077 657.507 860.98 657.969 860.977 658.454 cv
860.973 658.474 li
860.973 685.177 li
864.558 654.937 mo
864.561 654.937 864.564 654.937 864.568 654.937 cv
864.564 654.937 864.561 654.937 864.558 654.937 cv
864.606 654.936 mo
864.608 654.936 864.61 654.936 864.613 654.936 cv
864.61 654.936 864.608 654.936 864.606 654.936 cv
865.493 612.524 mo
865.492 612.524 865.492 612.524 865.491 612.524 cv
865.492 612.524 865.492 612.524 865.493 612.524 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
865.443 731.128 mo
848.8 731.128 li
841.427 731.128 835.45 725.149 835.45 717.776 cv
835.45 715.822 833.866 714.239 831.912 714.239 cv
809.924 714.239 li
833.902 713.261 li
833.944 713.259 833.986 713.258 834.028 713.258 cv
835.75 713.258 837.121 714.717 837.121 716.574 cv
837.121 723.525 842.174 728.913 848.461 728.913 cv
848.67 728.913 848.882 728.907 849.093 728.895 cv
863.625 728.066 li
869.493 727.731 874.198 722.246 874.198 715.812 cv
874.198 703.433 li
874.198 695.726 867.986 689.377 860.419 689.254 cv
858.433 689.222 856.828 687.566 856.828 685.558 cv
856.828 658.093 li
856.828 656.084 858.433 654.429 860.419 654.397 cv
867.986 654.274 874.198 647.925 874.198 640.218 cv
874.198 627.84 li
874.198 621.404 869.493 615.919 863.625 615.585 cv
849.093 614.757 li
848.881 614.745 848.67 614.739 848.46 614.739 cv
842.174 614.739 837.121 620.128 837.121 627.076 cv
837.121 628.934 835.75 630.392 834.027 630.392 cv
833.985 630.392 833.944 630.391 833.902 630.39 cv
809.931 629.412 li
831.912 629.412 li
833.866 629.412 835.45 627.828 835.45 625.875 cv
835.45 625.874 li
835.45 618.5 841.427 612.523 848.8 612.523 cv
865.443 612.523 li
865.459 612.523 865.475 612.523 865.491 612.524 cv
865.492 612.524 865.492 612.524 865.493 612.524 cv
867.573 612.533 869.503 613.1 871.222 614.012 cv
871.36 614.085 871.496 614.156 871.63 614.234 cv
872.068 614.487 872.489 614.757 872.891 615.061 cv
873.039 615.172 873.176 615.296 873.32 615.414 cv
873.946 615.932 874.513 616.503 875.027 617.132 cv
875.215 617.361 875.419 617.575 875.592 617.817 cv
875.776 618.079 875.924 618.362 876.087 618.637 cv
876.304 618.999 876.512 619.365 876.692 619.749 cv
876.815 620.015 876.922 620.285 877.028 620.561 cv
877.201 621.015 877.341 621.48 877.46 621.958 cv
877.52 622.198 877.589 622.433 877.634 622.679 cv
877.771 623.414 877.863 624.166 877.863 624.943 cv
877.863 641.584 li
877.863 641.584 li
877.863 642.434 877.765 643.257 877.613 644.061 cv
877.558 644.351 877.468 644.624 877.395 644.906 cv
877.267 645.398 877.128 645.881 876.948 646.349 cv
876.815 646.694 876.661 647.023 876.501 647.355 cv
876.329 647.708 876.146 648.049 875.944 648.383 cv
875.718 648.761 875.487 649.128 875.226 649.482 cv
875.075 649.684 874.909 649.869 874.746 650.063 cv
872.318 652.992 868.707 654.905 864.613 654.936 cv
864.61 654.936 864.608 654.936 864.606 654.936 cv
864.593 654.936 864.58 654.936 864.568 654.937 cv
864.564 654.937 864.561 654.937 864.558 654.937 cv
864.542 654.937 864.526 654.937 864.511 654.937 cv
864.511 654.937 li
862.557 654.937 860.973 656.52 860.973 658.473 cv
860.973 685.177 li
860.973 685.177 li
860.973 685.177 li
860.973 687.131 862.557 688.715 864.511 688.715 cv
864.511 688.715 li
864.527 688.715 864.542 688.715 864.558 688.715 cv
864.561 688.715 864.564 688.715 864.567 688.715 cv
864.58 688.715 864.593 688.715 864.606 688.715 cv
864.608 688.715 864.61 688.715 864.612 688.715 cv
868.706 688.746 872.317 690.66 874.746 693.588 cv
874.909 693.781 875.075 693.967 875.226 694.17 cv
875.487 694.523 875.718 694.89 875.944 695.268 cv
876.146 695.602 876.329 695.943 876.501 696.295 cv
876.661 696.626 876.815 696.956 876.948 697.302 cv
877.128 697.769 877.267 698.252 877.395 698.744 cv
877.468 699.026 877.558 699.3 877.613 699.59 cv
877.765 700.393 877.863 701.217 877.863 702.067 cv
877.863 718.708 li
877.863 718.708 li
877.863 719.485 877.771 720.236 877.634 720.973 cv
877.588 721.218 877.52 721.451 877.461 721.692 cv
877.341 722.169 877.2 722.636 877.027 723.091 cv
876.922 723.366 876.815 723.636 876.692 723.9 cv
876.512 724.287 876.304 724.653 876.086 725.016 cv
875.923 725.29 875.776 725.571 875.592 725.832 cv
875.412 726.086 875.198 726.312 874.998 726.551 cv
874.494 727.166 873.937 727.725 873.325 728.233 cv
873.178 728.352 873.04 728.479 872.889 728.591 cv
872.489 728.895 872.068 729.163 871.631 729.416 cv
871.497 729.494 871.359 729.567 871.22 729.64 cv
870.745 729.892 870.263 730.124 869.752 730.315 cv
868.405 730.816 866.964 731.128 865.443 731.128 cv
865.443 731.128 li
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
788.32 731.128 mo
793.846 731.128 798.326 725.149 798.326 717.776 cv
798.326 715.822 799.513 714.239 800.977 714.239 cv
805.208 714.239 li
803.255 714.239 801.671 715.822 801.671 717.776 cv
801.671 725.149 795.693 731.128 788.32 731.128 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
805.208 629.412 mo
800.977 629.412 li
799.513 629.412 798.326 627.829 798.326 625.875 cv
798.326 625.874 li
798.326 618.5 793.846 612.523 788.32 612.523 cv
795.693 612.523 801.671 618.5 801.671 625.874 cv
801.671 625.875 li
801.671 625.875 li
801.671 627.829 803.255 629.412 805.208 629.412 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
861.763 630.705 mo
860.514 630.705 859.296 630.217 858.309 629.021 cv
852.264 621.698 860.384 621.076 863.321 621.076 cv
863.922 621.076 864.307 621.102 864.307 621.102 cv
872.848 622.025 867.027 630.705 861.763 630.705 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
850.207 643.563 mo
849.514 643.563 848.776 643.33 848.073 642.762 cv
844.133 639.571 850.256 638.811 850.256 638.811 cv
855.274 639.353 853.154 643.563 850.207 643.563 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
781.166 629.505 mo
779.874 629.505 778.647 628.576 777.974 626.051 cv
777.017 622.459 781.169 622.34 781.725 622.34 cv
781.764 622.34 781.786 622.341 781.786 622.341 cv
782.169 622.297 782.522 622.276 782.846 622.276 cv
785.857 622.276 786.338 624.084 785.616 625.891 cv
784.893 627.698 782.967 629.505 781.166 629.505 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
774.546 717.259 mo
773.819 717.259 772.939 717.04 771.925 716.501 cv
765.909 713.301 774.143 713.301 774.143 713.301 cv
777.985 713.301 777.645 717.259 774.546 717.259 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
783.778 710.289 mo
783.228 710.289 782.605 710.075 781.954 709.548 cv
778.013 706.358 784.206 706.358 784.206 706.358 cv
787.063 706.808 786 710.289 783.778 710.289 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
853.76 708.323 mo
853.209 708.323 852.587 708.109 851.936 707.582 cv
847.994 704.392 854.188 704.392 854.188 704.392 cv
857.045 704.842 855.982 708.323 853.76 708.323 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 818.56 626.254 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
827.976 703.516 mo
809.145 703.516 li
806.596 703.516 804.529 701.449 804.529 698.9 cv
804.529 652.029 li
804.529 649.48 806.596 647.413 809.145 647.413 cv
827.976 647.413 li
830.525 647.413 832.591 649.48 832.591 652.029 cv
832.591 698.9 li
832.591 701.449 830.525 703.516 827.976 703.516 cv
level3{
gsave
clp
[3.43235e-15 -56.0546 56.0546 3.43235e-15 818.56 698.318 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.43235e-15 -56.0546 56.0546 3.43235e-15 818.56 698.318 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
830.149 703.516 mo
827.976 703.516 li
830.525 703.516 832.591 701.449 832.591 698.9 cv
832.591 652.029 li
832.591 649.48 830.525 647.413 827.976 647.413 cv
809.145 647.413 li
806.596 647.413 804.529 649.48 804.529 652.029 cv
804.529 698.9 li
804.529 701.449 806.596 703.516 809.145 703.516 cv
806.971 703.516 li
803.833 703.516 801.289 700.972 801.289 697.834 cv
801.289 645.817 li
801.289 642.679 803.833 640.135 806.971 640.135 cv
830.149 640.135 li
833.286 640.135 835.831 642.679 835.831 645.817 cv
835.831 697.834 li
835.831 700.972 833.286 703.516 830.149 703.516 cv
level3{
gsave
clp
[3.43235e-15 -56.0546 56.0546 3.43235e-15 818.56 698.318 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.43235e-15 -56.0546 56.0546 3.43235e-15 818.56 698.318 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
235.323 583.48 mo
236.845 583.48 238.284 583.168 239.633 582.667 cv
239.633 582.666 li
239.844 582.588 240.05 582.502 240.253 582.41 cv
240.253 582.462 li
238.742 583.117 237.075 583.48 235.323 583.48 cv
158.2 583.48 mo
141.559 583.48 li
134.699 583.48 129.138 577.919 129.138 571.06 cv
129.138 554.418 li
129.138 547.044 135.116 541.067 142.49 541.067 cv
144.444 541.067 146.027 539.483 146.027 537.529 cv
146.027 510.825 li
146.027 508.871 144.444 507.288 142.491 507.288 cv
142.49 507.288 li
135.116 507.288 129.138 501.31 129.138 493.937 cv
129.138 477.295 li
129.138 470.435 134.699 464.875 141.559 464.875 cv
158.2 464.875 li
165.574 464.875 171.552 470.853 171.552 478.227 cv
171.552 478.227 li
171.552 470.853 165.574 464.875 158.2 464.875 cv
163.726 464.875 168.206 470.853 168.206 478.227 cv
168.206 478.228 li
168.206 480.18 169.393 481.764 170.857 481.764 cv
175.088 481.764 li
175.088 481.764 li
173.135 481.764 171.552 480.18 171.552 478.228 cv
171.552 478.228 li
171.552 479.049 171.832 479.804 172.301 480.405 cv
172.949 481.232 173.956 481.764 175.088 481.764 cv
177.279 481.764 li
201.792 481.764 li
203.746 481.764 205.33 480.18 205.33 478.227 cv
205.33 470.853 211.307 464.875 218.681 464.875 cv
235.323 464.875 li
235.338 464.875 235.355 464.875 235.371 464.875 cv
235.355 464.875 235.339 464.875 235.323 464.875 cv
218.681 464.875 li
211.307 464.875 205.33 470.853 205.33 478.227 cv
205.33 480.18 203.746 481.764 201.792 481.764 cv
179.812 481.764 li
203.782 482.742 li
203.823 482.744 203.865 482.744 203.906 482.744 cv
205.63 482.744 207.002 481.287 207.002 479.428 cv
207.002 472.478 212.056 467.09 218.343 467.09 cv
218.552 467.09 218.762 467.096 218.974 467.108 cv
233.505 467.936 li
239.373 468.271 244.078 473.756 244.078 480.192 cv
244.078 492.57 li
244.078 500.278 237.866 506.626 230.3 506.749 cv
228.314 506.78 226.708 508.436 226.708 510.445 cv
226.708 537.91 li
226.708 539.919 228.314 541.574 230.3 541.607 cv
237.866 541.73 244.078 548.077 244.078 555.785 cv
244.078 568.163 li
244.078 569.315 243.928 570.436 243.647 571.502 cv
241.659 572.287 240.253 574.225 240.253 576.491 cv
240.253 577.363 li
238.426 579.135 236.077 580.271 233.505 580.418 cv
218.974 581.246 li
218.762 581.258 218.551 581.264 218.342 581.264 cv
212.055 581.265 207.002 575.877 207.002 568.927 cv
207.002 568.926 li
207.002 567.068 205.63 565.61 203.907 565.61 cv
203.866 565.61 203.824 565.611 203.782 565.612 cv
179.805 566.59 li
175.088 566.59 li
175.088 566.59 li
170.857 566.59 li
169.393 566.59 168.206 568.174 168.206 570.127 cv
168.206 570.128 li
168.206 577.502 163.726 583.48 158.2 583.48 cv
158.2 583.48 li
144.023 565.653 mo
144.023 565.653 135.789 565.653 141.805 568.853 cv
142.819 569.392 143.699 569.61 144.427 569.61 cv
147.526 569.611 147.865 565.653 144.023 565.653 cv
154.087 558.709 mo
154.087 558.709 147.893 558.709 151.834 561.9 cv
152.485 562.427 153.108 562.641 153.659 562.641 cv
155.881 562.641 156.944 559.16 154.087 558.709 cv
224.068 556.743 mo
224.068 556.743 217.874 556.743 221.816 559.934 cv
222.467 560.461 223.089 560.675 223.64 560.675 cv
225.862 560.675 226.926 557.194 224.068 556.743 cv
197.856 555.868 mo
197.856 555.868 li
200.03 555.868 li
203.167 555.868 205.711 553.324 205.711 550.186 cv
205.711 498.169 li
205.711 498.169 li
205.711 498.169 li
205.711 495.092 203.266 492.587 200.213 492.49 cv
200.152 492.488 200.091 492.487 200.03 492.487 cv
176.852 492.487 li
176.791 492.487 176.73 492.488 176.669 492.49 cv
173.615 492.587 171.17 495.092 171.17 498.169 cv
171.17 498.169 li
171.17 550.186 li
171.17 550.186 li
171.17 553.324 173.713 555.868 176.852 555.868 cv
179.025 555.868 li
179.025 555.868 li
179.025 555.868 li
197.856 555.868 li
220.137 491.162 mo
220.137 491.162 214.013 491.923 217.954 495.114 cv
218.656 495.682 219.395 495.915 220.088 495.915 cv
223.033 495.916 225.154 491.705 220.137 491.162 cv
233.2 473.428 mo
230.264 473.428 222.145 474.05 228.189 481.373 cv
229.176 482.569 230.394 483.057 231.642 483.057 cv
236.907 483.059 242.728 474.377 234.187 473.454 cv
234.187 473.454 233.802 473.428 233.2 473.428 cv
151.606 474.692 mo
151.052 474.692 146.897 474.811 147.854 478.402 cv
148.527 480.927 149.755 481.857 151.046 481.857 cv
152.847 481.857 154.773 480.05 155.496 478.242 cv
156.219 476.435 155.738 474.628 152.726 474.628 cv
152.403 474.628 152.05 474.649 151.667 474.693 cv
151.667 474.693 151.646 474.692 151.606 474.692 cv
247.742 571.13 mo
247.742 571.13 li
247.742 571.107 247.742 571.083 247.742 571.06 cv
247.742 571.083 247.742 571.107 247.742 571.13 cv
247.742 554.418 mo
247.742 553.568 247.646 552.745 247.492 551.942 cv
247.439 551.651 247.348 551.378 247.275 551.096 cv
247.148 550.605 247.008 550.121 246.827 549.654 cv
246.695 549.308 246.541 548.979 246.381 548.648 cv
246.21 548.295 246.026 547.954 245.824 547.619 cv
245.599 547.241 245.368 546.874 245.107 546.522 cv
244.955 546.32 244.788 546.133 244.626 545.94 cv
242.198 543.011 238.586 541.098 234.492 541.067 cv
241.819 541.121 247.742 547.078 247.742 554.418 cv
247.742 554.418 li
234.486 541.067 mo
234.473 541.067 234.46 541.067 234.447 541.067 cv
234.46 541.067 234.473 541.067 234.486 541.067 cv
234.437 541.067 mo
234.422 541.067 234.407 541.067 234.391 541.067 cv
234.391 541.067 li
234.391 541.067 li
234.407 541.067 234.422 541.067 234.437 541.067 cv
234.391 507.288 mo
234.406 507.288 234.422 507.288 234.437 507.288 cv
234.422 507.288 234.406 507.288 234.391 507.288 cv
234.448 507.288 mo
234.46 507.288 234.473 507.288 234.485 507.288 cv
234.473 507.288 234.46 507.288 234.448 507.288 cv
234.493 507.288 mo
238.587 507.257 242.198 505.343 244.626 502.414 cv
244.788 502.221 244.955 502.035 245.107 501.833 cv
245.368 501.48 245.599 501.113 245.824 500.734 cv
246.026 500.4 246.21 500.06 246.381 499.707 cv
246.541 499.376 246.695 499.046 246.827 498.701 cv
247.008 498.233 247.148 497.75 247.275 497.258 cv
247.348 496.976 247.439 496.703 247.492 496.413 cv
247.646 495.609 247.742 494.786 247.742 493.937 cv
247.742 501.276 241.82 507.234 234.493 507.288 cv
247.742 477.295 mo
247.742 476.518 247.652 475.767 247.515 475.03 cv
247.469 474.785 247.401 474.551 247.341 474.31 cv
247.221 473.833 247.08 473.367 246.907 472.913 cv
246.803 472.637 246.695 472.367 246.572 472.101 cv
246.392 471.716 246.185 471.351 245.968 470.989 cv
245.804 470.713 245.657 470.431 245.472 470.17 cv
245.3 469.927 245.095 469.713 244.907 469.484 cv
244.393 468.855 243.826 468.284 243.2 467.766 cv
243.056 467.648 242.92 467.524 242.771 467.412 cv
242.369 467.108 241.949 466.84 241.51 466.585 cv
241.376 466.508 241.241 466.436 241.103 466.364 cv
239.382 465.452 237.453 464.884 235.373 464.875 cv
242.209 464.902 247.742 470.452 247.742 477.295 cv
247.742 477.295 li
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
234.492 541.067 mo
234.489 541.067 234.488 541.067 234.486 541.067 cv
234.488 541.067 234.49 541.067 234.492 541.067 cv
234.447 541.067 mo
234.444 541.067 234.441 541.067 234.437 541.067 cv
234.441 541.067 234.444 541.067 234.447 541.067 cv
234.391 541.067 mo
232.438 541.067 230.854 539.484 230.854 537.529 cv
230.854 538.515 231.26 539.404 231.91 540.044 cv
231.909 540.043 li
232.548 540.674 233.423 541.067 234.391 541.067 cv
230.854 537.529 mo
230.854 537.529 li
230.854 510.825 li
230.854 508.871 232.438 507.288 234.391 507.288 cv
234.391 507.288 li
234.391 507.288 li
233.423 507.288 232.548 507.681 231.909 508.311 cv
231.598 508.618 231.35 508.988 231.169 509.394 cv
231.137 509.439 li
230.957 509.859 230.86 510.321 230.858 510.806 cv
230.854 510.825 li
230.854 537.529 li
234.437 507.288 mo
234.441 507.288 234.444 507.288 234.448 507.288 cv
234.444 507.288 234.441 507.288 234.437 507.288 cv
234.485 507.288 mo
234.488 507.288 234.49 507.288 234.493 507.288 cv
234.49 507.288 234.488 507.288 234.485 507.288 cv
235.373 464.875 mo
235.372 464.875 235.372 464.875 235.371 464.875 cv
235.372 464.875 235.372 464.875 235.373 464.875 cv
level3{
gsave
clp
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.1309e-14 -348.004 348.004 2.1309e-14 188.441 794.366 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
235.323 583.48 mo
218.681 583.48 li
211.307 583.48 205.33 577.502 205.33 570.128 cv
205.33 570.127 li
205.33 570.127 li
205.33 568.174 203.746 566.59 201.792 566.59 cv
179.805 566.59 li
203.782 565.612 li
203.824 565.611 203.866 565.61 203.907 565.61 cv
205.63 565.61 207.002 567.068 207.002 568.926 cv
207.002 568.927 li
207.002 575.877 212.055 581.265 218.342 581.264 cv
218.551 581.264 218.762 581.258 218.974 581.246 cv
233.505 580.418 li
236.077 580.271 238.426 579.135 240.253 577.363 cv
240.253 582.41 li
240.05 582.502 239.844 582.588 239.633 582.666 cv
239.633 582.667 li
238.284 583.168 236.845 583.48 235.323 583.48 cv
235.323 583.48 li
243.647 571.502 mo
243.928 570.436 244.078 569.315 244.078 568.163 cv
244.078 555.785 li
244.078 548.077 237.866 541.73 230.3 541.607 cv
228.314 541.574 226.708 539.919 226.708 537.91 cv
226.708 510.445 li
226.708 508.436 228.314 506.78 230.3 506.749 cv
237.866 506.626 244.078 500.278 244.078 492.57 cv
244.078 480.192 li
244.078 473.756 239.373 468.271 233.505 467.936 cv
218.974 467.108 li
218.762 467.096 218.552 467.09 218.343 467.09 cv
212.056 467.09 207.002 472.478 207.002 479.428 cv
207.002 481.287 205.63 482.744 203.906 482.744 cv
203.865 482.744 203.823 482.744 203.782 482.742 cv
179.812 481.764 li
201.792 481.764 li
203.746 481.764 205.33 480.18 205.33 478.227 cv
205.33 470.853 211.307 464.875 218.681 464.875 cv
235.323 464.875 li
235.339 464.875 235.355 464.875 235.371 464.875 cv
235.372 464.875 235.372 464.875 235.373 464.875 cv
237.453 464.884 239.382 465.452 241.103 466.364 cv
241.241 466.436 241.376 466.508 241.51 466.585 cv
241.949 466.84 242.369 467.108 242.771 467.412 cv
242.92 467.524 243.056 467.648 243.2 467.766 cv
243.826 468.284 244.393 468.855 244.907 469.484 cv
245.095 469.713 245.3 469.927 245.472 470.17 cv
245.657 470.431 245.804 470.713 245.968 470.989 cv
246.185 471.351 246.392 471.716 246.572 472.101 cv
246.695 472.367 246.803 472.637 246.907 472.913 cv
247.08 473.367 247.221 473.833 247.341 474.31 cv
247.401 474.551 247.469 474.785 247.515 475.03 cv
247.652 475.767 247.742 476.518 247.742 477.295 cv
247.742 493.937 li
247.742 493.937 li
247.742 494.786 247.646 495.609 247.492 496.413 cv
247.439 496.703 247.348 496.976 247.275 497.258 cv
247.148 497.75 247.008 498.233 246.827 498.701 cv
246.695 499.046 246.541 499.376 246.381 499.707 cv
246.21 500.06 246.026 500.4 245.824 500.734 cv
245.599 501.113 245.368 501.48 245.107 501.833 cv
244.955 502.035 244.788 502.221 244.626 502.414 cv
242.198 505.343 238.587 507.257 234.493 507.288 cv
234.49 507.288 234.488 507.288 234.485 507.288 cv
234.473 507.288 234.46 507.288 234.448 507.288 cv
234.444 507.288 234.441 507.288 234.437 507.288 cv
234.422 507.288 234.406 507.288 234.391 507.288 cv
234.391 507.288 li
232.438 507.288 230.854 508.871 230.854 510.825 cv
230.854 537.529 li
230.854 537.529 li
230.854 537.529 li
230.854 539.484 232.438 541.067 234.391 541.067 cv
234.391 541.067 li
234.407 541.067 234.422 541.067 234.437 541.067 cv
234.441 541.067 234.444 541.067 234.447 541.067 cv
234.46 541.067 234.473 541.067 234.486 541.067 cv
234.488 541.067 234.489 541.067 234.492 541.067 cv
238.586 541.098 242.198 543.011 244.626 545.94 cv
244.788 546.133 244.955 546.32 245.107 546.522 cv
245.368 546.874 245.599 547.241 245.824 547.619 cv
246.026 547.954 246.21 548.295 246.381 548.648 cv
246.541 548.979 246.695 549.308 246.827 549.654 cv
247.008 550.121 247.148 550.605 247.275 551.096 cv
247.348 551.378 247.439 551.651 247.492 551.942 cv
247.646 552.745 247.742 553.568 247.742 554.418 cv
247.742 571.06 li
247.742 571.06 li
247.742 571.083 247.742 571.107 247.742 571.13 cv
245.614 571.13 li
244.919 571.13 244.256 571.262 243.647 571.502 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
158.2 583.48 mo
163.726 583.48 168.206 577.502 168.206 570.128 cv
168.206 570.127 li
168.206 568.174 169.393 566.59 170.857 566.59 cv
175.088 566.59 li
173.135 566.59 171.552 568.174 171.552 570.127 cv
171.552 570.128 li
171.552 577.502 165.574 583.48 158.2 583.48 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
175.088 481.764 mo
170.857 481.764 li
169.393 481.764 168.206 480.18 168.206 478.228 cv
168.206 478.227 li
168.206 470.853 163.726 464.875 158.2 464.875 cv
165.574 464.875 171.552 470.853 171.552 478.227 cv
171.552 478.228 li
171.552 478.228 li
171.552 480.18 173.135 481.764 175.088 481.764 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
231.642 483.057 mo
230.394 483.057 229.176 482.569 228.189 481.373 cv
222.145 474.05 230.264 473.428 233.2 473.428 cv
233.802 473.428 234.187 473.454 234.187 473.454 cv
242.728 474.377 236.907 483.059 231.642 483.057 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
220.088 495.915 mo
219.395 495.915 218.656 495.682 217.954 495.114 cv
214.013 491.923 220.137 491.162 220.137 491.162 cv
225.154 491.705 223.033 495.916 220.088 495.915 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
151.046 481.857 mo
149.755 481.857 148.527 480.927 147.854 478.402 cv
146.897 474.811 151.052 474.692 151.606 474.692 cv
151.646 474.692 151.667 474.693 151.667 474.693 cv
152.05 474.649 152.403 474.628 152.726 474.628 cv
155.738 474.628 156.219 476.435 155.496 478.242 cv
154.773 480.05 152.847 481.857 151.046 481.857 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
144.427 569.61 mo
143.699 569.61 142.819 569.392 141.805 568.853 cv
135.789 565.653 144.023 565.653 144.023 565.653 cv
147.865 565.653 147.526 569.611 144.427 569.61 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
153.659 562.641 mo
153.108 562.641 152.485 562.427 151.834 561.9 cv
147.893 558.709 154.087 558.709 154.087 558.709 cv
156.944 559.16 155.881 562.641 153.659 562.641 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
223.64 560.675 mo
223.089 560.675 222.467 560.461 221.816 559.934 cv
217.874 556.743 224.068 556.743 224.068 556.743 cv
226.926 557.194 225.862 560.675 223.64 560.675 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
197.856 555.868 mo
179.025 555.868 li
176.476 555.868 174.41 553.801 174.41 551.251 cv
174.41 504.381 li
174.41 501.831 176.476 499.765 179.025 499.765 cv
197.856 499.765 li
200.405 499.765 202.472 501.831 202.472 504.381 cv
202.472 551.251 li
202.472 553.801 200.405 555.868 197.856 555.868 cv
level3{
gsave
clp
[3.43235e-15 -56.0546 56.0546 3.43235e-15 188.441 550.671 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.43235e-15 -56.0546 56.0546 3.43235e-15 188.441 550.671 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
205.711 498.169 mo
205.711 495.092 203.266 492.587 200.213 492.49 cv
203.266 492.587 205.711 495.092 205.711 498.169 cv
171.17 498.169 mo
171.17 495.092 173.615 492.587 176.669 492.49 cv
173.615 492.587 171.17 495.092 171.17 498.169 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
/10 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_
UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UN,LmETj0;kbE.]UN,IlETa*:kG*%[UN,IlETa*:kFuqYU2]7g
E9<j4k+HYTTPrqbDrmX0je$GPSo*PZD<.7)j.1#HS87/RCZCjuigFN?QtYHFBAf(fi07g1P@WO4A)35U
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 478.606 ]ct
clp
/10 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
kND$kkND$kkND$jk2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tgfjlPUcjlPUcjlPUcjlPUbjQ,C_
jQ,C_jQ,C_jQ,C_j5]1[j5]1[io8tWio8tWio8tWio8tWiSibSiSibSi8EPOhr!>Khr!>KhVR,Gh;-oC
~>
<~USFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZ
USFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFQXU8"BVU8"BV
U8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BUTqS0RTqS0QTV.sNTV.sMT:_aJT:_aJT:_aJ
T:_aJSt;OFSXl=BS=H+>S=H+>S=H+>S"#k8R@0J2R@0J2R$a8.Q^=&*QBmi&Q'ISuPEV2oP*1riOH>Qc
~>
<~EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,r:E,]c8E,]c8
E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c7Df9Q4Df9Q4Df9Q3DJj?0DJj?0DJj?0DJj?/
D/F-,D/F-,Ci!p(Ci!p(Ci!p(CMR^$C2.KuC2.KuBk_9qBP;'mB4kjiAnGXeAS#FaA7T4]@q0"Y@U`eU
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /10 /Gradient get_res exec grestore
}if
np
200.03 555.868 mo
197.856 555.868 li
200.405 555.868 202.472 553.801 202.472 551.251 cv
202.472 504.381 li
202.472 501.831 200.405 499.765 197.856 499.765 cv
179.025 499.765 li
176.476 499.765 174.41 501.831 174.41 504.381 cv
174.41 551.251 li
174.41 553.801 176.476 555.868 179.025 555.868 cv
176.852 555.868 li
173.713 555.868 171.17 553.324 171.17 550.186 cv
171.17 498.169 li
171.17 498.169 li
171.17 495.092 173.615 492.587 176.669 492.49 cv
176.73 492.488 176.791 492.487 176.852 492.487 cv
200.03 492.487 li
200.091 492.487 200.152 492.488 200.213 492.49 cv
203.266 492.587 205.711 495.092 205.711 498.169 cv
205.711 498.169 li
205.711 550.186 li
205.711 553.324 203.167 555.868 200.03 555.868 cv
level3{
gsave
clp
[3.43235e-15 -56.0546 56.0546 3.43235e-15 188.441 550.671 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.43235e-15 -56.0546 56.0546 3.43235e-15 188.441 550.671 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
235.323 732.326 mo
236.845 732.326 238.284 732.015 239.633 731.514 cv
239.633 731.513 li
239.85 731.433 240.061 731.344 240.269 731.25 cv
240.271 731.267 240.272 731.284 240.273 731.3 cv
238.757 731.96 237.082 732.326 235.323 732.326 cv
158.2 732.326 mo
141.559 732.326 li
134.699 732.326 129.138 726.766 129.138 719.907 cv
129.138 703.266 li
129.138 695.892 135.116 689.913 142.49 689.913 cv
144.444 689.913 146.027 688.33 146.027 686.376 cv
146.027 659.673 li
146.027 657.719 144.444 656.135 142.491 656.135 cv
142.49 656.135 li
135.116 656.135 129.138 650.157 129.138 642.783 cv
129.138 626.142 li
129.138 619.282 134.699 613.722 141.559 613.722 cv
158.2 613.722 li
165.574 613.722 171.552 619.7 171.552 627.074 cv
171.552 629.027 173.135 630.611 175.088 630.611 cv
201.792 630.611 li
203.746 630.611 205.33 629.027 205.33 627.074 cv
205.33 621.217 209.101 616.241 214.347 614.441 cv
214.347 614.441 li
209.101 616.241 205.33 621.217 205.33 627.074 cv
205.33 629.027 203.746 630.611 201.792 630.611 cv
179.812 630.611 li
203.782 631.589 li
203.823 631.591 203.865 631.591 203.906 631.591 cv
205.63 631.591 207.002 630.133 207.002 628.275 cv
207.002 622.882 210.046 618.429 214.347 616.705 cv
214.347 631.793 li
214.347 634.755 211.947 637.155 208.985 637.155 cv
244.078 637.155 li
193.802 637.155 li
191.246 637.155 189.109 638.942 188.571 641.334 cv
176.852 641.334 li
176.803 641.334 176.754 641.335 176.705 641.336 cv
173.634 641.414 171.17 643.926 171.17 647.017 cv
171.17 647.017 li
171.17 699.033 li
171.17 699.033 li
171.17 702.171 173.713 704.715 176.852 704.715 cv
179.025 704.715 li
179.025 704.715 li
179.025 704.715 li
197.856 704.715 li
197.856 704.715 li
200.03 704.715 li
203.167 704.715 205.711 702.171 205.711 699.033 cv
205.711 670.168 li
208.985 670.168 li
211.947 670.168 214.347 672.568 214.347 675.528 cv
214.347 697.819 li
214.347 700.78 216.747 703.181 219.708 703.181 cv
234.891 703.181 li
237.853 703.181 240.253 705.581 240.253 708.542 cv
240.253 726.21 li
238.426 727.982 236.077 729.118 233.505 729.265 cv
218.974 730.093 li
218.762 730.105 218.55 730.111 218.341 730.111 cv
212.055 730.111 207.002 724.722 207.002 717.773 cv
207.002 715.914 205.629 714.457 203.905 714.457 cv
203.864 714.457 203.824 714.457 203.782 714.459 cv
179.805 715.438 li
175.088 715.438 li
175.088 715.438 li
170.857 715.438 li
169.393 715.438 168.206 717.021 168.206 718.975 cv
168.206 718.976 li
168.206 726.35 163.726 732.326 158.2 732.326 cv
158.2 732.326 li
144.023 714.5 mo
144.023 714.5 135.789 714.5 141.805 717.7 cv
142.818 718.239 143.699 718.457 144.426 718.458 cv
147.526 718.458 147.865 714.5 144.023 714.5 cv
154.087 707.556 mo
154.087 707.556 147.893 707.556 151.834 710.746 cv
152.486 711.274 153.108 711.488 153.659 711.488 cv
155.881 711.488 156.944 708.007 154.087 707.556 cv
224.068 705.59 mo
224.068 705.59 217.874 705.59 221.816 708.78 cv
222.467 709.307 223.089 709.521 223.64 709.522 cv
225.863 709.522 226.926 706.042 224.068 705.59 cv
151.607 623.539 mo
151.058 623.539 146.896 623.656 147.854 627.249 cv
148.527 629.774 149.755 630.704 151.046 630.704 cv
152.847 630.704 154.774 628.897 155.496 627.089 cv
156.219 625.282 155.738 623.475 152.725 623.475 cv
152.402 623.475 152.05 623.495 151.667 623.539 cv
151.667 623.539 151.646 623.539 151.607 623.539 cv
175.088 630.611 mo
175.088 630.611 li
173.135 630.611 171.552 629.027 171.552 627.074 cv
171.552 619.7 165.574 613.722 158.2 613.722 cv
163.726 613.722 168.206 619.7 168.206 627.074 cv
168.206 629.027 169.393 630.611 170.857 630.611 cv
175.088 630.611 li
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
235.323 732.326 mo
218.681 732.326 li
211.307 732.326 205.33 726.35 205.33 718.976 cv
205.33 718.975 li
205.33 718.975 li
205.33 717.021 203.746 715.438 201.792 715.438 cv
179.805 715.438 li
203.782 714.459 li
203.824 714.457 203.864 714.457 203.905 714.457 cv
205.629 714.457 207.002 715.914 207.002 717.773 cv
207.002 724.722 212.055 730.111 218.341 730.111 cv
218.55 730.111 218.762 730.105 218.974 730.093 cv
233.505 729.265 li
236.077 729.118 238.426 727.982 240.253 726.21 cv
240.253 730.832 li
240.253 730.973 240.259 731.112 240.269 731.25 cv
240.061 731.344 239.85 731.433 239.633 731.513 cv
239.633 731.514 li
238.284 732.015 236.845 732.326 235.323 732.326 cv
235.323 732.326 li
203.906 631.591 mo
203.865 631.591 203.823 631.591 203.782 631.589 cv
179.812 630.611 li
201.792 630.611 li
203.746 630.611 205.33 629.027 205.33 627.074 cv
205.33 621.217 209.101 616.241 214.347 614.441 cv
214.347 616.705 li
210.046 618.429 207.002 622.882 207.002 628.275 cv
207.002 630.133 205.63 631.591 203.906 631.591 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
158.2 732.326 mo
163.726 732.326 168.206 726.35 168.206 718.976 cv
168.206 718.975 li
168.206 717.021 169.393 715.438 170.857 715.438 cv
175.088 715.438 li
173.135 715.438 171.552 717.021 171.552 718.975 cv
171.552 718.976 li
171.552 726.35 165.574 732.326 158.2 732.326 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
175.088 630.611 mo
170.857 630.611 li
169.393 630.611 168.206 629.027 168.206 627.074 cv
168.206 619.7 163.726 613.722 158.2 613.722 cv
165.574 613.722 171.552 619.7 171.552 627.074 cv
171.552 629.027 173.135 630.611 175.088 630.611 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
151.046 630.704 mo
149.755 630.704 148.527 629.774 147.854 627.249 cv
146.896 623.656 151.058 623.539 151.607 623.539 cv
151.646 623.539 151.667 623.539 151.667 623.539 cv
152.05 623.495 152.402 623.475 152.725 623.475 cv
155.738 623.475 156.219 625.282 155.496 627.089 cv
154.774 628.897 152.847 630.704 151.046 630.704 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
144.426 718.458 mo
143.699 718.457 142.818 718.239 141.805 717.7 cv
135.789 714.5 144.023 714.5 144.023 714.5 cv
147.865 714.5 147.526 718.458 144.426 718.458 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
153.659 711.488 mo
153.108 711.488 152.486 711.274 151.834 710.746 cv
147.893 707.556 154.087 707.556 154.087 707.556 cv
156.944 708.007 155.881 711.488 153.659 711.488 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
223.64 709.522 mo
223.089 709.521 222.467 709.307 221.816 708.78 cv
217.874 705.59 224.068 705.59 224.068 705.59 cv
226.926 706.042 225.863 709.522 223.64 709.522 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
197.856 704.715 mo
179.025 704.715 li
176.476 704.715 174.41 702.648 174.41 700.099 cv
174.41 653.229 li
174.41 650.679 176.476 648.611 179.025 648.611 cv
188.44 648.611 li
188.44 664.806 li
188.44 667.768 190.84 670.168 193.802 670.168 cv
202.472 670.168 li
202.472 700.099 li
202.472 702.648 200.405 704.715 197.856 704.715 cv
level3{
gsave
clp
[3.43235e-15 -56.0546 56.0546 3.43235e-15 188.441 699.518 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.43235e-15 -56.0546 56.0546 3.43235e-15 188.441 699.518 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
171.17 647.017 mo
171.17 643.926 173.634 641.414 176.705 641.336 cv
173.634 641.414 171.17 643.927 171.17 647.017 cv
level3{
gsave
clp
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[6.00036e-15 97.9933 -97.9933 6.00036e-15 188.44 627.453 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
200.03 704.715 mo
197.856 704.715 li
200.405 704.715 202.472 702.648 202.472 700.099 cv
202.472 670.168 li
205.711 670.168 li
205.711 699.033 li
205.711 702.171 203.167 704.715 200.03 704.715 cv
179.025 704.715 mo
176.852 704.715 li
173.713 704.715 171.17 702.171 171.17 699.033 cv
171.17 647.017 li
171.17 647.017 li
171.17 643.927 173.634 641.414 176.705 641.336 cv
176.754 641.335 176.803 641.334 176.852 641.334 cv
188.571 641.334 li
188.485 641.714 188.44 642.11 188.44 642.516 cv
188.44 648.611 li
179.025 648.611 li
176.476 648.611 174.41 650.679 174.41 653.229 cv
174.41 700.099 li
174.41 702.648 176.476 704.715 179.025 704.715 cv
level3{
gsave
clp
[3.43235e-15 -56.0546 56.0546 3.43235e-15 188.441 699.518 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.43235e-15 -56.0546 56.0546 3.43235e-15 188.441 699.518 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
582.326 472.092 mo
572.45 472.092 li
535.674 472.092 li
478.707 472.092 li
451.49 472.092 li
451.49 472.092 li
374.399 472.092 li
374.399 458.485 li
374.399 453.901 378.115 450.185 382.699 450.185 cv
382.887 450.185 li
387.471 450.185 391.187 446.469 391.187 441.885 cv
391.187 218.517 li
391.187 217.312 390.93 216.166 390.467 215.132 cv
538.954 219.297 li
550.388 219.617 559.901 228.183 561.414 239.521 cv
561.776 242.232 562.611 244.856 563.882 247.277 cv
579.373 276.781 li
581.128 280.125 582.046 283.844 582.046 287.621 cv
582.126 304.493 li
581.623 304.303 581.01 304.16 580.274 304.081 cv
580.274 304.081 572.609 305.033 577.541 309.027 cv
578.42 309.738 579.345 310.03 580.212 310.03 cv
580.913 310.03 581.578 309.839 582.15 309.525 cv
582.443 371.265 li
391.187 371.265 li
391.187 381.716 li
582.492 381.716 li
582.557 395.333 li
391.187 395.333 li
391.187 405.784 li
582.607 405.784 li
582.671 419.402 li
513.81 419.402 li
513.643 418.267 512.538 417.215 510.322 417.215 cv
510.322 417.215 503.438 417.215 505.033 419.402 cv
391.187 419.402 li
391.187 429.852 li
582.721 429.852 li
582.902 468.04 li
582.902 469.446 582.701 470.805 582.326 472.092 cv
442.889 433.251 mo
440.475 433.251 433.793 433.762 438.766 439.786 cv
439.578 440.77 440.58 441.171 441.606 441.172 cv
445.937 441.173 450.726 434.031 443.699 433.272 cv
443.699 433.272 443.384 433.251 442.889 433.251 cv
522.918 408.523 mo
522.918 408.523 515.166 408.523 520.1 412.516 cv
520.915 413.176 521.694 413.444 522.384 413.444 cv
525.165 413.445 526.495 409.088 522.918 408.523 cv
420.153 346.535 mo
419.464 346.535 414.257 346.629 415.455 349.491 cv
416.298 351.503 417.834 352.244 419.451 352.244 cv
421.705 352.244 424.117 350.804 425.022 349.364 cv
425.926 347.924 425.324 346.484 421.554 346.484 cv
421.149 346.484 420.708 346.5 420.228 346.535 cv
420.228 346.535 420.202 346.535 420.153 346.535 cv
483.755 350.649 mo
483.808 350.651 483.86 350.652 483.913 350.652 cv
530.506 350.652 li
530.559 350.652 530.612 350.651 530.664 350.649 cv
533.301 350.565 535.414 348.401 535.414 345.744 cv
535.414 345.744 li
535.414 345.743 535.414 345.743 535.414 345.743 cv
535.414 293.409 li
535.414 293.409 li
535.414 277.832 522.787 265.205 507.21 265.205 cv
507.209 265.205 li
491.632 265.205 479.005 277.832 479.005 293.409 cv
479.005 345.744 li
479.005 348.401 481.117 350.565 483.755 350.649 cv
467.547 317.218 mo
466.9 317.218 465.853 317.513 465.615 319.35 cv
465.538 319.942 465.92 320.173 466.498 320.173 cv
467.52 320.173 469.151 319.45 469.924 318.728 cv
470.696 318.006 470.61 317.283 468.198 317.283 cv
468.155 317.283 468.113 317.283 468.069 317.284 cv
468.069 317.284 467.852 317.218 467.547 317.218 cv
570.754 291.031 mo
567.077 291.031 556.915 291.81 564.481 300.977 cv
565.716 302.473 567.241 303.085 568.804 303.085 cv
575.395 303.087 582.681 292.219 571.989 291.064 cv
571.989 291.064 571.507 291.031 570.754 291.031 cv
425.21 285.35 mo
424.519 285.35 419.314 285.498 420.513 289.995 cv
421.355 293.156 422.892 294.319 424.508 294.319 cv
426.763 294.319 429.174 292.057 430.079 289.795 cv
430.984 287.532 430.382 285.27 426.611 285.27 cv
426.206 285.27 425.765 285.296 425.285 285.351 cv
425.285 285.351 425.259 285.35 425.21 285.35 cv
536.536 244.506 mo
536.536 244.506 526.229 244.506 533.76 248.511 cv
535.029 249.186 536.13 249.459 537.041 249.459 cv
540.92 249.46 541.346 244.506 536.536 244.506 cv
549.133 235.814 mo
549.133 235.814 541.381 235.814 546.315 239.807 cv
547.13 240.467 547.909 240.735 548.599 240.735 cv
551.38 240.736 552.71 236.378 549.133 235.814 cv
471.504 222.065 mo
471.504 222.065 463.752 222.065 468.685 226.058 cv
469.5 226.718 470.279 226.986 470.969 226.986 cv
473.75 226.986 475.081 222.63 471.504 222.065 cv
639.982 458.485 mo
639.982 453.901 636.266 450.185 631.683 450.185 cv
631.494 450.185 li
626.909 450.185 623.194 446.469 623.194 441.886 cv
623.194 218.517 li
623.194 213.934 626.91 210.218 631.494 210.218 cv
382.888 210.218 li
383.326 210.218 383.756 210.252 384.175 210.318 cv
383.756 210.252 383.326 210.218 382.888 210.218 cv
382.699 210.218 li
378.115 210.218 374.399 206.502 374.399 201.918 cv
374.399 199.372 375.546 197.094 377.351 195.571 cv
385.241 188.918 391.092 180.169 396.556 171.413 cv
501.569 3.12666 li
502.87 1.04189 505.037 -6.19435e-05 507.205 -6.19435e-05 cv
509.331 -6.19435e-05 511.457 1.00223 512.765 3.00662 cv
511.462 1.01052 509.352 .024757 507.237 .024757 cv
506.59 .024757 505.943 .11688 505.318 .300549 cv
505.322 .299926 505.362 .294462 505.434 .294462 cv
506.162 .294462 510.143 .853892 513.332 12.6555 cv
516.391 23.9723 540.425 148.929 546.715 181.711 cv
547.506 185.832 544.4 189.64 540.206 189.739 cv
444.972 192.015 li
623.378 192.015 li
628.162 192.015 632.865 193.242 637.039 195.579 cv
636.762 195.345 636.488 195.108 636.215 194.868 cv
636.488 195.108 636.762 195.345 637.039 195.579 cv
638.839 197.102 639.982 199.377 639.982 201.918 cv
639.982 206.502 636.267 210.218 631.683 210.218 cv
631.494 210.218 li
626.91 210.218 623.195 213.934 623.195 218.517 cv
623.195 441.886 li
623.195 446.469 626.91 450.185 631.494 450.185 cv
631.683 450.185 li
636.267 450.185 639.982 453.901 639.982 458.485 cv
639.982 458.485 li
499.225 15.8132 mo
400.232 174.453 li
448.647 110.485 li
499.225 15.8132 li
463.439 160.583 mo
463.439 160.583 455.686 160.583 460.619 164.576 cv
461.434 165.236 462.213 165.504 462.903 165.504 cv
465.684 165.504 467.015 161.147 463.439 160.583 cv
497.066 136.699 mo
494.65 136.699 487.973 137.211 492.945 143.234 cv
493.756 144.218 494.758 144.619 495.785 144.62 cv
500.116 144.621 504.904 137.48 497.877 136.721 cv
497.877 136.721 497.561 136.699 497.066 136.699 cv
510.459 61.8547 mo
510.459 61.8547 502.707 61.8547 507.641 65.8483 cv
508.456 66.5082 509.235 66.7761 509.925 66.7762 cv
512.706 66.7765 514.036 62.4196 510.459 61.8547 cv
512.796 3.0544 mo
512.792 3.04805 512.788 3.04188 512.784 3.03555 cv
512.788 3.04182 512.792 3.04811 512.796 3.0544 cv
512.781 3.03054 mo
512.776 3.02324 512.771 3.01613 512.767 3.00886 cv
512.771 3.01585 512.776 3.02352 512.781 3.03054 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
582.492 381.716 mo
391.187 381.716 li
391.187 371.265 li
582.443 371.265 li
582.492 381.716 li
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
582.607 405.784 mo
391.187 405.784 li
391.187 395.333 li
582.557 395.333 li
582.607 405.784 li
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
582.721 429.852 mo
391.187 429.852 li
391.187 419.402 li
505.033 419.402 li
505.389 419.89 506.17 420.488 507.546 421.22 cv
508.815 421.895 509.916 422.169 510.827 422.169 cv
512.918 422.169 514.005 420.729 513.81 419.402 cv
582.671 419.402 li
582.721 429.852 li
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
530.664 350.649 mo
533.301 350.565 535.414 348.401 535.414 345.743 cv
535.414 345.744 li
535.414 348.401 533.301 350.565 530.664 350.649 cv
483.755 350.649 mo
481.117 350.565 479.005 348.401 479.005 345.744 cv
479.005 293.409 li
479.005 277.832 491.632 265.205 507.209 265.205 cv
507.21 265.205 li
522.787 265.205 535.414 277.832 535.414 293.409 cv
535.414 293.409 li
535.414 277.832 522.787 265.205 507.209 265.205 cv
491.632 265.205 479.005 277.832 479.005 293.409 cv
479.005 345.743 li
479.005 348.401 481.117 350.565 483.755 350.649 cv
526.191 347.832 mo
488.229 347.832 li
486.02 347.832 484.23 346.042 484.23 343.834 cv
484.23 301.193 li
484.23 288.502 494.518 278.213 507.209 278.213 cv
519.902 278.213 530.19 288.502 530.19 301.193 cv
530.19 343.834 li
530.19 346.042 528.4 347.832 526.191 347.832 cv
level3{
gsave
clp
[4.90363e-15 -80.0825 80.0825 4.90363e-15 507.21 348.504 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.90363e-15 -80.0825 80.0825 4.90363e-15 507.21 348.504 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
530.506 350.652 mo
483.913 350.652 li
483.86 350.652 483.808 350.651 483.755 350.649 cv
481.117 350.565 479.005 348.401 479.005 345.743 cv
479.005 293.409 li
479.005 277.832 491.632 265.205 507.209 265.205 cv
522.787 265.205 535.414 277.832 535.414 293.409 cv
535.414 345.744 li
535.414 348.401 533.301 350.565 530.664 350.649 cv
530.612 350.651 530.559 350.652 530.506 350.652 cv
507.209 278.213 mo
494.518 278.213 484.23 288.502 484.23 301.193 cv
484.23 343.834 li
484.23 346.042 486.02 347.832 488.229 347.832 cv
526.191 347.832 li
528.4 347.832 530.19 346.042 530.19 343.834 cv
530.19 301.193 li
530.19 288.502 519.902 278.213 507.209 278.213 cv
level3{
gsave
clp
[4.90363e-15 -80.0825 80.0825 4.90363e-15 507.21 348.504 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.90363e-15 -80.0825 80.0825 4.90363e-15 507.21 348.504 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
390.467 215.132 mo
390.45 215.131 li
389.321 212.615 386.986 210.758 384.175 210.318 cv
386.992 210.756 389.34 212.611 390.467 215.132 cv
.980392 .901961 .862745 rgb
f
639.982 472.092 mo
629.415 472.092 li
582.326 472.092 li
582.701 470.805 582.902 469.446 582.902 468.04 cv
582.721 429.852 li
623.194 429.852 li
623.194 419.402 li
582.671 419.402 li
582.607 405.784 li
623.194 405.784 li
623.194 395.333 li
582.557 395.333 li
582.492 381.716 li
623.194 381.716 li
623.194 371.265 li
582.443 371.265 li
582.15 309.525 li
584.233 308.384 585.099 305.615 582.126 304.493 cv
582.046 287.621 li
582.046 283.844 581.128 280.125 579.373 276.781 cv
563.882 247.277 li
562.611 244.856 561.776 242.232 561.414 239.521 cv
559.901 228.183 550.388 219.617 538.954 219.297 cv
390.467 215.132 li
389.34 212.611 386.992 210.756 384.175 210.318 cv
383.756 210.252 383.326 210.218 382.888 210.218 cv
631.494 210.218 li
626.91 210.218 623.194 213.934 623.194 218.517 cv
623.194 441.886 li
623.194 446.469 626.909 450.185 631.494 450.185 cv
631.683 450.185 li
636.266 450.185 639.982 453.901 639.982 458.485 cv
639.982 472.092 li
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
623.194 381.716 mo
582.492 381.716 li
582.443 371.265 li
623.194 371.265 li
623.194 381.716 li
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/11 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~os&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<
Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Y^H,JI.a^korri:Y^H)II.XXjoWNZ7YC#oFHh=LgoWEQ5Y']cB
Hh4@co;m90XEsH<HLe+^nu@!+Wd+'6GO_\Wn>UU#W-.R+FRQ&Jm\FsmUN5aqEU9B<m%A:_So3h`D<[L)
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/11 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
o^qeJo^qeJo^qeIoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSEo()ABo()ABo()ABo()AAnaZ/>
naZ/>naZ/>naZ/>nF5r:nF5r:n*f`6n*f`6mdBN2mdBN2mHs<.mHs<.m-O**lg*m&lg*m&lK[["l07Hs
~>
<~Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct=7YHP.5YHP.5
YHP.5YHP.5YHP.5YHP.5YHP.4Y-+q1Y-+q1Y-+q1Y-+q0Xf\_-Xf\_,XK8M)XK8M(X/i;%X/i;$WiE)!
WiE)!WMukrWMukrWMukrWMukrW2QYnVl-DhV5:#bUnjf^USFTZU8"?TTV.sNTV.sNT:_^HSXl:@S"#k8
~>
<~I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g9fH[C*dH[C*d
H[C*dH[C*dH[C*dH[C*dH[C*dH[C*cH?sm`H?sm`H?sm`H?sm`H?sm`H?sm_H$O[\H$O[\H$O[\H$O[[
G^+IXG^+IXGB\7TG'8%PG'8%PF`hhLFEDVHF)uDDF)uDDF)uABEH,u<E,]c8Df9Q4DJj?0D/F-,Ci!m&
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /11 /Gradient get_res exec grestore
}if
np
623.194 405.784 mo
582.607 405.784 li
582.557 395.333 li
623.194 395.333 li
623.194 405.784 li
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
623.194 429.852 mo
582.721 429.852 li
582.671 419.402 li
623.194 419.402 li
623.194 429.852 li
597.616 422.169 mo
597.616 422.169 589.864 422.169 594.797 426.163 cv
595.612 426.822 596.391 427.09 597.081 427.09 cv
599.863 427.091 601.194 422.734 597.616 422.169 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
636.215 194.868 mo
628.745 188.297 623.1 179.862 617.828 171.409 cv
512.842 3.12715 li
617.828 171.409 li
623.1 179.862 628.745 188.297 636.215 194.868 cv
512.842 3.12715 mo
512.827 3.10272 512.812 3.07854 512.796 3.0544 cv
512.812 3.0785 512.827 3.10276 512.842 3.12715 cv
512.784 3.03555 mo
512.783 3.03379 512.782 3.03229 512.781 3.03054 cv
512.782 3.03216 512.783 3.03393 512.784 3.03555 cv
512.767 3.00886 mo
512.766 3.00811 512.766 3.00737 512.765 3.00662 cv
512.766 3.00727 512.766 3.00822 512.767 3.00886 cv
.980392 .901961 .862745 rgb
f
637.039 195.579 mo
632.865 193.242 628.162 192.015 623.378 192.015 cv
444.972 192.015 li
540.206 189.739 li
544.4 189.64 547.506 185.832 546.715 181.711 cv
540.425 148.929 516.391 23.9723 513.332 12.6555 cv
510.143 .853892 506.162 .294462 505.434 .294462 cv
505.362 .294462 505.322 .299926 505.318 .300549 cv
505.943 .11688 506.59 .024757 507.237 .024757 cv
509.352 .024757 511.462 1.01052 512.765 3.00662 cv
512.766 3.00737 512.766 3.00811 512.767 3.00886 cv
512.771 3.01613 512.776 3.02324 512.781 3.03054 cv
512.782 3.03229 512.783 3.03379 512.784 3.03555 cv
512.788 3.04188 512.792 3.04805 512.796 3.0544 cv
512.812 3.07854 512.827 3.10272 512.842 3.12715 cv
512.842 3.12715 li
617.828 171.409 li
623.1 179.862 628.745 188.297 636.215 194.868 cv
636.488 195.108 636.762 195.345 637.039 195.579 cv
567.752 161.06 mo
567.057 161.06 561.857 161.209 563.055 165.704 cv
563.897 168.865 565.434 170.028 567.05 170.028 cv
569.305 170.028 571.716 167.766 572.621 165.504 cv
573.526 163.242 572.924 160.98 569.154 160.98 cv
568.749 160.98 568.308 161.006 567.828 161.061 cv
567.828 161.061 567.801 161.06 567.752 161.06 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
400.232 174.453 mo
499.225 15.8132 li
448.647 110.485 li
400.232 174.453 li
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
513.81 419.402 mo
505.033 419.402 li
503.438 417.215 510.322 417.215 510.322 417.215 cv
512.538 417.215 513.643 418.267 513.81 419.402 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
510.827 422.169 mo
509.916 422.169 508.815 421.895 507.546 421.22 cv
506.17 420.488 505.389 419.89 505.033 419.402 cv
513.81 419.402 li
514.005 420.729 512.918 422.169 510.827 422.169 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
441.606 441.172 mo
440.58 441.171 439.578 440.77 438.766 439.786 cv
433.793 433.762 440.475 433.251 442.889 433.251 cv
443.384 433.251 443.699 433.272 443.699 433.272 cv
450.726 434.031 445.937 441.173 441.606 441.172 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
568.804 303.085 mo
567.241 303.085 565.716 302.473 564.481 300.977 cv
556.915 291.81 567.077 291.031 570.754 291.031 cv
571.507 291.031 571.989 291.064 571.989 291.064 cv
582.681 292.219 575.395 303.087 568.804 303.085 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
580.212 310.03 mo
579.345 310.03 578.42 309.738 577.541 309.027 cv
572.609 305.033 580.274 304.081 580.274 304.081 cv
581.01 304.16 581.623 304.303 582.126 304.493 cv
582.15 309.525 li
581.578 309.839 580.913 310.03 580.212 310.03 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
582.15 309.525 mo
582.126 304.493 li
585.099 305.615 584.233 308.384 582.15 309.525 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
522.384 413.444 mo
521.694 413.444 520.915 413.176 520.1 412.516 cv
515.166 408.523 522.918 408.523 522.918 408.523 cv
526.495 409.088 525.165 413.445 522.384 413.444 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
597.081 427.09 mo
596.391 427.09 595.612 426.822 594.797 426.163 cv
589.864 422.169 597.616 422.169 597.616 422.169 cv
601.194 422.734 599.863 427.091 597.081 427.09 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/12 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~n=XUeTPX+jD"+*6n=XUeTPX+jD"+*6n=XUeTPX+jD"+*6n=XUeTPX+jD"+*6n=XUeTPX+jD"+*6n=XUe
TPX+jD"+*6n=XUeTPX+jD"+*6n=XUeT53qgC[ds3n=OLcT53nfC[[m2n"+=`Snd_cC@@a/n""4^SSIS_
C@7U+m[IqYRq_8YC$h@&m?qYTR:trTBC)%!l^2;MQt>QKAEoFjl',`CP@Ea<@HWb]kE'*6O'h".?K@#L
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/12 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6
n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6
n*f`6n*f`6n*f`5mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN1mHs<.mHs<.mHs<.mHs<-m-O**
m-O**m-O**m-O**lg*m&lg*m&lK[["lK[["l07Hsl07Hskih6okih6okND$kk2tggk2tggjlPUcjQ,C_
~>
<~T:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJ
T:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_^HSt;OFSt;OF
St;OFSt;OFSt;OFSt;OFSt;OESXl=BSXl=BSXl=BSXl=AS=H+>S=H+=S"#n:S"#n9R[T\6R[T\5R@0J2
R@0J2R$a8.R$a8.R$a8.R$a8.Q^=&*Q^=#(Q'IW"Pa%DsPEV2oP*1riOH>QcOH>QcO,o?_NfK*YN/W[Q
~>
<~CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$
CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR["C2.KuC2.Ku
C2.KuC2.KuC2.KuC2.KuC2.KuC2.KtBk_9qBk_9qBk_9qBk_9qBk_9qBk_9pBP;'mBP;'mBP;'mBP;'l
B4kjiB4kjiB4kjiAnGXeAnGXeAS#FaA7T4]@q0"Y@q0"Y@q/tW@:<SQ?smAM?smAM?XI/I?=$rE?!U]?
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /12 /Gradient get_res exec grestore
}if
np
470.969 226.986 mo
470.279 226.986 469.5 226.718 468.685 226.058 cv
463.752 222.065 471.504 222.065 471.504 222.065 cv
475.081 222.63 473.75 226.986 470.969 226.986 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
509.925 66.7762 mo
509.235 66.7761 508.456 66.5082 507.641 65.8483 cv
502.707 61.8547 510.459 61.8547 510.459 61.8547 cv
514.036 62.4196 512.706 66.7765 509.925 66.7762 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
466.498 320.173 mo
465.92 320.173 465.538 319.942 465.615 319.35 cv
465.853 317.513 466.9 317.218 467.547 317.218 cv
467.852 317.218 468.069 317.284 468.069 317.284 cv
468.113 317.283 468.155 317.283 468.198 317.283 cv
470.61 317.283 470.696 318.006 469.924 318.728 cv
469.151 319.45 467.52 320.173 466.498 320.173 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
419.451 352.244 mo
417.834 352.244 416.298 351.503 415.455 349.491 cv
414.257 346.629 419.464 346.535 420.153 346.535 cv
420.202 346.535 420.228 346.535 420.228 346.535 cv
420.708 346.5 421.149 346.484 421.554 346.484 cv
425.324 346.484 425.926 347.924 425.022 349.364 cv
424.117 350.804 421.705 352.244 419.451 352.244 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
424.508 294.319 mo
422.892 294.319 421.355 293.156 420.513 289.995 cv
419.314 285.498 424.519 285.35 425.21 285.35 cv
425.259 285.35 425.285 285.351 425.285 285.351 cv
425.765 285.296 426.206 285.27 426.611 285.27 cv
430.382 285.27 430.984 287.532 430.079 289.795 cv
429.174 292.057 426.763 294.319 424.508 294.319 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
567.05 170.028 mo
565.434 170.028 563.897 168.865 563.055 165.704 cv
561.857 161.209 567.057 161.06 567.752 161.06 cv
567.801 161.06 567.828 161.061 567.828 161.061 cv
568.308 161.006 568.749 160.98 569.154 160.98 cv
572.924 160.98 573.526 163.242 572.621 165.504 cv
571.716 167.766 569.305 170.028 567.05 170.028 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/11 /Gradient get_res exec grestore
}if
np
537.041 249.459 mo
536.13 249.459 535.029 249.186 533.76 248.511 cv
526.229 244.506 536.536 244.506 536.536 244.506 cv
541.346 244.506 540.92 249.46 537.041 249.459 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
495.785 144.62 mo
494.758 144.619 493.756 144.218 492.945 143.234 cv
487.973 137.211 494.65 136.699 497.066 136.699 cv
497.561 136.699 497.877 136.721 497.877 136.721 cv
504.904 137.48 500.116 144.621 495.785 144.62 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
548.599 240.735 mo
547.909 240.735 547.13 240.467 546.315 239.807 cv
541.381 235.814 549.133 235.814 549.133 235.814 cv
552.71 236.378 551.38 240.736 548.599 240.735 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
462.903 165.504 mo
462.213 165.504 461.434 165.236 460.619 164.576 cv
455.686 160.583 463.439 160.583 463.439 160.583 cv
467.015 161.147 465.684 165.504 462.903 165.504 cv
level3{
gsave
clp
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[2.672e-14 436.372 -436.372 2.672e-14 507.191 46.2723 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
308.165 637.155 mo
244.078 637.155 li
208.985 637.155 li
211.947 637.155 214.347 634.755 214.347 631.793 cv
214.347 616.705 li
214.347 614.441 li
214.347 609.503 li
214.347 606.543 216.747 604.143 219.708 604.143 cv
234.891 604.143 li
237.853 604.143 240.253 601.742 240.253 598.78 cv
240.253 582.462 li
240.253 582.41 li
240.253 577.363 li
240.253 576.491 li
240.253 574.225 241.659 572.287 243.647 571.502 cv
244.256 571.262 244.919 571.13 245.614 571.13 cv
247.742 571.13 li
247.742 571.13 li
260.797 571.13 li
263.758 571.13 266.158 568.73 266.158 565.768 cv
266.158 543.479 li
266.158 540.518 268.559 538.117 271.521 538.117 cv
286.703 538.117 li
289.664 538.117 292.065 535.717 292.065 532.755 cv
292.065 525.421 li
293.243 527.587 295.538 529.058 298.177 529.058 cv
318.612 529.058 li
318.612 602.644 li
257.489 604.143 li
308.297 604.143 li
311.201 604.143 313.554 606.518 313.528 609.421 cv
313.527 609.503 li
313.527 631.793 li
313.527 634.755 311.126 637.155 308.165 637.155 cv
279.134 627.515 mo
278.808 627.515 278.281 627.62 278.161 628.274 cv
278.123 628.484 278.316 628.566 278.606 628.566 cv
279.12 628.566 279.941 628.309 280.329 628.052 cv
280.718 627.795 280.675 627.538 279.463 627.538 cv
279.441 627.538 279.419 627.538 279.397 627.538 cv
279.397 627.538 279.288 627.515 279.134 627.515 cv
292.929 593.397 mo
292.929 593.397 289 593.885 291.529 595.932 cv
291.979 596.296 292.453 596.446 292.897 596.446 cv
294.786 596.446 296.147 593.745 292.929 593.397 cv
301.309 582.02 mo
299.426 582.02 294.217 582.42 298.094 587.117 cv
298.727 587.885 299.508 588.198 300.309 588.198 cv
303.686 588.198 307.421 582.629 301.942 582.037 cv
301.942 582.037 301.695 582.02 301.309 582.02 cv
259.366 579.524 mo
259.106 579.524 257.152 579.573 257.602 581.039 cv
257.918 582.07 258.495 582.45 259.102 582.45 cv
259.948 582.45 260.854 581.712 261.193 580.974 cv
261.533 580.236 261.307 579.498 259.892 579.498 cv
259.74 579.498 259.574 579.507 259.394 579.524 cv
259.394 579.524 259.384 579.524 259.366 579.524 cv
308.017 535.019 mo
306.778 535.019 303.358 535.282 305.906 538.368 cv
306.322 538.872 306.835 539.078 307.361 539.078 cv
309.581 539.078 312.034 535.419 308.434 535.031 cv
308.434 535.031 308.271 535.019 308.017 535.019 cv
297.149 529.392 mo
297.149 529.392 293.176 529.392 295.704 531.439 cv
296.122 531.776 296.521 531.914 296.874 531.914 cv
298.3 531.914 298.982 529.681 297.149 529.392 cv
313.982 529.895 mo
313.651 529.895 313.114 530.046 312.992 530.988 cv
312.952 531.291 313.148 531.41 313.444 531.41 cv
313.968 531.41 314.804 531.039 315.2 530.669 cv
315.596 530.299 315.551 529.929 314.315 529.929 cv
314.293 529.929 314.271 529.929 314.249 529.929 cv
314.249 529.929 314.139 529.895 313.982 529.895 cv
level3{
gsave
clp
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
318.612 637.155 mo
308.165 637.155 li
311.126 637.155 313.527 634.755 313.527 631.793 cv
313.527 609.503 li
313.528 609.421 li
313.554 606.518 311.201 604.143 308.297 604.143 cv
257.489 604.143 li
318.612 602.644 li
318.612 637.155 li
level3{
gsave
clp
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
300.309 588.198 mo
299.508 588.198 298.727 587.885 298.094 587.117 cv
294.217 582.42 299.426 582.02 301.309 582.02 cv
301.695 582.02 301.942 582.037 301.942 582.037 cv
307.421 582.629 303.686 588.198 300.309 588.198 cv
level3{
gsave
clp
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
292.897 596.446 mo
292.453 596.446 291.979 596.296 291.529 595.932 cv
289 593.885 292.929 593.397 292.929 593.397 cv
296.147 593.745 294.786 596.446 292.897 596.446 cv
level3{
gsave
clp
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
307.361 539.078 mo
306.835 539.078 306.322 538.872 305.906 538.368 cv
303.358 535.282 306.778 535.019 308.017 535.019 cv
308.271 535.019 308.434 535.031 308.434 535.031 cv
312.034 535.419 309.581 539.078 307.361 539.078 cv
level3{
gsave
clp
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
296.874 531.914 mo
296.521 531.914 296.122 531.776 295.704 531.439 cv
293.176 529.392 297.149 529.392 297.149 529.392 cv
298.982 529.681 298.3 531.914 296.874 531.914 cv
level3{
gsave
clp
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
313.444 531.41 mo
313.148 531.41 312.952 531.291 312.992 530.988 cv
313.114 530.046 313.651 529.895 313.982 529.895 cv
314.139 529.895 314.249 529.929 314.249 529.929 cv
314.271 529.929 314.293 529.929 314.315 529.929 cv
315.551 529.929 315.596 530.299 315.2 530.669 cv
314.804 531.039 313.968 531.41 313.444 531.41 cv
level3{
gsave
clp
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
278.606 628.566 mo
278.316 628.566 278.123 628.484 278.161 628.274 cv
278.281 627.62 278.808 627.515 279.134 627.515 cv
279.288 627.515 279.397 627.538 279.397 627.538 cv
279.419 627.538 279.441 627.538 279.463 627.538 cv
280.675 627.538 280.718 627.795 280.329 628.052 cv
279.941 628.309 279.12 628.566 278.606 628.566 cv
level3{
gsave
clp
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
259.102 582.45 mo
258.495 582.45 257.918 582.07 257.602 581.039 cv
257.152 579.573 259.106 579.524 259.366 579.524 cv
259.384 579.524 259.394 579.524 259.394 579.524 cv
259.574 579.507 259.74 579.498 259.892 579.498 cv
261.307 579.498 261.533 580.236 261.193 580.974 cv
260.854 581.712 259.948 582.45 259.102 582.45 cv
level3{
gsave
clp
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.26765e-15 -135.021 135.021 8.26765e-15 332.919 636.915 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
315.548 802.901 mo
304.81 802.901 li
303.325 802.901 301.897 802.661 300.561 802.218 cv
337.127 802.218 li
337.127 802.218 li
425.584 802.218 li
428.546 802.218 430.947 799.818 430.947 796.857 cv
430.947 774.567 li
430.947 774.567 li
430.947 771.606 428.546 769.205 425.584 769.205 cv
410.402 769.205 li
407.441 769.205 405.04 766.805 405.04 763.845 cv
405.04 742.35 li
520.557 742.35 li
520.557 742.35 449.996 739.14 437.29 739.14 cv
431.797 739.14 418.383 739.74 404.92 740.421 cv
404.4 738.004 402.251 736.193 399.679 736.193 cv
384.495 736.193 li
381.535 736.193 379.134 733.792 379.134 730.832 cv
379.134 708.542 li
379.134 708.542 li
379.134 705.581 376.734 703.181 373.773 703.181 cv
358.59 703.181 li
355.628 703.181 353.228 700.78 353.228 697.819 cv
353.228 675.529 li
353.228 675.529 li
353.228 675.528 li
353.228 672.568 350.827 670.168 347.867 670.168 cv
332.684 670.168 li
329.722 670.168 327.322 667.768 327.322 664.806 cv
327.322 642.325 li
327.322 642.325 li
327.322 639.47 325.007 637.155 322.152 637.155 cv
318.612 637.155 li
318.612 602.644 li
318.612 529.058 li
318.612 535.79 li
666.357 537.506 li
672.15 537.535 676.831 542.24 676.831 548.033 cv
676.831 730.112 li
676.831 735.926 672.118 740.639 666.305 740.639 cv
641.421 740.79 li
640.029 740.799 639.401 742.503 640.446 743.422 cv
642.598 745.316 643.958 748.083 643.981 751.163 cv
644.266 790.518 li
644.308 796.272 639.674 800.967 633.92 801.002 cv
315.548 802.901 li
458.086 771.81 mo
458.086 771.81 448.079 773.053 454.52 778.268 cv
455.667 779.196 456.874 779.577 458.006 779.577 cv
462.821 779.577 466.286 772.696 458.086 771.81 cv
469.694 765.882 mo
468.581 765.882 465.501 766.118 467.793 768.895 cv
468.168 769.348 468.629 769.534 469.103 769.534 cv
471.1 769.534 473.306 766.241 470.068 765.892 cv
470.068 765.892 469.922 765.882 469.694 765.882 cv
626.694 751.261 mo
626.694 751.261 612.558 753.016 621.656 760.381 cv
623.276 761.692 624.981 762.23 626.58 762.23 cv
633.38 762.231 638.274 752.512 626.694 751.261 cv
404.951 711.628 mo
404.951 711.628 394.771 711.628 399.969 717.477 cv
401.603 719.315 403.194 720.026 404.579 720.026 cv
409.336 720.027 411.661 711.628 404.951 711.628 cv
509.036 711.608 mo
506.81 711.608 500.65 712.08 505.235 717.634 cv
505.983 718.541 506.907 718.911 507.854 718.911 cv
511.847 718.912 516.261 712.329 509.783 711.628 cv
509.783 711.628 509.492 711.608 509.036 711.608 cv
453.902 698.416 mo
453.902 698.416 446.754 698.416 451.302 702.099 cv
452.054 702.707 452.772 702.954 453.407 702.954 cv
455.972 702.954 457.2 698.937 453.902 698.416 cv
425.965 682.755 mo
425.165 682.755 423.872 682.944 423.578 684.12 cv
423.484 684.499 423.957 684.647 424.67 684.647 cv
425.932 684.647 427.947 684.185 428.902 683.722 cv
429.856 683.259 429.751 682.797 426.774 682.797 cv
426.721 682.797 426.666 682.797 426.611 682.797 cv
426.611 682.797 426.343 682.755 425.965 682.755 cv
653.688 675.308 mo
653.688 675.308 646.54 675.308 651.089 678.99 cv
651.841 679.599 652.559 679.846 653.195 679.846 cv
655.759 679.846 656.986 675.829 653.688 675.308 cv
573.202 670.741 mo
573.202 670.741 563.699 670.741 570.642 674.434 cv
571.812 675.056 572.828 675.308 573.668 675.308 cv
577.244 675.308 577.636 670.741 573.202 670.741 cv
584.817 662.727 mo
584.817 662.727 577.669 662.727 582.217 666.408 cv
582.969 667.017 583.688 667.264 584.323 667.264 cv
586.888 667.265 588.114 663.247 584.817 662.727 cv
640.907 662.727 mo
640.907 662.727 li
643.415 662.727 li
647.037 662.727 649.973 659.791 649.973 656.169 cv
649.973 596.134 li
649.973 596.134 li
649.973 596.134 li
649.973 592.533 647.072 589.611 643.479 589.577 cv
643.458 589.577 643.437 589.576 643.415 589.576 cv
616.665 589.576 li
616.665 589.576 li
616.665 589.576 li
613.043 589.576 610.108 592.512 610.108 596.134 cv
610.108 596.134 li
610.108 656.169 li
610.108 656.169 li
610.108 659.791 613.043 662.727 616.665 662.727 cv
619.173 662.727 li
619.173 662.727 li
619.173 662.727 li
640.907 662.727 li
559.037 662.727 mo
559.037 662.727 li
561.546 662.727 li
565.167 662.727 568.104 659.791 568.104 656.169 cv
568.104 596.134 li
568.104 596.134 li
568.104 596.134 li
568.104 592.533 565.202 589.611 561.61 589.577 cv
561.589 589.577 561.568 589.576 561.546 589.576 cv
534.795 589.576 li
534.774 589.576 534.753 589.577 534.732 589.577 cv
531.14 589.611 528.239 592.533 528.239 596.134 cv
528.239 596.134 li
528.239 656.169 li
528.239 656.169 li
528.239 659.791 531.174 662.727 534.795 662.727 cv
537.304 662.727 li
537.304 662.727 li
537.304 662.727 li
559.037 662.727 li
477.168 662.727 mo
477.168 662.727 li
479.677 662.727 li
483.298 662.727 486.234 659.791 486.234 656.169 cv
486.234 596.134 li
486.234 596.134 li
486.234 596.134 li
486.234 592.533 483.332 589.611 479.741 589.577 cv
479.72 589.577 479.698 589.576 479.677 589.576 cv
452.926 589.576 li
452.905 589.576 452.884 589.577 452.862 589.577 cv
449.271 589.611 446.369 592.533 446.369 596.134 cv
446.369 596.134 li
446.369 656.169 li
446.369 656.169 li
446.369 659.791 449.305 662.727 452.926 662.727 cv
455.435 662.727 li
455.435 662.727 li
455.435 662.727 li
477.168 662.727 li
395.299 662.727 mo
395.299 662.727 li
397.808 662.727 li
401.428 662.727 404.365 659.791 404.365 656.169 cv
404.365 596.134 li
404.365 596.134 li
404.365 596.134 li
404.365 592.512 401.428 589.576 397.808 589.576 cv
397.807 589.576 li
397.807 589.576 li
371.057 589.576 li
371.036 589.576 371.014 589.577 370.993 589.577 cv
367.401 589.611 364.499 592.533 364.499 596.134 cv
364.499 596.134 li
364.499 656.169 li
364.499 656.169 li
364.499 659.791 367.435 662.727 371.057 662.727 cv
373.566 662.727 li
373.566 662.727 li
373.566 662.727 li
395.299 662.727 li
429.268 631.76 mo
428.626 631.76 423.834 631.848 424.938 634.486 cv
425.714 636.341 427.131 637.024 428.621 637.024 cv
430.7 637.024 432.923 635.696 433.758 634.369 cv
434.592 633.041 434.038 631.713 430.561 631.713 cv
430.188 631.713 429.781 631.729 429.338 631.761 cv
429.338 631.761 429.314 631.76 429.268 631.76 cv
533.763 578.543 mo
533.166 578.543 532.201 578.815 531.982 580.508 cv
531.911 581.054 532.264 581.266 532.796 581.266 cv
533.738 581.266 535.242 580.601 535.954 579.935 cv
536.667 579.269 536.588 578.603 534.365 578.603 cv
534.326 578.603 534.285 578.603 534.245 578.604 cv
534.245 578.604 534.045 578.543 533.763 578.543 cv
387.359 569.174 mo
385.13 569.174 378.976 569.646 383.559 575.199 cv
384.307 576.106 385.231 576.477 386.178 576.477 cv
390.171 576.478 394.586 569.893 388.108 569.194 cv
388.108 569.194 387.816 569.174 387.359 569.174 cv
637.698 566.43 mo
637.698 566.43 630.63 567.308 635.178 570.99 cv
635.988 571.646 636.841 571.915 637.641 571.915 cv
641.041 571.916 643.488 567.056 637.698 566.43 cv
628.92 554.398 mo
625.531 554.398 616.162 555.116 623.137 563.569 cv
624.276 564.948 625.682 565.512 627.122 565.512 cv
633.199 565.513 639.917 555.494 630.059 554.428 cv
630.059 554.428 629.615 554.398 628.92 554.398 cv
367.805 559.048 mo
367.805 559.048 360.657 559.048 365.205 562.731 cv
365.957 563.339 366.675 563.586 367.311 563.586 cv
369.875 563.586 371.103 559.568 367.805 559.048 cv
398.091 559.954 mo
397.495 559.954 396.529 560.226 396.309 561.92 cv
396.238 562.466 396.591 562.679 397.123 562.679 cv
398.066 562.679 399.57 562.013 400.282 561.347 cv
400.994 560.68 400.914 560.014 398.69 560.014 cv
398.651 560.014 398.612 560.014 398.572 560.015 cv
398.572 560.015 398.372 559.954 398.091 559.954 cv
494.729 549.161 mo
494.092 549.161 489.292 549.297 490.398 553.443 cv
491.175 556.357 492.591 557.429 494.082 557.429 cv
496.161 557.43 498.384 555.344 499.218 553.258 cv
500.052 551.172 499.497 549.087 496.02 549.087 cv
495.647 549.087 495.24 549.111 494.798 549.161 cv
494.798 549.161 494.774 549.161 494.729 549.161 cv
292.065 793.853 mo
291.579 792.46 291.315 790.963 291.315 789.405 cv
291.315 771.83 li
291.791 772.632 292.065 773.567 292.065 774.567 cv
292.065 793.853 li
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
709.663 802.901 mo
315.548 802.901 li
709.663 802.901 li
711.148 802.901 712.576 802.661 713.912 802.218 cv
713.913 802.218 li
712.576 802.661 711.148 802.901 709.663 802.901 cv
.980392 .901961 .862745 rgb
f
715.526 801.564 mo
720.042 799.382 723.158 794.758 723.158 789.406 cv
723.158 756.401 li
723.158 789.406 li
723.158 794.758 720.042 799.382 715.526 801.564 cv
715.526 801.564 li
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
713.913 802.218 mo
713.912 802.218 li
714.467 802.034 715.006 801.815 715.526 801.564 cv
715.526 801.564 li
715.006 801.815 714.467 802.034 713.913 802.218 cv
level3{
gsave
clp
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.3748e-14 -224.523 224.523 1.3748e-14 818.56 782.492 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
709.663 802.901 mo
315.548 802.901 li
633.92 801.002 li
639.674 800.967 644.308 796.272 644.266 790.518 cv
643.981 751.163 li
643.958 748.083 642.598 745.316 640.446 743.422 cv
639.401 742.503 640.029 740.799 641.421 740.79 cv
666.305 740.639 li
672.118 740.639 676.831 735.926 676.831 730.112 cv
676.831 548.033 li
676.831 542.24 672.15 537.535 666.357 537.506 cv
318.612 535.79 li
318.612 529.058 li
341.237 529.058 li
345.077 529.058 348.19 525.944 348.19 522.104 cv
348.19 515.82 li
348.19 511.981 351.303 508.867 355.144 508.867 cv
378.012 508.867 li
381.852 508.867 384.966 511.981 384.966 515.82 cv
384.966 522.104 li
384.966 525.944 388.078 529.058 391.919 529.058 cv
434.978 529.058 li
438.819 529.058 441.931 525.944 441.931 522.104 cv
441.931 515.82 li
441.931 511.981 445.045 508.867 448.885 508.867 cv
471.754 508.867 li
475.595 508.867 478.707 511.981 478.707 515.82 cv
478.707 522.104 li
478.707 525.944 481.822 529.058 485.661 529.058 cv
528.72 529.058 li
532.56 529.058 535.674 525.944 535.674 522.104 cv
535.674 515.82 li
535.674 511.981 538.788 508.867 542.627 508.867 cv
565.497 508.867 li
569.336 508.867 572.45 511.981 572.45 515.82 cv
572.45 522.104 li
572.45 525.944 575.563 529.058 579.404 529.058 cv
622.462 529.058 li
626.302 529.058 629.415 525.944 629.415 522.104 cv
629.415 515.82 li
629.415 511.981 632.53 508.867 636.369 508.867 cv
659.239 508.867 li
663.078 508.867 666.191 511.981 666.191 515.82 cv
666.191 522.104 li
666.191 525.944 669.305 529.058 673.145 529.058 cv
695.861 529.058 li
695.861 549.33 li
695.861 559.102 li
695.861 729.16 li
695.861 729.16 li
695.861 736.613 701.903 742.655 709.356 742.655 cv
709.663 742.655 li
717.116 742.655 723.158 748.696 723.158 756.149 cv
723.158 756.401 li
723.158 789.406 li
723.158 794.758 720.042 799.382 715.526 801.564 cv
715.006 801.815 714.467 802.034 713.912 802.218 cv
713.912 802.218 li
712.576 802.661 711.148 802.901 709.663 802.901 cv
656.743 773.424 mo
656.743 773.424 649.596 773.424 654.145 777.107 cv
654.896 777.715 655.615 777.962 656.25 777.962 cv
658.815 777.962 660.042 773.945 656.743 773.424 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
716.203 529.058 mo
695.861 529.058 li
673.145 529.058 li
669.305 529.058 666.191 525.944 666.191 522.104 cv
666.191 515.82 li
666.191 511.981 663.078 508.867 659.239 508.867 cv
636.369 508.867 li
632.53 508.867 629.415 511.981 629.415 515.82 cv
629.415 522.104 li
629.415 525.944 626.302 529.058 622.462 529.058 cv
579.404 529.058 li
575.563 529.058 572.45 525.944 572.45 522.104 cv
572.45 515.82 li
572.45 511.981 569.336 508.867 565.497 508.867 cv
542.627 508.867 li
538.788 508.867 535.674 511.981 535.674 515.82 cv
535.674 522.104 li
535.674 525.944 532.56 529.058 528.72 529.058 cv
485.661 529.058 li
481.822 529.058 478.707 525.944 478.707 522.104 cv
478.707 515.82 li
478.707 511.981 475.595 508.867 471.754 508.867 cv
448.885 508.867 li
445.045 508.867 441.931 511.981 441.931 515.82 cv
441.931 522.104 li
441.931 525.944 438.819 529.058 434.978 529.058 cv
391.919 529.058 li
388.078 529.058 384.966 525.944 384.966 522.104 cv
384.966 515.82 li
384.966 511.981 381.852 508.867 378.012 508.867 cv
355.144 508.867 li
351.303 508.867 348.19 511.981 348.19 515.82 cv
348.19 522.104 li
348.19 525.944 345.077 529.058 341.237 529.058 cv
318.612 529.058 li
298.177 529.058 li
295.538 529.058 293.243 527.587 292.065 525.421 cv
291.528 524.435 291.224 523.305 291.224 522.104 cv
291.224 494.007 li
291.224 484.935 li
291.224 479.045 li
291.224 475.205 294.337 472.092 298.177 472.092 cv
313.002 472.092 li
323.332 472.092 li
348.19 472.092 li
384.966 472.092 li
441.931 472.092 li
451.49 472.092 li
478.707 472.092 li
535.674 472.092 li
572.45 472.092 li
582.326 472.092 li
629.415 472.092 li
639.982 472.092 li
666.191 472.092 li
712.744 472.092 li
716.203 472.092 li
720.044 472.092 723.158 475.205 723.158 479.045 cv
723.158 505.927 li
723.158 522.104 li
723.158 525.944 720.044 529.058 716.203 529.058 cv
412.937 509.798 mo
412.937 509.798 402.757 509.798 407.955 515.646 cv
409.589 517.484 411.18 518.196 412.565 518.196 cv
417.322 518.197 419.648 509.798 412.937 509.798 cv
517.022 509.778 mo
514.795 509.778 508.638 510.25 513.221 515.804 cv
513.97 516.711 514.893 517.081 515.84 517.081 cv
519.833 517.081 524.247 510.498 517.77 509.798 cv
517.77 509.798 517.478 509.778 517.022 509.778 cv
612.977 502.846 mo
612.977 502.846 603.473 502.846 610.417 506.54 cv
611.587 507.162 612.603 507.414 613.442 507.414 cv
617.019 507.415 617.411 502.846 612.977 502.846 cv
461.888 496.585 mo
461.888 496.585 454.74 496.585 459.289 500.268 cv
460.041 500.876 460.759 501.123 461.395 501.123 cv
463.959 501.123 465.186 497.106 461.888 496.585 cv
624.591 494.832 mo
624.591 494.832 617.444 494.832 621.993 498.515 cv
622.744 499.123 623.462 499.37 624.098 499.37 cv
626.662 499.37 627.89 495.353 624.591 494.832 cv
704.448 491.537 mo
704.448 491.537 697.299 491.537 701.848 495.219 cv
702.599 495.828 703.318 496.075 703.953 496.075 cv
706.518 496.075 707.745 492.058 704.448 491.537 cv
322.478 480.209 mo
321.836 480.209 317.044 480.297 318.148 482.934 cv
318.924 484.789 320.341 485.472 321.832 485.472 cv
323.91 485.472 326.133 484.145 326.968 482.817 cv
327.802 481.49 327.247 480.162 323.771 480.162 cv
323.398 480.162 322.991 480.177 322.548 480.21 cv
322.548 480.21 322.524 480.209 322.478 480.209 cv
433.952 480.924 mo
433.153 480.924 431.858 481.113 431.564 482.291 cv
431.469 482.67 431.942 482.817 432.655 482.817 cv
433.918 482.817 435.933 482.354 436.888 481.892 cv
437.843 481.429 437.736 480.966 434.756 480.966 cv
434.704 480.966 434.651 480.966 434.597 480.966 cv
434.597 480.966 434.33 480.924 433.952 480.924 cv
level3{
gsave
clp
[431.934 0 0 431.934 291.224 500.575 ]ct
/2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[431.934 0 0 431.934 291.224 500.575 ]ct
clp
/2 /Gradient get_res exec grestore
}if
np
395.299 662.727 mo
373.566 662.727 li
370.623 662.727 368.238 660.342 368.238 657.399 cv
368.238 603.303 li
368.238 600.361 370.623 597.976 373.566 597.976 cv
395.299 597.976 li
398.242 597.976 400.626 600.361 400.626 603.303 cv
400.626 657.399 li
400.626 660.342 398.242 662.727 395.299 662.727 cv
level3{
gsave
clp
[4.26805e-15 -69.7026 69.7026 4.26805e-15 384.432 661.972 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.26805e-15 -69.7026 69.7026 4.26805e-15 384.432 661.972 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
477.168 662.727 mo
455.435 662.727 li
452.492 662.727 450.107 660.342 450.107 657.399 cv
450.107 603.303 li
450.107 600.361 452.492 597.976 455.435 597.976 cv
477.168 597.976 li
480.111 597.976 482.496 600.361 482.496 603.303 cv
482.496 657.399 li
482.496 660.342 480.111 662.727 477.168 662.727 cv
level3{
gsave
clp
[4.26805e-15 -69.7026 69.7026 4.26805e-15 466.301 661.972 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.26805e-15 -69.7026 69.7026 4.26805e-15 466.301 661.972 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
559.037 662.727 mo
537.304 662.727 li
534.362 662.727 531.976 660.342 531.976 657.399 cv
531.976 603.303 li
531.976 600.361 534.362 597.976 537.304 597.976 cv
559.037 597.976 li
561.98 597.976 564.365 600.361 564.365 603.303 cv
564.365 657.399 li
564.365 660.342 561.98 662.727 559.037 662.727 cv
level3{
gsave
clp
[4.26805e-15 -69.7026 69.7026 4.26805e-15 548.171 661.972 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.26805e-15 -69.7026 69.7026 4.26805e-15 548.171 661.972 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
640.907 662.727 mo
619.173 662.727 li
616.231 662.727 613.845 660.342 613.845 657.399 cv
613.845 603.303 li
613.845 600.361 616.231 597.976 619.173 597.976 cv
640.907 597.976 li
643.849 597.976 646.235 600.361 646.235 603.303 cv
646.235 657.399 li
646.235 660.342 643.849 662.727 640.907 662.727 cv
level3{
gsave
clp
[4.26805e-15 -69.7026 69.7026 4.26805e-15 630.04 661.972 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.26805e-15 -69.7026 69.7026 4.26805e-15 630.04 661.972 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
397.808 662.727 mo
395.299 662.727 li
395.299 662.727 li
397.807 662.727 li
401.428 662.727 404.365 659.791 404.365 656.169 cv
404.365 596.134 li
404.365 596.134 li
404.365 656.169 li
404.365 659.791 401.428 662.727 397.808 662.727 cv
404.365 596.134 mo
404.365 592.513 401.428 589.576 397.807 589.576 cv
397.808 589.576 li
401.428 589.576 404.365 592.512 404.365 596.134 cv
364.499 596.134 mo
364.499 592.533 367.401 589.611 370.993 589.577 cv
367.401 589.611 364.499 592.534 364.499 596.134 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/13 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-
@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,T
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_
UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UN,LmETj0;kbE.]UN,IlETa*:kG*%[UN,IlETa*:kFuqYU2]7g
E9<j4k+HYTTPrqbDrmX0je$GPSo*PZD<.7)j.1#HS87/RCZCjuigFN?QtYHFBAf(fi07g1P@WO4A)35U
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/13 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~gtgfBh;7#FhV[5Jhr!>Khr*GNi8NYRiSibSiSrkVio8tWio8tWio8tWioB(Zj5]1[j5f:^jQ,C_jQ,C_
jQ,C_jQ,FajlPUcjlPUcjlPUcjlPXek2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tjikND$kkND$k
kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
~>
<~O-#HbOHGZgP*;)nPE_;sQ'R`%QC!r)Q^F/-R$jA1R@0J2R@9S6S"-"=S=H+>S=H+>S=Q4ASXuFEStDXI
T:_aJT:_aJT:_aJT:_dLTV.sNTV/!PTqS0RTqS3TU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BWUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZ
USFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZ
~>
<~@:E\T@UinX@q9+\A7]=`AS,OdAnPahB4tslBPD0pBkhBtC2.KuC27U#CM[g'Ci!p(Ci!p(Ci+$+D/F-,
D/F0.DJj?0DJj?0DJj?0DJjB2Df9Q4Df9Q4Df9T6E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8
E,]c8E,]c8E,]c9EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /13 /Gradient get_res exec grestore
}if
np
397.807 662.727 mo
395.299 662.727 li
398.242 662.727 400.626 660.342 400.626 657.399 cv
400.626 603.303 li
400.626 600.361 398.242 597.976 395.299 597.976 cv
373.566 597.976 li
370.623 597.976 368.238 600.361 368.238 603.303 cv
368.238 657.399 li
368.238 660.342 370.623 662.727 373.566 662.727 cv
371.057 662.727 li
367.435 662.727 364.499 659.791 364.499 656.169 cv
364.499 596.134 li
364.499 596.134 li
364.499 592.534 367.401 589.611 370.993 589.577 cv
371.014 589.577 371.036 589.576 371.057 589.576 cv
397.807 589.576 li
401.428 589.576 404.365 592.513 404.365 596.134 cv
404.365 596.134 li
404.365 656.169 li
404.365 659.791 401.428 662.727 397.807 662.727 cv
level3{
gsave
clp
[4.26805e-15 -69.7026 69.7026 4.26805e-15 384.432 661.972 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.26805e-15 -69.7026 69.7026 4.26805e-15 384.432 661.972 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
486.234 596.134 mo
486.234 592.534 483.332 589.611 479.741 589.577 cv
483.332 589.611 486.234 592.533 486.234 596.134 cv
446.369 596.134 mo
446.369 592.533 449.271 589.611 452.862 589.577 cv
449.271 589.611 446.369 592.534 446.369 596.134 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
479.677 662.727 mo
477.168 662.727 li
480.111 662.727 482.496 660.342 482.496 657.399 cv
482.496 603.303 li
482.496 600.361 480.111 597.976 477.168 597.976 cv
455.435 597.976 li
452.492 597.976 450.107 600.361 450.107 603.303 cv
450.107 657.399 li
450.107 660.342 452.492 662.727 455.435 662.727 cv
452.926 662.727 li
449.305 662.727 446.369 659.791 446.369 656.169 cv
446.369 596.134 li
446.369 596.134 li
446.369 592.534 449.271 589.611 452.862 589.577 cv
452.884 589.577 452.905 589.576 452.926 589.576 cv
479.677 589.576 li
479.698 589.576 479.72 589.577 479.741 589.577 cv
483.332 589.611 486.234 592.534 486.234 596.134 cv
486.234 596.134 li
486.234 656.169 li
486.234 659.791 483.298 662.727 479.677 662.727 cv
level3{
gsave
clp
[4.26805e-15 -69.7026 69.7026 4.26805e-15 466.301 661.972 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.26805e-15 -69.7026 69.7026 4.26805e-15 466.301 661.972 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
568.104 596.134 mo
568.104 592.534 565.202 589.611 561.61 589.577 cv
565.202 589.611 568.104 592.533 568.104 596.134 cv
528.239 596.134 mo
528.239 592.533 531.14 589.611 534.732 589.577 cv
531.14 589.611 528.239 592.534 528.239 596.134 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
561.546 662.727 mo
559.037 662.727 li
561.98 662.727 564.365 660.342 564.365 657.399 cv
564.365 603.303 li
564.365 600.361 561.98 597.976 559.037 597.976 cv
537.304 597.976 li
534.362 597.976 531.976 600.361 531.976 603.303 cv
531.976 657.399 li
531.976 660.342 534.362 662.727 537.304 662.727 cv
534.795 662.727 li
531.174 662.727 528.239 659.791 528.239 656.169 cv
528.239 596.134 li
528.239 596.134 li
528.239 592.534 531.14 589.611 534.732 589.577 cv
534.753 589.577 534.774 589.576 534.795 589.576 cv
561.546 589.576 li
561.568 589.576 561.589 589.577 561.61 589.577 cv
565.202 589.611 568.104 592.534 568.104 596.134 cv
568.104 596.134 li
568.104 656.169 li
568.104 659.791 565.167 662.727 561.546 662.727 cv
level3{
gsave
clp
[4.26805e-15 -69.7026 69.7026 4.26805e-15 548.171 661.972 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.26805e-15 -69.7026 69.7026 4.26805e-15 548.171 661.972 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
619.173 662.727 mo
616.665 662.727 li
613.043 662.727 610.108 659.791 610.108 656.169 cv
610.108 656.169 li
610.108 659.791 613.043 662.727 616.665 662.727 cv
619.173 662.727 li
619.173 662.727 li
649.973 596.134 mo
649.973 592.534 647.072 589.611 643.479 589.577 cv
647.072 589.611 649.973 592.533 649.973 596.134 cv
610.108 596.134 mo
610.108 592.512 613.043 589.576 616.665 589.576 cv
616.665 589.576 li
613.043 589.576 610.108 592.513 610.108 596.134 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
643.415 662.727 mo
640.907 662.727 li
643.849 662.727 646.235 660.342 646.235 657.399 cv
646.235 603.303 li
646.235 600.361 643.849 597.976 640.907 597.976 cv
619.173 597.976 li
616.231 597.976 613.845 600.361 613.845 603.303 cv
613.845 657.399 li
613.845 660.342 616.231 662.727 619.173 662.727 cv
616.665 662.727 li
613.043 662.727 610.108 659.791 610.108 656.169 cv
610.108 596.134 li
610.108 596.134 li
610.108 592.513 613.043 589.576 616.665 589.576 cv
643.415 589.576 li
643.437 589.576 643.458 589.577 643.479 589.577 cv
647.072 589.611 649.973 592.534 649.973 596.134 cv
649.973 596.134 li
649.973 656.169 li
649.973 659.791 647.037 662.727 643.415 662.727 cv
level3{
gsave
clp
[4.26805e-15 -69.7026 69.7026 4.26805e-15 630.04 661.972 ]ct
/6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.26805e-15 -69.7026 69.7026 4.26805e-15 630.04 661.972 ]ct
clp
/6 /Gradient get_res exec grestore
}if
np
404.579 720.026 mo
403.194 720.026 401.603 719.315 399.969 717.477 cv
394.771 711.628 404.951 711.628 404.951 711.628 cv
411.661 711.628 409.336 720.027 404.579 720.026 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
573.668 675.308 mo
572.828 675.308 571.812 675.056 570.642 674.434 cv
563.699 670.741 573.202 670.741 573.202 670.741 cv
577.636 670.741 577.244 675.308 573.668 675.308 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
507.854 718.911 mo
506.907 718.911 505.983 718.541 505.235 717.634 cv
500.65 712.08 506.81 711.608 509.036 711.608 cv
509.492 711.608 509.783 711.628 509.783 711.628 cv
516.261 712.329 511.847 718.912 507.854 718.911 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
386.178 576.477 mo
385.231 576.477 384.307 576.106 383.559 575.199 cv
378.976 569.646 385.13 569.174 387.359 569.174 cv
387.816 569.174 388.108 569.194 388.108 569.194 cv
394.586 569.893 390.171 576.478 386.178 576.477 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
469.103 769.534 mo
468.629 769.534 468.168 769.348 467.793 768.895 cv
465.501 766.118 468.581 765.882 469.694 765.882 cv
469.922 765.882 470.068 765.892 470.068 765.892 cv
473.306 766.241 471.1 769.534 469.103 769.534 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
627.122 565.512 mo
625.682 565.512 624.276 564.948 623.137 563.569 cv
616.162 555.116 625.531 554.398 628.92 554.398 cv
629.615 554.398 630.059 554.428 630.059 554.428 cv
639.917 555.494 633.199 565.513 627.122 565.512 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
626.58 762.23 mo
624.981 762.23 623.276 761.692 621.656 760.381 cv
612.558 753.016 626.694 751.261 626.694 751.261 cv
638.274 752.512 633.38 762.231 626.58 762.23 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
458.006 779.577 mo
456.874 779.577 455.667 779.196 454.52 778.268 cv
448.079 773.053 458.086 771.81 458.086 771.81 cv
466.286 772.696 462.821 779.577 458.006 779.577 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
637.641 571.915 mo
636.841 571.915 635.988 571.646 635.178 570.99 cv
630.63 567.308 637.698 566.43 637.698 566.43 cv
643.488 567.056 641.041 571.916 637.641 571.915 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
453.407 702.954 mo
452.772 702.954 452.054 702.707 451.302 702.099 cv
446.754 698.416 453.902 698.416 453.902 698.416 cv
457.2 698.937 455.972 702.954 453.407 702.954 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
367.311 563.586 mo
366.675 563.586 365.957 563.339 365.205 562.731 cv
360.657 559.048 367.805 559.048 367.805 559.048 cv
371.103 559.568 369.875 563.586 367.311 563.586 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
584.323 667.264 mo
583.688 667.264 582.969 667.017 582.217 666.408 cv
577.669 662.727 584.817 662.727 584.817 662.727 cv
588.114 663.247 586.888 667.265 584.323 667.264 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
656.25 777.962 mo
655.615 777.962 654.896 777.715 654.145 777.107 cv
649.596 773.424 656.743 773.424 656.743 773.424 cv
660.042 773.945 658.815 777.962 656.25 777.962 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/14 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/V
C[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~os&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<
Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Y^H,JI.a^korri:Y^H)II.XXjoWNZ7YC#oFHh=LgoWEQ5Y']cB
Hh4@co;m90XEsH<HLe+^nu@!+Wd+'6GO_\Wn>UU#W-.R+FRQ&Jm\FsmUN5aqEU9B<m%A:_So3h`D<[L)
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/14 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kiq?rl0@R!lKdd%lg*m&lg4!)m-X3-mHs<.mI'E1mdBN2mdKW5n*f`6n*oi9nF5r:nF?&=naZ/>naZ/>
naZ/>naZ2@o()ABo()ABo()ABo()DDoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMVHo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
<~R@9S6S"-">SXuFFT:hjMTV.sNTV8'RU8+KYUSO]]UnsoaV5C,fVl6PmW2ZbqWMukrWMukrWMukrWN)tu
WiE)!WiE,#X/i;%X/i>'XK8M)XK8P+Xf\_-Xf\b/Y-+q1Y-+q1Y-+q1Y-+t3YHP.5YHP.5YHP.5YHP.5
YHP.5YHP.5YHP.6Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
~>
<~C27U$Ci+$+D/O6/DJsH3DfBZ7E,fl;EH6)@F)uDDF)uDDF*)MGFEM_KF`qqOG'8%PG'A.SGBe@WG^+IX
G^+LZH$O[\H$O[\H$O[\H$O^^H?sm`H?sm`H?sm`H?sm`H?sm`H?spbH[C*dH[C*dH[C*dH[C*dH[C*d
H[C*dH[C*dH[C*eI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /14 /Gradient get_res exec grestore
}if
np
653.195 679.846 mo
652.559 679.846 651.841 679.599 651.089 678.99 cv
646.54 675.308 653.688 675.308 653.688 675.308 cv
656.986 675.829 655.759 679.846 653.195 679.846 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
424.67 684.647 mo
423.957 684.647 423.484 684.499 423.578 684.12 cv
423.872 682.944 425.165 682.755 425.965 682.755 cv
426.343 682.755 426.611 682.797 426.611 682.797 cv
426.666 682.797 426.721 682.797 426.774 682.797 cv
429.751 682.797 429.856 683.259 428.902 683.722 cv
427.947 684.185 425.932 684.647 424.67 684.647 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
532.796 581.266 mo
532.264 581.266 531.911 581.054 531.982 580.508 cv
532.201 578.815 533.166 578.543 533.763 578.543 cv
534.045 578.543 534.245 578.604 534.245 578.604 cv
534.285 578.603 534.326 578.603 534.365 578.603 cv
536.588 578.603 536.667 579.269 535.954 579.935 cv
535.242 580.601 533.738 581.266 532.796 581.266 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
397.123 562.679 mo
396.591 562.679 396.238 562.466 396.309 561.92 cv
396.529 560.226 397.495 559.954 398.091 559.954 cv
398.372 559.954 398.572 560.015 398.572 560.015 cv
398.612 560.014 398.651 560.014 398.69 560.014 cv
400.914 560.014 400.994 560.68 400.282 561.347 cv
399.57 562.013 398.066 562.679 397.123 562.679 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
428.621 637.024 mo
427.131 637.024 425.714 636.341 424.938 634.486 cv
423.834 631.848 428.626 631.76 429.268 631.76 cv
429.314 631.76 429.338 631.761 429.338 631.761 cv
429.781 631.729 430.188 631.713 430.561 631.713 cv
434.038 631.713 434.592 633.041 433.758 634.369 cv
432.923 635.696 430.7 637.024 428.621 637.024 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
494.082 557.429 mo
492.591 557.429 491.175 556.357 490.398 553.443 cv
489.292 549.297 494.092 549.161 494.729 549.161 cv
494.774 549.161 494.798 549.161 494.798 549.161 cv
495.24 549.111 495.647 549.087 496.02 549.087 cv
499.497 549.087 500.052 551.172 499.218 553.258 cv
498.384 555.344 496.161 557.43 494.082 557.429 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
412.565 518.196 mo
411.18 518.196 409.589 517.484 407.955 515.646 cv
402.757 509.798 412.937 509.798 412.937 509.798 cv
419.648 509.798 417.322 518.197 412.565 518.196 cv
level3{
gsave
clp
[431.934 0 0 431.934 291.224 500.575 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[431.934 0 0 431.934 291.224 500.575 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
613.442 507.414 mo
612.603 507.414 611.587 507.162 610.417 506.54 cv
603.473 502.846 612.977 502.846 612.977 502.846 cv
617.411 502.846 617.019 507.415 613.442 507.414 cv
level3{
gsave
clp
[431.934 0 0 431.934 291.224 500.575 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[431.934 0 0 431.934 291.224 500.575 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
515.84 517.081 mo
514.893 517.081 513.97 516.711 513.221 515.804 cv
508.638 510.25 514.795 509.778 517.022 509.778 cv
517.478 509.778 517.77 509.798 517.77 509.798 cv
524.247 510.498 519.833 517.081 515.84 517.081 cv
level3{
gsave
clp
[431.934 0 0 431.934 291.224 500.575 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[431.934 0 0 431.934 291.224 500.575 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
461.395 501.123 mo
460.759 501.123 460.041 500.876 459.289 500.268 cv
454.74 496.585 461.888 496.585 461.888 496.585 cv
465.186 497.106 463.959 501.123 461.395 501.123 cv
level3{
gsave
clp
[431.934 0 0 431.934 291.224 500.575 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[431.934 0 0 431.934 291.224 500.575 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
624.098 499.37 mo
623.462 499.37 622.744 499.123 621.993 498.515 cv
617.444 494.832 624.591 494.832 624.591 494.832 cv
627.89 495.353 626.662 499.37 624.098 499.37 cv
level3{
gsave
clp
[431.934 0 0 431.934 291.224 500.575 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[431.934 0 0 431.934 291.224 500.575 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
703.953 496.075 mo
703.318 496.075 702.599 495.828 701.848 495.219 cv
697.299 491.537 704.448 491.537 704.448 491.537 cv
707.745 492.058 706.518 496.075 703.953 496.075 cv
level3{
gsave
clp
[431.934 0 0 431.934 291.224 500.575 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[431.934 0 0 431.934 291.224 500.575 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
432.655 482.817 mo
431.942 482.817 431.469 482.67 431.564 482.291 cv
431.858 481.113 433.153 480.924 433.952 480.924 cv
434.33 480.924 434.597 480.966 434.597 480.966 cv
434.651 480.966 434.704 480.966 434.756 480.966 cv
437.736 480.966 437.843 481.429 436.888 481.892 cv
435.933 482.354 433.918 482.817 432.655 482.817 cv
level3{
gsave
clp
[431.934 0 0 431.934 291.224 500.575 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[431.934 0 0 431.934 291.224 500.575 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
321.832 485.472 mo
320.341 485.472 318.924 484.789 318.148 482.934 cv
317.044 480.297 321.836 480.209 322.478 480.209 cv
322.524 480.209 322.548 480.21 322.548 480.21 cv
322.991 480.177 323.398 480.162 323.771 480.162 cv
327.247 480.162 327.802 481.49 326.968 482.817 cv
326.133 484.145 323.91 485.472 321.832 485.472 cv
level3{
gsave
clp
[431.934 0 0 431.934 291.224 500.575 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[431.934 0 0 431.934 291.224 500.575 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
520.557 742.35 mo
405.04 742.35 li
405.04 741.555 li
405.04 741.555 li
405.04 741.166 404.999 740.786 404.92 740.421 cv
418.383 739.74 431.797 739.14 437.29 739.14 cv
449.996 739.14 520.557 742.35 520.557 742.35 cv
level3{
gsave
clp
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.53363e-14 250.462 -250.462 1.53363e-14 507.236 552.52 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
337.127 802.218 mo
300.561 802.218 li
297.426 802.218 li
297.426 802.218 li
294.787 802.218 292.593 800.311 292.147 797.8 cv
292.093 797.494 292.065 797.179 292.065 796.857 cv
292.065 793.853 li
292.065 774.567 li
292.065 773.567 291.791 772.632 291.315 771.83 cv
290.38 770.258 288.665 769.205 286.703 769.205 cv
271.521 769.205 li
268.559 769.205 266.158 766.805 266.158 763.845 cv
266.158 741.555 li
266.158 738.593 263.758 736.193 260.797 736.193 cv
245.614 736.193 li
242.811 736.193 240.511 734.041 240.273 731.3 cv
240.272 731.284 240.271 731.267 240.269 731.25 cv
240.259 731.112 240.253 730.973 240.253 730.832 cv
240.253 726.21 li
240.253 708.542 li
240.253 705.581 237.853 703.181 234.891 703.181 cv
219.708 703.181 li
216.747 703.181 214.347 700.78 214.347 697.819 cv
214.347 675.528 li
214.347 672.568 211.947 670.168 208.985 670.168 cv
205.711 670.168 li
202.472 670.168 li
193.802 670.168 li
190.84 670.168 188.44 667.768 188.44 664.806 cv
188.44 648.611 li
188.44 642.516 li
188.44 642.11 188.485 641.714 188.571 641.334 cv
188.571 641.334 li
189.109 638.942 191.246 637.155 193.802 637.155 cv
244.078 637.155 li
318.612 637.155 li
322.152 637.155 li
325.007 637.155 327.322 639.47 327.322 642.325 cv
327.322 642.325 li
327.322 639.47 325.007 637.155 322.152 637.155 cv
222.78 637.155 li
225.742 637.155 228.142 639.556 228.142 642.516 cv
228.142 664.806 li
228.142 667.768 230.542 670.168 233.503 670.168 cv
243.84 670.168 li
248.686 670.168 li
324.422 670.168 li
259.267 672.064 li
257.737 672.11 256.299 672.804 255.313 673.975 cv
254.497 674.944 254.048 676.17 254.048 677.439 cv
254.048 697.819 li
254.048 700.78 256.448 703.181 259.41 703.181 cv
274.592 703.181 li
277.553 703.181 279.954 705.581 279.954 708.542 cv
279.954 730.832 li
279.954 733.792 282.355 736.193 285.316 736.193 cv
300.498 736.193 li
374.325 736.193 li
312.335 738.309 li
310.638 738.367 309.026 739.067 307.824 740.27 cv
306.567 741.527 305.86 743.232 305.86 745.01 cv
305.86 747.807 li
305.725 747.744 305.568 747.696 305.385 747.667 cv
305.385 747.667 301.412 747.667 303.94 749.713 cv
304.358 750.051 304.757 750.189 305.111 750.189 cv
305.395 750.189 305.649 750.1 305.86 749.956 cv
305.86 763.845 li
305.86 766.805 308.26 769.205 311.222 769.205 cv
318.9 769.205 li
326.405 769.205 li
365.121 769.205 li
337.584 771.351 li
336.085 771.468 334.677 772.116 333.615 773.18 cv
332.431 774.363 331.766 775.968 331.766 777.641 cv
331.766 796.858 li
331.766 799.818 334.166 802.218 337.127 802.218 cv
278.178 755.011 mo
278.178 755.011 272.52 755.011 275.41 758.261 cv
276.318 759.283 277.202 759.678 277.972 759.679 cv
280.615 759.679 281.908 755.011 278.178 755.011 cv
289.859 738.962 mo
289.415 738.962 288.695 739.067 288.532 739.722 cv
288.479 739.932 288.742 740.015 289.138 740.015 cv
289.84 740.015 290.961 739.757 291.491 739.5 cv
292.021 739.242 291.96 738.985 290.302 738.985 cv
290.273 738.985 290.245 738.985 290.216 738.985 cv
290.216 738.985 290.068 738.962 289.859 738.962 cv
255.969 723.273 mo
255.35 723.273 253.639 723.404 254.913 724.947 cv
255.121 725.199 255.378 725.302 255.641 725.302 cv
256.75 725.302 257.977 723.473 256.177 723.279 cv
256.177 723.279 256.096 723.273 255.969 723.273 cv
264.798 714.07 mo
262.915 714.07 257.704 714.469 261.581 719.168 cv
262.215 719.935 262.996 720.248 263.797 720.249 cv
267.174 720.249 270.908 714.679 265.429 714.087 cv
265.429 714.087 265.183 714.07 264.798 714.07 cv
209.584 651.184 mo
207.7 651.184 202.493 651.583 206.369 656.28 cv
207.003 657.048 207.784 657.361 208.585 657.361 cv
211.963 657.361 215.696 651.792 210.217 651.2 cv
210.217 651.2 209.97 651.184 209.584 651.184 cv
353.228 675.529 mo
353.228 672.568 350.827 670.168 347.867 670.168 cv
332.683 670.168 li
329.722 670.168 327.322 667.768 327.322 664.806 cv
327.322 664.806 li
327.322 667.768 329.722 670.168 332.684 670.168 cv
347.867 670.168 li
350.827 670.168 353.228 672.568 353.228 675.528 cv
353.228 675.529 li
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
425.584 802.218 mo
337.127 802.218 li
334.166 802.218 331.766 799.818 331.766 796.858 cv
331.766 777.641 li
331.766 775.968 332.431 774.363 333.615 773.18 cv
334.677 772.116 336.085 771.468 337.584 771.351 cv
365.121 769.205 li
326.405 769.205 li
318.9 769.205 li
311.222 769.205 li
308.26 769.205 305.86 766.805 305.86 763.845 cv
305.86 749.956 li
306.603 749.449 306.806 748.253 305.86 747.807 cv
305.86 745.01 li
305.86 743.232 306.567 741.527 307.824 740.27 cv
309.026 739.067 310.638 738.367 312.335 738.309 cv
374.325 736.193 li
300.498 736.193 li
285.316 736.193 li
282.355 736.193 279.954 733.792 279.954 730.832 cv
279.954 708.542 li
279.954 705.581 277.553 703.181 274.592 703.181 cv
259.41 703.181 li
256.448 703.181 254.048 700.78 254.048 697.819 cv
254.048 677.439 li
254.048 676.17 254.497 674.944 255.313 673.975 cv
256.299 672.804 257.737 672.11 259.267 672.064 cv
324.422 670.168 li
248.686 670.168 li
243.84 670.168 li
233.503 670.168 li
230.542 670.168 228.142 667.768 228.142 664.806 cv
228.142 642.516 li
228.142 639.556 225.742 637.155 222.78 637.155 cv
322.152 637.155 li
325.007 637.155 327.322 639.47 327.322 642.325 cv
327.322 664.806 li
327.322 664.806 li
327.322 667.768 329.722 670.168 332.683 670.168 cv
347.867 670.168 li
350.827 670.168 353.228 672.568 353.228 675.529 cv
353.228 697.819 li
353.228 697.819 li
353.228 700.78 355.628 703.181 358.59 703.181 cv
373.773 703.181 li
376.734 703.181 379.134 705.581 379.134 708.542 cv
379.134 730.832 li
379.134 730.832 li
379.134 733.792 381.535 736.193 384.495 736.193 cv
399.679 736.193 li
402.64 736.193 405.04 738.593 405.04 741.555 cv
405.04 742.35 li
405.04 763.845 li
405.04 763.845 li
405.04 766.805 407.441 769.205 410.402 769.205 cv
425.584 769.205 li
428.546 769.205 430.947 771.606 430.947 774.567 cv
430.947 796.857 li
430.947 799.818 428.546 802.218 425.584 802.218 cv
400.316 791.534 mo
400.316 791.534 392.46 792.511 397.516 796.605 cv
398.416 797.333 399.364 797.632 400.252 797.632 cv
404.032 797.633 406.753 792.231 400.316 791.534 cv
336.028 755 mo
334.789 755 331.37 755.263 333.916 758.349 cv
334.333 758.853 334.846 759.059 335.372 759.059 cv
337.592 759.059 340.045 755.4 336.445 755.011 cv
336.445 755.011 336.282 755 336.028 755 cv
370.585 746.782 mo
370.585 746.782 365.303 746.782 369.162 748.835 cv
369.813 749.181 370.377 749.321 370.844 749.321 cv
372.832 749.321 373.05 746.782 370.585 746.782 cv
377.041 742.328 mo
377.041 742.328 373.069 742.328 375.597 744.374 cv
376.015 744.712 376.414 744.85 376.767 744.85 cv
378.192 744.85 378.874 742.617 377.041 742.328 cv
324.378 710.561 mo
324.023 710.561 321.357 710.61 321.971 712.076 cv
322.403 713.107 323.19 713.487 324.019 713.487 cv
325.174 713.487 326.41 712.749 326.873 712.011 cv
327.336 711.273 327.028 710.535 325.095 710.535 cv
324.888 710.535 324.662 710.544 324.416 710.562 cv
324.416 710.562 324.403 710.561 324.378 710.561 cv
348.666 695.538 mo
348.334 695.538 347.797 695.689 347.675 696.631 cv
347.635 696.934 347.831 697.052 348.127 697.052 cv
348.651 697.052 349.487 696.682 349.883 696.312 cv
350.279 695.941 350.235 695.571 348.998 695.571 cv
348.977 695.571 348.955 695.571 348.933 695.572 cv
348.933 695.572 348.822 695.538 348.666 695.538 cv
267.294 690.33 mo
266.057 690.33 262.633 690.592 265.181 693.68 cv
265.597 694.184 266.11 694.389 266.637 694.389 cv
268.856 694.39 271.31 690.73 267.709 690.341 cv
267.709 690.341 267.547 690.33 267.294 690.33 cv
256.424 684.702 mo
256.424 684.702 252.452 684.702 254.98 686.749 cv
255.398 687.087 255.797 687.225 256.15 687.225 cv
257.575 687.225 258.258 684.992 256.424 684.702 cv
273.258 685.207 mo
272.926 685.207 272.39 685.358 272.268 686.299 cv
272.228 686.602 272.425 686.72 272.72 686.72 cv
273.244 686.72 274.08 686.35 274.476 685.98 cv
274.872 685.61 274.828 685.24 273.592 685.24 cv
273.57 685.24 273.548 685.24 273.525 685.24 cv
273.525 685.24 273.414 685.207 273.258 685.207 cv
326.97 679.207 mo
326.616 679.207 323.948 679.283 324.563 681.588 cv
324.994 683.207 325.782 683.803 326.61 683.803 cv
327.765 683.803 329.001 682.644 329.465 681.485 cv
329.928 680.325 329.62 679.166 327.688 679.166 cv
327.48 679.166 327.254 679.179 327.008 679.207 cv
327.008 679.207 326.995 679.207 326.97 679.207 cv
281.51 657.329 mo
281.51 657.329 275.852 657.329 278.741 660.579 cv
279.649 661.601 280.534 661.997 281.303 661.997 cv
283.947 661.997 285.239 657.329 281.51 657.329 cv
308.716 649.986 mo
308.716 649.986 304.745 649.986 307.272 652.032 cv
307.69 652.371 308.089 652.508 308.442 652.508 cv
309.867 652.508 310.55 650.275 308.716 649.986 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
277.972 759.679 mo
277.202 759.678 276.318 759.283 275.41 758.261 cv
272.52 755.011 278.178 755.011 278.178 755.011 cv
281.908 755.011 280.615 759.679 277.972 759.679 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
370.844 749.321 mo
370.377 749.321 369.813 749.181 369.162 748.835 cv
365.303 746.782 370.585 746.782 370.585 746.782 cv
373.05 746.782 372.832 749.321 370.844 749.321 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
335.372 759.059 mo
334.846 759.059 334.333 758.853 333.916 758.349 cv
331.37 755.263 334.789 755 336.028 755 cv
336.282 755 336.445 755.011 336.445 755.011 cv
340.045 755.4 337.592 759.059 335.372 759.059 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
266.637 694.389 mo
266.11 694.389 265.597 694.184 265.181 693.68 cv
262.633 690.592 266.057 690.33 267.294 690.33 cv
267.547 690.33 267.709 690.341 267.709 690.341 cv
271.31 690.73 268.856 694.39 266.637 694.389 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
255.641 725.302 mo
255.378 725.302 255.121 725.199 254.913 724.947 cv
253.639 723.404 255.35 723.273 255.969 723.273 cv
256.096 723.273 256.177 723.279 256.177 723.279 cv
257.977 723.473 256.75 725.302 255.641 725.302 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
208.585 657.361 mo
207.784 657.361 207.003 657.048 206.369 656.28 cv
202.493 651.583 207.7 651.184 209.584 651.184 cv
209.97 651.184 210.217 651.2 210.217 651.2 cv
215.696 651.792 211.963 657.361 208.585 657.361 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
263.797 720.249 mo
262.996 720.248 262.215 719.935 261.581 719.168 cv
257.704 714.469 262.915 714.07 264.798 714.07 cv
265.183 714.07 265.429 714.087 265.429 714.087 cv
270.908 714.679 267.174 720.249 263.797 720.249 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
400.252 797.632 mo
399.364 797.632 398.416 797.333 397.516 796.605 cv
392.46 792.511 400.316 791.534 400.316 791.534 cv
406.753 792.231 404.032 797.633 400.252 797.632 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
305.111 750.189 mo
304.757 750.189 304.358 750.051 303.94 749.713 cv
301.412 747.667 305.385 747.667 305.385 747.667 cv
305.568 747.696 305.725 747.744 305.86 747.807 cv
305.86 749.956 li
305.649 750.1 305.395 750.189 305.111 750.189 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
305.86 749.956 mo
305.86 747.807 li
306.806 748.253 306.603 749.449 305.86 749.956 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
256.15 687.225 mo
255.797 687.225 255.398 687.087 254.98 686.749 cv
252.452 684.702 256.424 684.702 256.424 684.702 cv
258.258 684.992 257.575 687.225 256.15 687.225 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
376.767 744.85 mo
376.414 744.85 376.015 744.712 375.597 744.374 cv
373.069 742.328 377.041 742.328 377.041 742.328 cv
378.874 742.617 378.192 744.85 376.767 744.85 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
289.138 740.015 mo
288.742 740.015 288.479 739.932 288.532 739.722 cv
288.695 739.067 289.415 738.962 289.859 738.962 cv
290.068 738.962 290.216 738.985 290.216 738.985 cv
290.245 738.985 290.273 738.985 290.302 738.985 cv
291.96 738.985 292.021 739.242 291.491 739.5 cv
290.961 739.757 289.84 740.015 289.138 740.015 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
348.127 697.052 mo
347.831 697.052 347.635 696.934 347.675 696.631 cv
347.797 695.689 348.334 695.538 348.666 695.538 cv
348.822 695.538 348.933 695.572 348.933 695.572 cv
348.955 695.571 348.977 695.571 348.998 695.571 cv
350.235 695.571 350.279 695.941 349.883 696.312 cv
349.487 696.682 348.651 697.052 348.127 697.052 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
272.72 686.72 mo
272.425 686.72 272.228 686.602 272.268 686.299 cv
272.39 685.358 272.926 685.207 273.258 685.207 cv
273.414 685.207 273.525 685.24 273.525 685.24 cv
273.548 685.24 273.57 685.24 273.592 685.24 cv
274.828 685.24 274.872 685.61 274.476 685.98 cv
274.08 686.35 273.244 686.72 272.72 686.72 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
324.019 713.487 mo
323.19 713.487 322.403 713.107 321.971 712.076 cv
321.357 710.61 324.023 710.561 324.378 710.561 cv
324.403 710.561 324.416 710.562 324.416 710.562 cv
324.662 710.544 324.888 710.535 325.095 710.535 cv
327.028 710.535 327.336 711.273 326.873 712.011 cv
326.41 712.749 325.174 713.487 324.019 713.487 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
326.61 683.803 mo
325.782 683.803 324.994 683.207 324.563 681.588 cv
323.948 679.283 326.616 679.207 326.97 679.207 cv
326.995 679.207 327.008 679.207 327.008 679.207 cv
327.254 679.179 327.48 679.166 327.688 679.166 cv
329.62 679.166 329.928 680.325 329.465 681.485 cv
329.001 682.644 327.765 683.803 326.61 683.803 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
281.303 661.997 mo
280.534 661.997 279.649 661.601 278.741 660.579 cv
275.852 657.329 281.51 657.329 281.51 657.329 cv
285.239 657.329 283.947 661.997 281.303 661.997 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
308.442 652.508 mo
308.089 652.508 307.69 652.371 307.272 652.032 cv
304.745 649.986 308.716 649.986 308.716 649.986 cv
310.55 650.275 309.867 652.508 308.442 652.508 cv
level3{
gsave
clp
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
/14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[8.91401e-15 -145.577 145.577 8.91401e-15 309.693 799.775 ]ct
clp
/14 /Gradient get_res exec grestore
}if
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 
/10 /11 /12 /13 /14 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.2.1
%%For: (Lenovo) ()
%%Title: (2212.m02.i012.n041_e02.eps)
%%CreationDate: 2/17/2023 6:07 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3-$De+WZace8=@J\b`QQlNn5'#E3G'9"^gU]G"jXC/7+_t2X?\uI-b1A22%h"%P[;Q6S*X1Gl/L[(:q>ch9`QE',Yg-<b0
%91^_(\s?5/;b^u7p@hoM1G;DuI^?(S`md]f7Fd?nkpFP')9oGM*AsVF[YYf%CP?rNYI=-C[=[:Pk%j'^UUco;s731hD==!DnP\iS
%Ek1m"Pq.3896qttBqDDmb5Q^h;=Rg=/#+dp5N.riRe.@=^h8DV-^thP*Vc`P[>f.#prr_,:9KbQr60TEpWlLW<l8^<C=UZ%.%8u!
%"R6*(mYN"kflB]]B9%F7Xnl[:]A+$AVW(MGYr/-TMM9Pt*KVV_APklG5>(F$DlOHO_Il`bIrVaM:\_#foTUNag"T_"*L\BA?"KDq
%ZPL3Hp/D%5*&eKM4S1/sZIeZX#>LCab?_(3e8^php&Tk#;Le1/Wp++(<H1rqL2LR%>>Mf,.Nka.AfT&*hM=8Ms&&?:/uN%P?I<Zo
%rL7Z2%SHb!5IulEYt[Y[3Js,B'fGc7^KpOP8(CLq3,11l'n*Gp/,Egl7Z:unluB4%%,cVf&r0fRgi&>If#hiOd5'5drjL:YCjEdC
%#c&A<Z<R((LUFVHi^M,"17G4'.G[fVWo:H:-0*^^C>%+Y[[V:P47#pHU&J&7WOKc;J._RnR_YSa4d+IR7d7Qb?!_VD"tWIXKR'=i
%.`Sc1'4\sF9N/rnrjq(GT]sCN<m.\$[&D\MITm^*8nRr#<NfD\q-!r-e&9iXNJAtmQ#c7Spbi&f^Cc?H4eRK0-Ta23Ti;3T^]3""
%^H!ZgjYm(IdAXJ=S(4k!hg`m^MmZJJp!te'C(9Ip@VYZ0)h",Mc1-Ta*B(P3iLoX:R>b4Ic]:=^F>j&]pm'^tYMoMbnidLqdO[*S
%!F;c*nB85NKNOJN$H>6ofK,-kq@UH5i^+7J+U+[6Y#H/4\5>u&'hcKM!OW@gF7@Xo'eZpeVp-aB=8&Y#UT8tuVSaVjLq/4kId>fi
%E9=iS\TH]tl5-9`.bA>m02dS5=ueq,kP(nnq)A9ZD[rt8fPtn3WflpE*OJHk5H^nbWPbO.%PGCT^i@JKhrp!S.c0J]8D"M[1m$,u
%mp)!*S#@obX'\Tnj'A\HTYR)^=%DFL;*=sT(=j[s<VEK4AqXK<NU^J&$J:WtrMssB/!l]i\@E5_cYKm[KsH3tX4d&6-ps]I;k$cf
%B[Al$=t8EI[V?P!Au+UFQIstSq4Tdj8Tn#g:B%MW'2;I`nh*,NOZ#sG2cCWC:&QVC/`Y<-g`H'?/=11@()R#Mb=L`pZK9eRGf::5
%^?*l";75[ha<[;]TTl/7KW.2+9Wsc)('":!j55>Lq>2haV$>Z7mG]kad=VZu;u'eu?T_Eb6Pt=Ecej48j-COj@8[3Zoi4/YB6AtN
%>;pY0fB=@o:0XW/NLj-ro(6IFa/(.&4\keMrE&pmC/<IpgU)*-Z.?%iQ(uC)C^Y_dbFhA#8%2GjTgpulq,u`j[Hkqicej5kT<Is-
%9,)9f]"W&Y*RpO#HekC9V'eo3Nh1XfX9R!Sf@/mn@JnA7+^8u&H%l$2jK6(cGOsL8/t^In;<8-J.eO/Ago<XNW41uqK?*5$h!k.:
%YP@]hT"$)L6@Ea]-Maj*laf)8:Hu#p>82B_Q309cn72$!nRHc+:AFbc=8_kD:XB_!204prn48-qX.#&?m]DWqnZXTFq!K$?<*X[X
%QK^At6"A5oK<='3\?I?qs(7:=?%kTaK)ugBK2Wf0%F[4?M`kk-,k_4-6V?8Zfd2JECk['elr5o]65%AdWn_?j^I%m@Fe*(RcrjtA
%c:[k-J2,PoR\]gID$\B7FJMY-dL?BMG;Y?OAGbUE_?eBj%0oTt)NQ@L=Tdrb$Z4IP=jiA3U_P`7QZh#EhpjF/e#g)]Rh8-@D5!gO
%SHmCE%;<%*Zq2o;46B*f.ASUk=_B&N8((n#&cWBL>c@=g!MKgn&YU(ZerhBE90Hh/mqJ/LVc.@7\r8=0Z[kp!FO57Nks!OGe=\\I
%LH3e@0'PlaoV@dSEbf)VIS[k'4Pb=A[2EBe\kVBKS`N@q"seAn&HR1*M_=6aS+NLB18a^-X?Ra!h&>WEiaI7YFY2h0WB\h&r8)qS
%;NB.39+ehgZV'kP0P5reZb\"jqCZ17V]7pHITT5<h_f`2<>#R8GH.\%Oh@o/*g/Nm$COrm)a&$1jS6jgK9<NYXHECjDQ9R'O)>l5
%Bi<9F/kL;ZFj`>:+O_NnQ:lO:buS[Ko%9+Ncu`0&K[GYu^r7Dc?2S^+Z#,j-O+4KZNh/B3?+&;*;cDn`b,X<?86,Zf(DY.T3I97;
%]t6ZS$)?)G;5Hbp:S;7;T2g>2Q*'03af^cYXgr5m)UYp(`L^I(c`24D-DMq14lT8'+&Z_/*I(7Ya/$bskrC>njqKQOCY@6SSr.)^
%>FJ^S")1,VoO-P#8mZ":&'PK*l$CCV-9]4^jS@bhZRU/>r.3'o,SgTc3=1L6_QlX?6Z,,NkH\K`IC-CV(8$km!Gt=O6rb5#A'"b(
%ilbG]mV3Z,);oB2-S5;>o7[*;bk%']rE#P-RTa'h%X==8f9?;sg@`O:o]S#]`sa',BPQm9Bf81P(iDi3RgU:j0+<4qp($%'W^-g\
%kO61<;`+<R`K)$%/8_uA:HU&4^5q.D`2_Q#*\2JOIN3h#%q3\m=aKWYPT_S^'E<4YB6k,ZM6P4#Z'"-fT''aOU0AHePmAapGd*Yo
%n/YO3:^K-[%r2mZ.X@:H;DTCF-bJibc>(X]Se1<ZO!CVB2u64#1/LB48ePl2-ntFhCVm_^9@+G:jIihnZhP]=^j5u3JU9p)a\c<>
%B.XC['m:dDFt3%6,2GP76])'S?-f8VI>mY=N8\EUl[cB\#EQbuVf*`kM9(I&(BGV04:1cp&4JrD<AN)SR:hdAS*I"V25_(4lC&Up
%n6O=^O...QQLr*=M@hssi..$c_AlO//'cF"gi5I7F.OED*"*R/!PMpJPAY@GA8mU'k>_(!qNQupC=).;q%6L=RN=@N+[lLM4LOKP
%_T,snT!dJg"EUmlQ=L>U\*jMb7dP[356XCm.KbXL>h-En`bZ9/<`pK6o#qi.,??W8cgcsZR%MN`J*"Os-?%'QY=gf!:N38-AG&(U
%+%(AHi$#aadSkcg9KB9IZc8'i<X^#-+$rO%IO%'qc4GL-/cH;ML<^-+jbZWT4_s[tr\1NS(Qk/;noB%NWCECV?p][EQA^GeLKY%k
%P9DY]pk-QZ&7L9iRMO%ZoUTeERmYfPO>\sB99pPm@:iO)>=N,VA5ChdWg7A2D"rOLCTnP;bE.-O$m7H-$A&PUX_'!H1],k\UbQ5q
%!;Bc4<>G&a_:stB;RqJroqgknC72fLgYUY`'n(I)/KM2(_0Ke`T1ZXd^d\1m_^i4pq:&n(Rr(!p?[r(+8mJ02;(<A$I[*RMSb\'.
%`bE'O<t"Xq?[V>_\?ME*g*G:Dj2]`SH;N4.WISQ,YL1hC\JA1"!;UOj[c'1"jjpABC;8.iW@G)?85Itl^W?ZDQa"'AIE3;KZ/6`t
%1i5o3`@o=9Bh?ZKD-(lg/aioo)\Y)LQ/+8sCBpt>X)O1(BhcU#XYo.6XeX0Zi^c/!8J$(12?!3&s1M.Dr+g,EFk->5Gk&i+T_!Cq
%6'Jbp>a*;lW3mQJIm`RP8></h?p(=c.9692]O])#Uhm2d%]u(ZJUIAI12:sHiO*E[Z-a1c3-r(C(4>g=Y"e%Y7@?`!\JK_Zr*k%c
%5-1nWaX0?upseT4?4rFdOe8IZCQKi:SrfVRDITo@-eWP=_E1U.;+/Cnl(R*Z$.hCOUZ%hO&o,'N<8),Z"@YXGnV6&.dFM1X#kbd9
%lCXnR-DB3X$0BGN*X*,:SQ`"<?\1:J'$T1>?nN%D2MpNBZ.pUjS&B?haS[<LlU/lAQ:j?+9>k&&`,_&Dm_6Y\)d^/0/:#cN\UAm0
%??e@j'(:BYF#o[gG;2!M6o?l,`Duq.M3#K61#.mA]n)PYp[#!GO6j\I*]AlI9Q>I:7'Ve7OjmdLiA$ru=,bK!(AetVQI[4:rf1Zq
%CDl5jl\<)VWS6(;8lYB%qI,L^PMZ+k@o5mVN.8l;`kQrC0GC0ig`H;6:C[((Fhc9UHOUa3cJ3D6P($3.#Yqr![Ke774/.0c-n5Hb
%^KBEq8j=s5:QYRQ5P_?B^(l[$[Vk(;g&'982pT'fIo,XS8PhpRh/oWQW2XA_pt,MEf;a:BI'VC/E=[Uld[..;Rk=(5k_gt*J^EQU
%QTGgZL(gtdYZahM_Ig**F58?+G>JAeU8BU:Z#p;Ol9A27c_>8#Y/04ml&oiG';M0ug>ZXbpIHGT1K;AlKeN<OiC".S%3(OBL<6)p
%]nZM_HYMsfV:J)SD^D0fm\+Vogn\ibNH60YYK`ji43'F3>;U4FkPBNN8Rll.qI:4PPN;"Gh8*XWWuXllg3qVkPYe"-Q9@o%s+arF
%\F>B`TD.>E8lA!!RoW.!oe)m(>,-Ot/FFa<j^aF5cle`E%]^h26[O3md_b9q4T0U@#q$s'2llt9-!\#9M7RSu)Oi.YgSVXOdlG3S
%cGN>?f3M?^f=Y7.nQtPt]a*9c1m&(2[OA4=)K(R^E0&sKHpV+Y_h00OcfB6XNdH#N5FMM]@1OZHI=%1-"GtPb+uMY1@e[X+RUEPQ
%XI$VPO#n>j^&#YK%C8<P[L<&j#TE/LhYu8S:D4o5QIsW=%*qZ:$V@3kDV0F+-aGXo^[S7'^O4t+q.d\7/_0JmgeD-6OTj%"U9D&c
%)_a;3mU_FjNEh,5F*!Ph=M!IA-]r,2>G@oD_`I^uKf\apkc(/7C<+@?#j0"aF19'PY"'K#aa?k#>1'C:.YDBRDom1uZUV&P[a#PO
%on;L\L;E?'<0,=+P2'#Z]8mbja=K]Z2Ei]pl_=Oql&&F>I#M)aW3)PRZ\IrKS&dGA=fGXIh[nbh\r#t"5J:E\oF75ZQIctSlQGKY
%-E5tq*(:JsH,X6l<VeF6#9p=TS#UM.l?eBS[AFeUY[&3]&NMS?iX3;SWn+2loM_I1Y-`tc(10F)8QBqtFbLf(^IMU4q[SfE/da[U
%*UOdTM;lO<r$rqWo7k/m7'->=$0.0lk(Y7_Ou_Pe8R$?I4&MNi:6\tVZjQPA-V?/4gln.aS)&pa:flHAi0`k!\^f08an3nR4"6$1
%*Da,<,j^"TXus?To/!P_./1R_-/p?1MS1Elqm7.c+k(M]HVosjPK@-qs$4tB0?P,*c8bNl,W(g)396Lo7Cf82cA2oXpN%u[1?*QY
%B6;/!8s<(agouCB:TH=o&9H;6+HofoTetZCKOtP4jk)H0\CL<GpI%@6\<ENZ?d0M[k;u0\g&:>NG/&^O\_6=ulM\lnQ`nr^\\rZp
%hK3Ks1QfD>gesTfk2Q8X9Bk+"(Z(cPrlH_4gl<(Vs!&tjDT^'E)mma-5.RF=7MEK/^SBD^M-c\8[GTMMM$V?oY>+ZC`*^-6?Lo,D
%JWjpa[?c>H>6BL*hV(Auh0,oDT=hRg<Z?rtS+paYeS8UI?BWCtOuooZi!.5_glj,[E-'Q?(tk*]2!/52#fe=1k_b>1p(U]P,Wr[.
%gf%r[?."n$C=9jhMZ0d*BDVW8rK+T\>D2HBI]A-0W=;O(1s&NN`ne*%o2CpS7K9Gg*IQcCDj",p^"2Hcon6:SYNXf_e6C0YP&DX4
%e0O_<Ff4(/:>>b5MfKp2DV`PCj*k:oH(*)KkdTVD85eO(n/fFGSLF1McFR'A[H:jE-%SDe8]fTo*sE#i[G)`ZDXX;(\;'[M)pV>8
%:epH)P0+fp!f<H%],\1CSU>XSWp<[d2ltC>3Vn.aBNa73]#5HB-2/iK@5>`3I%'i9O!7?So=n_OP0A.ge?dcR-Yb:D?DH#]W;*K*
%D#HLRP'?DsB];'lEc1MFRW@f=LjPtJr:41IqfQpL1Y;VES;HREdmZirM:deb';!fEf=l@2EDY')qX9t^s(+40$F$D/,UTj]2;^Wq
%A[:G[=nA2cq-O)in)V'VadV[/br9@?BX6cIMl.=<CVKf^CVG!EOLcg+\Gl'BjkA%Go7l^8=(nQ./*%A0c>+pp9!tt^>&!cNQ!2)+
%%\0np6s,WYCD(&M,-4@h22SQW*FY4qjH80#=MP@OP;)=K_lVB$l*"i;lRGIes4h7-&t,Wir[h.(@n^,Fe^lC%<[-W"AL]oFLL.!#
%[&=EKR^9>De)(L%iFGI@n@6+ZfQE6Ao)pMRiTNCd7,lI7j,=tPKCRegekp-?>m]pR)_Y>7F^>GUJahf;<Ao9c$cBUBm2qK=6/n1-
%UZ<ljY4fI)RE:]@ND(2n'1?<P.%!6YRA7lgd:CD`qP]fU)>t^]P:<9KPgO$aBJO-UR52AL.AQGFDV_.6q1!hXl_*Y^8Ad82F'i"<
%qe??5\mL5TeU'ApPRLtdVm$%t-YHnI;_5TspCN^JrX.s/q]&LP`P%l:+9O?d6+W5+F8\VQ'@r!R%=\g*rk=p0Sg9f8NLCuXPM.sb
%CuW/Tm_9:c-H`19SlZioQeY#`S4pEICncb3Qd'I&THo`rA!1A3@N=iX-Di%'n\d%,Aeug4Qu87!9KXMjA71iCa%6K4*g<%krgRG*
%qNIe81&KBA-$Yd-)^j=*-J=a*TmJ0O#(AWV\7b%1'%*$>pmh>F_6\K3f(?.a02Ni/q@uM,?(9X3l!N%$=DiB--drf_N;,8P`BScU
%$C4^@qM&?N9Gu`X(7PFcf@d@:0$:_W4`_."#Uc>/'gg6!$a3\03Q_,ES)_dcKJn\6mZ)57\bCIaU&F66\`O1BR7(_tA]uON'pAo?
%&tr#DZq5poIl_-RU!9RJ16Y,`?MIS^qO(IcL=LENM+,rgKUhSC*IYR1eOZQ5I[5k$4Q[R3ekJh#"`PQLSs,>@nbH)]>cGh-`_FZe
%gp%8V8g][AT4a-eAUFQqQ$(:I4\<&WA.hHQhl;Zq$rkbO`?aEhTKmU^E+kDRBHUHAKL:7?:U_k5d&GXhf,O_`[U1Tp$8LsY^7c^$
%p0kRQg+F%'Y0W:\gsN7KSO=_952DB%S$RiNBR/^1=t,l'O.pXSnnOncP4,"^%W@QQKMlYgG,]h<N,cnC>\1)j3G=[]Kg@L<^U[5J
%9S]J8(hr<7ZSs:',YG\+@Ch2`Un+oR[Ng"c`+hVbiF\(q,kFSl12cd\[@:>r^jL(D9B_&eAAd%!i^E%U7LLfJiZ>YaX\g(MCQ<Q^
%Roq'jl8W'KA`BKAC*,;^PrJ52-XQ)on5<9J?>Y$\L7"IdoTE%3gm1YfZ);n'.,EBY$AFZ-SB84+8MiA_jsCH`M'!h3`,jstk7[$b
%8N:qKFl"C6qf?d)iS5]KRtPkW17V!J134)R9u=I<(=%mo)oJ41Q$Aqm0dLpOrath5+q`*GXi*)Us%24b>GJbVM>qJ(19M'*MRQh2
%O'?J'QYX!k7/m!7d%i:]^*Sqb#&]8*)4+.B?K#oN,s\lL="(J*/LNAHfPLL)k<5c<[VfOflb**ZMT2lm3jHu?=l]<B@!Ii1l>sj!
%\4o_/Oh\Nni.#T-qNag6XHrWjk,k[X0)p]#5)Ds,HN09\m4hAH7eLn^-XZau*tHh(M&`Peb>`ql1C6s=UIX$7l/s!<[t8D.YAF9p
%PGgOY$UJ]f2j!)8V`-]%'@F&/G2pdsp]gt@S=rYIV;65>Gk^0Aam,hr>,Vd]2d`Vk%3OJ<<Hl.4eG[$N-q?oj:s=j86EB/Rm&kNk
%c/!_bmN,J\s)huB+Lm\ZiltcRRnNMlgKW[bh-3)lOjP3Cq:\(+>1F^icd5nd[CAV52.QB;H7PRH7<`\X5Ok5V-Q50g%6rNnh2dMA
%38&_TRNN2`HTC;;Ab+Z.Wqqd@qm.G#R6DLqqL8s&@e>R:`LZ_s80KA0/`Y<sQ[P*;OqYYjD,:l8Ub;s]\VC)[HYMsfV:J)S:FKAt
%`&K)+"aCQ:A!2^o@M^D8n[eA^c.^.T"6(9.NQDToM/BoU[P;c[3k9%qWci+3^<ZEGbh_t+rd6_Cgt)tk`=tN1li-:6%(hEmfKDo$
%1q<tPY2psuUm_1B',ot9A(r4r,>VkLYprOMq;&8%hk9[#LMU;,Mi,/&XT.aZ$;W+ee*g3<8V1+u4?bnF<d+X\@Z3lBmYf84:Cm7q
%Eb,+<+M-\T)2j>268tD[j6f^lFS<h)aHj)XcOMPa^I?%.S^JGu1>ipYmI5SdE5%o0FQ89CP9"hUe<s'X(u6C<E1cR:<Kju8o,^!C
%ale%d<t"oW2XXc*Bej;q(/1Q<WC3W$R3cdl4'0j-k7-X"#hd3caK?Xr)*=[j-=Z]3@[<L>fi>sarLZr!UI%ft&j0uTe`POB-Ki-^
%+mD'tep=<8a-V5Bhpb0EI<,ca9rs!&I:9bU"&kD_O4u\fE<g\3-9pkrVtVEZn<U=lbN6@<bl4!Af6dgdH*?X$>#at./P$3@a_eQl
%l*sbESi=;mm+i+`E_8s>-C5i$6//#:Ji&\I<0`ZTC,*:.M.%_r-Tea$*]9IOW@S8CS:=kFb.mlQf1qldF2W!DjYm(Lb=mW.(Mfpt
%.bA>m02gP2eN<LEWSL%+Pk_1!;rZEA="]ibKr5k(4fm2V9D!/7E7*k3V>4(;BFkd'fplh#D*[t`_4VRho>Wgkj8TgIs%6)Xm<?Nf
%fgb9-l1peo=0J[4T2km1KA[urK1FMg1J-mB8LDX;6)da8qb\L_[>TOO9n7KFH%>8158d\UFi-a!)9^N(e&;R82>Df@fnsLk#?B;k
%c0Y4uR#[r<hIV6cgfX@>(V[SW:YuHOPPC?q:4<&AUl'ZNO8CX#<-==,a9Q#oa0ItBi/g@mBVt0BA\Zdd"a,0i9TJ)cRL1N\=*9o`
%>9Oi3E#$nWm@^S&+86(/Zdmuf)e'o1GkWjngA/YDJ*e!IZ#B&to.:,1s$ntn]]mHe>R'ucnkY*do_1NIIJoB5/bia-(\8rIrqE4%
%Mhp\\S6k?9,(D#JUmLksK3snm=rF:<T<,6-TS$tb)SK<)Zn$U5[Hb/U7l)Mc+TR+RY8qAD!0W&'3>lB>W-i+grqG7iA-?O?k'hQ7
%&uJl')Sqi*Th]s,*ZAkNnD!!h,\jmS5qt]l%fF]YrqC-mD"ue%[<YY`2d<]4b"1FNb#A@iKr,CR:4BfZ_HQhY%oZ'jdS-+LjW?EK
%-0fo+77k20&3:ZAg%@Q;>.%BO4^E,?m[%^C97LK&OuW'NCAZ-*Bo/DYdH;6n8&J3MlnC;,-<.-/=[=!f9"U,"I\R8;RSD3fRBpM9
%<4H9>ROJj_clCVD]/Vm0L8Z6&[-rA's4mOQboS2aajM_L2gpU]Y%B4Z2\Vp)jFh"%`;SsoQg;.!gJkP5aL]e6A)a<';iTVo=\=F#
%81,SG7S_AXY?Um%7DgZXX8R6g:2;HPW42]2eo%7)5'ho3EUnDpE8.M92<jF.HYXSd[78-IFq5BFD8#E<6'K'm]lL)0IQ\IsgIDa<
%KEaoR[S9d!_sZa#4p!ern)qSaYOeCI*664H;-Oo5CJm=\=&/_RAj3u]W1B2Ch\;/3R6C4MUKXi[C?H&@fe!(=5Fig;?R(Q<HE1!o
%rHeX_[8_3sGtl6-^r7VQ$G#TbpO_M,'*tUB?K9gZ;+QZql"c>I&i+?qNS[n\HRJGDTV!AEkr/G?ktk/WF[Zoi>-9meaU:QfY<H6a
%r;F)_2U?i4AYt=Lq-TV))WpM`/[+BG"s',F0km"-#&A7S)s/Kj>H-c*SWQWi;cQcD=s8m#G!36>L=]K!)lYtUp3nM<9u3i!d'A*R
%DL'e([Wh/;p1j8D4m'$=$2=tLf_FF'%fLl\WO637jdh\_O'e#A/#fkR-&$B=Sgr6o/G2f=iL^eRc1mR.7IhB,YM&IcMa.,+X4Bh4
%H=`.98r9^tb`%jMB?;g5S*TH^3@*gjhe5?[ZpMOXF<]JS8&*R\.lfm7NDf:W+4Ehts0Q8/WWS'ULW%enpl.>cELS2oY-hKq;UnQ#
%>E.?Je>#ALK4qll/cA'`=tHPCQ>dF8K?oKeS(--9f7)?gEEBcG9Rp2_7#7/_npgGr/%32]^"oTb,o-*QX\t$1HP0*WNOc@`(Ct<S
%[ur6,r/nTVrjc*EG,i7Y^\lMq&KeGr"g8@1DK:=-MD?YUm-ks`WuYd5h[dOm<8B'ng;uXoee/;=C;p0_jESO0VB_OkgaLcFK_PFk
%]A*f*cuo]K_>8.$O$Reg94]'Ee!el:%V/$f5dbF_el4G?0!N#OgtkZb]Y`cU"-^qX3K-lt/*<Qr9g?$g_=5c/V>'hbS:9,0RsSHu
%eYeFF9^8;4[A:d8r^C>[TKbB"hMT0O;IYPYLY#uD.phrW1a#A:Zq;TF=+B7AX\nr(<c(:oW-oL&]sLooPhSVHQbb*<UI0?7fr/bM
%MSR5SEgTVFr`.gK%a?(8%.9.Si8NrUk%J,E'C8)s.YqE3e6B]YI^pFrTFH1%j^[&GA&,P4&MU;Tn<Ln"c;Z_fF#kur@&YH[:9H*O
%_,PM%/d8>U:Ptn>D97V.Jp4;s]gEd7O>LL2nXC!;s7Ab?:L>qGR;m`J7C@In%q\C?Y-5;"oE+7[l'7cgiVb/nR]C43`CfHhI<npE
%@rLK0;<d?s6;#sJ+>q.=*fP>\:hPc4bmn)ZId=D'hjX7CY;olplDV1Hb3t.tXM4ODe6>OPNABcNmE_57p.4RY:4s*j#r3k5=lR[Y
%;3X64IWeAMjJX9+Pr^NtMm]/Z%"hf(gFMn<(NQ4EC?_@.&uFJYK,f+_8=6F,]C!945"i$WX4LR3l<t_<r9Q3".t+gSpQ'?N+rBHX
%Vso;s4N/Yn1/6ShHseUHX&=?8AkJmZU_mSTIN$@Gqot&K5)15rr'Y;WDq<(u::hf@7:CG,.T%q!0=&s;Of(^.h,FbpZ0P]u8Usb&
%jR]:<n_c/[6S`%4:"H*eO/23ViVOjgHWdHc0$2.0U%@PN7=<h0NCUh@G,nBJ7W<5jM/p3u(7*[K>.UJ!AOF#MHds3E;po$D/j&'p
%Tn,_P3=9Vlh*[i,+[H+WUQrH#]p&hS<`iM\.u#&\.OQF6`uV@.btE<bUpBAg/`LFcYKoqn]fIU2AuX32bDqiKOD>GWC0I=^./LnH
%Uo0N%C9>e=s23@&6.N"X?]Za>D0S;*@Bl%IKsbJ&nsc,/\On^pH#s!Z3h9Sm]6g`%-gCBOT'<:K].`!*F`4/I1j<oI4h[\qm%i*i
%@jO9R]\J"A]_eGbQI`N0rTigaDdTTlDJ[l'rV,2kHN*5F3rS:$<'!2:C5UA!k188S^[WDG-EXsp]\-9K_h/0-*bOfck@OKDo7m74
%E].qkr!h&JfaAKJ?bH@8I@`VbI)o[H^(rV6iTgi#c0<NrF*udYKb$B^QLVAu?aJ#s]hT[3VL\S9f%KqD7\Ah8ip.afZgf`5I8!uh
%U"%Tk`m!P):7iTri:XL*WHl",YM<)u27('MU^rA5s14fr)rL2Y#[\D"^-;EXLCYI)j-i!qij?O/"Z7p?bq^ehJbArokGS>`+0>=X
%g?G:d[Jj^ES^$A&cQDD^V8^.7iV2KYqHE<L7f8kT]QX-Zq;^bn_j<0[YM8mijr3hi-hQ0r$eae:KsnRlDelBa4t\?mhl?SRr]=>6
%d!/u%Y=e!/iSs_Fg0/eW[rbJm[Li-=]oN,48#$HQc@RZrFSS3&V-b<$Lca'ai:Xqn"7\Fg?P07J?[j6oALT/m[>Z`l4eZ4@pYuJ4
%/2Xmr#L=FhdnWBgaM%VXTA;.aT?XJi9cMl^\]jmD0+4i,/t];kf%rRDaF1A.jt<!YO'd9a?ckqQ'r0T=]E,@WK&Z.YpM?[LhHk];
%^:A#^Y7#:?V5Gu5(Y6%(e/.#7([Qj`Xn<]-J']hGqsVtpX4QTiB<?n/E2i\K3IC8j75\F50B22I?2=+DZg'KAgM7nVeoNL1GJ7?8
%]foXSm)hikW2i)9/"=eM]5+=ej*(.hqrop%cYj3%7JG'Ie]m+96UI+i^F8EYZ8lu@gIodI4khB$WXG0]B+1$(2m91JX]kFkS\A4I
%X_DDe=gbNEn07o%2!Z])VH2"Y5O#5ZmHnQB*?4Y7^F[V/VPiV-`Ure#Totus^AO9lY9"W.]T%;"rVTY'/Y*50D#ViFWV$,6]C4uS
%bO-SjG1!p$,T+49TCHcEIBM]\s'!I$jb4Mqq/Zd*/OIP-Zg"IBccbS;a/_;d#MR%/HH)gZ4Ss6P`$fl?XDF]qSsM[=kLU2YksqpY
%1?jKO;n;P\[pS!h(I,$M94q!9kL3)eV5J%(ZM,]J2Jk[\:U_C@p%FN52J8Yp8m@@S^SG`>Ulfh,D!PeZh0>>o5"^;rY8$b6<;PkG
%Z(6@;m+$"Mq:hh1knd?B+e;hd[$o9iS3BNJbr-W=fD!"o8AC[oInFYIeu.!#(YdX8Q8`lJhKcghTAH'F2UcS>Z_d<1k-gC9;ViFj
%hmU9oV;KfEYGFIR4M=!;TACUAkq?ttT@.'Wc,](t\,-Epik,&>oNC_;<r/QQ[F1DJb0+m<q>L&0D)\e`ra%S`So-^B?;@=U^%Trt
%4h!R3S"$"?R_*fg1prEpY"UE*B>.+igYU);Y&7=>RORj_nuF3PkMb4Gb&[1(e?aqePGo@XpYVn>(]+G9lX*s;;k'C<b>VW;?LCSU
%(:T:&rUQHCe5>Q!iRE4.&:M]eVl!3!dO.tk'rq+HAQ,'J*>*nGFT(f1IF$S726DX(f(@HXj2(AhnbcjB^3"Z`]m*quS6#=WcEoU4
%02+H<0rLXk>reC'Z2a4/o]j`&h<C72b51b]n`A6a]h`R*l,.F8(T6.dcTds!m+/)3]fiPRm@PJ"VS?iK^JQl;ec#EbFE9?era9L8
%q:UCUO7VNF(;=Ti4A]'bIsYS#O"([q:FG$A4F:@05KL%.%j/I6Z\o@&(QQ`Fqi@4B*unpZ2]d?MHFrpe>Ftihi,&;``Il@;c1Zd9
%CEkX!?>2X#C1_)8m;1#uZlaac;0T\<N7H''bWORHI5[9fc44GE0&BjWCqkE[5BC4F?Hg'SC;$,4;SN&m;uB\%B"jg`h4(C9'e6QS
%U1_\6]I^dbc-05RZ\CWN1:t2sI[kg`b0EjAZQ%KMf<a6#/uu=6Z]Ca(IX&2=3pS4@A+n\:5L*;2O#+-0`VJPLZd%OLLPu/[]8+D\
%c^BP=DcT%bbe:.s%l\\CM@]GF4a[1t\279:pn`DDrUA$W^[SJ5[<_>IFnt#W[,Jo8:XaBQ1\]^qj]]iK:VSol\[D*qGB;N7,NfQ;
%#IAKD5'_jmiiDq,>WJ]aF046`WVM<0^G*Ee?eCjW\$hmQ5QB0Ub\ql9D9hT]/rT>i?KI72^Xgi:k=a,2;9f%5Z=?(e=oH)(-o:a?
%qN:Grp%tNI09+.F0D,SLUGoM:n'V$$s5hXBg&(F*ZLmtQUK6dCj21`lq<%q+WLYTA]UV#g=T,7i/aPT+/MA)^^M>BF;pC_aDqe$!
%Tf'5r;`0X!:8W)n[Iqe8a%mId+!7[Df1V0K$dIqVmm$:*Nsf=f[E"Q]bN$R@lJ^jailn`_7=0;7]9qFMI_>HeHraI!COX\J^OA6#
%?G+MK?S&Y35:DqRgrJf@21&NP]XXo8R`t*,F2s]X>>H;N][oY,1Z_]go$Z#<rQ3LIrr2/F;k,b4o'McNQ?JU!qU1.o='q7a*6k>K
%HXBO5\[h&?76d6T<1]T9](2l/2m'_U?ThFbhrpq8V2Efkc+,F+7TFZpQdho<o,$\hVeiD(2-X!TeU1)n^>+(9c$V0U2=9YG"moH0
%XfT4]IsJ62H^*41MZ/1/IG^KBW6_Xg<-?BOs/P8,Y=JG\SU72_Fs"BD^MTN'`mjO]6IcoGXo*e@oSG_H]R%=HA\<B^TOmoe+#JtS
%rh*sX>Wunjm]eodDWLCFk0_WF]NJ?!=3U,o+5,5?8%IfKUOIW*Xlku[XMb!h'C3"f=15iTmq;#XT+&ndkDSZ1E#W.j^U)f]dk:#s
%U\;cH(1D$fGE8:B043;$fD1rqI!E**j-3lbpuY??^<g-0J%b%-B&D1q2es4*gop\Z)Yq[Ba30N9n)#ZLY>:udI6HIiId^XnQV3*0
%=/hXR#Hu=Y'dLJu^9Y?HYdneaqKZkQGl6jc9$:.nT."d0k*$VWDl"h.(PU*]T(?[qanN+P?_8r7J"M5elqqd%l&KsbG^ArS_<\#l
%=/Pu`n]'n7Z_sk%T:bM`I^Jq;jMNlDi*!`mT7+G`R(n%JCo?h!q/1Urn%#q,GkH?Wm^Y!:FuP^nA8V;(MhAR.oS[2?ZCXd?q0\U\
%]oT#V>4MQ:pA"R\/Gnh.GEI7IjRQO#IFG@[?ItH3mRqG-3`g56(9![LB'5;JcY?\1ncu;JX8LZ8`nT#Kn(P`\HZuBuqJ%sQ=oE_q
%O^5)=h*+qFRXJ4?b;kXGf8`%kZYQC-Q1sSTO2!R(=-bJooc=)'B`3%^e_E\KcTg5>(S*2uS+A_?B&iJV@=.&3_L1C?ikE^Q>hs1#
%^3k.0p?ZAP;>GV2n_reHS([W5Djs6=$i/%cmRH6eHs>?Nous%7G]dtMnbL_S>Q<CB\_W=kf2"VYH2F%^-'sj/WO4VH1u<.64je3Y
%FR.jnp<hI1gQ17#kLK4Zm:W8#If&W5UhtV)Xe^.Vm.6.+XL7bAkLc<]fr7+0[(;a[?=2AkrM!u;+/dhRGJC=e52=U>]]m,SkF^IT
%-`o&(2sJY$m5N=:D<fBK4#]OW]K'3#k4e&)p6>O=qDWd$Xg@YI^TqqQl<q`+4Z_4tg-7aqZ9)DX9M^(?3-5Y&5<7M'T%cCjDk3F?
%4Y"+850A;$]mTJ2i5M1\`o5)%>P$$:p$MIlZgG57ZYSHYkApk4<HFZn5<Cq*i64k82pS"s]sD$orq:5R@;b2_q;leYrPI.kpA<Cd
%8#Pf?J(0u!Bs2XP@JOBuq1ll.bI%kG[J?qcl<3`+a4L1`Q]K*=Vp@QO5:rZqj_%1-5(,Jo5PpuMS=-3g5-O<(T7/tMF0P>JG$)2f
%(nNV`AN0SHlq>HLFEE[+3a+VuS5\g=_Rk_[YOfbGqeNpG?@MkDYuU97Cn?+HT"fMsm!X,`GMokfpYMFCm-j>4^+I(T4)I)@h(L`L
%Xg_8(iLm0!/C\!EH:@/iq7#@QK$l&JhL;!hNE;#%mlgW2o?6rprA4E6pVPVOn[nMJjk1%?>hAVmoA,&PPOlt0/Ua>-WNKLm/QLY6
%PV3u8P4<78V=`n`q.$D8ZN\DAS$c>Mr-%RDU%5=7^A7ELSLkX2hl^SYbN?:F=+7IK`[SZ@X+"XF?0,5N`KPpHjbpSHWqp\[I99d%
%W.(`^QB\;Ta*+=[HhC9$Y$IP]HW&I[h<Fdm_9(;TD'Ak8Wql(1I:dpmhXmZ`Bg(K8?=Z77D4E_o2k'=oBC>d_MZRs"M^..ff3i?Y
%pFM-9?T"Wm\PH@R6<0IB$-S#QJ5%T&:r&%:4C6[*A,EDg]^Aes/a?4SE>(tEpuOZRET["sF*=`VBDLRofrOrO6i-0g-ML9(rqV)`
%/Cb_?G;PHFrU@;Nj]8?ep*1(>S!`G!3t[RY'^qYr_F2B"lM=)^Bjn>QDY&GR=p$i&W7cI"0(pr_r9!oR6j=27*B\*o]I;Bg\Q*IR
%,W`N(gf8[=Er3(%G/J/&h,@PV$:iQN=$S=ZQE&nK<'8F]<EeEpn@W,B<Wu9o#q4'*L9d^^CZ(@7Gp!ND"">S/?C3geTT2`l%H?#o
%T.5_Nri'M>JGA`QYGRato%C(@d/ES6?6BA"*f=8;5Dith<)GJ6Rc25^(0Altmr]cP<GSMt1c/+<C<@@P`6Aiacb346<N:rN;Ng*(
%:/StBJgrK9eZ&XI_,$>"oLd8!Ps+Zo0?h[eFg3?Lg!h>]G'I+TVO5,??B()(RY1H-#27Slg0*4(;DZk+?6Z@<Aq"uK'';NU<0nuE
%1R^<tZjn%Ob-op34I-eF8+gFQ5cC.'V.t#F+Q8&PGB!*UP(IogEO<sYpK?&7X!PE"J$XH%l^F[k1q:.6:54b+%?,2.jW@g9/#QCN
%<:4)l*6-OkPm/E))G)&Ea\M:/\Nudj9(F*f"\=%q]V6Naa=jNY@8m@KNt/!dO/qmVqUoe;Hti8'QuGk*p%g)]gs)h3)NCg1*Q[[h
%[(L-.hN9UY@'A6Ep.sS3r1@%+;6b-)b/Fm,od_kP<G]rr7#"DR<r/J;8pYQl<c.5V2-7)&KYO\j%BG9&7i(@j7>Gb3)eiCMWts5*
%^tGcjpg(kTa;,]%;m3UjrULmPr/&h5"F3G8Is\B-dPadOD:beq_F:5#nV8gaMQ5^G=Ol4nD`SAeBps<iM;uSKltJ%4b]4FW"^:u-
%XhYC4FI4q%e;<L=eqm\ncMai,;Mms%n%Ep6s"!N.^>hj.3g0BRgs\^,jj@o\M.NNi;REoFGW0b;7o(e_IG?/nWEkVhp@D[Y6oH7]
%]@bLng;7-8n$+THbe_CEK`#0.ms"Ut^[YokFVn_eK!A>S+a-(o>.:2iG)`REENoc@pJj.g%r:igEHu-M*5'0N<I2d$\ej)"M<6uo
%5'ooE51`S*$ak$.06I"r.hkd_Xp]g*7g6%4cM$QTMT<la<i45hpkr562li8oj;LZ_S!OA7lK#N_oPA+&%fPqG5XYh\:NF;OKU+qN
%'CMa$;2ip?dTobu6KM8cP%oD;r_q-"gNDr1T1E-Ee4jZl)pO=K`K"lYC[<(->V;93jtOQ(We[dpY"Hp/IO%e4!Y<bG0_rVK#"@WF
%J\Hc)MW/_jf1)S;Z!71>Eg`VW)30KBTqNQ;0&+LJ^91&$;9[s37+nVRILIaJ#Z'F%f$;PrVm:d;WuANr"`>R-QX_7dL!ll)^3+qj
%)H&3++W]1fE/Lp<)53Wh%tic&RX^%>X[n9FWu`lFP-7GIQNtrA-Q?*DKA;UFG]@jq2b(a=B@U%[=KXU.C)tcVUDP,K*Q!DH[F80U
%'euArMaSecd5++l5[%s%-4sM`$[N^]>C?l;1POK<$nk.@"%l']3W4eQ[`Y"a]i_6KrN^MFD+J(I>$$K7n&3MqBrP,&lFe+4YKW*^
%c!8bM4--pW5F2DF`E.^t"l7K7FT"X^MXaa&&R>N[MEGAqO77TV"=9I)Va4oAiW$FAnENMYR0^"J'R[S4=gG2/8$l^S!!Mmbhq'Mr
%NIO;*fRjO^)C=sp]TF?>6qXC"P/8B2'BOfPg8c#(U,n7/E[)5<`]N;#Z@al%>p(M?kf><&A`%B%>=,AsYJj_bS,4/8eE0rk;I.IL
%lo_`/j6+ppU;RG!&Oq>"(9^oD%9K')9Q]-1&#<5Z[YK3CQ2"$X?SAE3HmhRW%@H"&lFZPCI`!8$8]tk"B44<p>O(YA:l[G*dD:#I
%`V!/Dj_)r=BbouFH%L*fEG_4YLA>&TrHOt0BH9+MFlUb_7`%p+:B"QSFo!Vrg)sJ30gHM*HA$t`IW;t<*C/iGT7SS"foJ84ITi'`
%#Xc:)*B#u':_g"TTm_s(C?!n'<SKC<-YQ1TqAf7r21>&D`t3%6;=6AT6DttroEY,4+a!)I#4,<b1FsV%*if4Mf8=Xf%!(L!mF.b7
%!>`.6Y181-il@.P7hA(C/(>O@'S:Fu\K;ICInIE-T@:"WI8UJqG@Y*U7bd'f_%i7"d(s-acYFZ&CfjRFm3UT17G%5C./^:F3'!N"
%W^Ung^Yc]*F:&.(m05Am#9>VHdS+pcEhhS.i=Rbi0jids^9^gC._Btk7ZA5f;$2Pa26c-4.R@c'288]`9Le-T-_n9*^^%(7_$o:O
%`seYHQq82sf'Hh\("ailT&7(fgYGi:(2"i,_Jpa5J+&8rjna^O2B6L:e>@1X7[3A=1DKm,RDi?([W;L<l/lA%FGIQA*+HbNcEP[E
%&,er+ZUm,A1SR=/j.Lmc7"*lCqNGVH.$s(-WD9U2oh)Be="Y$2*@TM.1#;0I)TADVBJN&\CN%I*72V=9?fZUAg;N'(>]NZ)iDOk?
%r/^L+X4f!<iFQl8dYGB]9c@;=-d:N>"mgs>>IqV$=6.<5*,9GP#QD-ePc?_mbr"[C$0]t)hg`mjBcO;3WcCUni:gbek^35(]_Jqb
%`"Dsn_hc3:kU;8Z5Y%<E,Z:?W-e&XB,3=IrEYOKsYi#XCG4=<5msb97=$-=5\-_9^pQ[.aQI/FE8M+\GOtgf_9]b`X>h@1:VPQl2
%/V6$$`mQ`TXQp]@=4L7OWFj.)D7p%IA/&<n;L,no5j;"`Z#"tEKMcTPY0s@o`^.)De0`4-\ZVB@(!TG:oTErLW</N#A/(#lVQ4As
%MOWn,F?O.!]"q`J`H5%iRB[dQjgkb1iU.>rcDZV9ESZ.JN^95.;&hFIeMEX_hmJEB&n.r+d2]/5peGL=bGNjX:'fPTLa^Ui2$DSJ
%rEn%/#V-!NbDiN64BfaF/2_2%Q@RX<@0l)tB%<Wu!]"W9U@u*ObR3**1-.9QA=%-H$+B.fr/:XWdntGtMn<W&'8h7G/?7*kVRsFh
%gY>EW<$`)0Re2>PX.@+:'+8&4Q%d18XGgp6J/B.;2q:G12e*[SUPiN56++53,aaus/;;r>d@2`pKO^mTG(cN9VhBi`/I'rIc#?A`
%X=C6=d8Xjp>YbSu["jd`d%KK)?-n*g\Xnlnr<=8cc(.0sboKgCKGIMLT`\^_`dEZTb&ApOl>"^HE7^.bRV6c<dZd`!*2@pZF)@'d
%"alsqe-t/%#t<B5gN8o]d3*d;iR/tf,]^=OW4:k;9#aa<2jGmakXQcA>n&e[EK-'^1%I-5PKVpj+l];,4.t;M?/+M"KFHVSgI/WJ
%kS._#I7LGoX,q"fg4m_Y%&k8iml'Gi_Jq.7NlEA\)50ns-o`a(E2F?NH<$Kc8&nc-PapbD;f\0s2<kCa=6L<aVuf5,FeI;A]RuZO
%2&r+YJZCk3^M8BkWpOInS=sNhJ2gpd%5ZTi1R\eS3uN(Y9`eE79;,^KpSqh_5,(>;RZ/`;OSibrA"r*&)+,daoT<IRDM#qZ-3/3Y
%2lI*@dOW7^TR[a*#Y6N[UC:1oY2tiEd;+XmYYu'p>,HJ+[N]iZ3a.jne@1_o:dmX/b!AfW2@6CIUh^a\D-@,OS41AXdK>=%&d(\$
%dAWuj9+G."=b4Si6"Z"CFe,oNZ-7@;)!W\Y-mUt9.$f,0-8$.D"XqK^U4<`>.L&`rY%Gj"ik1uLQCoLT)D:]F0)?uNRR@I)'>:Q3
%Qn&RhN78N:dP?]^klHIWJe0!_ZD5OQH0[(so!<3UN65QG&9>f8@5E%,6IZUI6&Z:^A^Q27dit/PG2FVVV+?q$MYpbVmj.DXmfCY@
%87*"aatcWqN-^\B0e#]b&tj7/X,=*(n.f%6)KQ8-YCHV.6%,hrM]BArb2#ML7OTKH:bT&+YcrOe)&CRa3l*YO9-PR&'$6LOKZ8#&
%N8n*1bSu<o)Z>Z=3Mb%nYD-_cY;'ZVOMmLl'G05b$<D6pA;&u&phIfrEGQ7;W'(?$!<D@]c'VA(mfCg'*5lSrF/1i@!89_t!87u2
%0e.n]'Nl9Z<_P3h\)s,o#H)7F>,J0?E/MZHAZ@KZ*"l#p)fC<gqC_:fKZVGq?m-gm2i\bJO[Ju(^.M:6]B#rj[N76FFtriqOBjd7
%gV?>c;9",gMB\G+S/<SdYfU'!VA`*i9ck'JEFnRjA@)ad/hqQd;Go(0d>NR")'TR*`k2UDUnc"7#?V,ME6-=U+f+18h&pK"-=&Db
%2K"CHm0s(O>p4#Wiirn""[RkHE[ZPA=dD>#=Hd0e/s'Mk:F[&`#V36I+sUKIVuR\#_2ukX'(Vb>X%TG,,bX'GTm*.4ist?SMhN<l
%Y\)0RG>ras]c+8In1MiMUrJjBJ>8]X"Eq;fjAhQUlmTD8EpH3Vi/CtO@r<DYM0oVFjPh4X(Sp3U;t#a1FE_R,SY??1J-MVSL.9^D
%`/pW/gUK8!i[+@2#,*ku`:q)Ek%9D?$Z^B#b@.NoSuXJXE#Y'.-!1Eb<JhG@"21h"m(c>%</D>B1`gq:L2'*V17@3Y&:N&_\54"0
%+5@:Q,T%CI8)qEdBtuHWn=N;;A#N%kU4Vcc:kLRB(gLe`=[K:Fi/fGM&tQ%?3?@S^<$JET".t=80,d:I2:q9K%b*O,l$$+g3,i99
%+K6g-UAdM/K,iJQWlYFk1snjW)eeBj)?f#Z6K*I;c(rp1"AjY9+huV7J0[IWWEkH^YRUPD)#QR(V@k#@Hp29XWG[EpTP>3-)iaPT
%<<QjMp"/0^C2h0%Q2ML;alGrR\q&KQ$*[p6*Y-[/7C[Y.`9Y!phU18j@tr$T=/Kt'SST2Op8LI0:/2O$V!8"1Kes9<:?KDM/5neC
%)qL?8XBECN779IgjbJ*:E)^]g7oli.jE]FQ+<kM:TAE1.m4JQ"6jPi,`)]_:hi.mf;r\5Q)%O'l2'FGSORsMa'L5WYl=)H/n#.I-
%ac#)rUi?Se73!(#W)"^*Y7l+"o%$aDZNdZGHmdNMLN?7?3bGc>G,ND7>#]_P=\La1jR-BNBZG\F4&h&fE]SpTN-RAQJDV&o;)!`<
%/E7QcMn!UBeCWcBfn@6hQqc(6L^M8#=%tEZ3-mr:9D6B2<D5pqQadS5-ao'0TFP^Y0tkF&5%p_Ma)sH(;(EW"P@nbP)V+8C0X<)s
%(`i0d:b>.=+C9kgfVbr.j+hYO_@5\.,3WB%Z'o*Z=r_hph+IrKds-=l8e\lJ#F+9hEp,mg<_8sW:XI"`M_)oEZ,nLS&[+7T<?"'d
%XWeT_'XT?5.'Jp`"PY*aG74jiP=J@MN3ioi9I#9\fRd"4nSgmP)h_L_6V]/OT8l?RnZDq_elt^:3"]]-.V(1bYSD,ECnX]sE-)HY
%&N8q^.h@ec$[r+TDI_bs#U%9`i=JrO'ZZ&S22e3N5*Z8XUJ!2;G=&(ZWfV&fAT^gERZc;g&rLWL4s:@M$Dg,3-IlS((fb+u1^$I_
%JR7L5<(q#u@LkK%#?,+^$(%b*_FcL]/CfoVi&H(]Cd$Dt1WMLHeqNdiZ%bPU;&lF<U5//(<7>&C+QfK[*Lf&Y-HB*q+m#)?:eV0&
%)lt3Q+HQe&fV+[2,?;QPSK]?<3XZlun!XM[HE%63S('V.-Kq_n>$@@KRkD(8.R@>I*HZjqL:T]nEbA;^Ca&Ep.&<@!1^sdc#GEUd
%Q<'\&dT];YG"cVD*__Ad4:.V.#UR=n&+Kuim?2[o&fWMl!elSHc_=8M!FROr!ZDShR81DGMkFIlL@b[IV\lEaWcNu-1b(j0q,/In
%1lu,1@<b)7U6GEr6&%U7OJR+8bS9;BMEMe#YT%Z!>RT]?[D]#M1foV]30<448PmWSW%(SHe#4NmMihPd6a6?.?N8AsU-s'&26^4E
%pt].G=M'8Y78o#BM((fpSbg`W$jl3&1aj*j&^j>'>7aMG1+e+^(p(O&J.(nq!nk%>1$d1d7lZId.HrBLn5KiS*65)K/MR2mPgG5^
%.Wln#C;s+ei>H$D`F>5^:PcA.Gm84\D6=3_9cKk<VijlZTWBgdVa>4%TQV,M)]J#I'k>i.5sDjD_Z(42ifHU%:`a.fF/`@`"@]b9
%"o'pefMb.6[1^[sn49;k=,<7G5&%k.1Z70kA8/,M84m0hZ2>.:%8AR1_)HKG%^-5;dg.XrA5rD)'%Cg8I=d#K8U%.Gi/j*#2%B9X
%#c_:?Lh@:OObH"hP]5_d>B8(]"7f.nS,H0Q<>J^Z$hJ[mWX.q!@1i$^!njpi;)^g3"i<^'a;%WU`)_Z$V1J\H(bJGVOkp\';i;W=
%Gu^?GQX82VC2TY)63U+/LrKRl:I>NFDif]63.d9XUo)V.d9K@Adm,(q&fODIj4SB,7h0m8Ug:AB%$ZBhUDn8N+dj*TWKe[R`A[A8
%s5G@/+OUN04qU#9rQG>O;)Hi\;V^=[R:J(O&=dPTg@16WZumN%"uENVkLAHtg+:OFJ"Y5,JESe'&KU;)R+^*5iq"QFQsh5XGG(W`
%+g,9d7`/GriaB'p'6EBj'8rN<W>-Ci<J8!0(("b81hrCZ,h*_<,U3lroEsh]$WD_sC'ShA#e,>?m!Pf<F$Lk+4#q)DX*3kaGZ/!.
%#Xf.:Bc@h2E\0fhB\3\#Ugi`,2,U'!obE-s2U=aQTg?cNM)TP50b3,jOPt/p#'TEB=eJ?cDkPqFg6%88fqHba)01E8euRH;_+:S8
%I=U;jG#)eM@03e@IDAhtZNLh[MCM:_%#gHZ5!/rl%X)YX#c<H)&M93CJhob'0G,-.c/Zr"G2j+0a2KM6%<jRd'YfQ&L!56;oFfM;
%5Ym&@I-<U6R-+Ka(ddT"Kb.R8_=A=_<)fq(IqWgnTtjZ5`"Wr?5EUZ?&13*?@@A,^='%BJVZER'Tuj]bp9ViHa)%0E\6.c&4Ok/e
%<k')q5V9id8(Z/MQ6Oh?lX1`=k6X]`_3%A[NKb4cWej"k-34Zn4(KJ<r1k3>C!;9t8=1*K!`M7\A*mbK0O5qCVSeM%qLO8)Et\W6
%E]_XAM`-Oq7<C&:PKNUO2T5f]K;\c;#Og=Oc?msZh5VljPJQ=1i%@'G,MWibM*Kg).3ZF;XsMR!\Q:gF=1MGud9/,i6C90Q;R*ma
%NP3N;JBRBaQ%i%&#`DppKF4U*iD8[57U^WgGJ])(1n7MUk+G'3/6.Db*NMW?)D%$7QqYpQ(a6i1MT]`DK`)H8P'XN7#)L5"/LHpc
%6g,gpK<".T*0*o!nInL#!OJtd&4At!i>'-q;dl7O>GYbb$?L^"--R4CF:H](e?95=-&c%;o=p5YX@%*i&#3E.V\G%%rMJn6Yq??O
%.6),5ZAf7lh+!K%j2U0:KY)0>Y*!g&aK9HLCI/UFI@>jMkAJeD`hVsI6N2K)n%YrC$<!IU*4D7@pPG)Eo(3V6TjVoV`DhJ-`B^L+
%O=SGr@Pn#(]Li`;7[s-a`'>+hV8VDr%NrD`"gNE1TBIT]L7,'G)'K+j)"?*:pl11t"^*RW(_G3;1QMPfCtP$^$^r0t%S?$K`/qNF
%e'u;O%MPj58b!9#;A!#2mbP^qP9a7MKNj>%?fHSJnjLMjX;UB]E(FPtab"tQiD1\9Z%B(sK\(dX*JQLs"hYOS],#+bNX9RNQ=<!B
%Q41^jjBjq\gGI>u[[;s_=;sV:abYM2A4XM?59p)'QUf;^,t$jlV2f"q!c6JQ:rNu;2BneF*&0,m+i5=`fu&ebPR`@N!FIma"&`oD
%>+f5*#9gR:Q,>o9d>Kr-"haf1"(&.u\=M'!bs+*J"<lMndU\@]&%i`'8OioJV'?2!>oM[_\ije_/01rbMCk13199iaQm.>3*"c!_
%NYiU2&>G5Am,>p+ap'l.!EZjC6c[+[3J%.O;F!Wm@Pc1mg$$8A])pj'ZI*610WAQL]%/;[`-:1r6sRZ((V+l*ULT**.M5JmPo(?]
%E.gFgJuBQmW5.>+MI_RJ4&/WajG'TY81Z8G:m)P"(m5HhO3$\H`cVUr3QhG1\qGcJfQD#*Dcqk,PR)Ef_8=WQ2g5G<I>,YZ>`E<;
%3Zsfs,VRZ+JXG,tfK+ehPp!>R`'?mT,[f9$&cS``ULm'F5o'GQTIL\o&qJ!,=,8>\8CA(NAa,#%+UJb[Ls-oX>bcDNR/IhKl&lOC
%pRq12l<oOF6'qi`7k`TOBXI_L!ulb2V,MGC6,QPWM+(O,_;&A@f*EKj7L51],D(W?)<$T:4DKI!(K_8)*6A\!V8V;Oe.J\t,0<7V
%PiX(n7dU`Va!>hLi]?1Q66O+1:9f>Z)CfomoI6eJ4/,&-gH`%-`gRj+Fej:Cl4a"VC4e+=@CX4Ukh'aGR0Ig<@$@[EknDp2U$t5Q
%KcOS/nJ%RNe($Wd0lFHSg@k1HUMZ&'7dcjJ+M\j!-d[X+0%^j?0iQ>4OOV5rce2H'&_(CO!XKHp4cI3^=&;T0C9K(]MBG3EH*Nqo
%J.uM'C9Y$'#%FPP9-Y$t%FYHGbi96In6!%U.MbkqTo(!ZNVS%YfO@lE3g/QGL^B:JeE\f>EcCt]-;]s22264B5h5.0!`eQq9jf5P
%)Q$M.]i2LO?mlX+[OR]NfYk^"dY2P'n5c>oX8uj*+[D3m&13<9":N0l_B"J,e-&p[U6`g<6>Bt/&O_e`*_u?iXGQ7+de+(r$Ob,:
%r/i7-&hoCPX=1Zk.`mf@>V'%9JST=S)&@;K@&$nY.YbmI'a#c@P(8*S`:u^)M45Y[=5;N>QkLLH$;j6R=Lrghd8.>5mWHcY0aHX*
%WLKL^OEi"m(*><:btcrLJY>?e8>,7HP0h.C8[=&@rYG2N7)cBigf-*:<=G"#.g!l!'a$gSM"!o$'/`.CXf/XIZ&k[s<<SFpX+qYm
%AF&[.5!"S&"Ck!Sm%^=hWLhd5!W9Xaa%3d`//f@r_A0mRJ\W<c`K:!LM)7f4a?Z48V8tiiH8+G50Z=SpZm).o=tq^qLCekZ1/T9,
%abndj(CS<@&VU3VY.FGU:TOaRG8Ls:Y@G,\OG)i+/pB]-Kl&K#dNqgH0GF]0TMSD7=#"!c9S%R]/2@Gq/9<has!P`16"6OFJW`i$
%^d&ZEr/nKWc&ebOCi!?+UaM>*(a=f:%khD&l3]t,=58+Ff]tNh_#]>6He`Go4=<F;Co.h83b0WKMc3TPgXo>Zj+#_"_e1$5)[B>f
%Z[)nO<`@e0F*NEB`A'?8#8=^tA#P7oo^#(;Q,oVk28C%r_j54`5]N5&H`a)9'Kq'h<`3E/8C0]J@$(kJ5c:YlHWg9L%Z86N+h2bb
%BFMc*=\YF<NIWLqAo'?Yl2]7o_D0K;!nG051Xbqn4!KL)^'H-.07GjU?F:2X`AM1^M_cI73)'O_Fjfs,OV!e;<HQ3:Gn`R8OFX!B
%,9Vn5+9N30&sNZO%$?u%!JAtCW'ZC$)C9:bI*t[R?j<kN6WX?S3&PN>B$>&t'(cKlKtsY][U`dqb>AG*."oj,V+?dK=GinO'"o1m
%V,0k_N5YYX1],h7A]8<U.@r?&rb(qMV_D)3Kl\[i?IJX+'fl=B/Q=YmZ]FLKNmLOLMEBmGOlgbUprNFLYhRR!rScBF<<E8kI9fA:
%Fl!c]F;AR-9BVig6k3tq;G_e+=ZPhEbO*Z&S\!3';gjmDTs)<bG<f:P$o]J4,0=&eC_bs7&AcN*=PsADkg_;2[Ug#n]trkUHUl.X
%#;@&e4bKk`8;8&5lr7-?>-GQDas)ni0ej>X@P7a/I^(J`XKlRF4p%F0J/Ksu!VNtH1^tgp>j*XNHXTo;V(3=")T9?g)Toud"\1;h
%RDlU5`M<bG7.pVs1S!sO:*<M3*a_O[%NHG/FR2C@mmU<'M\e5cV^uX_n=P0+^_FB3cD]Bf"(^Kh=kIH0Vep5j)%!O:&-QCA.ZW^b
%&4IQa"1AcNa?!K:_@Zl-M``]tkmMGmKm,WEHq&ZPe0mbUqLOndfRXB[0b!8"`M4j_d(p2WSa`Y:Yg1nHjoEme9#P[J;qZI>'>3k%
%1FhnVA=t`_brLGoaY7^Pd>e?e?g\;\h``!D,\^s<^ql^3(OMI"]P1\dH$S:#[(P[LfjA(2qa^_aXuh,@=/dbM(M9#`Y^r,\l2F,4
%V/1P3hiHT^rCakh1Gt>6W5?#bLUQgQLj%orNN1mg-f`Qk/hcO!QF>''&$K4f8t"ADhV1OM@ep+,+Y>@JJ,#W7>HQAW>`3j1Z]6_V
%>Z]=tC'j_+hm>OW'^Nm-4L@ChG9X0WdcFZknn0DsFo#;O=+@8&arbfCT>(&4Sag?2.</NLPhIVcn..-6r3GKC]LnF>\-#/9C?_R]
%?F<o/)kH_4FHl#`B@_&HR["^0%2B*_ER`&E)gikI_CLi"/fut66WijIFX1F8/HP3aHgj%-c#A=gJorG2JCS3aO>NP`$@#o_#_^pj
%%CIgcLF@t;!"LAgi6X<4@8j/!Ze:@IA76Lka.'-;'[Fe:*TOJa=GmRg5_Pnt3;XK.J-`db>UP8?S/7-c:P_%-*n1Zf+Y7HkQ3<+:
%_8Zu*OBBlQPT`e@\?Ke5j/.P=b8.XAH63q?kFAb(gYhQ=*[_TJ#R6D_7\.B,1,@Oe<U*M)dD9NR)r?\GI=YF!ggOl;UX?Zhl,+!t
%=!n7#;O("VklnqI.Oo)CM:m\RD&XjU6V`C:=_L-h/2RqikZX;hM2\t5?(>Pi70_%iNnGOHA989P'p;Q"0V*:B:iI0-NPELX'>YrV
%M-qJM3giXX)c>>4O/)r6>^X`SljF_-F+H>W!^dDDDq48WPbK2h13L*ISH:SMD/M2arW3bE:kBKmROeN7.hkL,[jE1GE'%JXU'i?#
%l,\D<ilDXQ)-.\c!;.4i%&2'7)#B12COmpbEM"E3(&$fZUE&-0:ID>8Bq"-USVB/i!PPB$c;>6ZnL:\q9&XA<H]>8]F?\jTRf/+A
%Y;s0Rruh')0aqo:1g9<)e*5OMd^*R3g`2A"PF@DT*(^;>T\6"><6Snt\Q#X3E2l?b#>Y&"<WE.k*rdB3)#ajT1.pS4,>FpU=HjL"
%%U>HiGE<L=k'8qn#[o2#&Hc[+"3g<0=91fD8HD5`O:E!Q1^r&(oJ5Z7<.JQ?=0dm]fpsTX2-in4C]0-Rc/::[Y6O3O2)cFh?Ob@H
%>+3>83R#*.c;ZE_/JQp(rE@69*.b0/d@tK#k`HE'W=0D!j<)l4@0j]7\/YJSdR,T!I?0Xa#a0:##RXQ;S1WLD,otF_`p6JFf`-Xc
%$7<GbJ`)nXq*f]=/ij=LR,YV`+8+"lASr4)^8`EOmN/$Pg'R1Q)m]csUCM8&rbo:TL:.s,BAq@&4/*pM9H<StpMm2O9IG\G9mkR3
%/7S)h/^nuW`s=uTEu^3q/IUE%C/ApSA$cgjW1*5Z0VgBX/575o@#bVoePjOmU175b861kV-mC>Jj<Zel@DHD7'NLQIr*hp*KK8fK
%et2?l:S.gBnbUbMj&.*U8CXV6fV]45OQQt]A[)rhYWuN:$>^D3SY8=5RSF\W9bp)47pk4Y`+%pk8@&p:0/ZRG?qWg@Mu]"XL+la=
%6Wb`f3\kV]$8n'FLdXfCHXPbH<hjrh>PMYuC4nVN8:oL3UKA-Rf/H*"l0#O^(Z"I8pU\m\^:3HiLZVV1a(%U\Y.e=:Y'sG7O<5#m
%7'NW9FONK%*4H$'.K*A<i&f@YTbfGg)gqs4`+iul!Y9ER$aB]MI!,pE$bHsD2suN?:?Ja)(,`W3fn6tZ)$kG`f4eg2<j?,K2?ZS)
%,_F"h,R/sOFLS%$m>\HIhrV8PVr-OgGId]NE+$cGJo&iGJrJP?Up"h\))ML%!=Z$HU.):od&TtW0KhakYY[h.du[N8Z2nZZ$0J^O
%oWI^W3!+"9:5h"2`0qs'8X^oVKu73X*,oes&0_0%1$jI2KP$$?d)_l6KLQ_/"NVplRmXG-)<Ra<oce%:mDakp?Ft'0Q5%MF+WqbQ
%H/[I5/0(Hi1+X9`!%:B>'lquXk@r"@5)L9<Y.4XS`7a(N1gSjN\ouP1%3)i`<(n></'BXY\O9D3H<CH8_kprBPM2,'\:6%\K\KTo
%7_1D4oFX?mGCrQs&LRT6's1o&,XU,pL]iV]/o$>0L4mh0SKK(0CiHoeW.T@2milaB4f4<jdQq&'eB$Z5p^UQM/ch^d!I9j`%2O>d
%2bctS0lG$TNVGSU6b9!l!Q`)G!3/T`)M51AN\n#^rdpZ!.M?/6\#=$chh5R[OFijSE08-n!X?e5kOn3*>pp79`/i_60d(-sW+NE@
%X^K^\#EY=l+)EL%_K&-l,;U]JJKm^Y9c`b5!+^M8i!5+R6_L<d@Ked/00t2%0X_N@0hh]RCr;56/p8%!Ua$8[NdMNrgCQB-[j`$o
%2XKqRhPKF9^-I3j,GV_B?%rKa-j27*"!nhKJ:WYn8BK0fG=4KXVidrIQ84H$^5?V^=j!t.K\ht2N)2c0^7lHo$jiA"&.sNpU;<^/
%+I@ULD+T>rG>$jj5tjB/GHd'%[Q+Q[G;)+SN<VDKHH>Q4*-td6D%[tW[MUDaRfj.r!EmDV6^ASc8OXjL@=oM7Yca=G%;rr*P78ZH
%DS")r#2!EN/8>bjP-c&A#T<aE99Z1UgC@Imm2Vb0_)\FC%RJQ(]bYdC7.4U`9s[0HFT@#B@q6`Z&i9n3#QeUJ<R$iO`r6QS;`b*k
%qA?\-aE!#P3[tc(`imB#5=FC=!t,&OkHp,2`LQZ?=Z\WL@B?#:d0@lWXZ30XG8(g,Vk]D`hW_(KbmhZBOXMB5Au45]D7>hVH#>@D
%OF51b3S;\IYk#k[8[Tc;_6#$Q.rD)O'q'C;.bQ;VgX3t/e<(=Tp5i7XD;mmC*pgc#lS)9Fqr+tSB8'Lu<.`WZU_6AXTnodUaN^pZ
%FU',4'H5"NFJr#2fER&.8B's$r1`60#*Nm%U0`iJ.cKcd]"#BU4tu.]<eNWVDC8,Q3&ZO$->kX`9s/PqX;JfQ1,/*M>cJaT8>mh4
%4Ba'n"-.'u[GpD(V8bc2FB*G(4(c:TofqpuHoXXBB#>A23$T$*.XKLX?LqM$!LFP^Vh_[bO[WI7;af9A5^B,cE&ea6#L<AfUb%Xl
%<Q?CO803JV,s`^j/!qF\Bun'Uo$(1ja@2q%,Ff[84$sbY6'5g.ZJhof49Z+^KiF"s_q_R5ObX6.bm?;X)Al,CE""%chF*Os?M$Ok
%3qhFp6?lbi#on'D1nY.0cs;EN!:tY`p=+%Mf+7C(hfFI!EXqg.A$;>23oWR1gC8K!?Sqg)lHent\'`s<nNk2a/"D>l_hLLKdsSuq
%E*[8e"-d8@K*BfTH+,$dK!AES0bnMoHt3^\1(g=Fn2YZZB9Otrl`D?J=W1NRm#4p&*LJ%^<66c'&kl4a\T<j[fMk9,:0t!ajPS%!
%Y0a+<iLZ>Xq5fIq/Qg_u)M4E__Ct+?SmhiB4PO_iX9HR'<A?`G,$.Nqm_BVE#+07a-K-X'ad<;,<tG[sE/OKk&r\R+oMpJpl_Z.P
%HL!PATnL$LOWRKab7[3(EJU>8<#I;'E.\Sd"qoY,95oN3ce.N=.Bf<]6B394VAbtR;FL4I^-G6Ng_kM.&"HIBh;fgE0KL-HJLU"4
%&qF@Rhj')kT`-ZVHf3]=mk00!`f?PLE^E`6F0H<WjTBe(BopIZCV(LJr%2B7aO*#]/fYhU_?S1on8;I)a42?B%ZP/3CH^nQM7+HA
%+?<Q0>')`.ZkG##\@cGX4&`+=\A!c[PHchVfbGs9$dJocaopD0Tt;>@0O8c[^FCtQ#CXJ67ikE!m4BM\Z,m'JfrP2\`+b(-=a]EF
%k;+Xt@3GYRm]^uQhEm6%ZlV6E%A^A-(TG[/qJPZA2P);BH-`b<P$/G1&^3*4!pA3(rah\a0E\#"V*o!OW#<=I:1IQaGe6(mLLm9m
%0dkaol=Q#om\0`^j(=((n:FWiP^m_(FINg@OkDZ5cG?FuXL;8s+e^`1O2FRIY3gic1Y>Xk`h.)E6d*-`f@PjY[c.Ds&tZ[<"rlL*
%=c9@D%Y-P`=!Keg[KPOQ3ZAanEhP,@aXS6?EjlTT#&:=cRUD:/*J/rC!QS3X_MK^h&S*E-e/.\LCVjN>1nMe-cEisFL_Ci,aEu%0
%fJp6k"IL%(8;M"gW^)?H,$7=?=e'ZNeo\qHl#einjUhA6Q+fuhL-,Z<S$!\MJHDVPJ&2h.;H'iq;q95!ERBMuM^N>J(*P5,U&uT7
%M,B4eSLHck.2V+[hMD>!)WMT4!u9UD?K;D'=-\gH)Ebf/-^\(jiT(EY\7,WNG625`1)\YD;.F1ThBZHA^]p<i\S@'3+_i\(KLH.1
%-kr356b7-Z&Bk)E5f"L(BCsc.O/;A/UOk9,G2S;;S0JMG?r40/JFF3ii8Da#b329dE:]41+1I&p2Us$Ma.c_J`?<ahBS5_4SA[H*
%Y],"1Slj#I]Rn6fbe]Jh0QI&N!Um?&EPh+_kmPC[/9;XT/??V8TJ7"A2Mh5EENTIT_%Eh/[Euj*_"eru*V>YM.l[5a%UA#DM`kd&
%K=oDh]O.IT')ju\C/WRfKF'@BM4K`(:f@MOTtR^!U[p'1fUcO3%%eiZeV-"l7>%NZLRT&RA=aU8\p5copQ1kH5-[-)1U,Z?BTcGr
%M_r_H5p3EE=akK6[Knf0nJ*@GK/h`V7\2<cg&8gI4UH`^M@<O?1bF=Lob%a8ASfTbM5WiVLS@=%*$!_pCQj"B"h/t)`p:X7[(,$p
%'>Bb58#J]Fj9Ptoa3$90.b&F>T.;N:5s?eBmT9iQq=M4OgPe\Y0cRpKHuYJg"1ll-XPai_)!sX*Hq+nVZ(\+%S=IW2J%-[*Z'Pq(
%]nhLr4n-L23t#Ng7?cnC8bB:!Mp0Fj&NefH^%de.s.AA&mZRX>F?8RGOLEqp,N4I>p'`8\$jjSc?mNr_BG,kF9Qf8L+e^e6,T"p+
%1(77@M!NG60GpZ)_%L;f`_I.>_22]V="H<?M9AK.@ARr=Yei?^]"%9'[Dd!:3\H;/3*35>k-9ba_`Q"[SJ8qS!Q2"Y,(rV.79957
%<5THkr_6)V=95D>(euShj.7QVlc21*cAmW@6hs9^U>lSg6NRip>JiM8/OQuI`P''W6m@<<\;>qNnqND0@Omt]+D_JuWdG>1-8g3%
%J=;KM&S]-6l?itIa9u3>&(k&5f5*%Oa!BXt`I1k"[\Res5uEClGp-/ZXs5QbQCrdKJ.FQE2A-gDZ_P\6(=6^aLm#`:7MJn;Fnp.`
%(H$7oXDaI=!%XS,5lnP.B_&!F]"f'`q$mFO2o9Lm=tkT!S[]gT.,QaO+u%1G-EJpr)M?-H=+Z>WU3\k.6%^"i"HFD8eHl_APU_j9
%?15iTZ6qRn_/AkpdpZ9J9>Ra^]mFeqQ=LH:IUEs,)`*Vb@KubjRkP:5c6eI>**V7*/g%KU@21kFYCbDae&`(hN-.>>m<!1]c/1b!
%LtR!G(QDXt(=h;?Mdg00.hcoZ(7'C!i21NSdg?`kG2OA;QFJkB=84[r(Dj;(2W+8g335>Mh!LaRic7/$JN8b&CVjuLmW4B$!-ebf
%p<EX_DEUDQ4.S$D_pp)9$*eI<$4a92jl3e`Ji'81&>,9O/Jg%.J@k%^1$bW#+0#YXVB`HTj?r>p#f/3Qmj%"P+][k;j*PrD^<Y"h
%XFh\&'nC/80]'&0P%JgGJsh'i%`?;'AXXo_3B+2"J7,n58@O8b.(EO=AL2sS^Gb!5X,9kCUd)*^:EVLh+t8$^\AnHPaqms\Y/V_1
%X$+]+6WOV#iT9P4lS6K#"Yg$@+k4GQ*H",:"N4=,Ht#K@OT,=pps?.SbBmi@M&Qg;?m`%GJn3f*,t7.Nf69]DpKT]h;(!OMlttCA
%XGL.[9j@lJ11:>_N$q))m#B.a,WsPpTTXg2NH)"=#8C8:=>o%T/44R:*7nKI`bih8(LECrSd"Qa,D1cg(MniaEmOoSm`;=1s7h1@
%)p6]q+_2G,UfA%,GGq$&<ZshUNs$_^De0Y"gg\#B(A/BuA7nH+:mahpfFjQk.XVbbd=EF;1Tj9#"\gIgZ37`E2a3P>^pl;W#_^p;
%+;DIk?bm2,fU&Rp]0HH0'FBh"er(]Y/?[>S$up3(pj1^i@4a5_BMY=s5:(d$d""epk$qj$2<KXO"_gY6FKcGTQssjEPFF1m9[^j7
%O!Ogb.ZltN.j_.48JrG0W$-5c/Mdi]==L7k]D0HG7AeJO8*m]B`4_/hlg`>X.Zlt/+(M7n7gU)qLjM3?EUR\a#emg1ca(Z?`8uJ@
%(Di2WdtQ)/?B0e_<.tI4\L9`i0$;Ok5iN.a\&_gmc*ZP.R%7LCX7PZf)(gcZNK.nt1)fJQW/_]-o.UA@/<kZ.H+8eG#!uc#R8q9a
%geJ@=-<=@"]>c_2CuqTHKLu"rX?m-1*0d*/#A%R6S]uM?3N$<,!aKte.n\E<[W)e4f7.<@g*RI!FRW;Yr)"aQ.-@3+Q'`se6P<+\
%=db+).8830]>W'NN=I^n8k^LqWS8Gpjac[s\+adRQ6\tDk.:WlL\&rE+<[`&_sa+nXs4D*^rD>17tRV1#)-T12_eHGUI_8TIm<oa
%o3:Rp/")ZFMGr#d0?dU47sK]B?d-c\/\A*C)mXVG"NRPA@0c\hcWMig_!TbtSns7UjF2@pJ:,<+3UeQ`9[NY/GYCST7gSp$!.b]Y
%Mt3(LIQ6tcjfg'l"MNiZBY1hSqS6<@bWbDYkIgB]2ui^ZDk<pl8pp,Sl^o>%n\SB'#mW#H5i_)&0&VUM/;?^7qZ:oAfqOk&'kPC.
%"#!/r.Zq6:@T>pA4+raJN;b_fY!7;IUt7FkmaXr5M*3"b[:Y*>gFt]JPl2c(giH<+U:L3S>>D<,_99jiD/4_J>q_O.Zsfh:@B3'c
%fi-!4L[GBN4]W;^ircdN5TpSCeImM7O&B'oZX"L?ql?J`m-K!9H;\;K8L#=(SSD.G5u%Rk#b>us53)QKCBX=K*3r<Fm<M6!8uL3s
%k3>l202eT.`$^ku"+&`apj!Icfon=#B2S;#0F8r2+\T#L)Mjo,0QP)`b(F-=NX)&Geb$gep@>p=$J/3UO_UFn^XHmP^H?5Ig<Sb^
%M,D,Q%p5433(kY)]7pq:n19";qIZ@t*FC@Xa5na*`M+S_WNtf`c$MF^UPCo0Ulj88EA8+Oi@l*N_lS_P#qhD%[b*g%mtEPZa(KM<
%P^H?_[u&U6IY[K]9;,F'BM0nRZY)F4$[cd-^:66YEYPo@;>7,h3A3A)HHEa^V37&iU`",nF!u%[O1IWmp!?M:[\5c#%[3TA1#^BJ
%ESjIYGQd=B9n]OjTQsY=Yo7j@dkbaqE^E59IVm0gUe:=55#<13D7)_7#.D+'=?(i&1blRI.1j01=*eS&PIjJ2K:%Q3].Ah"ZpPbG
%&1]pnAPO1MKdtiAJ^5;S\1hmoJ'pY*l[5e6F6#Uo6L;#.'Rj$b#pm5077YdZ26Np">HO]7>Q11Z]k2``]3pnb[FK;sLOJrnNRq<O
%1LanT.7d:7^U)O+_hKV"%kT:>[Foaq_^Ie?0pZO[mG")QH-**"0[>VD=]lq&,'@*nc[?b'H[2hWH]tDSZ6D-^%eSpALl/M9??EK1
%?:+VSN#u*:=sL@gd61KkL+)6DZlQ#mq4Y^s6T_(+0g+,M"6[C5oGT8L.ITtB"mY+2p^hH+jPKL"ckN6*i`qAlb;NV"Y"13ARM^Yt
%3RspN=]'1GI1=(V3Ob]M%*E*2/hE%Ha(UNY=Qi\K(!X6Oflu9r7HaiFlGkgZ=/U:bcos]`%i15pCq$DiTe04IAkNhki1mtG<G&'E
%gJGg8UWUVX$Mio68D2`FD=h.ijXg:%Q)'C2L;&#!.Ke2p(^fBGZ+I(Y<c*JI.]d*E*H?^<]AA%%Bt8\;ho<^NV.0%/'gEl&2B!t0
%B^8\hWJ+Yp`*l*d?oq"c:l:UgZ*ek]jVH"]>*TnE@9Y+l4DCU8]6pe>gVh;jp1hPXS&,A1Q$AS7#\FZko]Ys[c,>Ls0rjM9qnTTd
%;`;%s"r>+?2Fc`00B6._D1T!ugEf`'4E"mPUQD[H!"dTiUEEV5Lum+W;B!TbclVC)S*.`]GJ61RUpod]/]^qU3*`@foXg+HU:EJ7
%Wn;3OX4S:[kG)0b?<-'km.6np.hkZ@qAfrBi(5/Aa:TU%RaW;f9l[%)N]!UlPLm+e`m(2,_B;Oj51*LgX%Xe.=YIbYLf<]`;?T->
%dG(gc1l<iX8B1la&d#&"V^DkGUr/(0A<mgq9K^9a/&i24\Vh\3a^>jj:YEJ;n3j#F8K3)C+cc!O=q3Tkfd[(e53HUX6T,\C4C,?p
%#"Q=/E='kp/MiK&%uL`.]FOmp0MnCK0mXl+!ai#VZSPbL28*-M]KdW#o,T*HhN6G,/7\#^@d$*bkJ4NDWsgl4P<\]W,[L*k9oMLF
%*qpg^Lk/[aW&%=2;@5!)=Q,.3!o1)Bg?_l#8I:$g?9H;(DBH``T:LUhIsKJ\l`<$P/DLqA$uJA8o&;-8&B)e9.QJT^4+oZDFk3'9
%MD):-*)rQ5Us,?dT*/+9=IC6Ml#5EpU7ek;dP3M@juY(PD:[*&WB&=K'Dd_!5)j*(%)/bt,+UOER_f'!lE"cn1c"DG<[>2S'$MKT
%fBq11a<QGe`-B94GbVpQLfE=Cbo1A5F\!JDg5Cm2nD8Whcq%O#+Y\d!]"`ShZ$"_PLE,gNq6PB#fXheHiRODhh*.U:Y*M[N&Y3Oc
%1LS:.Teu_32MO)?7ns4p.dCL"L:\f:@L%guF"Ha6AUX8>MbI:)Y-p/8Mh[\k6'Co`+)JX`nt_7Va#Prh+fS@J]c2!cb5*/-L7EnS
%Y<.CsmC8op$m1TL.'C(9X^jaIk/Vhs`n4J9J;Cm/Z5#0.,<Fq7ROHoj;0?uV4q`D`m49*o?JhJ?)rk4qC_t3HT\n'R*FBj,kt@OI
%&T&@%I'puY+NRSu9jn_=",IB=QB#*aZOPDs\O&;)Z^EQPR`.;TL`Q#]OktE=q7P]j[$032Wc]#H79:$mjt9K=l&T-f"U\t7\?'BA
%OQ7)9V@:jJ;+%KL.-^8tO^UY@67,2*B`RoV)01DYNk0d#F/NW59,i2o\7gL6NhA_;'DcCS@ZoVkU/.6Ra"K%os+F,]a?r,/mNCY/
%4!^Ig`PC2#";+i41'7rTKH_o=">A/Vfaq&pWZ<`/9#@$8CSop+To]O`Y6V#rX>V>?'i%t!*)b2O=n1aFpH0MYNNfP,3br@NKVrck
%*r7%+#jsOJLkFU!H7Gi4%;:uY!eU!j[K&J7.8roR]=1/,MI\/r=6N"N7U:O<S<VS\+M"j=7dn):SejuB.iV#O^!^t6"0<#.)YE&U
%'QCPAg3htN@9*+lj4-]"k6sO]T+dq)6[Lb3%ee=/+5PVqLL/!Mm.(VMT*D'>JG'_9Q)L*Ys4Bs:F_Qg?,6&92n,I7.j5Wuh"%e:C
%lkbs1s)oSU@TAp`<IA)u1pGUr6@2;O/LJISAq''sHVesq^N5%YOPaQjf[3H.8e[Jt9u>q*@=uRPE6!g\8%r9UnReha3Jeg>he,c;
%g*#m1;M+0_iLC-F&?`a"%EfPci"&H'.TiAso-A"g-0^>P!"rFq^Ff#k[3=!:6(`/SYV^cXpqGg\*,R,%>`>>j/o>O4ZoqXH^2RLZ
%rJl]D=u$C;Vh8jTK%+qF:_]+C70N+Q'MCi/<4*Oq8Cr:rj/1g8Q<9"<?/2KOk=EsKk6fNVaq+nQ%Q@u]6Wi3Of,1mc>"@=f8IT#b
%.8'D4_/,<B^dBd4*LZg1Ujc+@:lZRG6PA`^TWFpSWR#467A(rBk=0m[m+Pg#bRtq;S&t%gYXU4;faQ^=.S7bOD/jERYJmmY"7l0X
%1u7e>-m;q45q,:G&MZfkV[<nB@rPms>6qGN:`-XkQpPY[[Pjpi+Vt1b:aP*QM!C5]NcYY_m[(VhDEA1I##W!UT1&JgXd<$cAm#=M
%kAVKaoie;=W:.5[^\h[=$,re_d8,aD,e/.A"7@:/&1/lt-1&^AmSNiH?DUpdoG$Udq9;!i]e-&sPVZ9=nGe+"("EWMJsmh(h&Uaj
%>#cShTHC8mrGh2M9?.46'^9cpO#cZbQaJGpc\<'>M:(b#^_?.r$QcHuW%9867!-!f277>CHQ-Uc(tJi;)<(LH7*,S@GO,"\&UTK2
%QS)r]3>,'`E(+3V[=R>,^!i9+B5-f@XsPqt79q:X%4+8Zm(_S8e=ZI-EqT8SZ],FZ&+fekm8iuK@"1>6=E7fn/dT\=R',78e6,8g
%hL,X6'u,=S0H0]COO\aegq.Jla/cU8-<A:?!Os5/3%94SSalu\E:(E(oe",*j_OXP7WrJ<hhJ<5gHg0N>b"P4K[C%/)&0@0\duUg
%=5B_Ig?S\QLUh]dR]b]-)`%;."1Q#!dICD92(S!#]f`jO1#7gPPl@18E-pK9UR.b1d;>9hNU5$W]+&%o[tFC'm%[n"][6uJ%TPqi
%[a&Y=DVN-ROLl\#J9]t_FtJ^6rYmWiDZdKJgX5P+Lk/ofSlKIP+`6[3gtbILGMPar.#Zi'q-)0Y)]Q/,ha4g?gVEf7YS'g&>[9U*
%4Ss*^5(o5_*G[T,D-Fo"_m!;Y@NIJcJD#&Q)p@l/*UKi;GsV.0kAc"KdrZU[[*P<Z?)JRWn7Ea*3[h*FlA1"QQ$#K5Ea!XTNm:fB
%>Gnk(@,&a$l]U4O*&9Clcc+K"pC>O;IJNCDhcn"VcjIMEqA7B,iAhFP3$@1;?3F:Tl/ZJLd11/d+tDltMPt,%+=(u)P`mnr=-JAt
%LBUiD%j0O#fQE+t*ouH;Fe%T@QIiX(#r>D$JSL<=m*KSEf2T@FeNV/"Fr1/!RdtpF-Z-M>3>nB#P!)h4U.G]C.o;Z_/mokD61HZB
%7GF6O,[uR+?JZX$RrZK%C4UeLU!kpR.4?WHJ5%0kj*7Vp+eHPp*.QMjX?]o3%#"S"0jQ>C+e[-Fe%(2h;^ug<&dtm6.m5f=hqRBX
%-o+9h0'7@A-"N470f1Y=1T#dKkG$_hQW!7Z]9$cP954Eje*a,]o7n)BIDCu4A?6/Do"Dcn!Nd_16QK-7#7IKMc4LuS9ghLjb(^Me
%aSDY46mPs:99JUiCuMefO@=>,Q/?b09;h\j4"h?72N;e=O$c_J*ih2("mJ&eFiGk0X.uYLg1\cG@\U[q4mq%.mi?X&>B$6ZFIrUH
%1"!LUgVDJr*7A*X>Dm\pfa*A3J4#h5l'XeGI^EjVUn'=el:Dr.e'FWVdLIlTU`3ltf]Qrt+@O+oL#>]Vj3UCn0:gDZ-f[6['gT0L
%8U6H1\M?LaM)/Dk(qj6,AuB7dijo+d)irj],:]JsZG];NQERpnb3=]L*&Bo'r3Yb^?8=A"lE1n*I*tJ+k:"T1cIY*_+)Ge23H-o6
%P_fIRW=I&^#?<L4)!DAV<G.AQpkuHb&PKmgV<hP1S*9;];3McbJX*5+!3s45UG%PHN2g=)`))]XCu<&LFm/5C@f0BQc%M^?@uo1:
%V@"OHK?$H-l_7S*rBP3gj'VX,\`^*u<Z*!LO](K;T3\ftH%gL^;F=>M=^$@k<3\^1FAQ'4Z&(ZsW[9@ULS/bWg>*L,[Z]kZ.]#X]
%2hX/IGXt^oV>UOeKt.$DiDapcL.gRK%XMr$N:aPI)5eAlXL^UFOjhco3D_.]*$UB7m#&4n0o-A#k;1F`iYi/h@WtT&Y5IjdNRoTi
%k"g8*d*ZN=KB\"7'bfG#P0+:uI9U((:(AK(b\M%RnfuJ5`3LjW3L1j7Os_jRJZ`C(l4n;S2JFpGhL)\&UQWPIdWC[ud(YsEWj2ce
%'I4O2WsOS]dKB694Z"l-%oFne)@4jK/a![K<*4+5dQH#N$<g>NVhl@K=.!hA6%<_*F'Fdg:HNi-UuWSdkZpA7_4$ICfh(kO&1K"H
%lCeF(MZE!2Nhqf67-^RN,]Xr5*kth"Z1C='Ol@aJN7M"&2KlNn)m*&U=5Rkf?J1?oN#+nE/:*890Z\,Ad_:iF0(gMqPcUt;*uaD$
%]X!j%;i!V(7/5%qEK?K2PaJ`O5S9@R?#-aOQE/ojc=2PUL0`#c8YTBSroLDE51,03@>'R=*.r6ZEN'kW"B:qI,<L`,(/R#o[ZBJ)
%(B7"FCF?N(D+FPR&7V7gd9dmnB9bp(J^mOj[V4?+N+XeL1B_I3[dZ'%_[n^^$AL4"=ih95W3YPf.PHi7oXBRiiKP(s<p>U#js5;C
%$p5*CP(Z[d^M[+QrFdtC0e!X*JM#8ka<IpS\^hBZ+57W<Sli&H-kr??.SI")FmoDpU_dTgEsh_97BlN3KFl*q($3;9"bC]OZr.C`
%In^gQY*$!+i([\^QhGRe[dmQpS%#*1W.pJ.'W2;5W(YtYi%riHBc'POYA.3?p4r5m:E&H'9Kmj+7BV!kV$,BR<6bCKPQ`FfPfAR:
%o-#C,KTRaL6pu8*O[-WEOobg6FB)oMZ'!o/M+HR(GX;,)$NQo`c?_/e.Vp3LJOVE&5gu%Y$r<S\!T[@A,a<&./i9bZ\G\0`',:l3
%U%@P:f1k<?FkX$=PHhL1<_O:F-)I*r-&b$aU.e+t.U%a6^Xiu<)X0n@m*\<!91r13a8YSQdQtj\RKfnN]1,Gdi9I$!!W``Z;)hfU
%`RGc[3HXN'9,kc\,>_p&=X;,?=[^!VL,;_lfr,\SJWb/El6=ublt>Bq&IN,\VAT1>&Ogqid`/THg5Qe%4"OC<GIoh%$cT6:Xm;nf
%(!M-BC-//(od)CLjlU^N+rKerYl)j=DnR,XlAmPXb\G>Jo8a>kMc/AfGGt(4U4aVjmX\V@7H6>M&KSNqN1>'*2Es%F#<C,tD9HM^
%Xj[<4K40lg#3;_[h-+eOR#iu>8'5b_UB\EkAW2"Lj&Cd`XM'B97_VQ#R6ua*1A&Q#1)n\-NfiDi8JAm2.mJ0nhcDPp?<d@N1fXkB
%ku6o`g\Tt#rp*5l1n'8E7Ju,'EK'F46#Ym&9uW:ZZO%JD,++CQCHj\9$!(f.Y9,s:oAqg!k=clDQk![d&0jlr)"CBu-$H$gJ1l>F
%<E3!E>EEhJ\-mmqc><@eV*kI:enu:'eTWJ+j@-s%\($ha"V2h$jTTWo*E+Q3^eHBhW3Z't_Rlpj&$WF3/6s2/@9Dj%5(H+sg/%t^
%A8d'aLC6SuD7^cHjNoRNk^[!!Od[#(SES5=n6(_DFh&^_@dU3.8ELl@TB=ZZHS;>RE.[Zb)2SuD=P^bI2o]VTP,ls<n8Rd46C^:*
%\`_KSa0blm&%+^`MfQjlNj!rEU,GVW,E%7>LD%6kVt>NH]c*C2%crEj)<iQ^>u%(/+nul!Zm-H6%nh]t+ERq#bAJ-#=g8rmXF[,;
%'?PQbo9rH1U%d,@p*/gXo53GdZs1*^64:NBg&b-@ou<NSd"i.cSoB+>&:66LICTZ@6Ie<k"M8c.%>K#u*&@:-$T]UR"@j=ofk%r:
%RdW^N^kn+:AW:F7eTcr&kT>U-fpF/i]G]bc-If\OcFVQA#5'@S9\T<lQUs8GDlsJS&(^T^pY]4jp+BU.d^jfY?1Tjhd.j3!Q#D'H
%bJH2naBDj35[(5XKO4D\H(s(+qc,BXgZ=GhK";EW*U:OLG9#h:.CUh]B@L[,D#fVY`M]YF.]br,."todQZpFqCBi\l=D3=OP:.Yn
%&W$Jn:EOGC53>mt.q%R6]dmRcl`BsDf2Q8?dg\LoBAWOOcae6="1WI`s//L\s(!F*GIN!!T4tBHFR"&PZo&Ni.oLca.,44[O'4/q
%Epi_4KtQ79G%!Cq-Rs,-dk31h+Ok3?U,\kiC>.oM;SJ<FT&Y)r&HQG^^hV4uJWA93KU:`4%GXmFih/e@$Y47D:QI8:>-2u%DN?JM
%oq%8"aB?C9Ci>t5(=AU,#UD(2RYqb`JXW]G$joM3CNCEGT'`QeSW[TuS[P"&c!BGqG:P(<XrSo5n0lB:Z0R`'3q8d+fPkd1.dWaY
%!e`hEm1*:FEp;Y$*CU`pinF0l1;-QHUH:Nd-GC91aCu6.i$dpC-Cn:]+unr;2U"o`gtA1!9#&9SPg8.-?G+HtB\WNm(:p9plOr:L
%?BF1er=5/m/j>81rF'ogm8pIq,@4ln`>;[9n[+t!23JDg*7=F5QG*tXDE+6,&\SkAU23Qo)g&E=Y`s82<M>'kdNX#+Q)oO08uH^W
%W.En28VAtU[4t7R.o^RRokQpZ("1IhaHs*]p?N+r&El6_1FQcm^N`rtP+h7oS8GWdUM&V"R*ZaMVoCh*qQ\5d0`K"m"?e0T,CLTq
%V@c<Z+o/1:[D83.0*?k2A*hmaM?[fB-t3=$&EO+RMUUSm-o$`TO.a-Bl>!P9Gg`RuoX):o0h[W#l*`!kLX]ZH,,ab*,]lSQ+Y]dp
%og2+p:cL$7Q5"d4Xuu'oP22^H'hCrcOkfo/buloS?BjhXq<79a?U)1d)mm_MUt/A,5U5K#+8'Xn)j8;mIW)3l`u4`IUhC"2&9,(=
%pm6GOO[)k!d:&u!AJ(r:PKDRAMKh0T7?lFm]-iP2>TQk"c#AG^Ln2MT-MOGFKPi29"%n>14PD*t4t'$TZJUgs4l`TdP%b"Jfe<l:
%$@W8D*G8189>ObsF'H)9c"M<9AhAhCNJ58.P[(V8oG^O>QR?TN5(5W%ZBJ7BCT.pdP!=Kaa`RV5A;V$/%tTiL/@B)lYXPh-I"=]E
%Q8QBQ`I<[b(j7`EM1ug^6uIJgj9%2.%hlO&.)fupf6G5jb46M?,0C"8lh/8:--0HI&>iKemb2$Rgq>AmrZW`(_O[7T,fF4>2qGG?
%b/Npcf4PS(6Fgo2AIJgZMLi)<%CTAHC"OQYpbD#g-g9rTH:ZEGb8Su`8fpgIV8i]M<34#u9pWC9c!TTn#A;k4m&*Iq66#XskS%O\
%+E91I6`NuT3eVE(k\Zt=4JKj6&>(?B2>58:Y=='FT;O9QYsZ6BEOP9bVVaBgBB_>3iEcIlgChPADkhmVX/*#UgU=o%.7GS6p("Qd
%QYeI^%liGsZJ&V1k?Ps+GhD_S?0FL8Z?B>G=?G4Jf#2lQUHdhGUXIoG2L-dH*Jp7_/t;7XgP_3T4kf;O1I;Tom+Nr:5#.^2.&h.F
%EaZ*P`8IPbSo^HKFQ-5\<?NT$+<i1F4]pm078W-C`RdjSC*VRd*]$99%^^)beP^5/M(%/](,KkogC@WCL1l3l0WlH7CWWG-qkp'0
%C)/rDeAl#&D;el4&fXiO\#crO:mdkg=EC-1)CB(fC"au>'K=c#Lg:jaSLR)/$-C_)cLP*:q/YKp0us1fQ$*#/KL&S\B:6tAJKhBU
%hSKP/QkSXs*`]P^$2*H-HeqG=TXIcp>LREb5XYt.Bc6n8JYH`AKE-+aiOo&&V_hVZS*e"bbb'>C4.(OH;1/igSRC(h;Ms9WeN!k*
%,eJ1A_W=Y\0f:'?j9-qEj)r!9C5.i)c='<hij@;"L)no3;lM[3lr^.spu1u=+->[[mtXD'*^<V`3C_61j;7Z"qO)K<H5paPNZa`]
%*J"#fh)97O%=U^WqkZ>Fb;`acrp%j]&_uNjk;dY4H10*G`KG4_E?CEl+IeEjl3cJ4k25La$AXW!Z(\FoMo)n\Zjk_IZobX5BFCA[
%8T^enl*\0j%pmQU^G%>(6YG6C3cS?RQX3odq<WkO&D3X-+E3BJHZ9E!N*cEM5iC(KlZZ.A$P-[%B<d<ji5>t>4:-O#6qUdXG1Z+[
%[4rdXo"WL^5sNkUB+C89V[Od>7T65sW)>j^=(7G^f2dc)kF5e:WbP\#c&O]IKQUCWNnTO3Q"Be`)m<O##GXgF>)@noDc/kkYZruT
%5>G+M.j8UQmbpG<&?%g^Yg05,(Ap1U*C3dt1h^1;^@7qX*_99pKBjSB,FN:?d8"+&'Ds*BBT)Xflu*SS<VgAaI84lJnI-G3;ljpE
%i:EQ-RD[437UDuB="qg):'5ic>0k?21,^3i]bf_';tl;N3bO$".VoY`LWqHm2HrCnBV\:W+RQ6`'!TNa#s.9=V(=H#WH0J!%BZ9Z
%)r\&X[;2X'S`I,SQBs-Ef-[HF:Dt+C4d`ejHBG@'M"$7rV$7Hpmi/iS'+#p2:K?'d7'Dl'&_*p4[8Wn1;i)9(\q_V=^FY3=,^`if
%A1_g+_jcQiItc:h3Hh)TPM#CsqB,ktYBh0u=e:3SiWNE%=:5PVBSd!Xh6&0G*2g6u#fk@,$H%1Y$,,b&5#E?"+I8PpD`J&K&Umb*
%)q:MBeJo`ec6pA4dIE+#Ojt&)rV24'8rTZ'nr'OU)-@TLNA:/YMLlTi4<':D[^R>qEn8o^fudNZ)BI1C&9N6lj!pp-RlD0LM'QG^
%k<GO3rVA><9?/%5`nmWSkFsZO8a-8--"mB%4[sHkKY.dS3Gh9#s'QRT%6VX$rdr1(,'2Nb`jRT/"j>(7>*k/2FP81^iBQ0A\?Vt-
%ZPEn=-V%h.oS"d?Jb&MN6p+OA.-kRo`#VK:hVE+K7Qi:"OnQuQW-;mg1pWeE1p8eB%@p:D]:ea1B-XH%k0s7)c1QS_A-)0a4u$+e
%7T+RS:GVmCmfo4>n7IMT?F#t$,T6@#7U/B)nOu$_Gq.OHhGDjEk($[/3;8s5XgFM+_^ME\a$Q<S.*75F]isjk.5o`WQ"EeVKJJPM
%e`a$/f\;4^$9fW)V$?N85='3h'V;:R6"fbQ*6+tZQhD_$(mOT!9^($l1FD.t%eO?Y<gBQ>0)$QdVlbpf_#n5W]3s[p-G!NE$6grj
%ZT<Y`2O6#,G9M94EY@_e85=gm!s^79$$"b?=.75*R'.4.*SC/R[iHI+KA3<fau5&HE]MFT&%5P4I6"IjP4q*FW7Q"!4S=N`.60kR
%SJsu=):SK<:h\OP,&UI]_QWB=CSWO_)0+0n)$ffjqPq<S5h?qg?;7FY4:kcj>uG3aPm_GKRNMnUD,1Qno4*#<Ah,P#UJ6PGRicmL
%2bWkQOg$I1j+TBd6;Q@OK&IX8!UnG%@$?$\*o_#r=&lh&0AEuYOJWh86od^=eb#;oBjSMcgh^MRoISVY3hH1'?.\De2.:XE=?A-@
%31$&H$eK\]dC!`6ca9flj)\PY]^b):Mr#EsCL*LKD(`R*H+g</"2.hI7TK<XG-s\H-dNraKc'\fiGq<+4LnbF0qhVmF4reF)a?,i
%a%NJap(4$19:D@k-)M_m'gMMB3NVpkq@mZ,aka`2XLl6R%,b`?r4-N'qG;;eF/R,7)es(8od^b$Q7,S5%230oJ>DOY$4:n6pNE65
%Acb?,T8hhm<`?KU'ldJL*_!gVDNg'I9XI((ckNQ[$<ZL'5sulOpUsEl[q:@'_)rhPq<nRC^-h*^Ou1J_G;`a//dT,i)PmVsP1<GR
%SKu`/#3'u=c=(G4;DYHKqM/X,!B#Kf)AM3Y,U2L);`Xb2H8&-ka/JPbYjRY?O36Bp:r#8ADlIudBBN;/cN)*RSO]Cn#rkO"GI])3
%L==3\rZFJ%>[O#tb/PZS<!*,m5'7f0]Fnn/<'%-g)M=9un`_:I#F%nL))hfRKKqt@X2O[gOa[EKh\3j?1_(YI"U"uZ8P>F:=Z@,p
%L1UDAeiLuA4-fSm9[dSpP4,97p]?A9r/!4O'@]SqP>ZD1/G(Jj[03JU&5E!ekb1d?'aS8'H4Q5$7e29/TXU0h2]Fr;jh2&-_Rf*J
%Oed?sSs':1)_t`=TFfVHUl5(/5FSS9J?&16I5KJT+u-c1lZm]QEn%q2kg(tcl=j%8O@\>IYUEZ?i+/l9<k34VcJ$bUj%:tV%k+D#
%)PM;Bg)BE*qO-T(7-ZePG#=c2$-?j\CD&$f";EtD*J_SXqPB'bkuoF5[?8QNUt&k<8PFbqr$9d7L+SiB<nOUpfK?j@?IE<Dc:\cU
%k[]DJH(Al)*-'9u[RVipn=B,qPoE*8_4m0\.XmMA@fRRlH!O!`j>?Ae*C4`65BAAB?6?Lq8G&mqp=+OU#R=n2Z)bhC3K>`?/'n)9
%V&O4,)2ali7@:;,%P(I*249[S7V(5lati[16^Y!\CK3KI[gS"qS(pl@8gnr/#9YCL%ZKrccO\mWUVfh_Bi=lr4-`"`g85rK-Bln^
%a=,H0F!8NFX1[/*mO3)t;mU;6j=s_H5p1L-ObO,hH,^+CHRV\L]^PbieLM.[X@8Kt?b-T*>FHmY;V]__KH?Z&BJpQA*Kp8:=-Vsl
%f"N'ELG;`9Vh#b3=pECg<#ml(#!tqH_)l"l)PkHGD%MsnNu[S6%+DnW'5+#q`#JWtqC8Sh`=18qp!D'/:^HqlYn%;t?DWS%N<+S>
%#+8m0)VQ\.mb<8EOqUN!r=62Ji<FHhXGpod@!eh16h6-ErR)kH-*1sP*9I/no+u]#3@.[R>gAe\Ga,6=9o>q]Io%4:)C->!IJ='>
%p5#"ocm3TF:fk&G.e&YgK@Zj[RT2:h-p(eVHC]-@BYp^<9/oI9gAY7>7JpZcW^e)!K^B%#gjSoSeN)bK\nm"]9D22Fhq4EM'r!^g
%Q%cR3.N/ppS`,YY3B@9PV!j+GA`O]k\SC^`e_Pt%_1H[8RlU_oPh_nN7]_SJ#)"$Lp@M9$$gFU<#;=nA:lk.VIAaR7Beg@<H[B"&
%MpZaL_0#WUA85G>SLO82g_X\PBnOK;eg;qPV:oad3DKr\Q7--)A9_V[f[E.[43h^fSK2`<)Ka\2l9qQKHWXMcj$WKg>%Y)1dqZ9_
%EY^L'dE^``kGc%84hEusC;3eZ@iD6H*K6#)3SBnsf9`)qd9/o'@l&Y_`@&I1=j#iV<AWOM/8Bb]YeW0/]5U#WRsCTjT>*G5b]n52
%cYh<W@m:bC!SC-NOp"MLo$(.]cl^hP5@Q$feG9%oP0(^$*rL1pBkXiu]-1oZ)sFB1Z(6H-(_5#pm:R`f]M`$P4&JjrTr,IE]gs.R
%^5Q4BcY2Ac"D>c`IZhlH]tGE]aAYWB(b7j9)eOrXQC$tAq*gmAGtqXHcdQ\s"de&`:;)(6c7*n^$`MlYkk)OK.e+>9+"1-o4)Xgs
%3IJ(b#LpHB3=V&iHK%G>5;c_?+F\33;I#kIG.IDG34Xde::?7pO^4ZpNt$&F@qY#9qeIF&FDnnnKt0,aHg5e3Ku9.hG2]gHBC?7E
%I/u,.E.Nb75JSiP0RE4e&V*LbXrfh6-p0s?*odk,4ZFZ(:Vn+_EKSkNrUf^0FI:N,gS&,-K\WA/j1YkoTA`pH0rMAMNc^XSnYo15
%'M2Au#]Y0SS3="L.Q.EPS=[)q&NVNAWb?Z=FAOOJQ@m9_8?aC+RUTD0ii_2i.DDk'P^YDKDK$C8\0G-%Y)J/N4gsjkWU?>52%lEZ
%&sL3h%G/ZmjFcp!MYH[r\hd%94iQHX4*?oqltP,SHH@rde+D9`D]M'O'sPM=@"KTX^Q"=aRr5i`HZ*%`>*cG%q'"%S(l(iRHQb`O
%$FE=)hq^6=j[:(7mIX)n0mM;W>i)jtjOnsIDhe%eQ&([5@'Bg\>AZ+WP7o8@ZncH&qU!1Ugm0MCE(W.0rj`Dj?fQn3@D,*n:csMd
%XNrKmMdEAW&PP^om#neWUm>+Q*ntp$Fq2YD0rZ'&#@Vj]6eSN-O0YNa!K[tqqes`+T)'k\EX-Cl/$5:65Y&.;I<pQfU.$])pp)co
%kn=^!p+ukt]fc*UF`^M1\?]J5jC-2X,7>Dco4m-BNfGL%?.&2"X-)'IO8\kFY]C:"CtW8eDdnS\'62UHn.=@7diZJQV*\^A7aLn(
%)h7f(2s-0<Y.:0]T(BsSPVC%JCQNkmY:+UIPSf6uiGs2d$`dGU&L[)QTmi6NF1%]JH#@W7og#oZS1e(k`#/oOo6cpcE'H*jWq-V2
%=bkV%SUFb$<it$?X+:`F:\&66YbU6XD\mN0hJ-PD_KqMT^dMh&I-sE&.F]?6oTB!U;fa:q;fa:q*G.;8k'DkhB1Vrd8%PBD.2i'V
%0P_tUU>*1<Up,S-o_Qds1n`[@4i*&/HX4=4=QD!)(S@)VEi*r$JPGe%!eW`I=at_Ma<FVuQ0$trd"RuGd0hsI?+s&JZ]P^VBe5t<
%*pq:`d.rRbfJ5NtST"4>>Z?cd*u?56J;Z<@^=5Kh(YpMfoAa1+-Y&5h:<OVLMu5?($UJDILl4@$>s9)`UnItu'0F-[2QHaC8QJ]=
%o6*R%@rqL+TL3HCIZ=#V"1cd""uosk3C\6.(F!ir@gXfLeD\jd2[aHZ2lOI_p_4l[(Y=Y:1QVu'B7Le5cFe=\']nQ?bA!8IYuGeX
%%^_7ff7=,\4VRBjURBUF7nWe"p(P#VF!c5'=Kfp2N*D9X:k+qWKUknfRBYulkGg65@4WIH(X?T(lb^%L%</FPo+Pufplq*kDgqB&
%OuGnO>ZU#I)iO.b0&E9&?>)@bdc$'dj*62%72;tsS2iTI=*2Z\fuBIrO'BVrNKlkKN^Mgao2n"Uoi9C6pafIk]_c?IE_&oIl/(:p
%Za+WDq/X'0E_)$;<HOVRaoMf]kA;(e#O"/4*A*$W?V+Il]Gr)K1\]tl#YP(gbOMDFH=!ru+GXT;dW2/B;_4\a3AMo8K](6uGM\=f
%I:'M2E].-4\6^Isi4FKjI'f-kW[1@8JN7d;F*/EP#:(<ECp%1h;2-^)*72,6P`:qQ8`eBW3p)P/njf'e%s)#$ZW#VWg/p?JRmT8F
%H,>,-1cd7j*'!3u^WhXii!=NiAn(a`TJMYucu@L0Z;[ufQTH:&&5o%d7;0$OE.Pt4`#B4ADO_]>e*&n=dX],./VD8&65#qDf5Ru&
%EC%P>V5>I$i2%Bb(0_sPgCJmtGUa!cW(R#BPiJ%jh;]PGb)m<tlg,GrrK-*2(E9B0La:;fL5hFm9JaP@Mj+;XMSF1P9SmD[j=&?U
%7nel("-W40Gr7`'-?YoI(*c>+IHM1X,6oL615D5-6a#T'S[i6]3n\@fA)p1Ha59g95XWfZ7`eLcV0G:YOX$Qk35QtoOb;Lc^l,Z=
%3Ms:Ge&KH0npZ8C"sZVV4AMTN_8lX<N(brC3N/\%il[OK,H[3cK<7<98sP+*Ud`CfJC!0)NGrc3-F@!9*$L1K%RQ2BJoeHmE<$N6
%*u5s]ItH_',ii3j/!H&^!D)[*+Fb#EKX+9&IKUBn(ht#,Sl2`hL^EMI#\BGKI^JVu,`b=cPss1>++._^0O3V"gm+"s!>pj0Yt:>*
%r`$sb6)nb`XooE[g&"t@#UUt!KiC!'%XX:)<d`;#J340+(J9]aVX<BmYXPQ-_[[DLQ*6,dN43CJ`%*'&.JtTPX>Z.HE++53+ZWj(
%3!6h?E<&culZuiN/-H.@-fc`8&CRtqA?E=<FmUb[1gCYfD0uu<QSb1Jd;^Fk;u.0QY:RX-B1L$#*6=Ol12Y$u+_<jB;(b8In]>.X
%Rt3;"`gcP\&_WatS06?/Z$QZq8!)81=DXMn.HW;RCpV2Bo?tb"$.PI=,$,8'%FF?<\8lR9H@&%i^2e4Fj9&qZ%5*YT&=a7M(J!IJ
%C%-]Z(C)d]&f)9RLl5c"cWrHMP8nf*i^hCn`,jtubb;GS3'\(8nI$3>1`T"fA/kpMA7%8NNeDagR/Bonj(Og8SW"f`*ECg\A/r_X
%jO%^TirG\-T,SdUkW$_qd;ac6fuG/hGBo`NCF=N,/rLCF@*bS-E,;L;cV'7X,=.n@nj^Z^)NQa;pc&nb3!Xr3gRs(6cRp.Y#O!^!
%DL<G'nPE*R_T-)=LbY6UO!En[g.eHIe:]76C=W)=;VoMY+4*\D+QpAMBm^m6isBE;VB'c`\BEhO6U0\!00IR=q-O>/>_Q$;4(d9,
%A9'PmoQfEUJ=agk/=S^lbc5Kf3CqjP8S5f>!6Lo)R%:E[e9^I<IA$3(jndBo3?*NqS1]E8aiEcc!i4O`(IAVD6:i>:KH/Oi<k3p0
%quLi%oKCJk3'Q%8\W)_]8o:,pA&g2EapVM]3QUQO;E$e"l@Caif3'b_o3Wk^gCAp'@I(SREPB6E1(L5JdW'jBd?_GD3:+o3REEFA
%iYWT:9H9<ab%J7ECQ_]Xq,75eJIUjNmQ:Ya1idRWgbWs4L392PXDMdX6.RZsODPZC"7(Y4ZF7!Z,anPVK/`D=,P`X11EX6oSr,=`
%kY!!M)gl[hVP1_cc/X9WdiG&pq>2P3knF'q/"^PTn4EE51!]86qJb>O>O^WDLuTWoo(o`&r`k*rX"iWfHlOSO\rns<NXdk]W_kB8
%N__3BmbAX>E[2p$!UcGe-fg@^T6mEI`Q7SKZ?<d=Ob9P7Z2Y1T#G4_R76MJJ\rpr\CuLtJUV_E#$3VtNNh.8ng;V.l$eKc4#s$j7
%UumYu,DBT!8NetOa2a>@I@g,Sa'mF[<GHXHEA4k+"(gNQ9PEVLCqmT#igu3`&C!dak0D#8i8Wc"<-s_=\.E[[Hr&4#&orTBNEq!Y
%d`*:NLGJ;S=lIguaI269jA5k@*o:613Crg&U`:-nLMI9(lGkf3%RLZGhui$-_KD70L$LG?797bX5'geR!NB,M>QP>!A0BCU$eGCu
%Wo,F4NH"k*Cg64>-?P*n:\59t?^K)(qeBY-j(U,cqYB3].lq!V2R5C'YoiusKH(E<P8'A0,31$)S*m7\c4Ab*F8._:baF[pg%dUG
%0h21j"*F*@/d$4dA@BYdRteh7cPM$?+/5:fZW\cr"=aK,(G_#i0O38O34Q6+(I)Opc%I]kS;CSI3:$.WW*,*2BKXOnO>EO,6HE<5
%3#c!@0q[SE0[W+7QN)1f:8/;rPan:h6<QEGd,VK*BH@&u:dTIhND6bt$gjqX3bkAI&_N4(P7FAD:Ge6sde`mZNb'a52Xc^;*SXG-
%5/mTZD\"t7)]0H?kPAI2dfnnuP'\le(P&<\*=sSfrIomT.WjG76I?$/[`R11%8_ql26U2uc-Tl8-)Z[1-mq?qfHoq>V^t:!o$VDG
%Fkq4<UcLop\0tAep]KG?#U%:]m&9t'XUq`njD9kk'BOem/C9)s!]bBK<a2[co*6u$N.RSd+mP!2(V,rKg?[Lqg$/r@_^IStOGa!U
%^pN6PnH#kn=0ueo+g&-YCq[9]hR0<J[FKYQ247&'K2/'K9JE=1%uc9EJ>a?:o0US#@UG)qZ%,#QhV5(<)ro,$%N).(_g1u6=R@9u
%7icnoO/Bt2N-0It%&\7DGk6-^8CBM*+Jc28L1-c246a6c(DP>`%;%JLm8rhEY,@]753NgZ@2nnJSRZt'Z9dMbp;+M8r509:YIGKR
%PQ#RHGlK/U(e5%V;GT>CNNh]?cnV?TBPIO(C:W_Y*UP.JHSC*i%O_@1NY.1sqYp<:9;1JsKZHp/prp@"rE4>GEd1dlmR0t.bMW9a
%>B2C(:m1io-!=)=q!Kou#C>-%_B817W:b/ei$l0Cs+<i#^\s?]M5\/K_tr,;q"C0f0E:I0hu)b@s7#FQ5CE(WJ,\s)YC?/u7`2^m
%s'P`?I/Ld`rf7$E^X5WFE:rgprjUe_q@EVSJ'':'D#aF"s68:qr:@]$U&VJ><(Z6Anu:gMa$9*aYJ9u6\)2Z7%rIF.nb9fpQ1)Ke
%GCTYIO5G?[c*''U_;086n@Lpap=J[Bs5eb.C\odZL"H,BolTA0[pmrpg[HkGqtFqKhuE?;J,>^"r8sIZs2Q4rq=XL>r:UXcl@Hrj
%]9g;2qKK]$o'6h$HiO-DpYYoJgFmklpS4>ApqfhrV:U.Ka7us@`\[TIp8cqd5(<BYrl[7ujZe7drAWX4IbaR9Mn<23(]C7MIf&FA
%hgYU?[0?O7DLD,3D+fgX:a)BR$eIWs$Q#(6Nu7iO,4ur3mdU77V$h;re@<7G?%6.krjm4M=dC]"o\&m)[mb&)f;1!Zi,1i7m1.Ii
%m1+X!9@j^Qo"&p'WelBN>3>gqErC.BqWl;s(+\"3e*jO4kiGJU'@f*P45YP<VL"M9ehK+g[PC9?)0*-./4smamk*VtONN<JVs0qj
%[d,9=OrHu9gBLPALMI!gBOPkBF\C"j%'$"&(W,!)1Cn@*\Q`(>U>N,MkSpW&FoR0fa3`WH3$.k'KCcb`_Hpk[YC>AAT+P-b<McP4
%<N=BkF&32U(g<)'!#5JXZ+87^BVbC$9(Z"=oM9s?P"Un[8+HsH#k/m"ESI\soPIC4(RM<hNdq(!hYTOM@;P%6o_lEIdWh2S,LZP7
%,LYD/8<\GrM'LI9,>t/t5B(o6FX7Q1phk9Kg;#t%C@56Y\:ik0XdOpZrPrt?&>"u(]IJOf5b=(S\>%9pCT6EYU>,+NOT$*.gAp33
%30VirTZa3Q'4KRm9QoD5\_DAfM7d`$A:iU=i7*?g2Qr\?54:^unJJIUqTTGUJ,`lZC[4ddmsTB/jYihc1#>E+b_Y&L/fj1RQe0L7
%*<,Qc!<%JI9=^+pPUHHWoe>H^>g#,^<=OU5Vg=Xh]VqPRe"/,"?lDlSkuJ'@&Pf+?jHAiZJI#a^QoU^b]Mr6/HU+Sm;=Q6PW9gA&
%HmMdoK+K12Du0^,AVuGS-ZrZ,./TQAE#]j`;4mdEKM/;m3[E'#WFA:Qqf]#Z+t,$E"KE%MKS1/:fVRN.R[mD;F#(<'Ko/SkRI$_Q
%OBid'&nsq8R%MYdaJZ@E+I'r-@<:VhG*i,JFLppZT5`]"oP+'5/K8nr/*5kWL9?nJR7oauLCRjlg=f:WZ]W.HDVId:3"@mHrLdc'
%=q2nQV82(.JqoWSjgp8j1!LF9jTrZ%]SXL<U'I=X94l8oD3I"[3fXnG.?c),VQ/9b.NaT[d;^V264Qk/?NF=e8QuAXGHSMML4`<m
%\G88H&P`!59"W>qk"Bi6#jtM4*]T84'83(.MtH/+IuG>\IR2aCpQ#pteQsd[/u_+(-q.Ug6cn?RT#'ECD:W9SYpYcPZIh?']DBDm
%UVp"O<+RdN`*T]75d6ZTqEk#=LIt&tPn,_^<+OO?E2?h3PgncPZ:`'H?i/K3]k\_lHg%>c.-`P83_XcueoYbN,`$*XW+&0A:*NK/
%]keXVA,n;&gNli"eW1+Rfd[I2L7XWJI+!hU\!$$"-4)N:De0\TngGJ]7OLE<?^KCpj`oXQR_!>qHB^Q<h"t)([`g$El_-!l0toQu
%+)g&+%BVRJ+A#FQ/+Ai9((&,=_PCk?K0lJ=RZOOj.`!a'V,UHfQ>1XAN9%Vs%]6^UhN,/7j/S2]!4U=[4G@JBJ`=T1Nj=co'3V*u
%Tst"F0IF@t6c2u_j[D#$>cr6eAZ^4*87-+r_4YtQEij2/mGGWM\S[ugP.W.Gl);1bP)i44qVU/B-moM_2Q+8]:?/GC,*?I7Z&SbJ
%3&k:[5m?UC\HnfB;X(uk;<2)K->4J/:Q),#+][n[Ag[<_"O7lTmFm=7p\%_X.U#s&<UC5B,X=dFll]6L&[Y%35+K;\#Yi;uF=^+5
%+K;:_^$>H)]&((Y$@DdaDheIUDZ2r2(Wd3<;m(kGCC&tdPTX/!^fH3h?%er6GuJf6/K;SW]g(Af:LT,\,tp3"0$1D,\RJ^g[Yq]5
%i!kKQMI/`a/$u9?nhXl)T:[ZPCiE*Ue\fT:'PG#Rrr/Zu10:9n:5Ymm,&Wc:!V#=H[I7!]jE?uWP$+G\Eo`DI>L"^.#P->qG"B'h
%_M.`nn)Kf+`,-J,66um%]5Eui)SeI&$I^8`?/jLCH<nT[aTD#B<4g?.6u?P(F-n1"=']b#5:ba<kk1L6FS8^O4)CB;a`L4%A4'=(
%,-`).jriO_9t_%@eR@R'0!p(LG@t-O+pggd9I\I(P:ao!fkh;#oBl/a=marj6Nr6Qmhaqp]667okt3uJB"B4smT>tBr5X0Y?Bn3(
%RfLNg-Y'M2V.&J>V'@.2.AJT(2+sKtJOT;$WVY#0X.bLu&pDopC'3mB4_BU"29)W)WI2r`3lEr2W\La1(AtTJ[J)"""l`[W/Bq:2
%Qm]H3eBA3bBb()Q#4KISqiKn>=<p_c\-QTI[*Kbo/-?'ggK\C#0<rt8*+(Zj7Sp6"1ll6>G5LeP\*GlX*,SPtd`0='n_N*-mBeeM
%k7ZVnGeKFg4V)a?4c/k>jCbn[oN4:KA<qf'5WL;cmr>"V)8sEFDi:HE+M'j:cEL!AL!ocB/D`!-6\H,T$LX><m:Ca[81l%'YRp4m
%H>&HfhEc&"@8pg\kI"/<>W';nC!6)X@<n:2\"SYpg,$8t[!a7(5tU5<d>N9-':FDEp6:j0l4A/MVho+X\Kba\)Y^;elqX@NM8+Y2
%^]N.kR(V3lTktMM[9(B&:l<bdd`47K6W]:#pc<el'lA_d)t_jjYE5eekfrZ<*CdrX)C)mC;$Ef@W5P\>Z2+6a!SYq"Zun<J4Zhp>
%X56*:W@nm%^u@pX1M&q=nMHn?bE%_fo0VDBAn_dcrGk:U<;tZO0HJa+%^cbIbN1>fK:+J][k$b>po!n8mF^DM_4fNO$B=&-o,rjU
%jqq/rK:++mD\<D9%_AFp,5JI:e32,LD`F3BU&L"P*"2/;F1[&&[E0#%<Xa%kNmbL7aX:nQX8IK8=rCQ%_EpBVZ1fgV&;e<SqLBMA
%^9m;fd4m+g=0rJ[<Ai(B5"))3[bIVD&67#[$gB]?gSXJ*PlmFU-['@O[4r,6W6Z:9E2$i[h(GX#_2q4*e3RJ9;\o=T%Z8k0*\`4A
%#mG414;>)Zci%T8GD\4\a$R(!IDsTJBVK!Z\m<^tN+$pqEgF,a"\tN&.UUGCEa.GQ3Z/s$)0oF6UW\rA\/+'5)Cr8a2pnnAhl^YM
%#.?G0B(9E8q1O)YS6kXZ[Y`%GVEM<(9C'knpH3WEJbass$^Td\WW.%Rb+I$DoU^\+D(!c0^FgD1Y-",J7K7YBrq^\RNBUp["Ra?e
%5HrN_/TN.cmQUYoCrYX-5r2E-kudl6-jU0=>`=8bE)F._"Zs)MJdk_CEF4;?e;$m\/XA#tdEMKd_kSsn9:oq.\'5Us,Tj"\'L"V!
%pi`QKb2k&-%WFu#M%WY')l6d[BA1s4'I]EsqtsZ39K9`64c3aT/LHcb0(II;Mr.dBm<#G[i3YO6U,;&A12)!@"lVF0LR-eW+Veo1
%0&:nIoeT0acn'aJ'>)"`F&'8jj#ma#s14;_EdL2Ylje%gPe!>2!A:jTkunpMYsWCFFL+>XF=b5kmcKEJU3pb>mh^6qDVs1lJHW]_
%qIS+eWN)8IG=,nn2FD#K,UFd1K\fR^n]4.u!1C-$:4b^/r,<3g.X+3O9'CEB0Mdkt7a0!0ctDQhY="e5#:.i'C/.#WQJ(Ei=-a$#
%mB`g`m*@c:#0j48e,EQN[C";*eX\c20I&p7&pr"SU$'rgfYGbcg!O\Xcu(TTg+Z3b/pdHGgA.eWo2f_j%BZ0C51fhem2eoqoqQnD
%"RjS[K'lp(V5'on8"@RURN4I`Q%Qp5K(hkGVc!U3grL?tUK'BA,4]Q.gg_RIq\".M/DpAikal62."8R`1)cV.g>jN.oH+;/f(0M/
%R'ulR%`0qt2DJ)36##QMg.:YnP=FF$-%\KL/+i+)d9CUK[WC+!\)LJBY7U"ZX$e),7+=7WO963G%V\R(qd\-=l9BZ0jHFJU+9)t`
%>L-V%k;]S'#VV<g9cJsl8[D"\`%XiYP1*QVQ)XT)oU2)Qk@&K?hq<:IL#K;!2kC\:g5T:/`:G[$<['f/!`o#u2QW`c.haC:'s`mD
%F`Ogg3n\rVSsghONNs3PMC38RnW^g;<Y?=u&SJgX`c/B-o0<o2ZNV)#XWuSR-j7;U/[H;h0;rR69JDGVV:tXq_V<?@,VuH#[jm&n
%23Q[`G#kB#DFWrUr4gqnEZJ1[l_EP]jsUi=bi4T7TLbn#QlE>(5;_o=hgfB2;2NFt9ZiiCOF7rE<UTApbVpCSjZJCeimId>5IC0:
%G<mr9*1d%m`!n#-q:N^AIKbo*PP/S#R*LS297FuTm\$iHnPj#1T/nQt!EP,,##$%)PHuIqfMG^;?96m(Jjo^da;Ze7Fi^V>4At!?
%>'$dRTP*=^=I$P@k/&`"-<%eCdA`QZ<NhroV1:1*^LMkrn>)2UI>QCt(.Ip3EFfc&Fe%T5X55+^abiEP.nPm7Jp/d^?c;4Zg>jNH
%6Q]e]V(bMr.sgc^OgfaqG#f-^lilD"`=dl,+005"JVHj4+Bbrm.[Hg=+oHZ>7hA)BHM!rQ?drnT^hVW&T="-sdi*+dQQd&XB0*CT
%EPa+aFB%qlJPn@b?PH)6+qeQOV27n<!NEjWTo4@a-q-q#GhZ;=W('@a6=i82f]NhXduam+\Oq!2A8/]APSEB#lm6ghNIBu,cHDYK
%<d?Kb/`+^ea!TYd,cT5%4;IVnLu:(Pd/("N=2aTgAgE$sP--I4<J@\@:c'sYQ@Y1PQ<"\eUK)Vmg]>UcZ%Yuf_2jSSnZ4$M1PWQk
%F65HQ>/e&'D$eN,-fEH9=d2<C54PD=QAa;)Uh$H?mt(qCaNjs$^pfa$d))9d^f/d?BA+":\_ATR`([ob$Sj[4W)Um%$l!FqB*IN6
%%^:p>C/IU09`iXdLE_$LVZta>RJ>&ULE";h*Kk-Ve?NT'j4J'53HOAVn\BF`QY=T^T6`L@3#@i%19=:C20-,;&@G?N5@e*5p,@/p
%EHWa^CLfV*q(`6(MH,kF*/g2`#8Dgs7$Y2XiEMCK1C2i>8\:"+#>hWKSccr+iiUSmBET_kBWS,jNh#$cMUIJ3^DWKc1Ti\/.=Yn=
%gX-<UOdlbbDOlKa8T8D0<+K3<aEd+J%I0QVY;X2q21&;HU>rR1L5VGr)B='.&^_rT?d4@.Y!\-?[_;,ni$?Ds@0Z*;:?T7r;#m8q
%-l*_('@1.6\55"3&cGZJ0PW^B*T!C7Sn16lqimJH"pc_5_S-\#p(8!4^REddHP@Fs':k24]:e3_<Z>h/4jMA<*E%G2(<b3QJ<<s*
%l9(S-f-aKK75EVn'p'TfK;"EO,0W'#*amKsh"K4S(Z4RLgfn(IU#5eRI_G1Kok3)drLQmW^"8NqUS,\lO8%JZO8%T\I(]2L(Y91=
%ED8ZDFaa;5>$XG#G!ru!V`F\Kp$@RYcbL!!b&`\\$\9)(%.,]]PtOTRi+Z0iqWD&En,c!jI`8DbChJgH?qg*]4:ZCcWDk+QSR++(
%?WQ<KO:ZiHOMk:'+bg:qLmg0E%m/D^Q9hSV+N$Gunu9=(T#7q?#/omO@n""o6]dr"0r\M2;\hfuWe^c;WpLk*e7bjrPdd3a*SHY4
%cVqVJK=-3T9R6:\H/T0c4UHt`2rA'"(Nr;S)BcPrN^A4_H2g6%dJ&%oZ*V;LU#f5>6E$H4nKluDP2->bB33U.'#O>9C[f6ar8I6J
%k59%0*m;XT*_Q4Fo#i=7aqr.^%c3.>?DG+?QR3a><,$\H@njU\]gFrrjl7A=7ke*>_A7l+V#tr9>>3;54gXai,$m6=SF%`jQf%8T
%-7MQY*8T/t;[]<`64RLdm:]H>-U7=WJTAoK(H'rtHWXU_7krrP/Gu$iDf-=7ZjQ7+D=?$D]Hd@]?8(aX"ZdJFBh-qOGPG+&HL[i8
%";.ajS@(qrhBql0U/U(8/QBE5_BZa!^-9VSA:sa-]O&>-eos40h[nU`Vj4H069M6)Ep^J2PWZHKkJ=$V)n(a!Id\:[]sj\>n*Oe<
%1$)r1A+,X1Wq-C?2-P3n>4pTrOL1Q;7c(Y&%K4u$#-Hb:d&m%c[(dbk84)mB'*::HD4$0!9)p5CL)pYR7nm4VXgpL\]cgVK/TgHp
%%37+ApG#IuG^\elmEeq<]a#YTnF!IR85q'bO*UD%@n%D!ZoW+m\'E`*Hbnd,<CImUTHl*rrSDgV$<sq5^%2l>.pl>4DN!MapP,cp
%gX*(oG'(A6T-s"nLNKPBKY+tAp]bcKG$W)ik]UpIjJ.88=WOueXku%`?7kb[f^6]5B/*IE.;$&+43Hou>Romp=;T9=C#42(<jur0
%=IjA3ZnLHD$Y-GkZF,,O."Po65;M"9*E3Gu=:)c)&Rk/Zc0`;4]:]07%`P&qiKmodb@o;*T46?#p3j^TiVTe'\D2BO)#d)(Jfopb
%aAMH1V@cP_d>H3YoO`"3Wn>`fnY[I0rJgFo/@cdq1nA?YD^]7R?Ku`)<IP(Cok]<.3*q.&Ba43UH1HM9i:#%\p&!jF(`dU7A:q`M
%42%?Ja_t7&]]*[:G/RlTIUY^)FF89T;EiP!gL6`mduS-?!d"ZbDi![q.mLs2lMX`o,=QgfT7WG@dQdVK.4Vun7m]CoEW,NH^]'2H
%H9!_W@<W3a(gqTeK&APm>5+5rFra[^*l):ScZl6_h/)`[%]t;iU"dB:dJhD"7`NMO&$q7rmCB]G'mXd@p><0VAu!,b2E#6.Wt!n)
%eW,YK>`HsVGjNDABj@@:TMdpKLK3)B<2f6,DbD8:[reM1F]:N=l.:F]VU*9sa\7I&T.a]SiY$50DG[<9BAI2GiW@f-+1'-LBH'nY
%h$;JbNXriBRDWJsbr2T1-f7B.8XOAXh(L/%.eurY7#gQ[)H@`fNN+#dYIHGF3oW^qrf!nCEkAF1mY4`;*^H3Fc[OVD`"hD6p]HH)
%PIl;BVsjJ0>]J\?`n#DU=,G^jj*k5Z_Vk5FXqDo`Uu?6_^-QO>D<Nm\G'&-&e]8^IlY3eI[6==DXtmtXo!sgiljg#sD/F+1)H@1#
%#1WqOf@q2\Sa`EcJ&X4.+BDU:h2SC%5t3iTc[Lh51b(KH#6r_BgOB)=[s^H?T%-,U>'T&/1i(;@nc%XJ(ip%dg35_6d(M.]oYHnN
%oLBjA\BD(.qdrXl+phH=E_??[,jM(4-9^C@OsMBf)C;2S,c@3<1V+r+Ea%E>=!L<k1Z@m'0HH:d$(ip4"l?>uZhucRg-jBWH"gYP
%j%3S%;!mIklJ!$oYIE5QSZn^I_'&IGIJECQ`9.XM`0[`B@GNlN$dV&,?&4/#547gTp=&%Q(V>d9g0bZ-q`!<(2+0BF)kn947aT^W
%+(j9FX<EHhQI->s#c5"o$Eq]I&[Cl[qrdno[#NEAh+$UgNji50bW_DTnk63gcd0)%s68p1bk'.mA<L%JcL\Gr.sK>0E]K<QkPbo,
%Z45.emc/A?F82g@`Y_njZA*"DTU,PbXPU%b,C0(u6n##UQNf?])kS(\NR&X4n$]VYNN)S%^B>e[r-TafT0@+o*r?tT[Ar'M#HcPJ
%D62:25.s,(hSJ^>Nd>??-G4=I?+pgN)bO4:?ZC_L&Db]MN,Ii!6`Z>(d+6+95tWQ1f6CYTPjk4s@5AKNOpc]?m1!mY2FocK)l,RL
%?Z0^iRdB?CrkGo:cd0)q59]4^M./_7KtD:5>EW-"`#(p+9K.g8T,_,il0BcF6^aAA]7Zj=;2I_-e?fO)_p9E^)Qt7>2po$s:e*if
%iuRr>+a*<#6jf.s2F(63S/'9ppq[ga[1M?TVol%]LrNT]iDda7]C_eRf;\&q-"\hQZV+l#+U9ObQVs%^>..miJQ.V>qFU&sPd3od
%E^55Vb:2.lnN%4bU)<<^2QUo;l\p^.;-f(Xi.7]2l\UcP,Xn_e*f+7<o5`0HBF,!>m@u08"FBi7^opJ>.'e+MQFm!hOoFWV)BTgh
%Ti-*jG6t*Z9F@I@V\$43]XX,u;M@#uA-uJ">%`KQOa'35gd`+%WhbAUT!ZmP^"I!PW>%&nC9Ar&*7/=Ar!!hH0n,po+ejWh8l$a!
%G0(%RgM7"U];$o=Xt6eFT/=qI(&[rtPLS2IdId7;CV,RR4/Ktp+XYf.6mGYpf`^%!2X3Z"`LH"Q<`=#J'fi)H-C(!jZseTX;I\g_
%_,(UYnhZ-"8;L!A#S&:CMGH\.g;C:3?B'!_L:11N7`GXbMSO6l<#(qCO_&iT@_B4jdqPr6@T>;=L5r9#Qpn$S7,5;9atpM5EMPBG
%e'QUo!KYQ2iUX5(7\_lLJ"4rkHt]8c2ci'7O=qKN`@4qL6Il4/EJq*L<?gFn:*$0S2(Rf*J[.fd5,"aOEjcC+Y&3KnIsKI3J+GQ;
%:/Oqd&TQ4J]+V,la\j=>RiWt0[X%;*3F0bX0L\*$@$3&OXZXPV84f[@]^CS&hift<S!2fuHRZ`g#Ag-.G%_&J#9&S2E;"m)Vg=p5
%YVO7p-5LsMBWOa>clnSCUkM"WR(>RL]E3<3L,t1L4Z-iEGTjAh40]C;Et5[(>(SZ>*>2Ys.,ZBZ"]:sJ4LWX!*IY5</iSN!iZ[t1
%f'Y(lc5^]3Np,Vo#S_"MhQ.Y%lY&_LZYpI`Lmuulo%68fogh?k2De/B'`H=#BBR=8+Z*,Q<T-sa$H:j_3ujrA84I6C/"_sETj"lV
%35ci0ZnWI0<)%$%*RLH1KcmF"](X$mAjjL2WNQnkj\Vf)gNInA=tKK6)7l)C:XP[noXs/E8L+1lPN3<T*5'NefD"f%?s;RmnL8L?
%J?3Q4.T=/q3;O(UZ]#&:;Cn-5DIQ7D$H)89L"@bgQAZ7)PR'I.<\_'BPisj.<(A*[a$\%<c1&lEj*PNT7L2uIT)-%B'mAQV-Mgre
%CAOD<QFSMP_JjU_H:/M'^ePeV_J'%S1<B.B%IE@!kd^/A(c=f+a.H"gda0)j(gRWb6AH,*\(M(7T:[<AK),P\#8P]=`3VcXlgqt+
%ME.&hh2Z9j=dltf>:9%sT=!!mh4te)'SOfsD-7=uC2+.$CoJ!a?S?kS;9e?=!cQ>TW'W$12!DIs1.s42%RK=P$;VT)Y>0+65/in"
%lTT,(kOh7A(gola:>M<j*bM6HIU]e/P\J,RclV>/XYHu,Cnn0eS=_@k&asDb\kT0%$8%LK=&kjZ.9-A;BUlK#Q7[!TZOV84-![U#
%BO]VR"VKL6I<!1IA[B5h&O@'ZgoTRBO[Dl:'8d>2PIRhtaP-9t]rPFS`+)S-BqmWDNk"&tk;]`PD*K1b=LRDnTi)Yk,:?p5<`@U;
%a"H%!QMfB<V&pSgO_^dgr:8LWYTOK9QDK3R@dIlV`a<T7G8(E/SsHsBoN='[68'dR*]?WU]hhEh;]OZfNn@);NV&JN(TQ`XSTt)b
%'g0BDp2L1C6FX:)J"GBCK%_pp@7Ya>UE,:]5X&rIQSL[q[*T&h[O)I#6bH?WEu$Og1N;&SJE25=VQTKFXn:#Z$Bi]]./Ir]64?pc
%B\eX>WQ4m?]?'=Z-M_\D$>\b\.AIgmZ%Uc'f[EA52*!jDQ"[/2fQ6UD:kH>,T9K\J:RNe*.s'l$9tX5"ol-o%d@3"2$TdRB1*.dr
%h60]%c^D$\I47P]eBTck/U)SI=g7LQO6ul*Rh[2UJeU=CKfIr^),7bQU*&a3CFU,6>tPsn9p2-V6R[kN^q>40bK8T:E'`6\]u`N_
%XU`;P&0>/H*YWj<lqZ%0R-4cbOd]+f\pVYWKHu>DgS)'*7&51en%'al1`8_p2\c3([OM0clL[^Yg!aClVN!@)pQdmV3[tg)N`0n.
%>s;h&A5OOnZU5!T=]O5\+p?^Nkr\/i9;RtL3(Ea,a8*"ibRE^K.3Y7bjph7hb2b1(6eejN3GUX<a:<)NZ:!JL1[_bL7OuSZ+"erC
%^sFk_8#:k4;TsF9`d(A-ln44.cjucpEMQkZk9M!1-Yqa1?[VuYU<X[7$QMt@i<&_^g[7<&@!e!;$TCr#XU@)\_g2(-8=\ROL\_7(
%^PaP$Du\c'p+`jP*9TjrEf^)_>ge`25[54j'4"4oF0tC4T,-m>8]j&I5$ZGhf;9DIS<-B#F.^cO?uqsd98R^q54pu"R^#.gEI#;,
%H]E74_\MP(e^P8'MqZT"SIkOb)Q!>"\AV(mj\t`7;mo2j@u%_e\)6Z.W:DG"C,]B?7/;IoJK`0n^Sm='^;O5'oR:/k-i.7M(Rj9F
%#F]MrO?Lea>t/Kkp4k0PhetEX2MT8#jo(fP.Wh@XS\jC]:/>s=K/O0N2`fh&Ft3OAoT_%KD,YQ?'N4ZlU<l\b>`*Q"l_'VnhOVF\
%N'"A-e^OK671)8+n%[,\IimjG[J.F"h>;+t^A#B+h>;+T@IJ\o](b*2_VY=hFRQtmq;2/J\G)Us4guNDotSeSIfjUR@HW,g](=g.
%_Tr1=GVOn(d`Y&nmqecmbk\R7Rh)6049%Xef!"sFF?K<bMN5rR_H5Fc(M!2/,f/*E4s[da2%k.FN]ZEL#F77rA'T9HB2F#FTY7\0
%BG1*_"1@`Y,7d0u!Ukf,h9dF1h?-B2M+gl,(&Yt`#D!Lf1-E:N1.G$T(V<%na=`Rfcp$l8=0R`]Su%ar.$ij]\.!S!k[RDDh'W4I
%+G]O+fB!%2NL[]2mb"0r-+W&&a7R&NctR^2eY#n/bL:Js*RsY8\&AIb\&4!u`M>Xd;1@qnU-m93WOF`X9@1p/-QU_M%&HgCi1eZe
%'I"f+_T;@I(WG'+fcBik.Mm&qI;KBb`[.`Hp717`><hQfJN=Igg<dRdhQGcjE6t;[Q_dn9R5+.\s/RI1"s8$s7ft\Y2;IX*-e\Z#
%.+j$-03Y:*-tP3X.V2f*71\V3),ti-$!:#d.XWO_C;GdQ3,,uQTa[>2#LNYsX(qg:44O_#XL-?T?.i)]B'_m%kV0+umiQkaBj)+e
%;t5hR]fn<UDI73`]fn<UDI79b]tU>Sb_(QTe$r+iKs@$@k!PD/:F<u>ViJoC%BQRufb@hhU(*=B!_*jO_Vh]'0>DjIj))d2#`^F)
%'!H$h4CMoK'kQ>u1oP@jl,!NW=u;T(P*8Y'lF4.2@sh%:<*Rs<2Y*_P`[d<YTrgYk`0n)-dn@`s!r%@F#fjhecnh$m`NP_IkjCWf
%oQDMg_Hn1P\\RVOH.+Et.'Vb;0ThB+@<JPK#"<Ti;&5F%+Om>W/)JhuiC,u>g$O.m&VFB9E@ja.;.=*MSNjRQ[bmcqJ;Sch,D0)g
%1J(-:Lt[d.%`PD\$`ZkZ?:<f/LGoO=,_*Br,AeM[WN#/u^Rl_E:RZOW=$T>C5n"NWN3_pAA=T2g_AK3))%$fF0_.)6:oen`8fOLJ
%RLpijQmp#oUlJJTm>/CO^[29A%kitlgUnI,?:!=ji%88/W)Qt@6K,?HrJ;o?ol%bqbim/7"r"%=;#-4=h;@kPXj2p%*99H4VX53l
%rJfO"YZJLOebLoL"_%mrR'R>M#TX9#U;r&?/G;K<+h_1IQnhGUH/&=bL'S38F=TI#o64IO2b77eTH<c84#W6cdgR@_#u0c=>3q)+
%(YL3oq!$388aK"fDa'"nP,B=0p1^qn4@SuOLOk:;Mqc+I&2+(,dj?eK+$HhqpH6M"<]!C'13+k9[.(LkM4En%\tsYi*aL$[qN,h`
%cldT6'7Wn4^4dJu)T^rnNi(J%SuRb'X:Yqb+uDEhn[;eUl>*D,-VO7h;+0K']ij7VD`R00(36PS`(GZ*AKM7&'\V!c)W`(Z,<gd0
%^I0Na-V_8@B0`C=a^QrJV&rqoX6KmfW?V':F?114p+@FKWIR6t5J"=*RUpFJ3h)-k,(]NbOgk9!*_C]k6a\8!d<k*pBPhi>I3u(^
%jcG4V;b[d$_Y,ItWl^@t%dhUdfq!+s7==^3M77m8*O'[NK&F`GoK/!$Pu'PBnWYhqfW0mK_)G=&^lN[7fhn==:),!e[YM"3d2gQP
%6Q9tA%[82>pE%Sd7rnMhHaNLFSHpGqMRMP+=>8SP-Eg!-@MKKPI>>b76J@I^5s(/eV-MS],B*Gl39#N-%>c[\2@%PPT)FCaJiHcA
%&4=<U%+_4lL?N'F7AO"l?4Vl'P4qTkgN_`f%c2b:7&>cnd1FuoN70U\%e/RVYmZFI,1lM80!F^,T&@E`bE4l0gZh$VoLT^7q?fG>
%3kYLiL9paFr]^>=s7*S5^4#T;^A\&e]*A2XJ,\T&^\ohCJ+K-?hgYTDs33e.rgSu+^3oP,hpV5-s4[JEo$?3CqtiVUme^p0IfD(9
%qsPY41b\Wn^\Nrjqu?M2s3:QO5Rm1K~>
%AI9_PrivateDataEnd
