%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 25.2
%%For: Lenovo
%%CreationDate: 2/17/2023
%%BoundingBox: 0 0 806 2536
%%HiResBoundingBox: 0 0 805.8554 2535.5842
%%CropBox: 0 0 805.8554 2535.5842
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 25.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 25.2.1 x236 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c004 79.164570, 2020/11/18-15:51:46        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   dc:headline="Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set"
   xmp:MetadataDate="2023-02-17T18:08:55+02:00"
   xmp:ModifyDate="2023-02-17T18:08:57.525+02:00"
   xmp:CreateDate="2023-02-17T18:08:55+02:00"
   xmp:CreatorTool="Adobe Illustrator 25.2 (Windows)"
   xmpMM:InstanceID="xmp.iid:987eaf95-ce3c-5a46-a2b8-5bc0b5f27cc0"
   xmpMM:DocumentID="xmp.did:987eaf95-ce3c-5a46-a2b8-5bc0b5f27cc0"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Sand castle parts. Cartoon kids fortress constructions on the beach, building house sandcastle constructor summer season. Vector isolated set of element sculpt architecture illustration</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Lenovo</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>element</rdf:li>
     <rdf:li> sculpt</rdf:li>
     <rdf:li> architecture</rdf:li>
     <rdf:li> recreation</rdf:li>
     <rdf:li> sandbox</rdf:li>
     <rdf:li> construction</rdf:li>
     <rdf:li> tower</rdf:li>
     <rdf:li> generator</rdf:li>
     <rdf:li> summertime</rdf:li>
     <rdf:li> fantasy</rdf:li>
     <rdf:li> outdoor</rdf:li>
     <rdf:li> activities</rdf:li>
     <rdf:li> background</rdf:li>
     <rdf:li> preschool</rdf:li>
     <rdf:li> collection</rdf:li>
     <rdf:li> play</rdf:li>
     <rdf:li> sea</rdf:li>
     <rdf:li> illustration</rdf:li>
     <rdf:li> set</rdf:li>
     <rdf:li> object</rdf:li>
     <rdf:li> coast</rdf:li>
     <rdf:li> game</rdf:li>
     <rdf:li> isolated</rdf:li>
     <rdf:li> cartoon</rdf:li>
     <rdf:li> decorative</rdf:li>
     <rdf:li> city</rdf:li>
     <rdf:li> house</rdf:li>
     <rdf:li> build</rdf:li>
     <rdf:li> sandy</rdf:li>
     <rdf:li> fortress</rdf:li>
     <rdf:li> coastline</rdf:li>
     <rdf:li> castle</rdf:li>
     <rdf:li> vector</rdf:li>
     <rdf:li> sand</rdf:li>
     <rdf:li> design</rdf:li>
     <rdf:li> detail</rdf:li>
     <rdf:li> handmade</rdf:li>
     <rdf:li> building</rdf:li>
     <rdf:li> roughness</rdf:li>
     <rdf:li> color</rdf:li>
     <rdf:li> sandcastle</rdf:li>
     <rdf:li> figure</rdf:li>
     <rdf:li> simple</rdf:li>
     <rdf:li> stairs</rdf:li>
     <rdf:li> fragment</rdf:li>
     <rdf:li> piece</rdf:li>
     <rdf:li> casual</rdf:li>
     <rdf:li> diy</rdf:li>
     <rdf:li> creative</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="84"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAABUAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FUBq176EQi&#xA;Q0ll6ey9zmHrM/DGhzLk6bFxGzyCD0XUCLh7OVvtfHCT+K/xyjRZ9+A/Bu1WHbiHxTvNm4DsVdir&#xA;sVdirsVdirsVWTSpDE0shoiCpORnMRFllGJkaDGZJ3uJnuH2L/ZHgo6DNDkyGcjIu3jARFBB3ZeO&#xA;WOVDR16MOxBqMqsg2G2ABBBZXpt8l7aLMNn6SL4MOub/AAZhkjbp8+IwlSKy5pdirsVdirsVdirs&#xA;VSLXLszTC0jP7uM1mPiey5qtbm4jwDkObsdJi4RxHmeSBzBclQvVrED4HIybMZ3XaLqP1O6HM/uJ&#xA;aLJ7eDfRl+kz+HLfkWGqw8cduYZhm+dI7FXYq7FXYq7FULqN39Wtyy7yttGPfx+jMfU5uCPm3YMf&#xA;HLyY6op3qTux8Se+aR2rmUMKMKjwwLa2deULj2r92+JTE7pZU8iKbeOVuQyny7qPrwfVpD+9iHwV&#xA;7p/Zm50OfijwnmHUazDwniHIpxme4TsVdirsVdiqQ6yLhLnk4Low/dlaUAHbc5p9aJCdnl0dlpTE&#xA;x2S4yn/fb/h/XMO3Kpoy/wDFb/R/t42mlpkUggxyU79f64FrzCjzsv8Afbf5/Tg2Z1JE6aqy3ka2&#xA;qskw3D12AHUnfpl2niTMcPNqzmoni5MvzoHSOxV2KuxV2KpVr3+6P9n/AAzW9ofw/H9Dm6PqlNc1&#xA;znKN3e2llbtcXc8dvbp9uWVgiiviWIGKREnYKOn6vpmpxGXTruG6jU0kaJw9PY0Ox+eKZQMeYWXk&#xA;ZWTkOjfryEg2QOyP8sf8dI/8Y2/WMzOz/wC8+Dja7+7+LK83Tp3Yq7FXYq7FUo1809D/AGf/ABrm&#xA;t7Q/h+P6HO0fVJwTvU1329hmtc15j+b0c95f6baFz9VjieYxjoXLBan5Dpht2GiGxKUflrazWPnC&#xA;29JikVxHLHOg6MFQuPuZRjbbqhcC9dvGfgaj4NqHvXIyddAIvyuf9yR/4xt+sZl9n/3nwaNd/d/F&#xA;lmbp07sVdirsVdiqTeY2p9X/ANn/AMa5re0P4fj+hztF1+CSCSo6U+ea1z6Yl5x0PUdQ1C2uLS39&#xA;aNImR6MikEtX9tlyJDl6fLGIIJQflvy5q9prtrd3FqYYYhJzcvGftIVGysx74gFnmzRMCAWaXb/u&#xA;G+j9eEuHAboryo1dUP8Axjb9YzL0H958GnX/AN38WX5unTOxV2KuxV2Ksb84yhPqdXKV9ToK1+zm&#xA;s7R/h+P6HZdni+L4fpY39ZX/AH8/3ZrLdlw+TvrK/wC/n+7G14fJ31lf9/P92Nrw+SldXK+g375+&#xA;3b3wFlCO/JMPJMwfWSBIzfuX2I9xmZ2f/efBxu0R+7+LPc3bonYq7FXYqhptRtIZDG70YdQATlE9&#xA;TCJolujglIWGO+bZkujZi3lHIc6qBU/EVArXp0OYGtyRnw0e9z9DAx4uIdyRvp+ooCxaqgEkgL0H&#xA;05gUXOE4qFulxcMVhkLFRU/CB+s4AylQ5hu4t7u1UNK5AY0DUU79exxWJEuS02d/cW/KJiVboSFH&#xA;Q/PGiniiDujvKRNjrhF5MErEyjkAASaEbj5Zk6KQjk3PRx9cOPH6R1ZiuvaY0ioJTyYgCqsBU/Rm&#xA;0Grxk1bqTpZgXSYZkuO7FXYqx3Xj9Tkku5wVtiRWWhIFaDelab5p9XikJGVbOz0shICI5pIdf0Pl&#xA;yNwvId+LV/VmHbm+BPud/iPRf+Wpfub+mNr4E+5auv6CleE6LXrRWH6hjafAn3OfzBoTijXCMPAq&#xA;xH6sbUYJ9yw6/oooFuVCjooVqfqxtPgT7lKTW9EZuXroWHRuJr+rAkYZ9yL0dG1KcPZkzIki+o9C&#xA;FXvSpA7ZfgxSmdmnUSGMerbZnmb50TsVdiqSedBXy1eD/jH/AMnUzG1n92fx1czQf30fj9xeXcDm&#xA;keit3A4rbRTcV6n2xTbvSHgMVtbJbB1pQA9jikSQbROpo2xyLZb0n8rxTSbv/mI/40XNt2f9J97o&#xA;O1vrHuZlmwdU7FXYqxX80r27svImp3VoFa4iMBRWFQa3MYIP0E5jav8Auz+Orm9nC88fj9xeY3+s&#xA;i28vDVli5NJFHJFCe7S04g/S2+aR6ERuVJB5b816vc6rHZ6lFGY7nkInjBXgwBYA7mo2wkNk8YAs&#xA;Jl5t1+60lIYLONZbu45MGcfCiLtWgpXc7YhjjjxIPyp5o1K9v/0fqUal5FZoJ4xSpXcqw+WJTkgA&#xA;LCt5v8xahptxDZafGpndPVklcVCqSVUAeJKnELjgDuUR5d1efV9Mke6iEd3bOEk4/ZYEAhhXxwSW&#xA;UeEs+/JbU7jUNM1Z5FCQpecbdR14BBufnm07P+kul7XFTj7noubB1DsVdirGfzKjEnknUUPQ+j/y&#xA;fjOYus/uj8Pvc3s7+/j8fuLynUbcN5Ts46bcLYfdxzSE7PRR+s/FKtKslTVrJgNxIf8AiDYAW2f0&#xA;lGeabYS6lblloRA2x/18SWGLkhtDs1j1y0YDf95/xA4gssh9JRHme0WTWASOlvGP+HkxJRiPpV/L&#xA;VuI4L4AdWj/VjaMh3DPPyXhEWiXoHedT/wAkxm17OPpPvdN2x9Y9z0PNi6d2KuxVJvOFvFceXLuK&#xA;Yco29PkASOkqnqKHtmNrP7o/jq5ehJGUV5/c8+k0+1ktRavGDAoUKlTsEpxoQa7UzR070TN2ow6L&#xA;p0MqyxxESIaqS7tQ0p0JI740k5JFfd6XZXTK88fJ0BCsCymh7VUjEhEZkcltvo2n28yzRRUkWoVi&#xA;zNSux+0TjSTkJ2dcaVZXbiW4hrKF41DMNgSQPhI8caUTI5OXT7W0t5Bbpw5kFtyxJFB1YnEhImSd&#xA;2YfltaQW+mXYhXiGnqRUn9gdKnbNp2cPSfe6ntWRMx7mX5sXVuxV2KpV5o/44N18k/4muY2s/uj+&#xA;OrlaP+9H46MFAqAfHNG7t3HCtu44q3xxVqmKqVwKwvtttQ+O+Aso82WeQBTTbn/jN/xqM2vZ30n3&#xA;uq7T+se5lGbB1rsVdiqVeaCBoN0SaCib/wCzXMbWf3R/HVytH/ej8dGCJNDwUF1qQNq5o7d4Yld6&#xA;sX84+/G0UWleBa0Ybmp3742tFv1Yv5x9+NrRd6sX84+/G1oqVzLF6LfGO3f3wEsog2yzyCytp1xx&#xA;IP77t/qjNt2d9B97qu0/rHuZPmwda7FXYqlXmlA+g3SnoQn/ABNcxdZ/dH8dXK0RrKPx0YILKEU2&#xA;O2aOnecZb+pw+B+/DSOMu+pw+B+/Gl4ysW2gYmlfhNDgpJkVxs4SO/340vGVO5tIfQbY9u/viQmM&#xA;zbLPIEax6bche83/ABqM2vZ30H3uq7TNzHuZRmxda7FUG2r2QYjkTTuBtmKdZjDkDTTSbzBqzzW7&#xA;28UY+rvx5SHrsQenbcZh6nV8Q4RycvTabhPETux1VZmCqKk7AZguerjTrkClAfpxY8YQ90r2xX1V&#xA;IDdCNxgLOPq5LLeT6xJ6cSlmpU9KAffjaZChuiTZXX8g+8YWHEEDfGSM+i68Tsa+I9siS2wAO6ae&#xA;VtYuLIvD6Qe2dw0j1oy12JHjt2zK0up8PatnF1mnE973ZQfMemDqz/8AA5sfzuN1v5OaP+tW/wBW&#xA;+s8x6HHnz7UzI8QcPF0aOA8XD1YuUBcNvVeg7ZzzuLbdFdSrCqnqMKgqUdpBGwZV+IdKknAkyJVS&#xA;wUVOw6YopTuLWG5QLMtQDUb0IP0Y0mMiOSnb2NtbEtElGbYkkk0+nEBMpk81X4uRqfh7DFCGubK3&#xA;nYNKtWAoCCRt9GJDKMyOSyOCKBCsa8R1ONJMieak/Lepr4fLFIZN/wBMr/zx/jm2/wCQ/wAHWf5f&#xA;4qWv2ktrB9Zs4jL8X71OyrQ75Tq9Nwjii2aXNxHhkWOfpi8/5Z1+/NdZdj4Ue936YvP+WcffjZXw&#xA;o97X6ZvP+WcfecbK+FHvcdZu/wDlnH442V8KPe1+mbv/AJZx+ONlfCHe1+mbv/ln/XjafCHesbWZ&#xA;1+1AFr41GC0+EO9TOsSH/da/eceJPghOPLtjJqrvJOjR2qDZ125NX7IJ/HMzS6fxDZ5OHq8vhih9&#xA;TMfQh9D0OA9Hjw4duNKUzccAqujqOI3fVeQCKHcHqMkxefGOnbObeht3pYotrgvLjUcvDFLfpYot&#xA;oxHt9OKbb9LFFrJrbnGV79vngIZRlRS70qGlN8g329F8vKF0W0A2+D+JzoNL/dh57Vf3kkwzIcd2&#xA;KsGYIilmIVVFWY7AAdznNu+UNPvrDUbZbqxnS4t2JCyRmoqpoRimUSDRW2l/p13PcRW1xHPPaP6d&#xA;wqEFkY78Tikggbt/pDTv0h+jfrEf1/0/V+rVHPhWlaYrwmr6LbzUtNs7i3trm5jhuLtilrG5oXYD&#xA;oP8AP2xWMSdx0b1DULDTLX61qFwlvACFMjmg5NsAMVjEyNBVnngitmuXlRLdF9R5mNECAVLV6dMU&#xA;Ab0gxPY31pDfWUqzW84qkqbhh/Ud8jJtjYNFnehCmkWv+p/HN9pf7sOi1X94UdmQ0OxV5/ryBtD1&#xA;EeNtMP8Akmc5t3+P6h70g/LKAReX5UAp/pLn/hExtv1f1fBA/l/biPzBrrAU5Of+Tr42z1P0xUor&#xA;Yf8AK2Jpab1G/wD0ZKMbSf7j8d7Xn62EnmrRmIrx9P8A5Pg42um+gph+aNuJdCtVIr/pin/kjLjb&#xA;DR/UfciNUhDfl0sZFQbG3FPoTFjD+9+JUfI8Ij8p26jak03/ABM4Czzf3heqaJ/xyrb/AFP45vdL&#xA;/dh57U/3hRuZDQ7FWC6ytdHvh/y7y/8AEDnNl32P6h70m8gJx0aUf8vDf8QTBFv1f1fBBeSkC61q&#xA;58WP/J18EWep+mKyOMf8rIlb/KH/AFCLj1Sf7j8d7XnOMHzHph8BH/yexlzXTfQUd+YSBtIth/y9&#xA;L/yakwya9J9R9yrfoD5FQf8ALpB+pMTyRD+9+JUfKacfLUI/4ul/4mcj0Z5v7w+56Vov/HLtv9T+&#xA;Ob/S/wB2Hn9T/eFG5kNDsVYZf273FjcwIQHmieNSelWUgVzmy72BogpV5T0u7stNMd2npStM0gTk&#xA;CQKBd+NR+zXBENuoyCUtlLy3ot9Y6lqM1woWOV6QkEHkCxavt9rviAyzZBKIAWJol+POcmolB9TY&#xA;BxJUdfREXGnWtRXwpjW6+KPC4ev7WvMeiX97rOn3FugaFCqysSBw4vzqQfEeGAjdOHKIxIKJ836Z&#xA;eX+mxR2kfqyxTLIUqFJXiybVoP28Mgw00xGW/cq3el3T+W/0cgVrhLeOMb0VmjAqAT48dsSNkRmO&#xA;Pi6Wh9E0+5sdCgguV4TF3dkqDx5kkA02rTB0ZzmJTJDP9G/45dt/qfxzfaX+7DotT/eFGZkNDsVY&#xA;oR/tZzju2lrSp2J7eGKlumKGiqkgnqOmBNt4VdTFC105LQMV9xgSCoXoPpLXrX+GCTZj5so0b/jm&#xA;W/8Aqfxze6X+7Dp9T/eFGZkNDsVYpnOO6dirsVdvX2xS7FDsVdiqGvv7tfn/AAyMmzHzZRo//HMt&#xA;/wDU/jm90v8Adh1Gp/vCjMyGh2KsUznHdOxV2KuxV2KuqK074q7FUNff3a/P+GRk2Y+bKNH/AOOZ&#xA;b/6n8c3ul/uw6jU/3hRmZDQ7FWKZzjumqNyrX4afZ98CW8KHGtNtj44q4AgCpqe5xS6grXvih2Ko&#xA;a+/u1+f8MjJsx82UaP8A8cy3/wBT+Ob3S/3YdRqf7wozMhoSmXXKhhHFT+VifxpT+Oa2ev7g5sdJ&#xA;3lKWahABAY9Ac1rnUtImPRlH0H+uKdlvC4/34P8Agcd1sLgJ/wCZfuP9cV2bHqdyPuOKNlwr3woa&#xA;ZlUVYgD3wJpRvVJiqP2TU4JM8Z3RVh5je1tkgeASBNlYNx2+45mYdcYR4SLcfNohOVg0n/1+L6h9&#xA;dofT4c+Pf5Zs/GHBx9Kdd4R4+Dqx5gVJDChGxBzREU7UG1hCFgxoSOhwJ3XVHjhVpiduJA33r4YF&#xA;DdR44q7kviMVa5p/MPvxWmmMTCjEEe9MVFqdy6eiw5DfoPpwFlAbpfkG9lfpS/4c9PiefpfZpv49&#xA;M3XCfy9dadPxDx783//Z"/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:f2b29506-bb3a-4358-9973-eb49c6d09137"
    stRef:documentID="xmp.did:f2b29506-bb3a-4358-9973-eb49c6d09137"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:df1b4794-538b-41ca-abb3-652f1acab45d"
      stEvt:when="2022-12-22T12:47:07+02:00"
      stEvt:softwareAgent="Adobe Illustrator 27.0 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:f2b29506-bb3a-4358-9973-eb49c6d09137"
      stEvt:when="2022-12-22T13:34:36+02:00"
      stEvt:softwareAgent="Adobe Illustrator 27.0 (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:987eaf95-ce3c-5a46-a2b8-5bc0b5f27cc0"
      stEvt:when="2023-02-17T18:08:55+02:00"
      stEvt:softwareAgent="Adobe Illustrator 25.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="805.855410"
    stDim:h="2535.584115"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Default Swatch Group"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="White"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Black"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="29"
         xmpG:blue="27"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 Y=0 K=100"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="29"
         xmpG:blue="27"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                        
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -2535.58 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 2535.58 li
805.855 2535.58 li
805.855 0 li
cp
clp
220.706 800.647 mo
188.494 800.647 li
183.084 800.647 178.699 796.261 178.699 790.851 cv
178.699 789.357 li
180.607 788.436 182.746 787.92 185.006 787.92 cv
185.338 787.92 li
193.36 787.92 199.862 781.417 199.862 773.394 cv
199.862 382.452 li
199.862 380.342 199.412 378.336 198.603 376.527 cv
458.488 383.816 li
478.498 384.377 495.149 399.369 497.797 419.213 cv
498.43 423.957 499.892 428.551 502.117 432.789 cv
529.229 484.425 li
532.302 490.277 533.907 496.788 533.907 503.398 cv
534.095 532.946 li
533.206 532.604 532.117 532.348 530.805 532.206 cv
530.805 532.206 517.39 533.874 526.023 540.863 cv
527.561 542.108 529.18 542.618 530.697 542.619 cv
531.951 542.619 533.135 542.271 534.151 541.702 cv
534.839 649.793 li
199.864 649.793 li
199.864 668.084 li
534.955 668.084 li
535.107 691.918 li
199.864 691.918 li
199.864 710.207 li
535.223 710.207 li
535.375 734.041 li
414.479 734.041 li
414.186 732.056 412.253 730.216 408.375 730.216 cv
408.375 730.216 396.328 730.216 399.117 734.041 cv
199.864 734.041 li
199.864 752.333 li
531.541 752.333 li
527.196 759.247 519.595 763.923 510.847 764.182 cv
291.472 771.394 li
297.723 768.676 302.24 759.451 291.772 758.319 cv
291.772 758.319 291.22 758.281 290.353 758.281 cv
286.126 758.281 274.436 759.178 283.137 769.72 cv
283.855 770.59 284.657 771.199 285.508 771.59 cv
267.821 772.171 li
240.297 772.171 li
234.945 772.171 230.501 776.513 230.501 781.966 cv
230.501 790.851 li
230.501 796.204 226.159 800.647 220.706 800.647 cv
430.422 715.002 mo
430.422 715.002 416.854 715.002 425.489 721.992 cv
426.916 723.147 428.279 723.616 429.486 723.616 cv
434.354 723.616 436.682 715.991 430.422 715.002 cv
250.56 606.51 mo
249.351 606.51 240.242 606.675 242.339 611.684 cv
243.814 615.206 246.502 616.502 249.332 616.502 cv
253.278 616.502 257.497 613.982 259.081 611.461 cv
260.664 608.941 259.611 606.421 253.012 606.421 cv
252.304 606.421 251.531 606.45 250.691 606.511 cv
250.691 606.511 250.645 606.51 250.56 606.51 cv
361.878 613.711 mo
361.97 613.714 362.062 613.716 362.155 613.716 cv
443.702 613.716 li
448.446 613.716 452.292 609.869 452.292 605.125 cv
452.292 513.528 li
452.292 513.528 li
452.292 486.265 430.191 464.165 402.929 464.165 cv
402.927 464.165 li
375.664 464.165 353.564 486.265 353.564 513.528 cv
353.564 605.125 li
353.564 609.776 357.261 613.565 361.878 613.711 cv
333.51 555.2 mo
332.377 555.2 330.544 555.715 330.128 558.931 cv
329.994 559.966 330.664 560.37 331.674 560.37 cv
333.462 560.371 336.318 559.106 337.67 557.842 cv
339.022 556.578 338.872 555.313 334.65 555.313 cv
334.576 555.313 334.501 555.314 334.424 555.315 cv
334.424 555.315 334.045 555.2 333.51 555.2 cv
514.144 509.366 mo
507.709 509.366 489.923 510.73 503.165 526.774 cv
505.327 529.393 507.996 530.464 510.731 530.464 cv
522.266 530.467 535.019 511.446 516.305 509.424 cv
516.305 509.424 515.462 509.366 514.144 509.366 cv
259.412 499.425 mo
258.201 499.425 249.093 499.684 251.191 507.554 cv
252.665 513.086 255.354 515.122 258.183 515.122 cv
262.13 515.122 266.35 511.163 267.934 507.203 cv
269.517 503.244 268.464 499.284 261.865 499.284 cv
261.156 499.284 260.384 499.33 259.544 499.426 cv
259.544 499.426 259.498 499.425 259.412 499.425 cv
454.256 427.937 mo
454.256 427.937 436.216 427.937 449.397 434.948 cv
451.617 436.129 453.545 436.608 455.14 436.608 cv
461.928 436.608 462.673 427.937 454.256 427.937 cv
476.304 412.725 mo
476.304 412.725 462.736 412.725 471.37 419.715 cv
472.796 420.869 474.16 421.338 475.366 421.338 cv
480.235 421.339 482.564 413.712 476.304 412.725 cv
340.435 388.66 mo
340.435 388.66 326.868 388.66 335.502 395.65 cv
336.929 396.805 338.293 397.274 339.5 397.274 cv
344.368 397.275 346.696 389.649 340.435 388.66 cv
186.03 367.943 mo
186.028 367.943 186.025 367.943 186.024 367.943 cv
186.026 367.943 186.028 367.943 186.03 367.943 cv
185.963 367.94 mo
185.957 367.94 185.95 367.94 185.944 367.939 cv
185.95 367.94 185.957 367.94 185.963 367.94 cv
185.848 367.936 mo
185.838 367.935 185.828 367.935 185.818 367.935 cv
185.828 367.935 185.838 367.935 185.848 367.936 cv
185.777 367.933 mo
185.762 367.933 185.748 367.933 185.734 367.932 cv
185.748 367.932 185.762 367.933 185.777 367.933 cv
185.697 367.931 mo
185.677 367.931 185.658 367.93 185.638 367.93 cv
185.658 367.93 185.677 367.931 185.697 367.931 cv
185.615 367.929 mo
185.588 367.929 185.561 367.928 185.534 367.928 cv
185.561 367.928 185.588 367.929 185.615 367.929 cv
185.509 367.928 mo
185.488 367.928 185.468 367.927 185.447 367.927 cv
185.468 367.927 185.489 367.928 185.509 367.928 cv
185.422 367.927 mo
185.394 367.927 185.366 367.927 185.338 367.927 cv
185.366 367.927 185.394 367.927 185.422 367.927 cv
620.782 367.927 mo
620.452 367.927 li
620.452 367.927 li
185.338 367.927 li
185.338 367.927 li
185.006 367.927 li
176.984 367.927 170.482 361.424 170.482 353.4 cv
170.482 348.944 172.489 344.957 175.647 342.291 cv
189.457 330.646 199.696 315.333 209.26 300.009 cv
393.056 5.47161 li
395.332 1.82334 399.126 -.000158689 402.92 -.000158689 cv
406.714 -.000158689 410.509 1.82461 412.784 5.47288 cv
412.784 5.47288 li
410.517 1.83809 406.752 .0438082 402.976 .0438082 cv
401.844 .0438082 400.712 .204995 399.618 .526214 cv
399.626 .525071 399.696 .515445 399.822 .515445 cv
401.096 .515445 408.064 1.49786 413.644 22.1492 cv
418.997 41.9568 461.063 260.657 472.071 318.033 cv
473.455 325.244 468.018 331.909 460.678 332.085 cv
293.997 336.068 li
606.248 336.068 li
614.621 336.068 622.853 338.215 630.158 342.305 cv
629.404 341.667 628.66 341.018 627.926 340.359 cv
628.66 341.018 629.404 341.667 630.158 342.305 cv
633.309 344.97 635.309 348.952 635.309 353.4 cv
635.309 361.424 628.804 367.927 620.782 367.927 cv
388.954 27.6767 mo
215.692 305.331 li
300.431 193.372 li
388.954 27.6767 li
326.319 281.053 mo
326.319 281.053 312.75 281.053 321.385 288.043 cv
322.812 289.198 324.175 289.667 325.382 289.667 cv
330.249 289.667 332.579 282.042 326.319 281.053 cv
385.177 239.252 mo
380.949 239.252 369.259 240.148 377.96 250.69 cv
379.382 252.412 381.135 253.115 382.932 253.115 cv
390.512 253.116 398.891 240.619 386.596 239.289 cv
386.596 239.289 386.043 239.252 385.177 239.252 cv
408.616 108.259 mo
408.616 108.259 395.047 108.259 403.682 115.249 cv
405.109 116.404 406.472 116.873 407.679 116.873 cv
412.548 116.873 414.876 109.248 408.616 108.259 cv
false sop
/0 
[/DeviceRGB] /CSA add_res
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/0 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .85098 .658824 ]
/C1 [.952941 .745098 .564706 ]
/N 4.97729 
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~s8N#srr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrVc]nrVc]nrVc]nrVc]nrVc]nrVc]mr;?Kjr;?Kjr;?Kj
r;?Hhqtp9fqtp9fqtp6dqYL'bqYL'aq>'j^q>'j]q"XXZq"XUXp\4FVp@e4Rp@e1Pp%A"Mo^qeJoCMSF
~>
<~g"=s0f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f[na,f@SX+f@SX+f@SX+f@SX+f%/F'f%/F'f%/F'f%&=$e^`4#e^`4"eC<!teC<!se'ldpe'lan
daHRldF$@hdEp7ed*U+bcd0n^cHa\Zc-=JVbfn8RbK@uMaiVZGaN2EB`l?$;`Pod6_o'@._83t'^q[Xu
~>
<~W2HPkVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVP^5fVP^5fVP^5fVP^5fVP^5fV5:#bV5:#bV5:#bV50o_Unjf^Unjf]USFTZUSFTYU8"BV
U8"?TTqS0RTV.sNTV.pLT:_aISt;OESXl=AS=H+=S"#n9R[TY4R@'A/Q^=&)QBmf$Q'@MsPEV/mOcb`e
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
534.955 668.084 mo
199.864 668.084 li
199.864 649.793 li
534.839 649.793 li
534.955 668.084 li
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~qS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm
`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm_iX`4OSZkVqSSEk_iX]3OSQeUq8/6h_N4N0O86YRq8&*e_2e<+
NqgDLpqMg`^Q&!%NVC/GpUuO[]o2TsMY=]?ot-(R\qp!gL\/'2o<sDF[=n+WKCQ:"nZdZ7YCQ)DIdX7a
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j]q"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXYp\4FVp\4FVp\4FVp\4FUp@e4R
p@e4Rp@e4Rp@e4Rp%A"Np%A"No^qeJo^qeJoCMSFoCMSFo()ABo()ABnaZ/>nF5r:nF5r:n*f`6mdBN2
~>
<~_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'@._SX1,_SX1,
_SX1,_SX1,_SX1,_SX1,_SX1+_83t(_83t(_83t(_83t'^qdb$^qdb#^V@Ou^V@Ot^:q=q^:q=p]tM+m
]tM+m]Y(ni]Y(ni]=Y\e]=Y\e]"5Ja\[f5[\$riU[^NWQ[C*EM['[0GZEgdAZEga?Yct=7Y-+n/XK8J'
~>
<~OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>NaO,o?_O,o?_
O,o?_O,o?_O,o?_O,o?_O,o?_O,o?^NfK-[NfK-[NfK-ZNK&pWNK&pWNK&pVN/W^SN/W^SN/W^SN/W^R
Mi3LOMi3LOMMd:KM2@(GM2@(GLkpkCLPLY?L5(G;L5(G;KnY25K7ef/JqAT+JUrB'J:N0#It)orI=6Kj
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
535.223 710.207 mo
199.864 710.207 li
199.864 691.918 li
535.107 691.918 li
535.223 710.207 li
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
531.541 752.333 mo
199.864 752.333 li
199.864 734.041 li
399.117 734.041 li
399.741 734.897 401.107 735.944 403.516 737.226 cv
405.737 738.407 407.665 738.885 409.259 738.885 cv
412.92 738.886 414.823 736.365 414.479 734.041 cv
535.375 734.041 li
535.406 738.886 li
535.406 743.821 533.991 748.433 531.541 752.333 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
206.803 1530.14 mo
152.31 1530.14 li
143.16 1530.14 135.742 1522.72 135.742 1513.58 cv
135.742 1498.6 li
135.742 1489.45 128.322 1482.03 119.171 1482.03 cv
103.005 1482.03 li
103.005 1481.64 li
103.005 1471.3 111.394 1462.91 121.728 1462.91 cv
122.136 1462.91 li
132.47 1462.91 140.86 1454.52 140.86 1444.19 cv
140.86 871.32 li
140.86 869.263 140.534 867.285 139.931 865.435 cv
498.696 876.295 li
517.6 876.867 534.524 888.165 542.303 905.404 cv
545.652 912.822 550.776 919.299 557.223 924.262 cv
595.4 953.65 li
607.57 963.019 614.699 977.506 614.699 992.863 cv
614.699 1335.74 li
163.557 1335.74 li
166.026 1309.58 li
154.182 1162.49 li
154.182 1335.74 li
140.941 1335.74 li
140.941 1369.9 li
154.182 1369.9 li
154.182 1435.09 li
160.334 1369.9 li
614.699 1369.9 li
614.699 1433.55 li
614.699 1450.66 603.858 1465.88 587.696 1471.48 cv
584.333 1472.64 580.83 1473.35 577.28 1473.59 cv
285.363 1482.03 li
239.941 1482.03 li
230.789 1482.03 223.372 1489.45 223.372 1498.6 cv
223.372 1513.58 li
223.372 1522.72 215.954 1530.14 206.803 1530.14 cv
243.341 1442.45 mo
236.551 1442.45 235.807 1451.12 244.224 1451.12 cv
244.224 1451.12 262.263 1451.12 249.082 1444.1 cv
246.863 1442.92 244.935 1442.45 243.341 1442.45 cv
419.812 1401.81 mo
408.277 1401.81 395.525 1420.82 414.238 1422.85 cv
414.238 1422.85 415.081 1422.91 416.401 1422.91 cv
422.836 1422.91 440.618 1421.54 427.378 1405.5 cv
425.215 1402.88 422.547 1401.81 419.812 1401.81 cv
445.128 1373.64 mo
438.674 1373.64 434.029 1382.86 445.02 1384.05 cv
445.02 1384.05 458.436 1382.38 449.802 1375.39 cv
448.265 1374.15 446.646 1373.64 445.128 1373.64 cv
335.826 1270 mo
326.796 1270 322.383 1285.95 335.121 1285.95 cv
335.121 1285.95 354.444 1285.95 344.577 1274.85 cv
341.476 1271.36 338.455 1270 335.826 1270 cv
491.237 1267.45 mo
491.237 1267.45 491.609 1267.53 492.133 1267.53 cv
493.245 1267.53 495.045 1267.17 495.455 1264.93 cv
495.587 1264.21 494.929 1263.93 493.937 1263.93 cv
492.181 1263.93 489.379 1264.81 488.051 1265.69 cv
486.724 1266.57 486.872 1267.45 491.019 1267.45 cv
491.091 1267.45 491.163 1267.45 491.237 1267.45 cv
561.943 1262.1 mo
561.943 1262.1 562.322 1262.21 562.856 1262.21 cv
563.989 1262.21 565.822 1261.7 566.24 1258.48 cv
566.374 1257.45 565.703 1257.04 564.692 1257.04 cv
562.904 1257.04 560.049 1258.31 558.696 1259.57 cv
557.344 1260.83 557.494 1262.1 561.716 1262.1 cv
561.79 1262.1 561.866 1262.1 561.943 1262.1 cv
585.47 1230.85 mo
577.89 1230.85 569.51 1243.35 581.807 1244.68 cv
581.807 1244.68 582.36 1244.71 583.227 1244.71 cv
587.455 1244.71 599.142 1243.82 590.442 1233.28 cv
589.021 1231.55 587.267 1230.85 585.47 1230.85 cv
248.67 1193.13 mo
243.802 1193.13 241.474 1200.75 247.734 1201.74 cv
247.734 1201.74 261.302 1201.74 252.668 1194.75 cv
251.241 1193.6 249.877 1193.13 248.67 1193.13 cv
392.035 1182.17 mo
387.168 1182.17 384.838 1189.79 391.099 1190.78 cv
391.099 1190.78 404.668 1190.78 396.032 1183.79 cv
394.605 1182.63 393.242 1182.17 392.035 1182.17 cv
484.726 1149.76 mo
475.696 1149.76 471.282 1165.7 484.019 1165.7 cv
484.019 1165.7 503.345 1165.7 493.477 1154.6 cv
490.376 1151.11 487.355 1149.76 484.726 1149.76 cv
140.882 1126.48 mo
140.882 1126.48 li
162.879 1126.48 li
165.436 1126.48 167.483 1122.59 167.483 1117.89 cv
167.483 1026.32 li
167.483 1026.32 li
167.483 999.003 155.615 976.903 140.882 976.903 cv
140.882 1126.48 li
506.265 1117.87 mo
506.265 1117.87 li
506.265 1122.61 509.47 1126.46 513.424 1126.46 cv
581.379 1126.46 li
581.58 1126.46 581.779 1126.45 581.975 1126.43 cv
585.65 1126.06 588.539 1122.37 588.539 1117.87 cv
588.539 1026.27 li
588.539 999.006 570.121 976.906 547.402 976.906 cv
528.809 976.906 513.098 991.707 508.003 1012.03 cv
506.873 1016.54 506.265 1021.32 506.265 1026.27 cv
506.265 1026.27 li
506.265 1026.27 506.265 1026.27 506.265 1026.27 cv
506.265 1117.87 li
506.265 1117.87 li
362.126 1126.46 mo
362.126 1126.46 li
443.672 1126.46 li
448.416 1126.46 452.263 1122.61 452.263 1117.87 cv
452.263 1026.27 li
452.263 1021.32 451.533 1016.54 450.176 1012.03 cv
444.063 991.707 425.21 976.906 402.899 976.906 cv
402.897 976.906 li
380.587 976.906 361.733 991.707 355.62 1012.03 cv
354.263 1016.54 353.534 1021.32 353.534 1026.27 cv
353.534 1026.27 li
353.534 1026.27 353.534 1026.27 353.534 1026.27 cv
353.534 1117.87 li
353.534 1117.87 li
353.534 1118.33 353.57 1118.78 353.641 1119.23 cv
354.294 1123.32 357.844 1126.46 362.124 1126.46 cv
362.124 1126.46 li
217.199 1117.87 mo
217.199 1117.87 li
217.199 1122.61 220.404 1126.46 224.358 1126.46 cv
292.313 1126.46 li
296.268 1126.46 299.473 1122.61 299.473 1117.87 cv
299.473 1026.27 li
299.473 1021.32 298.865 1016.54 297.734 1012.03 cv
292.64 991.707 276.928 976.906 258.335 976.906 cv
239.743 976.906 224.032 991.707 218.938 1012.03 cv
217.807 1016.54 217.199 1021.32 217.199 1026.27 cv
217.199 1026.27 li
217.199 1026.27 217.199 1026.27 217.199 1026.27 cv
217.199 1117.87 li
217.199 1117.87 li
329.986 1075.28 mo
326.04 1075.28 321.82 1079.24 320.237 1083.2 cv
318.653 1087.16 319.706 1091.12 326.307 1091.12 cv
327.016 1091.12 327.788 1091.07 328.628 1090.98 cv
328.628 1090.98 328.674 1090.98 328.759 1090.98 cv
329.97 1090.98 339.077 1090.72 336.979 1082.85 cv
335.505 1077.32 332.816 1075.28 329.986 1075.28 cv
338.838 973.9 mo
334.892 973.9 330.672 976.42 329.089 978.94 cv
327.505 981.461 328.559 983.981 335.159 983.981 cv
335.868 983.981 336.639 983.952 337.479 983.891 cv
337.479 983.891 337.525 983.892 337.61 983.892 cv
338.819 983.892 347.928 983.727 345.832 978.718 cv
344.357 975.196 341.667 973.9 338.838 973.9 cv
373.076 929.375 mo
369.13 929.375 364.911 933.334 363.327 937.294 cv
361.744 941.253 362.797 945.212 369.398 945.212 cv
370.106 945.212 370.878 945.167 371.718 945.071 cv
371.718 945.071 371.764 945.072 371.85 945.072 cv
373.061 945.072 382.168 944.813 380.07 936.943 cv
378.595 931.411 375.906 929.375 373.076 929.375 cv
181.025 937.178 mo
181.025 937.178 181.404 937.293 181.939 937.293 cv
183.072 937.293 184.904 936.778 185.32 933.562 cv
185.455 932.526 184.784 932.122 183.773 932.122 cv
181.985 932.122 179.13 933.386 177.778 934.651 cv
176.425 935.915 176.576 937.179 180.801 937.179 cv
180.875 937.179 180.949 937.179 181.025 937.178 cv
475.893 919.91 mo
475.893 919.91 476.401 919.99 477.117 919.99 cv
478.634 919.99 481.091 919.632 481.65 917.397 cv
481.83 916.678 480.931 916.397 479.577 916.397 cv
477.18 916.397 473.355 917.275 471.543 918.154 cv
469.731 919.032 469.933 919.911 475.595 919.911 cv
475.693 919.911 475.792 919.911 475.893 919.91 cv
684.128 1462.91 mo
684.128 1462.91 li
683.616 1462.91 li
673.277 1462.91 664.893 1454.53 664.893 1444.19 cv
664.893 1444.19 li
664.893 1454.52 673.284 1462.91 683.616 1462.91 cv
684.128 1462.91 li
684.128 1462.91 li
122.334 852.496 mo
122.332 852.496 122.33 852.496 122.328 852.496 cv
122.33 852.496 122.332 852.496 122.334 852.496 cv
122.24 852.496 mo
122.235 852.496 122.229 852.495 122.224 852.495 cv
122.229 852.495 122.235 852.496 122.24 852.496 cv
684.128 852.495 mo
683.616 852.495 li
683.616 852.495 li
122.136 852.495 li
122.136 852.495 li
121.728 852.495 li
121.274 852.495 120.823 852.479 120.377 852.447 cv
120.487 852.449 120.598 852.45 120.709 852.45 cv
685.14 852.45 li
685.254 852.45 685.368 852.449 685.481 852.447 cv
685.034 852.479 684.583 852.495 684.128 852.495 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/2 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.952941 .745098 .564706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.901961 .603922 .458824 ]
/N 2.33779 
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~oCDJCo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()ABo()AB
o()ABo()ABo()ABo()ABo()ABo()>@naZ/>naZ/>naZ/>naZ/>naZ/>naZ/>naZ/=nF5r:nF5r:nF5r:
nF5r:nF5r:nF,i7n*f`6n*f`6n*f`6n*f`5mdBN2mdBN2mdBN2mdBN1mHs<.mHs<.mHs<.m-O**m-O**
m-O**m-F!'lg*m&lg*m&lK[["lK[["lK[[!l07Hsl07Hsl0.?pkih6okih6nkND$kkND$kk2tggk2tgg
~>
<~^:h4n]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]tM+m]Y(ni]Y(ni
]Y(ni]Y(ni]Y(nh]=Y\e]=Y\e]=Y\e]=PSb]"5Ja]"5Ja]",A^\[f8]\[f8\\@B&Y\@B&X\$riU\$riU
[^NWQ[^NWP[C*EM[C*BK['[3I['R*FZa7!DZEgdAZE^[>Z*CO;Yct@8YHP.5YHG%2Y-"h.Xf\\+XK8M(
X/i;$WiE)!WMukrW2QYnVl-GjVP^5fV5:#bUnjf]USFTYU8"?TTqS-PTV%jKT:VXGSXl=AS=H(<S!oe7
~>
<~OH5H`O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?^
NfK-[NfK-[NfK-[NfK-[NfK-[NfB$XNK&pWNK&pWNK&pWNJrgTN/W^SN/W^SN/W[QMi3LOMi3LOMi*CL
MMd:KMMd:JM2@(GM2@(GLkpkCLkpkCLkgb@LPLY?LPCP<L5(G;KnY57KnY56KS5#3KS+o0K7ef/JqAT+
JqAQ)JUrB'J:N0#J:E&uIt)rsIXZ`pI=6NlI=-EiI!g9fH[C'bH?sm_H$O[\G^+IXGB\7TG'8%PF`hhL
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
702.852 1481.64 mo
702.852 1471.3 694.462 1462.91 684.128 1462.91 cv
694.469 1462.91 702.852 1471.3 702.852 1481.64 cv
664.893 1444.19 mo
664.893 1444.19 li
664.893 871.32 li
664.893 860.884 673.284 852.495 683.616 852.495 cv
683.616 852.495 li
673.284 852.495 664.893 860.885 664.893 871.32 cv
664.893 1444.19 li
139.931 865.435 mo
139.836 865.432 li
137.39 857.979 130.528 852.582 122.334 852.496 cv
130.544 852.582 137.496 857.962 139.931 865.435 cv
122.328 852.496 mo
122.299 852.496 122.27 852.496 122.24 852.496 cv
122.27 852.496 122.299 852.496 122.328 852.496 cv
122.224 852.495 mo
122.195 852.495 122.165 852.495 122.136 852.495 cv
122.136 852.495 li
122.165 852.495 122.195 852.495 122.224 852.495 cv
.980392 .901961 .862745 rgb
f
653.546 1530.14 mo
599.052 1530.14 li
589.901 1530.14 582.484 1522.72 582.484 1513.58 cv
582.484 1498.6 li
582.484 1489.45 575.066 1482.03 565.914 1482.03 cv
463.312 1482.03 li
454.161 1482.03 446.743 1489.45 446.743 1498.6 cv
446.743 1513.58 li
446.743 1522.72 439.326 1530.14 430.174 1530.14 cv
402.927 1530.14 li
375.682 1530.14 li
366.53 1530.14 359.112 1522.72 359.112 1513.57 cv
359.112 1498.6 li
359.112 1489.45 351.692 1482.03 342.542 1482.03 cv
285.363 1482.03 li
577.28 1473.59 li
580.83 1473.35 584.333 1472.64 587.696 1471.48 cv
603.858 1465.88 614.699 1450.66 614.699 1433.55 cv
614.699 1369.9 li
664.855 1369.9 li
664.855 1335.74 li
614.699 1335.74 li
614.699 992.863 li
614.699 977.506 607.57 963.019 595.4 953.65 cv
557.223 924.262 li
550.776 919.299 545.652 912.822 542.303 905.404 cv
534.524 888.165 517.6 876.867 498.696 876.295 cv
139.931 865.435 li
137.496 857.962 130.544 852.582 122.334 852.496 cv
122.332 852.496 122.33 852.496 122.328 852.496 cv
122.299 852.496 122.27 852.496 122.24 852.496 cv
122.235 852.496 122.229 852.495 122.224 852.495 cv
122.195 852.495 122.165 852.495 122.136 852.495 cv
683.616 852.495 li
673.284 852.495 664.893 860.884 664.893 871.32 cv
664.893 1444.19 li
664.893 1444.19 li
664.893 1444.19 li
664.893 1454.53 673.277 1462.91 683.616 1462.91 cv
684.128 1462.91 li
684.128 1462.91 li
694.462 1462.91 702.852 1471.3 702.852 1481.64 cv
702.852 1481.64 li
702.852 1482.03 li
686.683 1482.03 li
677.532 1482.03 670.114 1489.45 670.114 1498.6 cv
670.114 1513.58 li
670.114 1522.72 662.695 1530.14 653.546 1530.14 cv
621.284 1255.32 mo
616.417 1255.32 614.088 1262.95 620.348 1263.93 cv
620.348 1263.93 633.916 1263.93 625.281 1256.94 cv
623.855 1255.79 622.491 1255.32 621.284 1255.32 cv
638.256 1117.89 mo
638.256 1117.89 li
638.256 1122.59 640.301 1126.48 642.86 1126.48 cv
664.855 1126.48 li
664.855 1121.52 li
664.855 999.674 li
664.855 999.674 li
664.855 976.903 li
664.855 976.903 li
650.122 976.903 638.256 999.003 638.256 1026.32 cv
638.256 1117.89 li
638.256 1117.89 li
570.984 887.861 mo
566.116 887.861 563.788 895.486 570.048 896.474 cv
570.048 896.474 583.615 896.474 574.981 889.485 cv
573.555 888.33 572.191 887.861 570.984 887.861 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9
I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I.""^m](X%WdF06Hg[n\mAbO#WdF-5HgRh[mAbO#
WI+$3HgReYmAP?uW-[g.HL.PTm&,-qVKqO*GjM8Ol_SgkUj)."GO)#IlCrIeU35apFm>ZBlCi=aTQKFj
FQoB<kacbXST<qaET`g1kF-AQR;_5TDW[=(k*KuIQ>P`KCupmsjHF?>P%s$=C#b7fif@d4Nb@=0B&SYZ
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.mHs<.
mHs9,m-O**m-O**m-O**m-O**m-O**m-O**m-O**m-O**m-O**m-O'(lg*m&lg*m&lg*m&lg*m&lg*m&
lg*m%lK[["lK[["lK[["lK[[!l07Hsl07Hsl07Hsl07Hsl07Hrkih6okih6okih6nkND$kkND$kkND$j
k2tggk2tggk2tggjlPUcjlPUcjlPUcjQ,C_jQ,C_jQ,C_j5]1[j5]1[io8tWio8tWiSibSiSibSi8EPO
~>
<~WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!WiE)!Wi;tsWMukrWMukrWMukrWMukr
WMukrWMukrWMukrWMukrWMukrWMuhpW2QYnW2QYnW2QVlVl-GjVl-DhVP^5fVP^5fVP^2dV5:#bV59u`
Unjf^Unjf]USFTYU8"BVU8"BUTqS0RTqS0QTV.sNTV.sNTV.sMT:_aISt;OESXl=AS=H+>S=H+=S"#n9
R[T\6R@0J2R$a8.Q^=&*Q^=&*QBmi&Q'IW"Pa%DsPEV2oP*1ukOcb`eO,o?_NfK-[NfK-[NK&mUMi3LO
~>
<~H[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[C*dH[:!aH?sm`H?sm`H?sm`
H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sm`H?sj^H$O[\H$O[\H$O[\H$OXZG^+IXG^+IXG^+FVGB\7T
GB\7SG'8%PG'8%PG'8%OF`hhLF`hhKFEDVHFEDVGF)uDDF)uDDF)uDDF)uDCEcQ2?EH,u<EH,u;E,]c7
Df9Q4Df9Q4DJj?0D/F-,D/F-,D/F-,Ci!p(CMR^$C2.KuBk_9qBk_9qBP;'mB4kjiB4kjiAnGXeAS#Fa
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
614.699 1369.9 mo
160.334 1369.9 li
163.557 1335.74 li
614.699 1335.74 li
614.699 1369.9 li
544.062 1356.83 mo
541.171 1356.83 538.08 1359.35 536.92 1361.87 cv
535.76 1364.39 536.533 1366.91 541.368 1366.91 cv
541.887 1366.91 542.452 1366.88 543.067 1366.82 cv
543.067 1366.82 543.101 1366.82 543.163 1366.82 cv
544.049 1366.82 550.721 1366.65 549.185 1361.65 cv
548.105 1358.12 546.135 1356.83 544.062 1356.83 cv
205.238 1337.29 mo
197.658 1337.29 189.28 1349.78 201.575 1351.11 cv
201.575 1351.11 202.128 1351.15 202.993 1351.15 cv
207.218 1351.15 218.913 1350.26 210.209 1339.71 cv
208.788 1337.99 207.035 1337.29 205.238 1337.29 cv
154.182 1369.9 mo
140.941 1369.9 li
140.941 1335.74 li
154.182 1335.74 li
154.182 1369.9 li
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
664.855 1369.9 mo
614.699 1369.9 li
614.699 1335.74 li
664.855 1335.74 li
664.855 1369.9 li
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/4 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/V
C[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%7&l'Z;NR;1uSC?_.$ka?2LR;1rRC?V(#ka?2L
QtkiPC?V%!ka6)JQtb`MC$1grkEflFQ>#HIB]kXok*9TAP\9-BBBGCijcX6;P%Ea;A`]%bjcO*7OC[F5
AE8e]j,RU/Nah%.@H*5Sieq7)MI>D"?f?iKiJ:k"LL/qo?/^KBi.YCnKNm>c>Mk!8hLSkeJ6C]W=P\C,
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6okih6o
kih3mkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND!ik2tggk2tggk2tggk2tggk2tgg
k2tgfjlPUcjlPUcjlPUcjlPUbjQ,C_jQ,C_jQ,C_jQ,C_jQ,C^j5]1[j5]1[j5]1Zio8tWio8tWio8tV
iSibSiSibSiSibSi8EPOi8EPOi8EPOi8EPOi8EPOi8EPOhr!>Khr!>KhVR,GhVR,Gh;-oCh;-oCgt^]?
~>
<~R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@0J2R@'A/R$a8.R$a8.R$a8.R$a8.
R$a8.R$a8.R$a8.R$a8.R$a8.R$a5,Q^=&*Q^=&*Q^=&*Q^=&*Q^=#(QBmi&QBmi&QBmf$Q'IW"Q'ISu
Pa%DsPa%DrPEV2nP*1ukP*1ujOcbcgOcbcfOH>QcOH>QcOH>QbO,o?^NfK-[NfK-ZNK&pWNK&pVN/W^R
Mi3LOMMd:KM2@(GLkpkCLkpkCLPLY?L5(G;KnY57KS5#3KS5#3K7ec-JUrB'J:N0#J:N0#It)orI=6Nl
~>
<~C2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2.KuC2%BrBk_9qBk_9qBk_9q
Bk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_9qBk_6oBP;'mBP;'mBP;'mBP;$kB4kjiB4kjiB4kjiB4kji
B4kjhAnGXeAnGXeAnGXdAS#FaAS#F`A7T4]A7T4\@q0"Y@q0"Y@q0"Y@q0"X@U`eT@:<SQ@:<SP?smAM
?smAM?smAM?XI/I?=$rE?=$rE?=$rE?!U`A>[1N=>?b<9>$>*5>$>*5>$>*5=]nm1=]nm1=BJ[-='&I)
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
362.124 1126.46 mo
362.124 1126.46 li
357.844 1126.46 354.294 1123.32 353.641 1119.23 cv
354.294 1123.32 357.844 1126.46 362.126 1126.46 cv
436.119 1121.52 mo
369.678 1121.52 li
365.812 1121.52 362.679 1118.39 362.679 1114.52 cv
362.679 1039.89 li
362.679 1017.68 380.685 999.674 402.897 999.674 cv
402.899 999.674 li
425.111 999.674 443.118 1017.68 443.118 1039.89 cv
443.118 1114.52 li
443.118 1118.39 439.984 1121.52 436.119 1121.52 cv
450.176 1012.03 mo
444.063 991.708 425.21 976.906 402.899 976.906 cv
402.897 976.906 li
380.587 976.906 361.733 991.708 355.62 1012.03 cv
361.733 991.707 380.587 976.906 402.897 976.906 cv
402.899 976.906 li
425.21 976.906 444.063 991.707 450.176 1012.03 cv
level3{
gsave
clp
[7.34498e-15 -119.953 119.953 7.34498e-15 402.898 1124.19 ]ct
/5 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.847059 .509804 .341176 ]
/C1 [.847059 .509804 .341176 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.847059 .509804 .341176 ]
/C1 [.690196 .321569 .219608 ]
/N 2.06553 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.690196 .321569 .219608 ]
/C1 [.690196 .321569 .219608 ]
/N 1 
>>
]
/Bounds [1.89999e-07 .998385 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.34498e-15 -119.953 119.953 7.34498e-15 402.898 1124.19 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~f[na,f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX+f@SX*f%/F'f%/F'f%/F'f%/F'e^`4#
e^`4#e^`4#e^W*ueC<!teC<!te'ldpe'ldpe'landaHRldaHRkdF$@hdF$=fd*U.dd*U+bcd0q`cd'h]
cHa_[c-=MXc-4DUbfn;SbKJ)PbK@uMb0%iJaiVZGaN2HDaN)?Aa2Z-=`l?!:`Pog7`5KU3_o'C0_SX1,
_83t(^qdb$^V@Ou^:q=q]tM+m]Y(ni]=Y\d]"5J`\[f5[\@B#W\$i`R[^ENN['[3HZa7!DZEga?Z*:I:
~>
<~Jq8K(JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'J:N0#J:N0#J:N0#J:N0"It)rtIt)rt
It)rsIXZ`pIXZ`pIXQWmI=6NlI=6KjI!g<hI!g9fH[C*dH[:!aH?sm`H$O[\H$OXZG^+IXGB\7TGB\4R
G'8%OF`hhLFEDVHFE;MEF)uABEcQ2?EH,u;E,]c7Df9Q4DJj?0D/F-,Ci!p(CMR^#C2.KtBk_9pBP;$k
B4kggAn>ObARo=^@q0"X@U`eT@:<PO?sd8J?=$rD?!U]?>[(E:>$>'3=]ed.='&I(<`W4#<)cgq;c6Lk
~>
<~=&r@&<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`W7%<`N."<E3%!<E3%!<E3%!
<E3%!<)cgr<)cgr<)cgr<)cgq;c?Un;c?Un;c?Um;GpCj;GpCj;Gp@h;,L1f;,L1f:f'tb:f'tb:esk_
:JXb^:JOY[:/4PZ:/+GW9he>V9MA,R9MA,Q91qoN91qlL8kM]J8P)KF8P)HD84Z9B7n6'>7n6$<7Rfj:
77BX6779O36psC06UO4-6:+"*5s[e&5sR\#5X7Ou5<h=q5!D.n4Ztqj4?P_g4$,Mc3]];_3B9)[3&ilW
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
581.975 1126.43 mo
585.65 1126.06 588.539 1122.37 588.539 1117.87 cv
588.539 1026.27 li
588.539 999.008 570.121 976.906 547.402 976.906 cv
528.809 976.906 513.098 991.708 508.003 1012.03 cv
513.098 991.707 528.809 976.906 547.402 976.906 cv
570.121 976.906 588.539 999.006 588.539 1026.27 cv
588.539 1117.87 li
588.539 1122.37 585.65 1126.06 581.975 1126.43 cv
575.085 1121.52 mo
519.718 1121.52 li
516.497 1121.52 513.885 1118.39 513.885 1114.52 cv
513.885 1039.89 li
513.885 1017.68 528.89 999.674 547.402 999.674 cv
565.913 999.674 580.919 1017.68 580.919 1039.89 cv
580.919 1114.52 li
580.919 1118.39 578.307 1121.52 575.085 1121.52 cv
level3{
gsave
clp
[7.34498e-15 -119.953 119.953 7.34498e-15 547.402 1124.19 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.34498e-15 -119.953 119.953 7.34498e-15 547.402 1124.19 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
664.855 1121.52 mo
646.937 1121.52 li
644.854 1121.52 643.187 1118.36 643.187 1114.52 cv
643.187 1039.93 li
643.187 1017.68 652.855 999.674 664.855 999.674 cv
664.855 1121.52 li
638.256 1117.89 mo
638.256 1117.89 li
638.256 1026.32 li
638.256 999.003 650.122 976.903 664.855 976.903 cv
664.855 976.903 li
650.122 976.903 638.256 999.004 638.256 1026.32 cv
638.256 1117.89 li
level3{
gsave
clp
[7.34499e-15 -119.953 119.953 7.34499e-15 651.556 1124.19 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.34499e-15 -119.953 119.953 7.34499e-15 651.556 1124.19 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
286.019 1121.52 mo
230.652 1121.52 li
227.431 1121.52 224.82 1118.39 224.82 1114.52 cv
224.82 1039.89 li
224.82 1017.68 239.825 999.674 258.335 999.674 cv
276.847 999.674 291.853 1017.68 291.853 1039.89 cv
291.853 1114.52 li
291.853 1118.39 289.242 1121.52 286.019 1121.52 cv
297.734 1012.03 mo
292.64 991.708 276.928 976.906 258.335 976.906 cv
239.743 976.906 224.032 991.708 218.938 1012.03 cv
224.032 991.707 239.743 976.906 258.335 976.906 cv
276.928 976.906 292.64 991.707 297.734 1012.03 cv
level3{
gsave
clp
[7.34498e-15 -119.953 119.953 7.34498e-15 258.336 1124.19 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.34498e-15 -119.953 119.953 7.34498e-15 258.336 1124.19 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
140.882 1126.48 mo
140.882 1126.48 li
140.882 976.903 li
155.615 976.903 167.483 999.003 167.483 1026.32 cv
167.483 1026.32 li
167.483 999.004 155.615 976.903 140.882 976.903 cv
140.882 999.674 li
152.884 999.674 162.552 1017.68 162.552 1039.93 cv
162.552 1114.52 li
162.552 1118.36 160.884 1121.52 158.8 1121.52 cv
140.882 1121.52 li
140.882 1126.48 li
level3{
gsave
clp
[7.34499e-15 -119.953 119.953 7.34499e-15 154.182 1124.19 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.34499e-15 -119.953 119.953 7.34499e-15 154.182 1124.19 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
778.827 2535.58 mo
27.0292 2535.58 li
12.1016 2535.58 0 2523.48 0 2508.55 cv
0 2445.35 li
0 2430.42 12.1016 2418.32 27.0292 2418.32 cv
48.067 2418.32 li
65.8275 2418.32 80.2244 2403.92 80.2244 2386.16 cv
80.2244 1681.93 li
80.2244 1667.98 71.3327 1656.1 58.9042 1651.65 cv
52.5444 1649.37 48.1534 1643.58 47.9255 1636.86 cv
48.0225 1639.25 48.7842 1641.46 49.8322 1643.51 cv
585.377 1653.6 li
595.504 1653.79 604.621 1659.78 608.809 1669.01 cv
636.138 1729.19 li
637.458 1732.1 639.3 1734.74 641.569 1736.99 cv
674.757 1769.87 li
679.739 1774.81 682.54 1781.53 682.54 1788.54 cv
682.54 2389.42 li
682.54 2398.21 681.876 2404.73 680.962 2409.55 cv
679.624 2416.6 682.392 2423.57 687.9 2428.17 cv
693.719 2433.03 697.342 2440.32 697.342 2448.35 cv
697.342 2505.53 li
697.342 2519.98 685.676 2531.72 671.226 2531.81 cv
64.9833 2535.58 li
778.827 2535.58 li
793.755 2535.58 805.856 2523.48 805.856 2508.55 cv
805.856 2523.48 793.755 2535.58 778.827 2535.58 cv
299.176 2485.56 mo
299.176 2485.56 280.179 2487.92 292.405 2497.82 cv
294.583 2499.58 296.874 2500.3 299.023 2500.3 cv
308.162 2500.3 314.74 2487.24 299.176 2485.56 cv
676.28 2488.62 mo
676.28 2488.62 662.712 2488.62 671.346 2495.61 cv
672.773 2496.77 674.136 2497.24 675.344 2497.24 cv
680.212 2497.24 682.541 2489.61 676.28 2488.62 cv
99.0386 2479.62 mo
96.926 2479.62 91.0774 2480.07 95.4294 2485.34 cv
96.1397 2486.2 97.0164 2486.55 97.915 2486.55 cv
101.705 2486.55 105.896 2480.3 99.747 2479.64 cv
99.747 2479.64 99.4708 2479.62 99.0386 2479.62 cv
321.209 2474.3 mo
319.094 2474.3 313.253 2474.75 317.603 2480.02 cv
318.314 2480.88 319.19 2481.24 320.089 2481.24 cv
323.878 2481.24 328.069 2474.99 321.919 2474.32 cv
321.919 2474.32 321.642 2474.3 321.209 2474.3 cv
129.183 2448.19 mo
122.749 2448.19 104.964 2449.56 118.205 2465.6 cv
120.367 2468.22 123.036 2469.29 125.771 2469.29 cv
137.306 2469.29 150.059 2450.27 131.345 2448.25 cv
131.345 2448.25 130.502 2448.19 129.183 2448.19 cv
619.237 2446.55 mo
619.237 2446.55 592.404 2449.88 609.673 2463.86 cv
612.748 2466.35 615.985 2467.37 619.02 2467.37 cv
631.928 2467.37 641.22 2448.93 619.237 2446.55 cv
258.335 2400.9 mo
122.136 2417.34 li
506.265 2417.34 li
258.335 2400.9 li
202.093 2321.8 mo
202.093 2321.8 182.768 2321.8 192.636 2332.91 cv
195.738 2336.4 198.759 2337.75 201.387 2337.75 cv
210.417 2337.75 214.831 2321.8 202.093 2321.8 cv
399.672 2321.77 mo
395.444 2321.77 383.758 2322.66 392.459 2333.21 cv
393.88 2334.93 395.634 2335.63 397.432 2335.63 cv
405.011 2335.63 413.389 2323.14 401.092 2321.8 cv
401.092 2321.8 400.539 2321.77 399.672 2321.77 cv
670.481 2302.37 mo
670.481 2302.37 656.911 2302.37 665.546 2309.36 cv
666.973 2310.52 668.337 2310.98 669.544 2310.98 cv
674.412 2310.99 676.74 2303.36 670.481 2302.37 cv
295.014 2296.73 mo
295.014 2296.73 281.446 2296.73 290.08 2303.71 cv
291.506 2304.87 292.87 2305.34 294.077 2305.34 cv
298.945 2305.34 301.274 2297.71 295.014 2296.73 cv
517.695 2293.7 mo
517.695 2293.7 499.655 2293.7 512.836 2300.71 cv
515.056 2301.89 516.985 2302.37 518.579 2302.37 cv
525.369 2302.37 526.113 2293.7 517.695 2293.7 cv
539.744 2278.49 mo
539.744 2278.49 526.174 2278.49 534.809 2285.48 cv
536.235 2286.63 537.599 2287.1 538.806 2287.1 cv
543.675 2287.1 546.004 2279.48 539.744 2278.49 cv
241.982 2267 mo
240.465 2267 238.011 2267.35 237.453 2269.59 cv
237.273 2270.31 238.171 2270.59 239.525 2270.59 cv
241.921 2270.59 245.746 2269.71 247.558 2268.83 cv
249.37 2267.95 249.168 2267.08 243.512 2267.08 cv
243.412 2267.08 243.311 2267.08 243.208 2267.08 cv
243.208 2267.08 242.699 2267 241.982 2267 cv
359.879 2170 mo
358.667 2170 349.563 2170.16 351.659 2175.17 cv
353.133 2178.69 355.823 2179.99 358.652 2179.99 cv
362.598 2179.99 366.818 2177.47 368.402 2174.95 cv
369.985 2172.43 368.931 2169.91 362.332 2169.91 cv
361.623 2169.91 360.851 2169.94 360.011 2170 cv
360.011 2170 359.964 2170 359.879 2170 cv
442.831 2118.69 mo
441.699 2118.69 439.866 2119.2 439.449 2122.42 cv
439.314 2123.45 439.985 2123.86 440.995 2123.86 cv
442.783 2123.86 445.638 2122.59 446.991 2121.33 cv
448.343 2120.06 448.193 2118.8 443.972 2118.8 cv
443.897 2118.8 443.822 2118.8 443.745 2118.8 cv
443.745 2118.8 443.366 2118.69 442.831 2118.69 cv
164.916 2100.9 mo
160.686 2100.9 149.004 2101.8 157.703 2112.34 cv
159.125 2114.06 160.877 2114.76 162.675 2114.76 cv
170.255 2114.76 178.634 2102.27 166.337 2100.94 cv
166.337 2100.94 165.783 2100.9 164.916 2100.9 cv
640.126 2095.69 mo
640.126 2095.69 626.709 2097.36 635.344 2104.35 cv
636.881 2105.59 638.5 2106.1 640.018 2106.1 cv
646.473 2106.11 651.118 2096.88 640.126 2095.69 cv
623.464 2072.85 mo
617.03 2072.85 599.245 2074.22 612.485 2090.26 cv
614.648 2092.88 617.316 2093.95 620.052 2093.95 cv
631.587 2093.95 644.339 2074.93 625.625 2072.91 cv
625.625 2072.91 624.783 2072.85 623.464 2072.85 cv
127.797 2081.68 mo
127.797 2081.68 114.229 2081.68 122.864 2088.67 cv
124.29 2089.82 125.653 2090.29 126.86 2090.29 cv
131.727 2090.29 134.057 2082.67 127.797 2081.68 cv
185.289 2083.4 mo
184.156 2083.4 182.323 2083.92 181.906 2087.13 cv
181.772 2088.17 182.442 2088.57 183.453 2088.57 cv
185.241 2088.57 188.096 2087.31 189.448 2086.04 cv
190.801 2084.78 190.65 2083.51 186.429 2083.51 cv
186.354 2083.51 186.279 2083.52 186.202 2083.52 cv
186.202 2083.52 185.823 2083.4 185.289 2083.4 cv
368.732 2062.91 mo
367.521 2062.91 358.414 2063.17 360.512 2071.04 cv
361.987 2076.57 364.675 2078.61 367.504 2078.61 cv
371.45 2078.61 375.67 2074.65 377.254 2070.69 cv
378.837 2066.73 377.784 2062.77 371.185 2062.77 cv
370.476 2062.77 369.704 2062.82 368.864 2062.91 cv
368.864 2062.91 368.817 2062.91 368.732 2062.91 cv
637.095 1805.63 mo
627.739 1805.63 620.154 1813.21 620.154 1822.57 cv
620.154 2025.51 li
620.154 2034.86 627.739 2042.45 637.095 2042.45 cv
646.449 2042.45 654.035 2034.86 654.035 2025.51 cv
654.035 2025.51 li
654.035 2025.51 654.035 2025.51 654.035 2025.51 cv
654.035 1822.57 li
654.035 1822.57 li
654.035 1822.57 li
654.035 1813.21 646.449 1805.63 637.095 1805.63 cv
543.428 1805.63 mo
534.072 1805.63 526.488 1813.21 526.488 1822.57 cv
526.488 2025.51 li
526.488 2034.86 534.072 2042.45 543.428 2042.45 cv
549.075 2042.45 554.076 2039.69 557.154 2035.44 cv
559.176 2032.65 560.369 2029.22 560.369 2025.51 cv
560.369 1822.57 li
560.369 1818.33 558.811 1814.45 556.237 1811.48 cv
553.131 1807.9 548.545 1805.63 543.428 1805.63 cv
435.232 2034.22 mo
438.193 2039.15 443.592 2042.45 449.762 2042.45 cv
459.117 2042.45 466.701 2034.86 466.701 2025.51 cv
466.701 2025.51 li
466.701 2025.51 466.701 2025.51 466.701 2025.51 cv
466.701 1822.57 li
466.701 1822.57 li
466.701 1822.57 li
466.701 1813.21 459.117 1805.63 449.762 1805.63 cv
444.2 1805.63 439.265 1808.31 436.177 1812.45 cv
434.069 1815.27 432.821 1818.77 432.821 1822.57 cv
432.821 2025.51 li
432.821 2028.69 433.701 2031.68 435.232 2034.22 cv
356.095 1805.63 mo
346.739 1805.63 339.155 1813.21 339.155 1822.57 cv
339.155 2025.51 li
339.155 2034.86 346.739 2042.45 356.095 2042.45 cv
365.451 2042.45 373.034 2034.86 373.034 2025.51 cv
373.034 2025.51 li
373.034 2025.51 373.034 2025.51 373.034 2025.51 cv
373.034 1822.57 li
373.034 1822.57 li
373.034 1822.57 li
373.034 1813.21 365.451 1805.63 356.095 1805.63 cv
262.428 1805.63 mo
253.073 1805.63 245.488 1813.21 245.488 1822.57 cv
245.488 2025.51 li
245.488 2034.86 253.073 2042.45 262.428 2042.45 cv
271.783 2042.45 279.367 2034.86 279.367 2025.51 cv
279.367 2025.51 li
279.367 2025.51 279.367 2025.51 279.367 2025.51 cv
279.367 1822.57 li
279.367 1822.57 li
279.367 1822.57 li
279.367 1813.21 271.783 1805.63 262.428 1805.63 cv
168.761 1805.63 mo
159.405 1805.63 151.821 1813.21 151.821 1822.57 cv
151.821 2025.51 li
151.821 2034.86 159.405 2042.45 168.761 2042.45 cv
178.117 2042.45 185.7 2034.86 185.7 2025.51 cv
185.7 2025.51 li
185.7 2025.51 185.7 2025.51 185.7 2025.51 cv
185.7 1822.57 li
185.7 1822.57 li
185.7 1822.57 li
185.7 1813.21 178.117 1805.63 168.761 1805.63 cv
591.184 2025.96 mo
591.184 2025.96 573.142 2025.96 586.323 2032.97 cv
588.544 2034.15 590.472 2034.63 592.066 2034.63 cv
598.856 2034.63 599.6 2025.96 591.184 2025.96 cv
213.47 1988.19 mo
213.47 1988.19 194.146 1988.19 204.014 1999.29 cv
207.116 2002.78 210.136 2004.13 212.764 2004.13 cv
221.794 2004.13 226.209 1988.19 213.47 1988.19 cv
585.625 1976.21 mo
585.625 1976.21 572.056 1976.21 580.69 1983.2 cv
582.117 1984.36 583.481 1984.82 584.688 1984.82 cv
589.556 1984.83 591.885 1977.2 585.625 1976.21 cv
306.393 1963.11 mo
306.393 1963.11 292.824 1963.11 301.458 1970.1 cv
302.885 1971.25 304.249 1971.72 305.456 1971.72 cv
310.324 1971.72 312.653 1964.1 306.393 1963.11 cv
205.357 1886.36 mo
204.245 1886.36 202.445 1886.72 202.036 1888.96 cv
201.904 1889.67 202.562 1889.96 203.553 1889.96 cv
205.308 1889.96 208.111 1889.08 209.439 1888.2 cv
210.767 1887.32 210.619 1886.44 206.476 1886.44 cv
206.403 1886.44 206.329 1886.44 206.254 1886.44 cv
206.254 1886.44 205.882 1886.36 205.357 1886.36 cv
616.237 1775.19 mo
615.024 1775.19 605.92 1775.45 608.018 1783.32 cv
609.492 1788.85 612.181 1790.88 615.01 1790.88 cv
618.955 1790.88 623.175 1786.92 624.759 1782.96 cv
626.342 1779 625.289 1775.04 618.69 1775.04 cv
617.982 1775.04 617.21 1775.09 616.369 1775.19 cv
616.369 1775.19 616.323 1775.19 616.237 1775.19 cv
477.862 1773.32 mo
473.633 1773.32 461.948 1774.22 470.647 1784.76 cv
472.068 1786.48 473.821 1787.18 475.619 1787.18 cv
483.199 1787.18 491.579 1774.69 479.283 1773.36 cv
479.283 1773.36 478.729 1773.32 477.862 1773.32 cv
252.471 1769.84 mo
252.471 1769.84 239.055 1771.51 247.689 1778.49 cv
249.226 1779.74 250.845 1780.25 252.363 1780.25 cv
258.817 1780.25 263.462 1771.03 252.471 1769.84 cv
281.089 1730.98 mo
274.654 1730.98 256.873 1732.35 270.113 1748.39 cv
272.275 1751.01 274.944 1752.08 277.679 1752.08 cv
289.214 1752.08 301.967 1733.06 283.251 1731.04 cv
283.251 1731.04 282.409 1730.98 281.089 1730.98 cv
137.839 1722.46 mo
136.951 1722.46 130.282 1722.62 131.818 1727.63 cv
132.898 1731.15 134.868 1732.45 136.94 1732.45 cv
139.831 1732.45 142.922 1729.93 144.082 1727.41 cv
145.242 1724.89 144.47 1722.37 139.636 1722.37 cv
139.117 1722.37 138.551 1722.4 137.936 1722.46 cv
137.936 1722.46 137.902 1722.46 137.839 1722.46 cv
453.267 1702.77 mo
453.267 1702.77 435.228 1702.77 448.409 1709.78 cv
450.629 1710.96 452.557 1711.44 454.151 1711.44 cv
460.939 1711.44 461.684 1702.77 453.267 1702.77 cv
475.315 1687.56 mo
475.315 1687.56 461.747 1687.56 470.382 1694.55 cv
471.808 1695.7 473.171 1696.17 474.378 1696.17 cv
479.246 1696.17 481.575 1688.55 475.315 1687.56 cv
725.636 1681.44 mo
725.841 1667.7 734.668 1656.05 746.95 1651.65 cv
734.669 1656.05 725.841 1667.7 725.636 1681.44 cv
754.844 1645.78 mo
756.772 1643.14 757.9 1639.93 757.939 1636.49 cv
757.9 1639.93 756.772 1643.14 754.844 1645.78 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/6 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [.952941 .745098 .564706 ]
/C1 [.952941 .745098 .564706 ]
/N 1 
>>
<<
/Domain[0 1 ] 
/FunctionType 2
/C0 [1 .85098 .658824 ]
/C1 [.952941 .745098 .564706 ]
/N 4.97729 
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~oCMSFoCV\Io^qhLp%A"Op@e4Rp@n=Up\4FWq"XXZq"X[\q>'j^q>'m`qYL'bqYL'cqtp9fqtp9fqtp9g
r;?Kjr;?Kjr;?Kjr;?NlrVc]nrVc]nrVc]nrVc]nrVc]nrVlfqrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
rr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2orrr2or
~>
<~^:q@s^qde&_8=(,_o0L4`Poj:`lH-@aN2KFai_cKbKJ)Qbfn;Uc-=MYcHa_]cd0qad*U.ddF$@hdF-Ik
daHRme'ldpe'lgreC<!teC<%!e^`4#e^`4#f%/F'f%/F'f%/F'f%8O*f@SX+f@SX+f@SX+f@SX+f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/
~>
<~OH>QdOcklkPEV5qQ'IW#QBml(Q^F/-R@0J3R[T_8S"#q<S=H.@SXl@DSt;RHT:_aKTV.sNTV8'QTqS0S
U8"BVU8"EXUSFTZUSFW\Unjf^Unjf^V5:#bV5:#bV5:#bV5C,eVP^5fVP^5fVP^5fVP^5fVPg>iVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
Vl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-GjVl-Gj
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
805.821 2443.96 mo
805.097 2429.68 793.288 2418.32 778.827 2418.32 cv
757.787 2418.32 li
740.479 2418.32 726.365 2404.65 725.66 2387.51 cv
726.365 2404.65 740.479 2418.32 757.788 2418.32 cv
778.827 2418.32 li
793.288 2418.32 805.097 2429.68 805.821 2443.96 cv
746.95 1651.65 mo
746.95 1651.65 li
750.189 1650.49 752.916 1648.42 754.844 1645.78 cv
752.916 1648.42 750.189 1650.49 746.95 1651.65 cv
746.95 1651.65 li
47.9255 1636.86 mo
47.9206 1636.73 47.9174 1636.61 47.9159 1636.49 cv
47.7033 1617.77 li
47.7038 1617.77 li
47.9172 1636.49 li
47.9186 1636.61 47.9214 1636.73 47.9255 1636.86 cv
757.939 1636.49 mo
757.939 1636.49 li
758.152 1617.77 li
758.153 1617.77 li
757.939 1636.49 li
757.939 1636.49 li
.980392 .901961 .862745 rgb
f
778.827 2535.58 mo
64.9833 2535.58 li
671.226 2531.81 li
685.676 2531.72 697.342 2519.98 697.342 2505.53 cv
697.342 2448.35 li
697.342 2440.32 693.719 2433.03 687.9 2428.17 cv
682.392 2423.57 679.624 2416.6 680.962 2409.55 cv
681.876 2404.73 682.54 2398.21 682.54 2389.42 cv
682.54 1788.54 li
682.54 1781.53 679.739 1774.81 674.757 1769.87 cv
641.569 1736.99 li
639.3 1734.74 637.458 1732.1 636.138 1729.19 cv
608.809 1669.01 li
604.621 1659.78 595.504 1653.79 585.377 1653.6 cv
49.8322 1643.51 li
48.7842 1641.46 48.0225 1639.25 47.9255 1636.86 cv
47.9214 1636.73 47.9186 1636.61 47.9172 1636.49 cv
47.7038 1617.77 li
135.742 1617.77 li
223.372 1617.77 li
359.112 1617.77 li
402.927 1617.77 li
446.743 1617.77 li
582.484 1617.77 li
670.114 1617.77 li
758.152 1617.77 li
757.939 1636.49 li
757.939 1636.49 li
757.9 1639.93 756.772 1643.14 754.844 1645.78 cv
752.916 1648.42 750.189 1650.49 746.95 1651.65 cv
746.95 1651.65 li
734.668 1656.05 725.841 1667.7 725.636 1681.44 cv
725.633 1681.61 725.632 1681.77 725.632 1681.93 cv
725.632 2386.17 li
725.632 2386.17 li
725.632 2386.62 725.641 2387.07 725.66 2387.51 cv
726.365 2404.65 740.479 2418.32 757.787 2418.32 cv
778.827 2418.32 li
793.288 2418.32 805.097 2429.68 805.821 2443.96 cv
805.844 2444.42 805.856 2444.88 805.856 2445.35 cv
805.856 2508.55 li
805.856 2508.55 li
805.856 2523.48 793.755 2535.58 778.827 2535.58 cv
670.481 1722.37 mo
670.481 1722.37 656.911 1722.37 665.546 1729.36 cv
666.972 1730.51 668.336 1730.98 669.542 1730.98 cv
674.411 1730.98 676.74 1723.36 670.481 1722.37 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'
X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9
I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_m]1a'X*j?9I."%_
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~qS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm
`0'o7Oo!"YqS\Nm`0'o7Oo!"YqS\Nm_iX`4OSZkVqSSEk_iX]3OSQeUq8/6h_N4N0O86YRq8&*e_2e<+
NqgDLpqMg`^Q&!%NVC/GpUuO[]o2TsMY=]?ot-(R\qp!gL\/'2o<sDF[=n+WKCQ:"nZdZ7YCQ)DIdX7a
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~mI'E1mdKW5n*oi9nF5r:nF?&=nac8Ao()ABo(2JEoCMSFoCV\Io^qeJo_%nMp%A"Np%J+Qp@e4Rp@e4R
p@e4Rp@e7Tp\4FVp\4FVp\4FVp\4IXq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"XXZq"X[\q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^q>'j^
~>
<~WiN2%XKAV-Y-5%5Yd(I=ZEgdAZEpmE['d<L[C3NP[^W`T\%&rY\[oA`]">Sd]=Y\e]=beh]Y(ni]Y2"l
]tM+m]tM.o^:q=q^:q@s^V@Ou^V@S"^qdb$^qde&_83t(_83t(_83t(_84"*_SX1,_SX1,_SX1,_SX1,
_SX1,_SX1,_SX1-_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0_o'C0
~>
<~H[L3hI=?WpIt3'"J:W9&JV&K*JqJ].K7no3Knb>:L5(G;L51P>LPUbBLl$tFM2@(GM2I1JMMmCNMi3LO
Mi3OQN/W^SN/W^SN/W^SN/WaUNK&pWNK&pWNK&sYNfK-[NfK-[NfK0]O,o?_O,o?_O,o?_O,o?_O,o?_
O,o?_O,o?_O,o?`OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
OH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>QcOH>Qc
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /7 /Gradient get_res exec grestore
}if
np
759.806 1617.77 mo
758.153 1617.77 li
758.152 1617.77 li
670.114 1617.77 li
582.484 1617.77 li
446.743 1617.77 li
402.927 1617.77 li
359.112 1617.77 li
223.372 1617.77 li
135.742 1617.77 li
47.7038 1617.77 li
47.7033 1617.77 li
46.0497 1617.77 li
20.6175 1617.77 0 1597.16 0 1571.72 cv
0 1498.6 li
0 1489.45 7.41841 1482.03 16.5697 1482.03 cv
103.005 1482.03 li
119.171 1482.03 li
128.322 1482.03 135.742 1489.45 135.742 1498.6 cv
135.742 1513.58 li
135.742 1522.72 143.16 1530.14 152.31 1530.14 cv
206.803 1530.14 li
215.954 1530.14 223.372 1522.72 223.372 1513.58 cv
223.372 1498.6 li
223.372 1489.45 230.789 1482.03 239.941 1482.03 cv
285.363 1482.03 li
342.542 1482.03 li
351.692 1482.03 359.112 1489.45 359.112 1498.6 cv
359.112 1513.57 li
359.112 1522.72 366.53 1530.14 375.682 1530.14 cv
402.927 1530.14 li
430.174 1530.14 li
439.326 1530.14 446.743 1522.72 446.743 1513.58 cv
446.743 1498.6 li
446.743 1489.45 454.161 1482.03 463.312 1482.03 cv
565.914 1482.03 li
575.066 1482.03 582.484 1489.45 582.484 1498.6 cv
582.484 1513.58 li
582.484 1522.72 589.901 1530.14 599.052 1530.14 cv
653.546 1530.14 li
662.695 1530.14 670.114 1522.72 670.114 1513.58 cv
670.114 1498.6 li
670.114 1489.45 677.532 1482.03 686.683 1482.03 cv
702.852 1482.03 li
789.286 1482.03 li
798.436 1482.03 805.856 1489.45 805.856 1498.6 cv
805.856 1571.72 li
805.856 1597.16 785.238 1617.77 759.806 1617.77 cv
581.918 1588.24 mo
580.785 1588.24 578.953 1588.76 578.535 1591.98 cv
578.401 1593.01 579.071 1593.41 580.082 1593.41 cv
581.87 1593.42 584.726 1592.15 586.078 1590.89 cv
587.43 1589.62 587.28 1588.36 583.059 1588.36 cv
582.984 1588.36 582.909 1588.36 582.832 1588.36 cv
582.832 1588.36 582.453 1588.24 581.918 1588.24 cv
704.858 1581.16 mo
704.858 1581.16 691.291 1581.16 699.925 1588.15 cv
701.352 1589.3 702.715 1589.77 703.922 1589.77 cv
708.791 1589.77 711.12 1582.15 704.858 1581.16 cv
304.004 1570.46 mo
299.775 1570.46 288.09 1571.35 296.79 1581.9 cv
298.211 1583.62 299.965 1584.32 301.762 1584.32 cv
309.342 1584.32 317.722 1571.82 305.425 1570.5 cv
305.425 1570.5 304.871 1570.46 304.004 1570.46 cv
266.884 1551.24 mo
266.884 1551.24 253.316 1551.24 261.951 1558.23 cv
263.377 1559.38 264.741 1559.85 265.947 1559.85 cv
270.815 1559.85 273.144 1552.23 266.884 1551.24 cv
324.376 1552.96 mo
323.243 1552.96 321.41 1553.47 320.993 1556.69 cv
320.859 1557.73 321.529 1558.13 322.54 1558.13 cv
324.328 1558.13 327.183 1556.87 328.536 1555.6 cv
329.888 1554.34 329.738 1553.07 325.516 1553.07 cv
325.442 1553.07 325.367 1553.07 325.29 1553.07 cv
325.29 1553.07 324.911 1552.96 324.376 1552.96 cv
507.819 1532.47 mo
506.606 1532.47 497.502 1532.73 499.599 1540.6 cv
501.073 1546.13 503.762 1548.17 506.592 1548.17 cv
510.538 1548.17 514.758 1544.21 516.341 1540.25 cv
517.925 1536.29 516.871 1532.33 510.273 1532.33 cv
509.564 1532.33 508.792 1532.37 507.951 1532.47 cv
507.951 1532.47 507.905 1532.47 507.819 1532.47 cv
736.628 1533.32 mo
732.401 1533.32 720.711 1534.21 729.412 1544.75 cv
730.833 1546.48 732.586 1547.18 734.384 1547.18 cv
741.964 1547.18 750.343 1534.68 738.047 1533.35 cv
738.047 1533.35 737.494 1533.32 736.628 1533.32 cv
49.5687 1511.23 mo
43.1343 1511.23 25.3483 1512.59 38.5901 1528.64 cv
40.7529 1531.26 43.4205 1532.33 46.1563 1532.33 cv
57.691 1532.33 70.4427 1513.31 51.7302 1511.29 cv
51.7302 1511.29 50.8875 1511.23 49.5687 1511.23 cv
level3{
gsave
clp
[805.855 0 0 805.855 0 1549.9 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[805.855 0 0 805.855 0 1549.9 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
443.672 1126.46 mo
362.126 1126.46 li
362.126 1126.46 li
443.672 1126.46 li
448.416 1126.46 452.263 1122.61 452.263 1117.87 cv
452.263 1026.27 li
452.263 1021.32 451.533 1016.54 450.176 1012.03 cv
451.533 1016.54 452.263 1021.32 452.263 1026.27 cv
452.263 1117.87 li
452.263 1122.61 448.416 1126.46 443.672 1126.46 cv
353.534 1026.27 mo
353.534 1026.27 li
353.534 1021.32 354.263 1016.54 355.62 1012.03 cv
354.263 1016.54 353.534 1021.32 353.534 1026.27 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/8 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-
@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,T
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm)Sh2c"#O($k*@GQuQglGn!Na^_'@GHlNgl>dt
NaUY&@,-cMgl5^sNF:M"@,$WIgPfLoMdP4s?JCBEg5B:kMI,"n?J:6Afn`qeLg8Vg>hOm;fnWhcL0N>b
>M4[5fS!G\KNd#\=kA7-f7@&UJQUKR=4Vk&ep^ZMIT=pH<RlIre9b-DHW/C=;q#thdWeX;G>Zb1:sjD]
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 0 1 ]
>>
>>/Gradient add_res /8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/8 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?gt^]?
gt^Z=gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:K;gY:H9g=k97g=k97g=k97g=k97g=k97
g=k96g"G'3g"G'3g"G'3g"G'2f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j/f\"j.f@SX+f@SX+f@SX*
f%/F'f%/F'f%/F'e^`4#e^`4#e^`4#eC<!teC<!teC<!te'ldpe'ldpdaHRldaHRldF$@hdF$@hd*U.d
~>
<~O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,o?_O,f6\NfK-[NfK-[NfK-[NfK-[
NfK-[NfK*YNK&pWNK&pWNK&pWNK&pWNK&pWNK&pWNK&mUN/W^SN/W[QMi3LOMi3LOMi3IMMMd:KMMd:K
MMd:KMMd:JM2@(FLkpkCLkpkBLPLY?LPLY>L5(G;L5(G;L5(G:KnY56KS5#2K7ef/K7ef/K7ef.JqAT*
JUrB'J:N0#J:N0#It)rtIXZ`pI=6NlI=6NlI!g<hH[C*dH?sm`H?sj^G^+IXGB\7TGB\7TG'8"NFEDVH
~>
<~@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:3JN?smAM?smAM?smAM
?smAM?smAM?smAM?sm>K?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI/I?XI,G?=$rE?=$rE?=$oC?!U`A
?!U`A?!U`A?!U`A?!U`@>[1N=>[1N<>?b<9>?b<9>?b<9>?b<8>$>*5>$>*4=]nm1=]nm1=]nm0=BJ[,
='&I)='&I)='&I)<`W7%<`W7%<E3%!<)cgr<)cgr;c?Un;GpCj;GpCj;GpCj;,L1f:f'tb:f'tb:JXb^
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /8 /Gradient get_res exec grestore
}if
np
443.672 1126.46 mo
362.124 1126.46 li
357.844 1126.46 354.294 1123.32 353.641 1119.23 cv
353.57 1118.78 353.534 1118.33 353.534 1117.87 cv
353.534 1026.27 li
353.534 1021.32 354.263 1016.54 355.62 1012.03 cv
361.733 991.708 380.587 976.906 402.897 976.906 cv
402.899 976.906 li
425.21 976.906 444.063 991.708 450.176 1012.03 cv
451.533 1016.54 452.263 1021.32 452.263 1026.27 cv
452.263 1117.87 li
452.263 1122.61 448.416 1126.46 443.672 1126.46 cv
402.897 999.674 mo
380.685 999.674 362.679 1017.68 362.679 1039.89 cv
362.679 1114.52 li
362.679 1118.39 365.812 1121.52 369.678 1121.52 cv
436.119 1121.52 li
439.984 1121.52 443.118 1118.39 443.118 1114.52 cv
443.118 1039.89 li
443.118 1017.68 425.111 999.674 402.899 999.674 cv
402.897 999.674 li
level3{
gsave
clp
[7.34498e-15 -119.953 119.953 7.34498e-15 402.898 1124.19 ]ct
/9 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ
@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<
42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~`F:pJ@QVP<42kYj`F:pJ@QVP<42kYj`*tgH@QMG:3lGJg`*k^E@62;73l>Ae_dGOB?ol/33l55a_-]4=
?TGo/35Ai[^g/q7>r]T(35/WW^0EV1>;s3!2S<3O]3.&(=Z3lp27cmI\Q:Vu<]%<e1q-I@[T#&k;_kaY
1:0q7ZV`H_:bf4N0X4D,YYHjT9J<PB0!.buX@b(F8M$l4/#c#hW(&;774P0&.A]B\Ud?K)5UW6j-_NXM
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~TKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q
4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd
-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OLTKX]q4slpd-D3OL
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 .998385 ]
/Encode [0 1 0 1 0 1 ]
>>
>>/Gradient add_res /9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.34498e-15 -119.953 119.953 7.34498e-15 402.898 1124.19 ]ct
clp
/9 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5KU4`5BL1_o'C0_o'C0_o'C0_o'C0_ns:-_SX1,_SX1,
_SX1,_SO()_83t(_83t(_83q&^qdb$^qd_"^V@Ou^V@Ou^V@Ls^:q=q^:q:o]tM+m]tM(k]Y(kg]=Y\e
]=YYc]"5Ja]"5Ja]"5G_\[f8\\@B&Y\@B&X\$riT[^NWP[C*EM[C*EL['[3HZa7!DZEgd@Z*CR<Yct@9
Yct@8YHP.4Y-+q0Xf\_,XK8M(X/i;%WiE)!WMukrW2QYnVl-DhV5:#bV5:#bUnjf^USFTZU8"?TTV.sN
~>
<~@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:<SQ@:3JN?smAM?smAM?smAM
?sd8J?XI/I?XI,G?=$rE?=$rE?=$rE?=$rE?=$oC?!U]?>[1N=>[1K;>?b<9>?b<9>?b97>$>*5>$>'3
=]nj/=BJ[-=BJ[-=BJX+='&I(<`W7$<E3%!<E3$u<)cgq;c?Um;GpCi;,L1f;,L1e:f'ta:JXb]:/4PZ
:/4PY9h\5R91qoN91qoM8kM]I8P)KF84Z9B7n6'>7Rfj:77BX66psF26UO4.6:+"*5s[b$5<h@s5<h=q
~>
<~3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]];_3]T2\3B9)[3B9)[3B9)[3B9)[3B9)[3B9)[
3B9)[3B9)[3B9)[3B9&Y3&ilW3&ilW3&iiU2`EZS2`EZS2`EZS2`EZS2`EZS2`EWQ2E!HO2E!EM2)R6K
2)R6K2)R6K2)R3I1c.$G1c.$F1G^gC1G^gC1G^gB1,:U?1,:U>0ekC;0ekC;0ekC:0JG170JG160/"t2
/hSb//hSb//hSb./M/P*/1`>'/1`>'.k<,#.Olnt.Olnt.Olnt.4H\p-n$Jl-n$Jl-RU8h-71&d-71&d
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /9 /Gradient get_res exec grestore
}if
np
506.265 1026.27 mo
506.265 1026.27 li
506.265 1021.32 506.873 1016.54 508.003 1012.03 cv
506.873 1016.54 506.265 1021.32 506.265 1026.27 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
581.379 1126.46 mo
513.424 1126.46 li
509.47 1126.46 506.265 1122.61 506.265 1117.87 cv
506.265 1026.27 li
506.265 1021.32 506.873 1016.54 508.003 1012.03 cv
513.098 991.708 528.809 976.906 547.402 976.906 cv
570.121 976.906 588.539 999.008 588.539 1026.27 cv
588.539 1117.87 li
588.539 1122.37 585.65 1126.06 581.975 1126.43 cv
581.779 1126.45 581.58 1126.46 581.379 1126.46 cv
547.402 999.674 mo
528.89 999.674 513.885 1017.68 513.885 1039.89 cv
513.885 1114.52 li
513.885 1118.39 516.497 1121.52 519.718 1121.52 cv
575.085 1121.52 li
578.307 1121.52 580.919 1118.39 580.919 1114.52 cv
580.919 1039.89 li
580.919 1017.68 565.913 999.674 547.402 999.674 cv
level3{
gsave
clp
[7.34498e-15 -119.953 119.953 7.34498e-15 547.402 1124.19 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.34498e-15 -119.953 119.953 7.34498e-15 547.402 1124.19 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
664.855 1126.48 mo
642.86 1126.48 li
640.301 1126.48 638.256 1122.59 638.256 1117.89 cv
638.256 1026.32 li
638.256 999.004 650.122 976.903 664.855 976.903 cv
664.855 999.674 li
652.855 999.674 643.187 1017.68 643.187 1039.93 cv
643.187 1114.52 li
643.187 1118.36 644.854 1121.52 646.937 1121.52 cv
664.855 1121.52 li
664.855 1126.48 li
level3{
gsave
clp
[7.34499e-15 -119.953 119.953 7.34499e-15 651.556 1124.19 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.34499e-15 -119.953 119.953 7.34499e-15 651.556 1124.19 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
292.313 1126.46 mo
224.358 1126.46 li
220.404 1126.46 217.199 1122.61 217.199 1117.87 cv
217.199 1117.87 li
217.199 1122.61 220.404 1126.46 224.358 1126.46 cv
292.313 1126.46 li
296.268 1126.46 299.473 1122.61 299.473 1117.87 cv
299.473 1026.27 li
299.473 1021.32 298.865 1016.54 297.734 1012.03 cv
298.865 1016.54 299.473 1021.32 299.473 1026.27 cv
299.473 1117.87 li
299.473 1122.61 296.268 1126.46 292.313 1126.46 cv
217.199 1026.27 mo
217.199 1026.27 li
217.199 1021.32 217.807 1016.54 218.938 1012.03 cv
217.807 1016.54 217.199 1021.32 217.199 1026.27 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/8 /Gradient get_res exec grestore
}if
np
292.313 1126.46 mo
224.358 1126.46 li
220.404 1126.46 217.199 1122.61 217.199 1117.87 cv
217.199 1026.27 li
217.199 1021.32 217.807 1016.54 218.938 1012.03 cv
224.032 991.708 239.743 976.906 258.335 976.906 cv
276.928 976.906 292.64 991.708 297.734 1012.03 cv
298.865 1016.54 299.473 1021.32 299.473 1026.27 cv
299.473 1117.87 li
299.473 1122.61 296.268 1126.46 292.313 1126.46 cv
258.335 999.674 mo
239.825 999.674 224.82 1017.68 224.82 1039.89 cv
224.82 1114.52 li
224.82 1118.39 227.431 1121.52 230.652 1121.52 cv
286.019 1121.52 li
289.242 1121.52 291.853 1118.39 291.853 1114.52 cv
291.853 1039.89 li
291.853 1017.68 276.847 999.674 258.335 999.674 cv
level3{
gsave
clp
[7.34498e-15 -119.953 119.953 7.34498e-15 258.336 1124.19 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.34498e-15 -119.953 119.953 7.34498e-15 258.336 1124.19 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
162.879 1126.48 mo
140.882 1126.48 li
140.882 1121.52 li
158.8 1121.52 li
160.884 1121.52 162.552 1118.36 162.552 1114.52 cv
162.552 1039.93 li
162.552 1017.68 152.884 999.674 140.882 999.674 cv
140.882 976.903 li
155.615 976.903 167.483 999.004 167.483 1026.32 cv
167.483 1117.89 li
167.483 1122.59 165.436 1126.48 162.879 1126.48 cv
level3{
gsave
clp
[7.34499e-15 -119.953 119.953 7.34499e-15 154.182 1124.19 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.34499e-15 -119.953 119.953 7.34499e-15 154.182 1124.19 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
361.878 613.711 mo
357.261 613.565 353.564 609.776 353.564 605.125 cv
353.564 513.528 li
353.564 486.265 375.664 464.165 402.927 464.165 cv
402.929 464.165 li
430.191 464.165 452.292 486.265 452.292 513.528 cv
452.292 513.528 li
452.292 486.265 430.191 464.165 402.929 464.165 cv
402.927 464.165 li
375.664 464.165 353.565 486.265 353.565 513.528 cv
353.565 605.125 li
353.565 609.776 357.261 613.565 361.878 613.711 cv
436.15 608.78 mo
369.707 608.78 li
365.842 608.78 362.708 605.648 362.708 601.783 cv
362.708 527.153 li
362.708 504.94 380.715 486.933 402.927 486.933 cv
402.929 486.933 li
425.141 486.933 443.148 504.94 443.148 527.153 cv
443.148 601.783 li
443.148 605.648 440.014 608.78 436.15 608.78 cv
level3{
gsave
clp
[7.65664e-15 -125.043 125.043 7.65664e-15 402.928 621.373 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.65664e-15 -125.043 125.043 7.65664e-15 402.928 621.373 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
443.702 613.716 mo
362.155 613.716 li
362.062 613.716 361.97 613.714 361.878 613.711 cv
357.261 613.565 353.565 609.776 353.565 605.125 cv
353.565 513.528 li
353.565 486.265 375.664 464.165 402.927 464.165 cv
402.929 464.165 li
430.191 464.165 452.292 486.265 452.292 513.528 cv
452.292 605.125 li
452.292 609.869 448.446 613.716 443.702 613.716 cv
402.927 486.933 mo
380.715 486.933 362.708 504.94 362.708 527.153 cv
362.708 601.783 li
362.708 605.648 365.842 608.78 369.707 608.78 cv
436.15 608.78 li
440.014 608.78 443.148 605.648 443.148 601.783 cv
443.148 527.153 li
443.148 504.94 425.141 486.933 402.929 486.933 cv
402.927 486.933 li
level3{
gsave
clp
[7.65664e-15 -125.043 125.043 7.65664e-15 402.928 621.373 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[7.65664e-15 -125.043 125.043 7.65664e-15 402.928 621.373 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
627.249 789.436 mo
625.853 788.741 624.329 788.263 622.723 788.049 cv
624.329 788.263 625.853 788.741 627.249 789.436 cv
627.249 789.436 li
198.603 376.527 mo
198.575 376.526 li
196.394 371.664 191.638 368.207 186.03 367.943 cv
191.645 368.207 196.425 371.657 198.603 376.527 cv
186.024 367.943 mo
186.003 367.942 185.984 367.941 185.963 367.94 cv
185.984 367.941 186.003 367.942 186.024 367.943 cv
185.944 367.939 mo
185.912 367.938 185.88 367.937 185.848 367.936 cv
185.88 367.937 185.912 367.938 185.944 367.939 cv
185.818 367.935 mo
185.804 367.934 185.791 367.934 185.777 367.933 cv
185.791 367.934 185.804 367.934 185.818 367.935 cv
185.734 367.932 mo
185.721 367.932 185.709 367.931 185.697 367.931 cv
185.709 367.931 185.721 367.932 185.734 367.932 cv
185.638 367.93 mo
185.631 367.93 185.622 367.93 185.615 367.929 cv
185.623 367.93 185.63 367.93 185.638 367.93 cv
185.534 367.928 mo
185.525 367.928 185.518 367.928 185.509 367.928 cv
185.518 367.928 185.525 367.928 185.534 367.928 cv
185.447 367.927 mo
185.439 367.927 185.43 367.927 185.422 367.927 cv
185.43 367.927 185.438 367.927 185.447 367.927 cv
.980392 .901961 .862745 rgb
f
617.355 800.647 mo
585.142 800.647 li
579.733 800.647 575.346 796.261 575.346 790.851 cv
575.346 781.966 li
575.346 776.513 570.904 772.171 565.552 772.171 cv
504.761 772.171 li
499.411 772.171 494.967 776.513 494.967 781.966 cv
494.967 790.851 li
494.967 796.204 490.625 800.647 485.172 800.647 cv
452.959 800.647 li
447.494 800.647 443.063 796.216 443.063 790.752 cv
443.063 781.966 li
443.063 776.556 438.678 772.171 433.269 772.171 cv
372.58 772.171 li
367.17 772.171 362.785 776.556 362.785 781.966 cv
362.785 790.853 li
362.785 796.24 358.377 800.647 352.989 800.647 cv
320.676 800.647 li
315.266 800.647 310.881 796.261 310.881 790.851 cv
310.881 781.966 li
310.881 776.513 306.437 772.171 301.086 772.171 cv
267.821 772.171 li
285.508 771.59 li
286.34 771.972 287.22 772.145 288.109 772.145 cv
289.236 772.145 290.381 771.868 291.472 771.394 cv
510.847 764.182 li
519.595 763.923 527.196 759.247 531.541 752.333 cv
605.926 752.333 li
605.926 773.395 li
605.926 773.395 li
605.926 781.417 612.429 787.92 620.452 787.92 cv
620.782 787.92 li
621.44 787.92 622.088 787.964 622.723 788.049 cv
624.329 788.263 625.853 788.741 627.249 789.436 cv
627.249 790.752 li
627.249 796.194 622.797 800.647 617.355 800.647 cv
605.926 734.041 mo
535.375 734.041 li
535.223 710.207 li
605.926 710.207 li
605.926 734.041 li
605.926 691.918 mo
535.107 691.918 li
534.955 668.084 li
605.926 668.084 li
605.926 691.918 li
605.926 649.793 mo
534.839 649.793 li
534.151 541.702 li
537.742 539.69 539.214 534.91 534.095 532.946 cv
533.907 503.398 li
533.907 496.788 532.302 490.277 529.229 484.425 cv
502.117 432.789 li
499.892 428.551 498.43 423.957 497.797 419.213 cv
495.149 399.369 478.498 384.377 458.488 383.816 cv
198.603 376.527 li
196.425 371.657 191.645 368.207 186.03 367.943 cv
186.028 367.943 186.026 367.943 186.024 367.943 cv
186.003 367.942 185.984 367.941 185.963 367.94 cv
185.957 367.94 185.95 367.94 185.944 367.939 cv
185.912 367.938 185.88 367.937 185.848 367.936 cv
185.838 367.935 185.828 367.935 185.818 367.935 cv
185.804 367.934 185.791 367.934 185.777 367.933 cv
185.762 367.933 185.748 367.932 185.734 367.932 cv
185.721 367.932 185.709 367.931 185.697 367.931 cv
185.677 367.931 185.658 367.93 185.638 367.93 cv
185.63 367.93 185.623 367.93 185.615 367.929 cv
185.588 367.929 185.561 367.928 185.534 367.928 cv
185.525 367.928 185.518 367.928 185.509 367.928 cv
185.489 367.928 185.468 367.927 185.447 367.927 cv
185.438 367.927 185.43 367.927 185.422 367.927 cv
185.394 367.927 185.366 367.927 185.338 367.927 cv
185.338 367.927 li
620.452 367.927 li
612.429 367.927 605.926 374.43 605.926 382.452 cv
605.926 649.793 li
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
605.926 668.084 mo
534.955 668.084 li
534.839 649.793 li
605.926 649.793 li
605.926 668.084 li
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/10 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~os&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<
Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Y^H,JI.a^korri:Y^H)II.XXjoWNZ7YC#oFHh=LgoWEQ5Y']cB
Hh4@co;m90XEsH<HLe+^nu@!+Wd+'6GO_\Wn>UU#W-.R+FRQ&Jm\FsmUN5aqEU9B<m%A:_So3h`D<[L)
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/10 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
o^qeJo^qeJo^qeIoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSEo()ABo()ABo()ABo()AAnaZ/>
naZ/>naZ/>naZ/>nF5r:nF5r:n*f`6n*f`6mdBN2mdBN2mHs<.mHs<.m-O**lg*m&lg*m&lK[["l07Hs
~>
<~Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct=7YHP.5YHP.5
YHP.5YHP.5YHP.5YHP.5YHP.4Y-+q1Y-+q1Y-+q1Y-+q0Xf\_-Xf\_,XK8M)XK8M(X/i;%X/i;$WiE)!
WiE)!WMukrWMukrWMukrWMukrW2QYnVl-DhV5:#bUnjf^USFTZU8"?TTV.sNTV.sNT:_^HSXl:@S"#k8
~>
<~I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g9fH[C*dH[C*d
H[C*dH[C*dH[C*dH[C*dH[C*dH[C*cH?sm`H?sm`H?sm`H?sm`H?sm`H?sm_H$O[\H$O[\H$O[\H$O[[
G^+IXG^+IXGB\7TG'8%PG'8%PF`hhLFEDVHF)uDDF)uDDF)uABEH,u<E,]c8Df9Q4DJj?0D/F-,Ci!m&
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /10 /Gradient get_res exec grestore
}if
np
605.926 710.207 mo
535.223 710.207 li
535.107 691.918 li
605.926 691.918 li
605.926 710.207 li
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
605.926 752.333 mo
531.541 752.333 li
533.991 748.433 535.406 743.821 535.406 738.886 cv
535.375 734.041 li
605.926 734.041 li
605.926 752.333 li
561.16 738.885 mo
561.16 738.885 547.591 738.885 556.226 745.875 cv
557.652 747.03 559.016 747.499 560.223 747.499 cv
565.09 747.499 567.419 739.874 561.16 738.885 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
627.926 340.359 mo
615.24 328.961 605.573 314.497 596.531 300.003 cv
412.784 5.47288 li
596.533 300.003 li
605.573 314.497 615.24 328.961 627.926 340.359 cv
.980392 .901961 .862745 rgb
f
630.158 342.305 mo
622.853 338.215 614.621 336.068 606.248 336.068 cv
293.997 336.068 li
460.678 332.085 li
468.018 331.909 473.455 325.244 472.071 318.033 cv
461.063 260.657 418.997 41.9568 413.644 22.1492 cv
408.064 1.49786 401.096 .515445 399.822 .515445 cv
399.696 .515445 399.626 .525071 399.618 .526214 cv
400.712 .204995 401.844 .0438082 402.976 .0438082 cv
406.752 .0438082 410.517 1.83809 412.784 5.47288 cv
412.784 5.47288 li
596.531 300.003 li
605.573 314.497 615.24 328.961 627.926 340.359 cv
628.66 341.018 629.404 341.667 630.158 342.305 cv
508.888 281.889 mo
507.676 281.889 498.572 282.149 500.669 290.019 cv
502.143 295.55 504.832 297.586 507.662 297.586 cv
511.608 297.586 515.828 293.627 517.411 289.667 cv
518.995 285.708 517.941 281.748 511.341 281.748 cv
510.632 281.748 509.86 281.794 509.021 281.89 cv
509.021 281.89 508.974 281.889 508.888 281.889 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
215.692 305.331 mo
388.954 27.6767 li
300.431 193.372 li
215.692 305.331 li
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
154.182 1435.09 mo
154.182 1369.9 li
160.334 1369.9 li
154.182 1435.09 li
163.557 1335.74 mo
154.182 1335.74 li
154.182 1162.49 li
166.026 1309.58 li
163.557 1335.74 li
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
160.334 1369.9 mo
154.182 1369.9 li
154.182 1335.74 li
163.557 1335.74 li
160.334 1369.9 li
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
506.265 2417.34 mo
122.136 2417.34 li
258.335 2400.9 li
506.265 2417.34 li
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
201.387 2337.75 mo
198.759 2337.75 195.738 2336.4 192.636 2332.91 cv
182.768 2321.8 202.093 2321.8 202.093 2321.8 cv
214.831 2321.8 210.417 2337.75 201.387 2337.75 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
518.579 2302.37 mo
516.985 2302.37 515.056 2301.89 512.836 2300.71 cv
499.655 2293.7 517.695 2293.7 517.695 2293.7 cv
526.113 2293.7 525.369 2302.37 518.579 2302.37 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
397.432 2335.63 mo
395.634 2335.63 393.88 2334.93 392.459 2333.21 cv
383.758 2322.66 395.444 2321.77 399.672 2321.77 cv
400.539 2321.77 401.092 2321.8 401.092 2321.8 cv
413.389 2323.14 405.011 2335.63 397.432 2335.63 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
162.675 2114.76 mo
160.877 2114.76 159.125 2114.06 157.703 2112.34 cv
149.004 2101.8 160.686 2100.9 164.916 2100.9 cv
165.783 2100.9 166.337 2100.94 166.337 2100.94 cv
178.634 2102.27 170.255 2114.76 162.675 2114.76 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
320.089 2481.24 mo
319.19 2481.24 318.314 2480.88 317.603 2480.02 cv
313.253 2474.75 319.094 2474.3 321.209 2474.3 cv
321.642 2474.3 321.919 2474.32 321.919 2474.32 cv
328.069 2474.99 323.878 2481.24 320.089 2481.24 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
97.915 2486.55 mo
97.0164 2486.55 96.1397 2486.2 95.4294 2485.34 cv
91.0774 2480.07 96.926 2479.62 99.0386 2479.62 cv
99.4708 2479.62 99.747 2479.64 99.747 2479.64 cv
105.896 2480.3 101.705 2486.55 97.915 2486.55 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
620.052 2093.95 mo
617.316 2093.95 614.648 2092.88 612.485 2090.26 cv
599.245 2074.22 617.03 2072.85 623.464 2072.85 cv
624.783 2072.85 625.625 2072.91 625.625 2072.91 cv
644.339 2074.93 631.587 2093.95 620.052 2093.95 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
277.679 1752.08 mo
274.944 1752.08 272.275 1751.01 270.113 1748.39 cv
256.873 1732.35 274.654 1730.98 281.089 1730.98 cv
282.409 1730.98 283.251 1731.04 283.251 1731.04 cv
301.967 1733.06 289.214 1752.08 277.679 1752.08 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
46.1563 1532.33 mo
43.4205 1532.33 40.7529 1531.26 38.5901 1528.64 cv
25.3483 1512.59 43.1343 1511.23 49.5687 1511.23 cv
50.8875 1511.23 51.7302 1511.29 51.7302 1511.29 cv
70.4427 1513.31 57.691 1532.33 46.1563 1532.33 cv
level3{
gsave
clp
[805.855 0 0 805.855 0 1549.9 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[805.855 0 0 805.855 0 1549.9 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
125.771 2469.29 mo
123.036 2469.29 120.367 2468.22 118.205 2465.6 cv
104.964 2449.56 122.749 2448.19 129.183 2448.19 cv
130.502 2448.19 131.345 2448.25 131.345 2448.25 cv
150.059 2450.27 137.306 2469.29 125.771 2469.29 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
619.02 2467.37 mo
615.985 2467.37 612.748 2466.35 609.673 2463.86 cv
592.404 2449.88 619.237 2446.55 619.237 2446.55 cv
641.22 2448.93 631.928 2467.37 619.02 2467.37 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
299.023 2500.3 mo
296.874 2500.3 294.583 2499.58 292.405 2497.82 cv
280.179 2487.92 299.176 2485.56 299.176 2485.56 cv
314.74 2487.24 308.162 2500.3 299.023 2500.3 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
640.018 2106.1 mo
638.5 2106.1 636.881 2105.59 635.344 2104.35 cv
626.709 2097.36 640.126 2095.69 640.126 2095.69 cv
651.118 2096.88 646.473 2106.11 640.018 2106.1 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
252.363 1780.25 mo
250.845 1780.25 249.226 1779.74 247.689 1778.49 cv
239.055 1771.51 252.471 1769.84 252.471 1769.84 cv
263.462 1771.03 258.817 1780.25 252.363 1780.25 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
294.077 2305.34 mo
292.87 2305.34 291.506 2304.87 290.08 2303.71 cv
281.446 2296.73 295.014 2296.73 295.014 2296.73 cv
301.274 2297.71 298.945 2305.34 294.077 2305.34 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
126.86 2090.29 mo
125.653 2090.29 124.29 2089.82 122.864 2088.67 cv
114.229 2081.68 127.797 2081.68 127.797 2081.68 cv
134.057 2082.67 131.727 2090.29 126.86 2090.29 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
538.806 2287.1 mo
537.599 2287.1 536.235 2286.63 534.809 2285.48 cv
526.174 2278.49 539.744 2278.49 539.744 2278.49 cv
546.004 2279.48 543.675 2287.1 538.806 2287.1 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
454.151 1711.44 mo
452.557 1711.44 450.629 1710.96 448.409 1709.78 cv
435.228 1702.77 453.267 1702.77 453.267 1702.77 cv
461.684 1702.77 460.939 1711.44 454.151 1711.44 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
474.378 1696.17 mo
473.171 1696.17 471.808 1695.7 470.382 1694.55 cv
461.747 1687.56 475.315 1687.56 475.315 1687.56 cv
481.575 1688.55 479.246 1696.17 474.378 1696.17 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
675.344 2497.24 mo
674.136 2497.24 672.773 2496.77 671.346 2495.61 cv
662.712 2488.62 676.28 2488.62 676.28 2488.62 cv
682.541 2489.61 680.212 2497.24 675.344 2497.24 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
669.544 2310.98 mo
668.337 2310.98 666.973 2310.52 665.546 2309.36 cv
656.911 2302.37 670.481 2302.37 670.481 2302.37 cv
676.74 2303.36 674.412 2310.99 669.544 2310.98 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
239.525 2270.59 mo
238.171 2270.59 237.273 2270.31 237.453 2269.59 cv
238.011 2267.35 240.465 2267 241.982 2267 cv
242.699 2267 243.208 2267.08 243.208 2267.08 cv
243.311 2267.08 243.412 2267.08 243.512 2267.08 cv
249.168 2267.08 249.37 2267.95 247.558 2268.83 cv
245.746 2269.71 241.921 2270.59 239.525 2270.59 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
440.995 2123.86 mo
439.985 2123.86 439.314 2123.45 439.449 2122.42 cv
439.866 2119.2 441.699 2118.69 442.831 2118.69 cv
443.366 2118.69 443.745 2118.8 443.745 2118.8 cv
443.822 2118.8 443.897 2118.8 443.972 2118.8 cv
448.193 2118.8 448.343 2120.06 446.991 2121.33 cv
445.638 2122.59 442.783 2123.86 440.995 2123.86 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
183.453 2088.57 mo
182.442 2088.57 181.772 2088.17 181.906 2087.13 cv
182.323 2083.92 184.156 2083.4 185.289 2083.4 cv
185.823 2083.4 186.202 2083.52 186.202 2083.52 cv
186.279 2083.52 186.354 2083.51 186.429 2083.51 cv
190.65 2083.51 190.801 2084.78 189.448 2086.04 cv
188.096 2087.31 185.241 2088.57 183.453 2088.57 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
358.652 2179.99 mo
355.823 2179.99 353.133 2178.69 351.659 2175.17 cv
349.563 2170.16 358.667 2170 359.879 2170 cv
359.964 2170 360.011 2170 360.011 2170 cv
360.851 2169.94 361.623 2169.91 362.332 2169.91 cv
368.931 2169.91 369.985 2172.43 368.402 2174.95 cv
366.818 2177.47 362.598 2179.99 358.652 2179.99 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
367.504 2078.61 mo
364.675 2078.61 361.987 2076.57 360.512 2071.04 cv
358.414 2063.17 367.521 2062.91 368.732 2062.91 cv
368.817 2062.91 368.864 2062.91 368.864 2062.91 cv
369.704 2062.82 370.476 2062.77 371.185 2062.77 cv
377.784 2062.77 378.837 2066.73 377.254 2070.69 cv
375.67 2074.65 371.45 2078.61 367.504 2078.61 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
301.762 1584.32 mo
299.965 1584.32 298.211 1583.62 296.79 1581.9 cv
288.09 1571.35 299.775 1570.46 304.004 1570.46 cv
304.871 1570.46 305.425 1570.5 305.425 1570.5 cv
317.722 1571.82 309.342 1584.32 301.762 1584.32 cv
level3{
gsave
clp
[805.855 0 0 805.855 0 1549.9 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[805.855 0 0 805.855 0 1549.9 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
265.947 1559.85 mo
264.741 1559.85 263.377 1559.38 261.951 1558.23 cv
253.316 1551.24 266.884 1551.24 266.884 1551.24 cv
273.144 1552.23 270.815 1559.85 265.947 1559.85 cv
level3{
gsave
clp
[805.855 0 0 805.855 0 1549.9 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[805.855 0 0 805.855 0 1549.9 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
580.082 1593.41 mo
579.071 1593.41 578.401 1593.01 578.535 1591.98 cv
578.953 1588.76 580.785 1588.24 581.918 1588.24 cv
582.453 1588.24 582.832 1588.36 582.832 1588.36 cv
582.909 1588.36 582.984 1588.36 583.059 1588.36 cv
587.28 1588.36 587.43 1589.62 586.078 1590.89 cv
584.726 1592.15 581.87 1593.42 580.082 1593.41 cv
level3{
gsave
clp
[805.855 0 0 805.855 0 1549.9 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[805.855 0 0 805.855 0 1549.9 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
322.54 1558.13 mo
321.529 1558.13 320.859 1557.73 320.993 1556.69 cv
321.41 1553.47 323.243 1552.96 324.376 1552.96 cv
324.911 1552.96 325.29 1553.07 325.29 1553.07 cv
325.367 1553.07 325.442 1553.07 325.516 1553.07 cv
329.738 1553.07 329.888 1554.34 328.536 1555.6 cv
327.183 1556.87 324.328 1558.13 322.54 1558.13 cv
level3{
gsave
clp
[805.855 0 0 805.855 0 1549.9 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[805.855 0 0 805.855 0 1549.9 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
506.592 1548.17 mo
503.762 1548.17 501.073 1546.13 499.599 1540.6 cv
497.502 1532.73 506.606 1532.47 507.819 1532.47 cv
507.905 1532.47 507.951 1532.47 507.951 1532.47 cv
508.792 1532.37 509.564 1532.33 510.273 1532.33 cv
516.871 1532.33 517.925 1536.29 516.341 1540.25 cv
514.758 1544.21 510.538 1548.17 506.592 1548.17 cv
level3{
gsave
clp
[805.855 0 0 805.855 0 1549.9 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[805.855 0 0 805.855 0 1549.9 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
615.01 1790.88 mo
612.181 1790.88 609.492 1788.85 608.018 1783.32 cv
605.92 1775.45 615.024 1775.19 616.237 1775.19 cv
616.323 1775.19 616.369 1775.19 616.369 1775.19 cv
617.21 1775.09 617.982 1775.04 618.69 1775.04 cv
625.289 1775.04 626.342 1779 624.759 1782.96 cv
623.175 1786.92 618.955 1790.88 615.01 1790.88 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
212.764 2004.13 mo
210.136 2004.13 207.116 2002.78 204.014 1999.29 cv
194.146 1988.19 213.47 1988.19 213.47 1988.19 cv
226.209 1988.19 221.794 2004.13 212.764 2004.13 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
592.066 2034.63 mo
590.472 2034.63 588.544 2034.15 586.323 2032.97 cv
573.142 2025.96 591.184 2025.96 591.184 2025.96 cv
599.6 2025.96 598.856 2034.63 592.066 2034.63 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
475.619 1787.18 mo
473.821 1787.18 472.068 1786.48 470.647 1784.76 cv
461.948 1774.22 473.633 1773.32 477.862 1773.32 cv
478.729 1773.32 479.283 1773.36 479.283 1773.36 cv
491.579 1774.69 483.199 1787.18 475.619 1787.18 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
734.384 1547.18 mo
732.586 1547.18 730.833 1546.48 729.412 1544.75 cv
720.711 1534.21 732.401 1533.32 736.628 1533.32 cv
737.494 1533.32 738.047 1533.35 738.047 1533.35 cv
750.343 1534.68 741.964 1547.18 734.384 1547.18 cv
level3{
gsave
clp
[805.855 0 0 805.855 0 1549.9 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[805.855 0 0 805.855 0 1549.9 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
305.456 1971.72 mo
304.249 1971.72 302.885 1971.25 301.458 1970.1 cv
292.824 1963.11 306.393 1963.11 306.393 1963.11 cv
312.653 1964.1 310.324 1971.72 305.456 1971.72 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
584.688 1984.82 mo
583.481 1984.82 582.117 1984.36 580.69 1983.2 cv
572.056 1976.21 585.625 1976.21 585.625 1976.21 cv
591.885 1977.2 589.556 1984.83 584.688 1984.82 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
414.479 734.041 mo
399.117 734.041 li
396.328 730.216 408.375 730.216 408.375 730.216 cv
412.253 730.216 414.186 732.056 414.479 734.041 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
409.259 738.885 mo
407.665 738.885 405.737 738.407 403.516 737.226 cv
401.107 735.944 399.741 734.897 399.117 734.041 cv
414.479 734.041 li
414.823 736.365 412.92 738.886 409.259 738.885 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
285.508 771.59 mo
284.657 771.199 283.855 770.59 283.137 769.72 cv
274.436 759.178 286.126 758.281 290.353 758.281 cv
291.22 758.281 291.772 758.319 291.772 758.319 cv
302.24 759.451 297.723 768.676 291.472 771.394 cv
285.508 771.59 li
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
288.109 772.145 mo
287.22 772.145 286.34 771.972 285.508 771.59 cv
291.472 771.394 li
290.381 771.868 289.236 772.145 288.109 772.145 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
510.731 530.464 mo
507.996 530.464 505.327 529.393 503.165 526.774 cv
489.923 510.73 507.709 509.366 514.144 509.366 cv
515.462 509.366 516.305 509.424 516.305 509.424 cv
535.019 511.446 522.266 530.467 510.731 530.464 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
530.697 542.619 mo
529.18 542.618 527.561 542.108 526.023 540.863 cv
517.39 533.874 530.805 532.206 530.805 532.206 cv
532.117 532.348 533.206 532.604 534.095 532.946 cv
534.151 541.702 li
533.135 542.271 531.951 542.619 530.697 542.619 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
534.151 541.702 mo
534.095 532.946 li
539.214 534.91 537.742 539.69 534.151 541.702 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
429.486 723.616 mo
428.279 723.616 426.916 723.147 425.489 721.992 cv
416.854 715.002 430.422 715.002 430.422 715.002 cv
436.682 715.991 434.354 723.616 429.486 723.616 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
560.223 747.499 mo
559.016 747.499 557.652 747.03 556.226 745.875 cv
547.591 738.885 561.16 738.885 561.16 738.885 cv
567.419 739.874 565.09 747.499 560.223 747.499 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/11 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~n=XUeTPX+jD"+*6n=XUeTPX+jD"+*6n=XUeTPX+jD"+*6n=XUeTPX+jD"+*6n=XUeTPX+jD"+*6n=XUe
TPX+jD"+*6n=XUeTPX+jD"+*6n=XUeT53qgC[ds3n=OLcT53nfC[[m2n"+=`Snd_cC@@a/n""4^SSIS_
C@7U+m[IqYRq_8YC$h@&m?qYTR:trTBC)%!l^2;MQt>QKAEoFjl',`CP@Ea<@HWb]kE'*6O'h".?K@#L
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/11 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6
n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6n*f`6
n*f`6n*f`6n*f`5mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN2mdBN1mHs<.mHs<.mHs<.mHs<-m-O**
m-O**m-O**m-O**lg*m&lg*m&lK[["lK[["l07Hsl07Hskih6okih6okND$kk2tggk2tggjlPUcjQ,C_
~>
<~T:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJ
T:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_aJT:_^HSt;OFSt;OF
St;OFSt;OFSt;OFSt;OFSt;OESXl=BSXl=BSXl=BSXl=AS=H+>S=H+=S"#n:S"#n9R[T\6R[T\5R@0J2
R@0J2R$a8.R$a8.R$a8.R$a8.Q^=&*Q^=#(Q'IW"Pa%DsPEV2oP*1riOH>QcOH>QcO,o?_NfK*YN/W[Q
~>
<~CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$
CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR^$CMR["C2.KuC2.Ku
C2.KuC2.KuC2.KuC2.KuC2.KuC2.KtBk_9qBk_9qBk_9qBk_9qBk_9qBk_9pBP;'mBP;'mBP;'mBP;'l
B4kjiB4kjiB4kjiAnGXeAnGXeAS#FaA7T4]@q0"Y@q0"Y@q/tW@:<SQ?smAM?smAM?XI/I?=$rE?!U]?
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /11 /Gradient get_res exec grestore
}if
np
339.5 397.274 mo
338.293 397.274 336.929 396.805 335.502 395.65 cv
326.868 388.66 340.435 388.66 340.435 388.66 cv
346.696 389.649 344.368 397.275 339.5 397.274 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
407.679 116.873 mo
406.472 116.873 405.109 116.404 403.682 115.249 cv
395.047 108.259 408.616 108.259 408.616 108.259 cv
414.876 109.248 412.548 116.873 407.679 116.873 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
331.674 560.37 mo
330.664 560.37 329.994 559.966 330.128 558.931 cv
330.544 555.715 332.377 555.2 333.51 555.2 cv
334.045 555.2 334.424 555.315 334.424 555.315 cv
334.501 555.314 334.576 555.313 334.65 555.313 cv
338.872 555.313 339.022 556.578 337.67 557.842 cv
336.318 559.106 333.462 560.371 331.674 560.37 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
249.332 616.502 mo
246.502 616.502 243.814 615.206 242.339 611.684 cv
240.242 606.675 249.351 606.51 250.56 606.51 cv
250.645 606.51 250.691 606.511 250.691 606.511 cv
251.531 606.45 252.304 606.421 253.012 606.421 cv
259.611 606.421 260.664 608.941 259.081 611.461 cv
257.497 613.982 253.278 616.502 249.332 616.502 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
258.183 515.122 mo
255.354 515.122 252.665 513.086 251.191 507.554 cv
249.093 499.684 258.201 499.425 259.412 499.425 cv
259.498 499.425 259.544 499.426 259.544 499.426 cv
260.384 499.33 261.156 499.284 261.865 499.284 cv
268.464 499.284 269.517 503.244 267.934 507.203 cv
266.35 511.163 262.13 515.122 258.183 515.122 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
507.662 297.586 mo
504.832 297.586 502.143 295.55 500.669 290.019 cv
498.572 282.149 507.676 281.889 508.888 281.889 cv
508.974 281.889 509.021 281.89 509.021 281.89 cv
509.86 281.794 510.632 281.748 511.341 281.748 cv
517.941 281.748 518.995 285.708 517.411 289.667 cv
515.828 293.627 511.608 297.586 507.662 297.586 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/10 /Gradient get_res exec grestore
}if
np
455.14 436.608 mo
453.545 436.608 451.617 436.129 449.397 434.948 cv
436.216 427.937 454.256 427.937 454.256 427.937 cv
462.673 427.937 461.928 436.608 455.14 436.608 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
382.932 253.115 mo
381.135 253.115 379.382 252.412 377.96 250.69 cv
369.259 240.148 380.949 239.252 385.177 239.252 cv
386.043 239.252 386.596 239.289 386.596 239.289 cv
398.891 240.619 390.512 253.116 382.932 253.115 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
475.366 421.338 mo
474.16 421.338 472.796 420.869 471.37 419.715 cv
462.736 412.725 476.304 412.725 476.304 412.725 cv
482.564 413.712 480.235 421.339 475.366 421.338 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
325.382 289.667 mo
324.175 289.667 322.812 289.198 321.385 288.043 cv
312.75 281.053 326.319 281.053 326.319 281.053 cv
332.579 282.042 330.249 289.667 325.382 289.667 cv
level3{
gsave
clp
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.31507e-14 541.394 -541.394 3.31507e-14 402.895 172.988 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
669.542 1730.98 mo
668.336 1730.98 666.972 1730.51 665.546 1729.36 cv
656.911 1722.37 670.481 1722.37 670.481 1722.37 cv
676.74 1723.36 674.411 1730.98 669.542 1730.98 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/12 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDP
RVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/V
C[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'l'cDPRVV/VC[%:'
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~os&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<
Z$l;MIJ'jnos&r<Z$l;MIJ'jnos&r<Y^H,JI.a^korri:Y^H)II.XXjoWNZ7YC#oFHh=LgoWEQ5Y']cB
Hh4@co;m90XEsH<HLe+^nu@!+Wd+'6GO_\Wn>UU#W-.R+FRQ&Jm\FsmUN5aqEU9B<m%A:_So3h`D<[L)
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/12 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~kiq?rl0@R!lKdd%lg*m&lg4!)m-X3-mHs<.mI'E1mdBN2mdKW5n*f`6n*oi9nF5r:nF?&=naZ/>naZ/>
naZ/>naZ2@o()ABo()ABo()ABo()DDoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMSFoCMVHo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
o^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJo^qeJ
~>
<~R@9S6S"-">SXuFFT:hjMTV.sNTV8'RU8+KYUSO]]UnsoaV5C,fVl6PmW2ZbqWMukrWMukrWMukrWN)tu
WiE)!WiE,#X/i;%X/i>'XK8M)XK8P+Xf\_-Xf\b/Y-+q1Y-+q1Y-+q1Y-+t3YHP.5YHP.5YHP.5YHP.5
YHP.5YHP.5YHP.6Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9Yct@9
~>
<~C27U$Ci+$+D/O6/DJsH3DfBZ7E,fl;EH6)@F)uDDF)uDDF*)MGFEM_KF`qqOG'8%PG'A.SGBe@WG^+IX
G^+LZH$O[\H$O[\H$O[\H$O^^H?sm`H?sm`H?sm`H?sm`H?sm`H?spbH[C*dH[C*dH[C*dH[C*dH[C*d
H[C*dH[C*dH[C*eI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
I!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<hI!g<h
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /12 /Gradient get_res exec grestore
}if
np
703.922 1589.77 mo
702.715 1589.77 701.352 1589.3 699.925 1588.15 cv
691.291 1581.16 704.858 1581.16 704.858 1581.16 cv
711.12 1582.15 708.791 1589.77 703.922 1589.77 cv
level3{
gsave
clp
[805.855 0 0 805.855 0 1549.9 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[805.855 0 0 805.855 0 1549.9 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
203.553 1889.96 mo
202.562 1889.96 201.904 1889.67 202.036 1888.96 cv
202.445 1886.72 204.245 1886.36 205.357 1886.36 cv
205.882 1886.36 206.254 1886.44 206.254 1886.44 cv
206.329 1886.44 206.403 1886.44 206.476 1886.44 cv
210.619 1886.44 210.767 1887.32 209.439 1888.2 cv
208.111 1889.08 205.308 1889.96 203.553 1889.96 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
136.94 1732.45 mo
134.868 1732.45 132.898 1731.15 131.818 1727.63 cv
130.282 1722.62 136.951 1722.46 137.839 1722.46 cv
137.902 1722.46 137.936 1722.46 137.936 1722.46 cv
138.551 1722.4 139.117 1722.37 139.636 1722.37 cv
144.47 1722.37 145.242 1724.89 144.082 1727.41 cv
142.922 1729.93 139.831 1732.45 136.94 1732.45 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
335.121 1285.95 mo
322.383 1285.95 326.796 1270 335.826 1270 cv
338.455 1270 341.476 1271.36 344.577 1274.85 cv
354.444 1285.95 335.121 1285.95 335.121 1285.95 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
583.227 1244.71 mo
582.36 1244.71 581.807 1244.68 581.807 1244.68 cv
569.51 1243.35 577.89 1230.85 585.47 1230.85 cv
587.267 1230.85 589.021 1231.55 590.442 1233.28 cv
599.142 1243.82 587.455 1244.71 583.227 1244.71 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
416.401 1422.91 mo
415.081 1422.91 414.238 1422.85 414.238 1422.85 cv
395.525 1420.82 408.277 1401.81 419.812 1401.81 cv
422.547 1401.81 425.215 1402.88 427.378 1405.5 cv
440.618 1421.54 422.836 1422.91 416.401 1422.91 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
445.02 1384.05 mo
434.029 1382.86 438.674 1373.64 445.128 1373.64 cv
446.646 1373.64 448.265 1374.15 449.802 1375.39 cv
458.436 1382.38 445.02 1384.05 445.02 1384.05 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
570.048 896.474 mo
563.788 895.486 566.116 887.861 570.984 887.861 cv
572.191 887.861 573.555 888.33 574.981 889.485 cv
583.615 896.474 570.048 896.474 570.048 896.474 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
620.348 1263.93 mo
614.088 1262.95 616.417 1255.32 621.284 1255.32 cv
622.491 1255.32 623.855 1255.79 625.281 1256.94 cv
633.916 1263.93 620.348 1263.93 620.348 1263.93 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
244.224 1451.12 mo
235.807 1451.12 236.551 1442.45 243.341 1442.45 cv
244.935 1442.45 246.863 1442.92 249.082 1444.1 cv
262.263 1451.12 244.224 1451.12 244.224 1451.12 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
247.734 1201.74 mo
241.474 1200.75 243.802 1193.13 248.67 1193.13 cv
249.877 1193.13 251.241 1193.6 252.668 1194.75 cv
261.302 1201.74 247.734 1201.74 247.734 1201.74 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
477.117 919.99 mo
476.401 919.99 475.893 919.91 475.893 919.91 cv
475.792 919.911 475.693 919.911 475.595 919.911 cv
469.933 919.911 469.731 919.032 471.543 918.154 cv
473.355 917.275 477.18 916.397 479.577 916.397 cv
480.931 916.397 481.83 916.678 481.65 917.397 cv
481.091 919.632 478.634 919.99 477.117 919.99 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
181.939 937.293 mo
181.404 937.293 181.025 937.178 181.025 937.178 cv
180.949 937.179 180.875 937.179 180.801 937.179 cv
176.576 937.179 176.425 935.915 177.778 934.651 cv
179.13 933.386 181.985 932.122 183.773 932.122 cv
184.784 932.122 185.455 932.526 185.32 933.562 cv
184.904 936.778 183.072 937.293 181.939 937.293 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
562.856 1262.21 mo
562.322 1262.21 561.943 1262.1 561.943 1262.1 cv
561.866 1262.1 561.79 1262.1 561.716 1262.1 cv
557.494 1262.1 557.344 1260.83 558.696 1259.57 cv
560.049 1258.31 562.904 1257.04 564.692 1257.04 cv
565.703 1257.04 566.374 1257.45 566.24 1258.48 cv
565.822 1261.7 563.989 1262.21 562.856 1262.21 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
335.159 983.981 mo
328.559 983.981 327.505 981.461 329.089 978.94 cv
330.672 976.42 334.892 973.9 338.838 973.9 cv
341.667 973.9 344.357 975.196 345.832 978.718 cv
347.928 983.727 338.819 983.892 337.61 983.892 cv
337.525 983.892 337.479 983.891 337.479 983.891 cv
336.639 983.952 335.868 983.981 335.159 983.981 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
326.307 1091.12 mo
319.706 1091.12 318.653 1087.16 320.237 1083.2 cv
321.82 1079.24 326.04 1075.28 329.986 1075.28 cv
332.816 1075.28 335.505 1077.32 336.979 1082.85 cv
339.077 1090.72 329.97 1090.98 328.759 1090.98 cv
328.674 1090.98 328.628 1090.98 328.628 1090.98 cv
327.788 1091.07 327.016 1091.12 326.307 1091.12 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
369.398 945.212 mo
362.797 945.212 361.744 941.253 363.327 937.294 cv
364.911 933.334 369.13 929.375 373.076 929.375 cv
375.906 929.375 378.595 931.411 380.07 936.943 cv
382.168 944.813 373.061 945.072 371.85 945.072 cv
371.764 945.072 371.718 945.071 371.718 945.071 cv
370.878 945.167 370.106 945.212 369.398 945.212 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
484.019 1165.7 mo
471.282 1165.7 475.696 1149.76 484.726 1149.76 cv
487.355 1149.76 490.376 1151.11 493.477 1154.6 cv
503.345 1165.7 484.019 1165.7 484.019 1165.7 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
202.993 1351.15 mo
202.128 1351.15 201.575 1351.11 201.575 1351.11 cv
189.28 1349.78 197.658 1337.29 205.238 1337.29 cv
207.035 1337.29 208.788 1337.99 210.209 1339.71 cv
218.913 1350.26 207.218 1351.15 202.993 1351.15 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
391.099 1190.78 mo
384.838 1189.79 387.168 1182.17 392.035 1182.17 cv
393.242 1182.17 394.605 1182.63 396.032 1183.79 cv
404.668 1190.78 391.099 1190.78 391.099 1190.78 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
492.133 1267.53 mo
491.609 1267.53 491.237 1267.45 491.237 1267.45 cv
491.163 1267.45 491.091 1267.45 491.019 1267.45 cv
486.872 1267.45 486.724 1266.57 488.051 1265.69 cv
489.379 1264.81 492.181 1263.93 493.937 1263.93 cv
494.929 1263.93 495.587 1264.21 495.455 1264.93 cv
495.045 1267.17 493.245 1267.53 492.133 1267.53 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/3 /Gradient get_res exec grestore
}if
np
541.368 1366.91 mo
536.533 1366.91 535.76 1364.39 536.92 1361.87 cv
538.08 1359.35 541.171 1356.83 544.062 1356.83 cv
546.135 1356.83 548.105 1358.12 549.185 1361.65 cv
550.721 1366.65 544.049 1366.82 543.163 1366.82 cv
543.101 1366.82 543.067 1366.82 543.067 1366.82 cv
542.452 1366.88 541.887 1366.91 541.368 1366.91 cv
level3{
gsave
clp
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
/4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[3.72869e-14 -608.943 608.943 3.72869e-14 402.928 1507.07 ]ct
clp
/4 /Gradient get_res exec grestore
}if
np
168.761 2042.45 mo
159.405 2042.45 151.821 2034.86 151.821 2025.51 cv
151.821 1822.57 li
151.821 1813.21 159.405 1805.63 168.761 1805.63 cv
178.117 1805.63 185.7 1813.21 185.7 1822.57 cv
185.7 1822.57 li
185.7 1813.21 178.117 1805.63 168.762 1805.63 cv
159.405 1805.63 151.821 1813.21 151.821 1822.57 cv
151.821 2025.51 li
151.821 2034.86 159.405 2042.45 168.762 2042.45 cv
178.117 2042.45 185.7 2034.86 185.7 2025.51 cv
185.7 2025.51 li
185.7 2034.86 178.117 2042.45 168.761 2042.45 cv
168.762 2038.99 mo
161.2 2038.99 155.072 2032.86 155.072 2025.3 cv
155.072 1830.76 li
155.072 1823.2 161.2 1817.07 168.762 1817.07 cv
176.322 1817.07 182.451 1823.2 182.451 1830.76 cv
182.451 2025.3 li
182.451 2032.86 176.322 2038.99 168.762 2038.99 cv
level3{
gsave
clp
[1.19765e-14 -195.592 195.592 1.19765e-14 168.761 2008.97 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.19765e-14 -195.592 195.592 1.19765e-14 168.761 2008.97 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
262.428 2042.45 mo
253.073 2042.45 245.488 2034.86 245.488 2025.51 cv
245.488 1822.57 li
245.488 1813.21 253.073 1805.63 262.428 1805.63 cv
271.783 1805.63 279.367 1813.21 279.367 1822.57 cv
279.367 1822.57 li
279.367 1813.21 271.783 1805.63 262.428 1805.63 cv
253.073 1805.63 245.488 1813.21 245.488 1822.57 cv
245.488 2025.51 li
245.488 2034.86 253.073 2042.45 262.428 2042.45 cv
271.783 2042.45 279.367 2034.86 279.367 2025.51 cv
279.367 2025.51 li
279.367 2034.86 271.783 2042.45 262.428 2042.45 cv
262.428 2038.99 mo
254.867 2038.99 248.74 2032.86 248.74 2025.3 cv
248.74 1830.76 li
248.74 1823.2 254.867 1817.07 262.428 1817.07 cv
269.988 1817.07 276.116 1823.2 276.116 1830.76 cv
276.116 2025.3 li
276.116 2032.86 269.988 2038.99 262.428 2038.99 cv
level3{
gsave
clp
[1.19765e-14 -195.592 195.592 1.19765e-14 262.428 2008.97 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.19765e-14 -195.592 195.592 1.19765e-14 262.428 2008.97 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
356.095 2042.45 mo
346.739 2042.45 339.155 2034.86 339.155 2025.51 cv
339.155 1822.57 li
339.155 1813.21 346.739 1805.63 356.095 1805.63 cv
365.451 1805.63 373.034 1813.21 373.034 1822.57 cv
373.034 1822.57 li
373.034 1813.21 365.451 1805.63 356.095 1805.63 cv
346.739 1805.63 339.155 1813.21 339.155 1822.57 cv
339.155 2025.51 li
339.155 2034.86 346.739 2042.45 356.095 2042.45 cv
365.451 2042.45 373.034 2034.86 373.034 2025.51 cv
373.034 2025.51 li
373.034 2034.86 365.451 2042.45 356.095 2042.45 cv
356.095 2038.99 mo
348.534 2038.99 342.405 2032.86 342.405 2025.3 cv
342.405 1830.76 li
342.405 1823.2 348.534 1817.07 356.095 1817.07 cv
363.656 1817.07 369.783 1823.2 369.783 1830.76 cv
369.783 2025.3 li
369.783 2032.86 363.656 2038.99 356.095 2038.99 cv
level3{
gsave
clp
[1.19765e-14 -195.592 195.592 1.19765e-14 356.095 2008.97 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.19765e-14 -195.592 195.592 1.19765e-14 356.095 2008.97 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
449.762 2042.45 mo
443.592 2042.45 438.193 2039.15 435.232 2034.22 cv
438.194 2039.15 443.593 2042.45 449.762 2042.45 cv
459.117 2042.45 466.701 2034.86 466.701 2025.51 cv
466.701 2025.51 li
466.701 2034.86 459.117 2042.45 449.762 2042.45 cv
449.762 2038.99 mo
442.201 2038.99 436.072 2032.86 436.072 2025.3 cv
436.072 1830.76 li
436.072 1823.2 442.201 1817.07 449.762 1817.07 cv
457.322 1817.07 463.45 1823.2 463.45 1830.76 cv
463.45 2025.3 li
463.45 2032.86 457.322 2038.99 449.762 2038.99 cv
466.701 1822.57 mo
466.701 1813.21 459.117 1805.63 449.762 1805.63 cv
444.201 1805.63 439.266 1808.31 436.177 1812.45 cv
439.265 1808.31 444.2 1805.63 449.762 1805.63 cv
459.117 1805.63 466.701 1813.21 466.701 1822.57 cv
466.701 1822.57 li
level3{
gsave
clp
[1.19765e-14 -195.592 195.592 1.19765e-14 449.762 2008.97 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.19765e-14 -195.592 195.592 1.19765e-14 449.762 2008.97 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
543.428 2042.45 mo
534.072 2042.45 526.488 2034.86 526.488 2025.51 cv
526.488 1822.57 li
526.488 1813.21 534.072 1805.63 543.428 1805.63 cv
548.545 1805.63 553.131 1807.9 556.237 1811.48 cv
553.131 1807.9 548.544 1805.63 543.429 1805.63 cv
534.073 1805.63 526.488 1813.21 526.488 1822.57 cv
526.488 2025.51 li
526.488 2034.86 534.073 2042.45 543.429 2042.45 cv
549.074 2042.45 554.075 2039.68 557.154 2035.44 cv
554.076 2039.69 549.075 2042.45 543.428 2042.45 cv
543.429 2038.99 mo
535.868 2038.99 529.739 2032.86 529.739 2025.3 cv
529.739 1830.76 li
529.739 1823.2 535.868 1817.07 543.429 1817.07 cv
550.988 1817.07 557.117 1823.2 557.117 1830.76 cv
557.117 2025.3 li
557.117 2032.86 550.988 2038.99 543.429 2038.99 cv
level3{
gsave
clp
[1.19765e-14 -195.592 195.592 1.19765e-14 543.428 2008.97 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.19765e-14 -195.592 195.592 1.19765e-14 543.428 2008.97 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
637.095 2042.45 mo
627.739 2042.45 620.154 2034.86 620.154 2025.51 cv
620.154 1822.57 li
620.154 1813.21 627.739 1805.63 637.095 1805.63 cv
646.449 1805.63 654.035 1813.21 654.035 1822.57 cv
654.035 1822.57 li
654.035 1813.21 646.449 1805.63 637.096 1805.63 cv
627.739 1805.63 620.154 1813.21 620.154 1822.57 cv
620.154 2025.51 li
620.154 2034.86 627.739 2042.45 637.096 2042.45 cv
646.449 2042.45 654.035 2034.86 654.035 2025.51 cv
654.035 2025.51 li
654.035 2034.86 646.449 2042.45 637.095 2042.45 cv
637.096 2038.99 mo
629.534 2038.99 623.406 2032.86 623.406 2025.3 cv
623.406 1830.76 li
623.406 1823.2 629.534 1817.07 637.096 1817.07 cv
644.655 1817.07 650.784 1823.2 650.784 1830.76 cv
650.784 2025.3 li
650.784 2032.86 644.655 2038.99 637.096 2038.99 cv
level3{
gsave
clp
[1.19765e-14 -195.592 195.592 1.19765e-14 637.094 2008.97 ]ct
/5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.19765e-14 -195.592 195.592 1.19765e-14 637.094 2008.97 ]ct
clp
/5 /Gradient get_res exec grestore
}if
np
637.096 2042.45 mo
627.739 2042.45 620.154 2034.86 620.154 2025.51 cv
620.154 1822.57 li
620.154 1813.21 627.739 1805.63 637.096 1805.63 cv
646.449 1805.63 654.035 1813.21 654.035 1822.57 cv
654.035 2025.51 li
654.035 2034.86 646.449 2042.45 637.096 2042.45 cv
637.096 1817.07 mo
629.534 1817.07 623.406 1823.2 623.406 1830.76 cv
623.406 2025.3 li
623.406 2032.86 629.534 2038.99 637.096 2038.99 cv
644.655 2038.99 650.784 2032.86 650.784 2025.3 cv
650.784 1830.76 li
650.784 1823.2 644.655 1817.07 637.096 1817.07 cv
level3{
gsave
clp
[1.19765e-14 -195.592 195.592 1.19765e-14 637.094 2008.97 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.19765e-14 -195.592 195.592 1.19765e-14 637.094 2008.97 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
557.154 2035.44 mo
559.175 2032.65 560.367 2029.22 560.367 2025.51 cv
560.367 1822.57 li
560.367 1818.33 558.81 1814.45 556.237 1811.48 cv
558.811 1814.45 560.369 1818.33 560.369 1822.57 cv
560.369 2025.51 li
560.369 2029.22 559.176 2032.65 557.154 2035.44 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/13 
<<
/ShadingType 2 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~h2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%
OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-
@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,Th2l+%OCI%-@bm,T
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_
UiP[pEp0<>kbN7_UiP[pEp0<>kbN7_UN,LmETj0;kbE.]UN,IlETa*:kG*%[UN,IlETa*:kFuqYU2]7g
E9<j4k+HYTTPrqbDrmX0je$GPSo*PZD<.7)j.1#HS87/RCZCjuigFN?QtYHFBAf(fi07g1P@WO4A)35U
~>
/BitsPerSample 8 
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds [1.89999e-07 ]
/Encode [0 1 1 0 ]
>>
>>/Gradient add_res /13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/13 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 3 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~gtgfBh;7#FhV[5Jhr!>Khr*GNi8NYRiSibSiSrkVio8tWio8tWio8tWioB(Zj5]1[j5f:^jQ,C_jQ,C_
jQ,C_jQ,FajlPUcjlPUcjlPUcjlPXek2tggk2tggk2tggk2tggk2tggk2tggk2tggk2tjikND$kkND$k
kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
kND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$kkND$k
~>
<~O-#HbOHGZgP*;)nPE_;sQ'R`%QC!r)Q^F/-R$jA1R@0J2R@9S6S"-"=S=H+>S=H+>S=Q4ASXuFEStDXI
T:_aJT:_aJT:_aJT:_dLTV.sNTV/!PTqS0RTqS3TU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BVU8"BV
U8"BVU8"BVU8"BWUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZ
USFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZUSFTZ
~>
<~@:E\T@UinX@q9+\A7]=`AS,OdAnPahB4tslBPD0pBkhBtC2.KuC27U#CM[g'Ci!p(Ci!p(Ci+$+D/F-,
D/F0.DJj?0DJj?0DJj?0DJjB2Df9Q4Df9Q4Df9T6E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8E,]c8
E,]c8E,]c8E,]c9EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<EH,u<
~>
]
>>
0 0 1 0 []true true []
/DeviceRGB
GenStrips
} /Gradient add_res /13 /Gradient get_res exec grestore
}if
np
543.429 2042.45 mo
534.073 2042.45 526.488 2034.86 526.488 2025.51 cv
526.488 1822.57 li
526.488 1813.21 534.073 1805.63 543.429 1805.63 cv
548.544 1805.63 553.131 1807.9 556.237 1811.48 cv
558.81 1814.45 560.367 1818.33 560.367 1822.57 cv
560.367 2025.51 li
560.367 2029.22 559.175 2032.65 557.154 2035.44 cv
554.075 2039.68 549.074 2042.45 543.429 2042.45 cv
543.429 1817.07 mo
535.868 1817.07 529.739 1823.2 529.739 1830.76 cv
529.739 2025.3 li
529.739 2032.86 535.868 2038.99 543.429 2038.99 cv
550.988 2038.99 557.117 2032.86 557.117 2025.3 cv
557.117 1830.76 li
557.117 1823.2 550.988 1817.07 543.429 1817.07 cv
level3{
gsave
clp
[1.19765e-14 -195.592 195.592 1.19765e-14 543.428 2008.97 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.19765e-14 -195.592 195.592 1.19765e-14 543.428 2008.97 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
435.232 2034.22 mo
433.701 2031.68 432.821 2028.69 432.821 2025.51 cv
432.821 1822.57 li
432.821 1818.77 434.069 1815.27 436.177 1812.45 cv
434.07 1815.27 432.822 1818.77 432.822 1822.57 cv
432.822 2025.51 li
432.822 2028.69 433.702 2031.68 435.232 2034.22 cv
level3{
gsave
clp
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
/13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[4.81581e-14 786.481 -786.481 4.81581e-14 402.928 1654.69 ]ct
clp
/13 /Gradient get_res exec grestore
}if
np
449.762 2042.45 mo
443.593 2042.45 438.194 2039.15 435.232 2034.22 cv
433.702 2031.68 432.822 2028.69 432.822 2025.51 cv
432.822 1822.57 li
432.822 1818.77 434.07 1815.27 436.177 1812.45 cv
439.266 1808.31 444.201 1805.63 449.762 1805.63 cv
459.117 1805.63 466.701 1813.21 466.701 1822.57 cv
466.701 2025.51 li
466.701 2034.86 459.117 2042.45 449.762 2042.45 cv
449.762 1817.07 mo
442.201 1817.07 436.072 1823.2 436.072 1830.76 cv
436.072 2025.3 li
436.072 2032.86 442.201 2038.99 449.762 2038.99 cv
457.322 2038.99 463.45 2032.86 463.45 2025.3 cv
463.45 1830.76 li
463.45 1823.2 457.322 1817.07 449.762 1817.07 cv
level3{
gsave
clp
[1.19765e-14 -195.592 195.592 1.19765e-14 449.762 2008.97 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.19765e-14 -195.592 195.592 1.19765e-14 449.762 2008.97 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
356.095 2042.45 mo
346.739 2042.45 339.155 2034.86 339.155 2025.51 cv
339.155 1822.57 li
339.155 1813.21 346.739 1805.63 356.095 1805.63 cv
365.451 1805.63 373.034 1813.21 373.034 1822.57 cv
373.034 2025.51 li
373.034 2034.86 365.451 2042.45 356.095 2042.45 cv
356.095 1817.07 mo
348.534 1817.07 342.405 1823.2 342.405 1830.76 cv
342.405 2025.3 li
342.405 2032.86 348.534 2038.99 356.095 2038.99 cv
363.656 2038.99 369.783 2032.86 369.783 2025.3 cv
369.783 1830.76 li
369.783 1823.2 363.656 1817.07 356.095 1817.07 cv
level3{
gsave
clp
[1.19765e-14 -195.592 195.592 1.19765e-14 356.095 2008.97 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.19765e-14 -195.592 195.592 1.19765e-14 356.095 2008.97 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
262.428 2042.45 mo
253.073 2042.45 245.488 2034.86 245.488 2025.51 cv
245.488 1822.57 li
245.488 1813.21 253.073 1805.63 262.428 1805.63 cv
271.783 1805.63 279.367 1813.21 279.367 1822.57 cv
279.367 2025.51 li
279.367 2034.86 271.783 2042.45 262.428 2042.45 cv
262.428 1817.07 mo
254.867 1817.07 248.74 1823.2 248.74 1830.76 cv
248.74 2025.3 li
248.74 2032.86 254.867 2038.99 262.428 2038.99 cv
269.988 2038.99 276.116 2032.86 276.116 2025.3 cv
276.116 1830.76 li
276.116 1823.2 269.988 1817.07 262.428 1817.07 cv
level3{
gsave
clp
[1.19765e-14 -195.592 195.592 1.19765e-14 262.428 2008.97 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.19765e-14 -195.592 195.592 1.19765e-14 262.428 2008.97 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
168.762 2042.45 mo
159.405 2042.45 151.821 2034.86 151.821 2025.51 cv
151.821 1822.57 li
151.821 1813.21 159.405 1805.63 168.762 1805.63 cv
178.117 1805.63 185.7 1813.21 185.7 1822.57 cv
185.7 2025.51 li
185.7 2034.86 178.117 2042.45 168.762 2042.45 cv
168.762 1817.07 mo
161.2 1817.07 155.072 1823.2 155.072 1830.76 cv
155.072 2025.3 li
155.072 2032.86 161.2 2038.99 168.762 2038.99 cv
176.322 2038.99 182.451 2032.86 182.451 2025.3 cv
182.451 1830.76 li
182.451 1823.2 176.322 1817.07 168.762 1817.07 cv
level3{
gsave
clp
[1.19765e-14 -195.592 195.592 1.19765e-14 168.761 2008.97 ]ct
/9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[1.19765e-14 -195.592 195.592 1.19765e-14 168.761 2008.97 ]ct
clp
/9 /Gradient get_res exec grestore
}if
np
685.14 852.45 mo
120.709 852.45 li
120.598 852.45 120.487 852.449 120.377 852.447 cv
108.165 852.269 98.3188 842.315 98.3188 830.06 cv
98.3188 781.966 li
98.3188 776.556 102.704 772.171 108.114 772.171 cv
168.803 772.171 li
174.245 772.171 178.699 776.623 178.699 782.066 cv
178.699 789.357 li
178.699 790.851 li
178.699 796.261 183.084 800.647 188.494 800.647 cv
220.706 800.647 li
226.159 800.647 230.501 796.204 230.501 790.851 cv
230.501 781.966 li
230.501 776.513 234.945 772.171 240.297 772.171 cv
267.821 772.171 li
301.086 772.171 li
306.437 772.171 310.881 776.513 310.881 781.966 cv
310.881 790.851 li
310.881 796.261 315.266 800.647 320.676 800.647 cv
352.989 800.647 li
358.377 800.647 362.785 796.24 362.785 790.853 cv
362.785 781.966 li
362.785 776.556 367.17 772.171 372.58 772.171 cv
433.269 772.171 li
438.678 772.171 443.063 776.556 443.063 781.966 cv
443.063 790.752 li
443.063 796.216 447.494 800.647 452.959 800.647 cv
485.172 800.647 li
490.625 800.647 494.967 796.204 494.967 790.851 cv
494.967 781.966 li
494.967 776.513 499.411 772.171 504.761 772.171 cv
565.552 772.171 li
570.904 772.171 575.346 776.513 575.346 781.966 cv
575.346 790.851 li
575.346 796.261 579.733 800.647 585.142 800.647 cv
617.355 800.647 li
622.797 800.647 627.249 796.194 627.249 790.752 cv
627.249 789.436 li
627.249 789.436 li
627.249 781.966 li
627.249 776.556 631.636 772.171 637.045 772.171 cv
697.734 772.171 li
703.143 772.171 707.529 776.556 707.529 781.966 cv
707.529 830.06 li
707.529 842.312 697.689 852.265 685.481 852.447 cv
685.368 852.449 685.254 852.45 685.14 852.45 cv
374.202 841.039 mo
374.202 841.039 360.797 841.039 370.591 846.248 cv
372.241 847.126 373.674 847.481 374.859 847.481 cv
379.903 847.481 380.456 841.039 374.202 841.039 cv
635.498 838.486 mo
635.498 838.486 625.528 839.724 631.944 844.917 cv
633.087 845.842 634.29 846.221 635.417 846.221 cv
640.213 846.222 643.665 839.368 635.498 838.486 cv
136.812 838.676 mo
136.148 838.676 131.198 838.8 132.338 842.52 cv
133.141 845.136 134.605 846.099 136.145 846.099 cv
138.293 846.099 140.59 844.227 141.452 842.354 cv
142.314 840.482 141.74 838.609 138.15 838.609 cv
137.764 838.609 137.343 838.631 136.885 838.677 cv
136.885 838.677 136.86 838.676 136.812 838.676 cv
251.998 839.684 mo
251.172 839.684 249.833 839.95 249.529 841.611 cv
249.431 842.146 249.919 842.354 250.656 842.354 cv
251.96 842.354 254.043 841.701 255.03 841.048 cv
256.016 840.395 255.907 839.742 252.827 839.742 cv
252.773 839.742 252.718 839.743 252.663 839.743 cv
252.663 839.743 252.387 839.684 251.998 839.684 cv
390.584 829.735 mo
390.584 829.735 380.501 829.735 386.917 834.93 cv
387.977 835.787 388.99 836.135 389.887 836.136 cv
393.505 836.136 395.236 830.469 390.584 829.735 cv
656.764 809.614 mo
651.984 809.614 638.767 810.627 648.606 822.549 cv
650.212 824.496 652.195 825.291 654.227 825.291 cv
662.799 825.293 672.276 811.16 658.369 809.657 cv
658.369 809.657 657.744 809.614 656.764 809.614 cv
523.936 811.673 mo
523.036 811.673 516.27 811.866 517.828 817.713 cv
518.924 821.823 520.922 823.336 523.024 823.336 cv
525.956 823.337 529.092 820.395 530.268 817.452 cv
531.445 814.511 530.662 811.569 525.759 811.569 cv
525.232 811.569 524.659 811.603 524.034 811.674 cv
524.034 811.674 524 811.673 523.936 811.673 cv
level3{
gsave
clp
[609.21 0 0 609.21 98.3188 812.31 ]ct
/0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[609.21 0 0 609.21 98.3188 812.31 ]ct
clp
/0 /Gradient get_res exec grestore
}if
np
654.227 825.291 mo
652.195 825.291 650.212 824.496 648.606 822.549 cv
638.767 810.627 651.984 809.614 656.764 809.614 cv
657.744 809.614 658.369 809.657 658.369 809.657 cv
672.276 811.16 662.799 825.293 654.227 825.291 cv
level3{
gsave
clp
[609.21 0 0 609.21 98.3188 812.31 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[609.21 0 0 609.21 98.3188 812.31 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
635.417 846.221 mo
634.29 846.221 633.087 845.842 631.944 844.917 cv
625.528 839.724 635.498 838.486 635.498 838.486 cv
643.665 839.368 640.213 846.222 635.417 846.221 cv
level3{
gsave
clp
[609.21 0 0 609.21 98.3188 812.31 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[609.21 0 0 609.21 98.3188 812.31 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
374.859 847.481 mo
373.674 847.481 372.241 847.126 370.591 846.248 cv
360.797 841.039 374.202 841.039 374.202 841.039 cv
380.456 841.039 379.903 847.481 374.859 847.481 cv
level3{
gsave
clp
[609.21 0 0 609.21 98.3188 812.31 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[609.21 0 0 609.21 98.3188 812.31 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
389.887 836.136 mo
388.99 836.135 387.977 835.787 386.917 834.93 cv
380.501 829.735 390.584 829.735 390.584 829.735 cv
395.236 830.469 393.505 836.136 389.887 836.136 cv
level3{
gsave
clp
[609.21 0 0 609.21 98.3188 812.31 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[609.21 0 0 609.21 98.3188 812.31 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
523.024 823.336 mo
520.922 823.336 518.924 821.823 517.828 817.713 cv
516.27 811.866 523.036 811.673 523.936 811.673 cv
524 811.673 524.034 811.674 524.034 811.674 cv
524.659 811.603 525.232 811.569 525.759 811.569 cv
530.662 811.569 531.445 814.511 530.268 817.452 cv
529.092 820.395 525.956 823.337 523.024 823.336 cv
level3{
gsave
clp
[609.21 0 0 609.21 98.3188 812.31 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[609.21 0 0 609.21 98.3188 812.31 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
250.656 842.354 mo
249.919 842.354 249.431 842.146 249.529 841.611 cv
249.833 839.95 251.172 839.684 251.998 839.684 cv
252.387 839.684 252.663 839.743 252.663 839.743 cv
252.718 839.743 252.773 839.742 252.827 839.742 cv
255.907 839.742 256.016 840.395 255.03 841.048 cv
254.043 841.701 251.96 842.354 250.656 842.354 cv
level3{
gsave
clp
[609.21 0 0 609.21 98.3188 812.31 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[609.21 0 0 609.21 98.3188 812.31 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
136.145 846.099 mo
134.605 846.099 133.141 845.136 132.338 842.52 cv
131.198 838.8 136.148 838.676 136.812 838.676 cv
136.86 838.676 136.885 838.677 136.885 838.677 cv
137.343 838.631 137.764 838.609 138.15 838.609 cv
141.74 838.609 142.314 840.482 141.452 842.354 cv
140.59 844.227 138.293 846.099 136.145 846.099 cv
level3{
gsave
clp
[609.21 0 0 609.21 98.3188 812.31 ]ct
/1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[609.21 0 0 609.21 98.3188 812.31 ]ct
clp
/1 /Gradient get_res exec grestore
}if
np
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 
/10 /11 /12 /13 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 25.2.1
%%For: (Lenovo) ()
%%Title: (2212.m02.i012.n041_e12.eps)
%%CreationDate: 2/17/2023 6:08 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3Q<He+NT`YA=/j"9sL``8gnn8-EFd9JFb:O9EWQ=i%hc+.hBheu>7fP"$)X%O/!A2(M9T*NMuTm[9KbeN:0J\TXRFs)0?O
%d<-t);%6H")7Gu3'hA<$YF1fFjo&)XpI6rS\sgfdCK]Cm<I.'TC6iJk3A'Qq\r)8El\/*A<,:q[l\/6;Q*49Sc.5cBs3%I>[_6bY
%`_3uu<@[[6WEdCm>gbDYS*%h=\PcV72lg7HARuT'l6lN!;2_$?!q;WBp;pp38-bu7S(^ADj7\o>NLX6";>H[X\6h9M\(XQ[?*;dC
%cf<TA9hQ1K:hk77$S#sA73dn_UG#QHV),;RBo>#Nd9ZCL4eG%Q$`Vqd-nTnjU5Dpa'`SeqWD5tiY)J8<U>,N/iNniE)%lQ.mB*)m
%:#',*.Dqsb2?*]bY6%P_\<.WE_c!m>n_,:\7E`ufMN%g"B%CuR\"=9q7^M&L]]N`VbLBE-_c="FmA::bcg&+#Uf:(5.[oWe'$Ydf
%8%J85.J:"-'h_8NH<6R&KCV5`NK.I[*RciCRL,:#%+W+&^JcR=O)!c7%B7<'=%q%c]i_;]&4@hH=$3'tBa"4?J&e874>4+!L$P!6
%jp74VhsGNc>McOr3)]E"fklsgL\8.3k)<n37b1EV@VSV=ZaPI*cg$sq4"ec6Fe?Z(Qrd:].9:S*_LlT"-;"^3Z8%\m`3d/$np.dS
%P]:B\/V!-RPDs1b(pUELV&]#`H^/`LIr=c%D`eIt]3VE?]hu2$r3isdPjJ)EWa;_@oCXT1VhI?VZm9Cn=t92ds4c`Jrf2m"2#P'A
%iFJi]&!UiXq!Yt@`-9MK?DU"rDD^[M`b+V>rqBc@/&h@!.J:,KB\/_1iPj=7kr8HK4uLB=2Kd[E$<.6.*T!"Qb)Q3/"]@RSV3Lb@
%T&i1hs'Ol5>1!I*;#u9[<r5aoe/M<%ikDIX\474eTIuIY"HTJUVQfP52b7:]W@H,3Z^+cFQ>+8Ae2HrjK:cJ^E3WD,D-a-TMHBD<
%4V_dQ5<ND+BXD_gWVu67A`gZuV0q.l)AhL%.bF$o/lIJtH6k++k52A$q)eQ_:CaRmL?%9p>U'5@*H]Hk;H-H*g43^,*F*guOJ=lJ
%IUb!RCNqJ7,Jce?oRUCC4EJIOgdH#<;fO\BQZoEpK*%*->TMX-L%Y6%>?He#X@fHmCk]id5GN8(49b+EmJ^*KX]NZIC=HLFZKF+"
%j[,ecn>k(lN;u=sii10@!ud9!=\n-@X`hC8aUE0<kT-.>-U/;83Eb%bN0F9E`egQBRc:2.bn1kl<]3kprL*LbY$&cBq5?I=#tZaP
%11`4js(/!H2-Fs:1qd@d"Q**lm\j1XW[*bQI8\57F=J`2:81f_jbeQfp$qLcT)APRi_fkq`T5489D:(r:$(:-^UUH96RD`ocej48
%j-COj@8[3Zoi4/YYNQI%[Vk<?Y0j(DK@]9jUMH-t4C'K:7I#6pGsue+lgMT_cW@`1QIr(:gPWCVjfKM.Nb)Gi0eJ#1Z4&;?;D!ST
%eQh9QNN^m(.j&#GrtTsrg;PX@\2!=G\j:I8CY%lqLG"pr'tSF-jo&uF^Xd_6QldgJ2h-EfafXY>)L!EEjmB^M?chL%q>;.2Y0a#n
%XO,1n)K_\I(1"@u3F.sj>^ubgID3i=[DZ'Yc4/AN[G>h.2s9>flSTRrKeAYd5[Q8@1AS6NZ?n2O\GlIXqL"RODi'UF3QX.(,se/'
%9ueOPQIKYB[4PBlmpm+\/i6hVF<$:aK9QZG>J[(2@8D@PaW0QV8lj=KRoK$]B%s2CgC;Ui>`1ITf;.@+NL#eWK6W_B)Whd+_6R"q
%W!Q$0L0!D:,Q%o<l0=XI%_sX%&$loJnOj9e:6Vn85XQZh^dssadL@&`G7d<U<oWV,8d)F#iIH$'GZ;5r#Y:gAi?;$;L%')I:dH>=
%["F\B0#C.\05`M5;2L6K!R_SB!Vq7r-DR8/\-R3#'.t_eQ_o^E8c2+=7O@'o!QkSE#6Y/B!YL!B2P['>Gc:qcnp:YkF`jIFO(D97
%O:C4QU]]UjKRJN(e=\\9_]7X09DE04:25&#[hc@3pCO4flGY>E1Fc70S%q%Tq*tSidVu9b#P*P+0&`R"3,&qb.=ITVVoudj_>\"+
%N+Z3^6,ub!&UO"hrt_G%6]"5\d/,]$X'R=8s&XO1dcHfDdrOE4%kj6go`$fKe!bcgj74?gr+LT[V.t,:p_<"$K.l4._iZQ1]Q4":
%pFfhl`ju0bJQfU%WcVr%Ht0`ZY[ugLJ:qO[0jWr%4DRW+N&^rXFN,6WN(_b0@Ekf@,neq1[UpJA[PmnI__(*c<;_Qe*BX%9pp+bR
%G5jA#*;[?8^N4eMWi"Z=JMk$3N@FKqV$hgVo07?<idWAnV:Flm\\J/bnq803B<>CA]BZ4%\5`9u'(LGt\g.98ITHCtmpA*T>2dZd
%bMeA`%fKY=euVCE*-/1T>l!jrITHBijibc.hBbW,E[5;G"YS6fdcaTn,0hNc8(1L?#[$>"r4"p;>)[nRncAJU2\a?B,3atP05%ue
%=pqN)!9F(dPF:H(J275-,CTdI=?QO/Y7R7m6=Ud^Q*nnr!sZnh[oW]j&]4ou1h.*N-7R8kC&m4+eYn?ME0ZY?J6g`(FB?rdScKbl
%^FJ>PBq)PneI?bg'2ppg9)R:sD@SpRZObG@A\b/9>k3ps?A<rt_*oZ=)QQl,bnmn/mBUAGrZu?6^1PHt+gaVeYCM*$repG;PQ*@j
%P0PI.k!n1g.p<orm%sG]&_*<LAbd-`Yfj(tPRYK)/3UT8Cm(nUT()2$dnKL11LZMV3Nk+ljS;t*gD3+MV2eK8(`#eK0+Pl(?mJ78
%Z:<EKP#p<Z2=hDJfs)?oW];H>!kK=W:)>knT?.`?_(,L@!H%u0TRj9AJlh'Bi$.ia`Lt0d`!2;*6NZA28gH96Q**"%E)p(pe6/Wd
%5E##crWPG'`,pEo54gU^Mb4CARlqQeIG;LV^:NtKTkOX57A*G<k^bVm7T9g0oH_(L'%&s-eQ#ZVa/OFNRMqX`4fWXsOr[kpF@?Ck
%Y?nI(%J?3t(EPkB.,q=cYP[l"j.'bi4NG["=hnk+XJ/p8!#[n/QoPm;M)f-E\*D<8MU*AqQngu/(&G';(jTlBV$%UA#JSdeCXj4/
%6H:2lj6QP.#77c%5_Ce98HU_%d-t#:PEa'@$'3UD02C2=7I,b\L9*E/<se=pNq=q?g,!GP->@&&)/=c@PUb8>\hEm"O=oA(W*CG:
%<<!R@a*#,Ip_)&5V'E?=J4-2S6C!3!M.6!B4Yh*`<0c:*d$3,FK(gr0*J.Z'i8sS=<K0ICYp!FeJ6[aJ*GR$6:R9X8i=?\s7ZNV2
%VM0@RqO=9-$V&am6J7R@=`S'\JZI5SE\XFcnq:SJC72NRJe(:k%CTa:4X;9f!sKVnR6V=IC6i["1J[Ed?1LtuE,:nA<Q(4/D`?7j
%Pr<+:MrEjK')hK@HY]Nc/E(YbnXrS[S>YNK=09u.R),sJ?DUSh:HbS%=.2kPf:P:8*8ON&-s);N;N:.44"D=pR\u]KWE,[)@`sDd
%^c/<n`D'5N]"W"\CA;qRQ4!uQHd09:cF'X/!JUPSA"0;qVpZX:9^Od-.95K;WR0*h]@>gZl'n?Wa"cBf3b#kS.FGLWFX_W-mZ<`&
%5AHbSDP?Ir5\4HjNEg%5T5+%OG.Cng8>9lO/d^2gj6KoNS\:R=F>B'DfW!IPXZ&o142f@X`n%Ph=s"9irUDaQ*iB[Y35OOA+Rbu[
%Bbj;[,5WO?WC"+>9_22c`FE40h&$8Qf?k,2^EWj$n[H),Dj6\s]A=N3?_Rlt0:0M6caq0)n[tkM1J&#C7B(Z`0g7<6<7_A\M0*?W
%YkkE8$VAUacZ69R8<P=W&\kd2cE(iRXAg)ShMI[,&/E6@6cJA#Y5aK`&-(ta6Ch%CV1eFcH6aVj'8ji]\#qb^_!Bupkq'5)1$.h[
%.<jA8aFL5UeB=uk@a#]'A+$K;F,:10M(LZkjX.Fk`0O&Nk9m]C9P5]\>iN1s,212XQCHNIpW]#Yn2d[PfrO3aSa/XgU"Sp-]E`c-
%l/88HMmd=Dd+E(L=%bd#]FTIMk)N^2%G1fqB4n?pa;Op9AWt3Z'Z[+G'P#XLU__,_YPD_+@XPJj(aj^!>DE4W*C6lE=lkKM_d:#]
%CN!Lt.f!S%aRENa4)]+L[%t;'ce,i!:J<^kKR,@j%K2>n"/UW>WR.Vh9kJH1\)Wo:rLQOlluCqM$j))D!l&#(Wq\BB.IaT75;*4&
%8:OR1r)FVAKYt!q[r[De5.*Gr1TsV9.!Xe=:fjL,rDF;[WKt<ofDaC#f1NI@nR@!eI2u"eJ,+Dmeb3mRIo40D@+nk8\0F9nSA9Hf
%Yb&ABAeMqjmKh)Y7"@[5qGJEiFJ,Z/Q#_A+[Y^peQ\4'>f.\RAS5S)'UZh+X+=FKp`eVEt0d*!b^qX</P0>[!1oo4^+)69I]On^&
%;(]2>_6&&4*"s-fgSO%X#pioI857[U4+:<hDC+KBB-^&WFR/(!eArssWjaj<agbCi9H!4]j=hl:-atCW.9H@CWZ58g`VRo-Yq%+L
%-G*!7P$=L=ZX%K-/oZRBaCRBRnIZ%i9k:Rk%WU]k0.SWQY#!N]8!\*Lgi]su="NC6)\]:<(;e],]P\[5h5>[Oam=eNJCe'0YA6lK
%c.n4nd<gDXVhnMh[fs#(W4=qV`BAr-nHhq/%53`P1m?\!3:>b.rab0SL,G2`o(FD#'-u;@&P!K[_KPt0UBsuEX[^8[PjemtD6G[V
%5f4koTQHmb>=%;ok)E0s4\__&[mZN/,^=2f0-lrG\RG<ET1EcFJ)SpmV92*'_CtU%?`9j*inj[:,SK%JWW)QlHikQ_]R/>,Jk!c<
%r`n5(Z^,L]i(:j=F%\d03c)\%R]-t6'Kt"@;=44I7#1U#nYt8/Fk=NkpV`\f0IhCVEcnU!r0F/%T/GrbYt^ggXNs!NZj_E0;a'ui
%P2oluSJWq&&MHM`5!B[^a'`:!;fPu%+/>(nC[:B1=gM*(-P8;m=h.EJh\+njH9:.eIX8aAR2Ze#D6Gs#eNq^:gSJM=I2#9FaX\.M
%mIH>..1f@1]tLG1CF(Wr>\gY8$et@%M9(Nr.]T_^;mgp'R<^7r3n;N;B^mt(PZ244\#s[>dI232W-sH50s2R@f/d(o)Ig[Fjm]I,
%<6cF@it@LJ\&=4uVDC0tUe56[s5_h<CWJn`-CH9k!ji=/.2+"qcJ0)Z`Q`"h,W$5p]Jq7+.(@nnS':fc[$$T.ms("QP-FpCH0+"m
%M4\eLU>-+oP_c&].rnJopF-n)+jkA[\L>SDaWq\a?hA#pM_YL!1QG_)K\"Q\Rllm>PZqnhN(?4ET=HAlYiG]Vk_pf[PL*jq0YlMB
%-quIf\S2;i,YBl"cZekDZ\8*olprjKfY7?Q819K[R>Lt/W?Hb_3ANVNmr"`bQV_mDp2iOlI\#nnYLb;8`3NH_qIi)LOh$mmV)4n,
%iqr83d]o?MG^g4o:F73*4,s=<NuU0&;b@PATN*&lP<0[;Rc)nL#M6$`Y"`m&GB#2HVO?Ar"P5!sg/W*oe>s1&[S:-]!E`RD!)Ku0
%$*)g)<4br[g'#sGJnbs)D7lf*QLp>.Z:jUR*l&5f+*f2/mU:.dA/X'aAMiO\PfSYVQI-EPlIq<G9'3pa)aA[A9rZ=)P#>$NXeb1<
%14?&"0@L`:H^#_%O3XY<QE'V/7i"hEV]''RD>a3/j]\p2<ium\hu.J:X&8HAX(0'SWQ'D<]8oI#[2M#P.u@"qNo%A8UUPp)[QdT_
%grFKFm\Y\X^L#rGRa?u>Don<,Uq1Wb3J.8O/+snT\lKdCemKdMJP?;>n^n:h"UbNL[kh^RhF.RWLA9+)T2IA):[V"LjUS"M,5_'d
%#6h&iT+4hCh%4PCLmH-5n&n"*JSUVcA,);DVo&h)=YA`%il`/]:0dD*@DS,NH5SQGf.\ReIil=8\U@=,[?HaGpJ=E;_7cS"A)LnT
%kas]ng;A_njo:SqHPQ#$aW3OTp:mj[Y5=bB9$0gqDN&U\?<=o8V2^IeDOn^qmsP&"q%OEK9j(5MB.#Fk5OQ]?ju\Fq:1Crh+7l&9
%DJ9aTS]#o>eqte/hcoGNSA]gT'/ACVAk:aAQam#E<@[[6bNI,JWO>JnXgCb_@JRRMr1dN#PhO=*;K98(oP+K!<YGjV@UVt^XGMWg
%Z*5Pjf!m<5$4_?W2Im/>"2`"#qK"H.[7p?qCN!M?ONp)BR@H\#[,+%/C1iJ1=,-D@ZCdCQG=iU]J#j!j<9%Xm)p1!MB:W(;b?ose
%N6L7(Gu5"%4Yk7qm*Q8HkD:0(hWcrD80L#2n,(2;.dcV)JiRH'm8d;Zf?u1AH1U\IMn\_LiP"p(S)d._nOiXTnic?Ap:BmaM9G*P
%>XlG[8@XV+rt0U<-8)'MbNSeK1N=<2@CIR9UP[0-i\Ht4N$^0PRs,`ML5a\hZBtUWY-3IIWB^a<SG9h$k5/ohj)r*p,HLRiD3R`7
%r(18m?\=T"0tLK`/+2_2,5;o&1Njj<J&VATp)jAjnK;+/]t++ojp>PW"Q?NbiU>Nmi5oC@[h/q0fr9D+LJ?R5KDY,TBbQbPHd=2Q
%e4]3R+=Ars2g`n>P%!sO(+@9Er%U3B@Nlf\o1;VI!qAZ2-70NV-SX@/_3h`$4?7t,+rhsX0_L:P7.G29qU1umAW3N?%0FAX'Q9M3
%^,.iuBcPbe3H!ca%>&qMgd!&sH&q^a%p;$,B4n?pp#Q6$nj:+NaB-t?QTY64qA.6`YPD_+@ZV/9L8jrTN(UqA$D;='MMZoSc(We.
%\@Kn1]ldB$*LrOE&0dX3Sl[U/%kbM(rTE7khqMsk:+Wc/Km%Z^S*o)'M1tZ$Ms$N\1hU9kh3KpjbZ%7e[#'JpZ-Xg5gARG(M1mjc
%lH2d5F*gcqb1=nWju96A=%["&1Qh*a:[Ntc3`I>l3Vcf1NcCPh?X%G]+rA%C#X'QS?fTV3i`)n6+6+^G(jG>"+si`"^<a,t]fJ?3
%i6$BArLP":Ugt-!2SNH=>;oAYD_EFB%Lk0]-O1,U%NHD>XiZ,]Il:*3lbK2mY>nbEQG.Q8[DF%"j$'%n1rRa)lnhL"'cN/!dprf0
%1psm+'8`)P[j5^0f(9;dYHh([-aWDA1i?Q%:&%QUo5hh3D)*K4e2l,cRbf,rbW(ohm$B"'m;ffma:n-6O[>:S=K[UfDd@MZ)[2(#
%Bibm?f5N'NGHIY%a;s'@RLh+,XRMXJHkP%j>J5ORV?.+opU7bgFpLhU^Aa%Nd[RW[g/Q$S;RP8S7dR9,g5.)]9N9M]Wi4'.8%mG6
%C/U-Pd8D>qlJ9fb<TRP`]d2'pRn\3#BLZl4dS$C8Sd[Ytl7SJka\9u*m:BbO9rtlsi$@j[itHcWSG$23;`6AnDEHuTbdft,cGZ6B
%Qu`p^mTu?'M)[:=k1mnF]5Qie(f+YOe%67]o6Cb$m?kXkHq_JqR2d_s%I8LanDC@!Y0"M0[iC@m_j9:6LZ<Blep=0!+5+b#cN6i+
%"k0r6Zd(7.ie<=aV\QCS\XX;.HG_7tgV9$eEY>h7^W-'j<)Hk<B+pcIqnJ$.OADG"ADF9Ur!s()j:Cpo@1R76&$j:6>r_V_q4hkb
%@q<!k04s(PMKAT#SE,liA((7P>j[KtjVl_%bF\XckPMK_c:VVG?)^0bO4BF:eMqlO%HW%f_r[3a)XhHG!;FF3:@Nt1[mV0+neJ&]
%]9EspfN+nqjqUJn"`Kp.9in1)rCZS8LZ@c&=.Rsk/"_+Yobu$CnN!Xrlg=)qc\mJ%BW:dBS/GpB-/ZPqC+%`j^";E7JHYbO.rtsp
%>?N?-gsrdBK\p6c9/O5,Ws9rV\q<"Mqd6+).udD=kcabb<2-%SZ0OgV'i1'g46XOWr6=(3KMNTH-cst[h7/6cmMeTH7)\KST`(.t
%:C!nW?Rb^s+YfBF)&3%aL,h!JXA/4[qg/Iea\9nQ;"udMKTgK\hm>X?7$G>)<6@)BLYCVjY?>aM<(dN<ehn&"$+g3+JT+9qLaR4_
%+r@EjLMp3G->jCPY\[!FWD$j_Xd4s'9@V(q#-TMC`i\Q3s30884lO`)C#aZei*AI^kC1*oHfT_574%:A*_S>8'uF6<QY:E`m([XU
%<9h_FNsZf9,P-ti4B_0c@3ja'p9fW#0AJu=Y7@'%3sX^n`P:CrKp3j/b;YIm#D;;Z!%,^1aN&^+q<mJo^W@?2J%UT?q2C8+,)X_V
%+-LX<h)*r/EZ\'"fY(peQLA2-0N"\=L6i<<$bUY-^Wpf4Sjdb]6(^`'h(;X(P?p_f#SldV4)re]hW/sC($al+I-T2gqq&:Eg>6O!
%@e^_K;RBCImVj51\)[.HFObX=(_7tJQn[2.Qn3$NPgkB2rg_5R'/mH0S#QE*0H4S\@[#_Ye#Tn%Y46K1qdu#*UVU+e2t)"DkPi"U
%P+J.I^hP&'Eqc!h\i3;W>T^H(ol13m&X-RFs64pLY-I*:="9KI%;()P]%?ii,kG?U""C#%LUSBP1afco/P*qTHL\Z4,pVkrp`uc5
%(i8aUUa5g1-SIcS=kQc>PI4RKHl3RG9TW"mlErci3$5#\n`dU4H+>8OoClTR%K=WbhsFE)oQuo0'c^S^T9`BcAuBd6g@f:<H)[4c
%D&*Gr7t$d<hr_UEV0jmP?2rKnHG-UT^H7.-R'.=h;d$k$e;<VU>XR*IZk#;:eA?K+XA_"U:JpnZF=#gn=+%L*C`hS[rYG%SlWX7"
%NW8!,n<*L^,O,,o\93QdPBlVi>]!G4iCupZ(VbPI5[<b?;"j-TelHqL0N(No13M&fn\K5Tra8s=@TrCi<HVM%]07X?j(PE9.juc9
%/:@1"J%_RPhh^ui`[A0bqY42b(&t-apEAIol6<Wt2nX[%AVP@_6;h/\&)*UV.CInVdC[(jmZ-8[RYkG(Y3L&BCkZQp_,XIP[/IGY
%IGC_5>4!XADJ8glNHbD18@uY3qld\"h!iQ/o6F".fDfk.4\kkD$C?3eF8;^jG4b5drHnL-(sW(i0,KU@f_aRdU+PY8([(E$^:<88
%R?hfK^HD9k4fqd^eGka&WeWX6#/AQdog5Q[WjPpA2N?,.a^RL8A)klfQmI>0+_FJ=#m@h('FFfQB*SaZR?P0'?F(&alUW0YF#$^/
%O-u]XdLG(s^<TJ*[6+F6Gj1kX>/:/ehmsaj2d:'g'KW@>]t-=(2n<r^5efY7LMA3O4Y8t%1"4%R,^sGRh8c?62q(FLqtQ&=HA*Ye
%0KRn[?Sblf?5r:7\anrcl@mF08-:1._%3Q*j0@&g/,>t7/,TmodELrrDoUR0\a!]CD*3o'*K0kc!UZ=EdPZlf<i''2?NQ[C,TP0I
%emCL#CS\"D9uio)p.J`R?[(FCrkl["=n3g2p+Si\O-[1j25r3goI2-D]3hf`EtgFrR&6!B\$"e'9Y>/'\$9l.FE"+X\I%qIUo,hj
%J;rq4Z!jeAs7cIPXg^m(hC>)(GFR^cd:&oj]@YqjgFc+$$++(,X_k/kRoSq2eQfW=qOde?-@bK/Q#_6L8/Bbq_Zre#$_pb[VQ*;,
%?IX1I*UKpk:6D/TkF^hBa6LqB[Q;()8^1qJH<Me9k4<rEqH8+9lN.^fAmbMg#j[I^rOc9J[E:_Rhp8I:YHa/]7_;nWs)S8X[T%<1
%^F#[ii9_g@<RTdFY6`<O-X^)d^#jU>9m/DldarAq,UD0V)nidCp.=Id5b&r6WAaZ?f)\ZK<CIPgZs7_TSEI(T%RFABs8BPf[a'>^
%`SErTr7ASU_t9KtgFIU;62P84N#SXPIUI&8_q\eC<iYt8[q2nOWN)pO?qBU^dn$TBTXE<Bc.!d@qbfL%q-d:@DctkJ>@-^0j.2N7
%HhBk+&WO'B$2=fZZ2(/Z3\:65SQ[P0gYQXIdeFRADC'E@[\Q_K2c>>j@T3;"2,!,^q,[,Ycm&:BVUoRLR[G7o6G))JSU)$3c]o,A
%Tp]%8/%`qW=#SYlPtKDs\#![E\C(lZ<mq@druQU?TMe>fg1Ze1-i<BaXo5FD%Bhgc'9/[VocL#B"2WdDLi1g+m7Ooi9"!BtqIMX]
%6Q-&B];mN'X:e!]l)R7c%B@Mh7oieMfr`l&?nS1QFp">O=M5:n>&(,1UK"d5qqEs^0t1?7X^8,8:/T-)1a\rX\Ori#4KLKu8l4+;
%,u9*iF['P_6f12/o$V=&3,I+Q?3U8_iZ$m.1;'*2UX\((mCHBurXcu'Wr#pt4#q!(gYrpTH83,Q3Hge2r@ilm2_&rZiVcZL;eZEI
%BY,,K@/W'Ma!*OFVcK8Re%4-^%NLF6JniuIXf5pb>a4sQE-j+#o*UiI9mE+*Z5KQ^=3S,p[7[FC.[L*,96r2pEoK\-:[WM%ZVMUt
%R++FVCJ,86pff!)+FZ/3rec:t;BjGa95?8:h;7W.ZlfZ<g1B9EX$?-[hCS\*YI28\e<g7H+53e2.\.dWb[;1+?qC;B)tbe7#\:-&
%_K8s1?0)rmd/:_ri9:Mc4Bt%(QhI9B@imb3U=3o.7f-9$<2g!`d"X[#r3>WHY[H55$5cf<nAsQBAZD)i3F*pP+Pr8b-e4KY?n0qJ
%QU7[N:Ptmc[Ud<tr\N-UStQ`@P;F+%j#7pUs650UT0?om4QHG'K50jY*]t^QUV>Grci\q-dNc<NL%h>^,$3+-MEpL#F*^lj+@1&K
%X7T($'hW-tYW'RP0c9H5TZJ,BQlS;dr75AoG\c#O4m)BMWM?%'b.f1dZ=<?:e5JsjU5XCjqm.W<I9\jY,Q\.V%%`ZB/Fd6]/'=<)
%SD98f3NU;;ViJs.@f>Hi_'%XFm1nX4Km_?HXo,rj/kY#f#:]/t+X*j`n$_rpkUcDHYC:=3XG=jC+3tuo^)W(-]jJo/ML7ce4,"FY
%jXCgfQ>,W]U]YtX>*\*VDl-L>6]+`T6;PLIgSNIiC7i`]h`m7W0=C)1::K#AXJ3Km99na"^_]RUcK=A$@lMrXL?sZH`(@bDF40k_
%X_;^BRNW!A^*[VnP=P?7]NH_DB^TH6?FV7$5D@3p>d`M=(c<?nmWR:n.VluDNU3CpmZBG$D,Dn@dDL;5^<(`0+'qUWYATUGp=<'X
%,9/^!D-FVGTLC2Y:Xd5&?*R8P#"0u?XPjnHM$q+U]$R@8=2!1]]E1t]ST[.9d29"39f9Qf!DTV"m8RW88f]m+@JSE[6G6MQ'k=hH
%>26*d]>+@^Y(M@qf/UJe-s1>45GMepQn&ELXW6C\2]Zt)C+OC[s%GJE?L,+JYAu#TpWoGqX,FSCh;rctVYN&mE4.pCV(_;5e'2AK
%4_q^cJ$HBXU@"8u[m0iOm(VpnXNtd#2?*F7T6,DYlY8KZki#K%4ni]KMKR.F[G?>,+0$Zi]kG.5<9_;Q-N6,4Ys4j^kekU`qDIAN
%jBe'/7#PY1E.duGmH<s0o\narrc@IB@Ik65>in7l]!M;SJ*r2`%mLbon7R=P>]JWa%Jhb;Ku0I`3.'Q.kgTH.r-:i`CcoqE4Jk=a
%iNB0YNL@s1SN]3n_;f>,EpIZVIr\K4ea.a^73=97J%M:*28A1t,Q*s4qtf[V*'SW>b;F@p`G(P9'YSLcD3e=aDHP5WI=D$RotbBJ
%XIUC^;sR4[4"FH^lhMbg\!YiQ3W.a&=^T?8dV-;V5-LM@=SfORp@.1flKaK0Kh%-C;lAW#"r:7:dhga'VS91755;X`I!r'`s7=QQ
%j$E9jA\BRc>DJX@+1/Ft-F\4sIC9^2#sF=KnO-joO3[YPI!#0M&>a:e1hh'/V_H[0-VVJ=7"7X2IJEXHd4`\Zbu79&U>6LZAog1O
%Yg#k*HZS]3d6I#/eW&A]&,RmS`TOS<[Dcj4>;V[0s8HS<p"AHU[FtDg7iT!7f%8^=;Xs:8n*eF[M5-eSGJS2G=W2nOm,du,CAkfO
%ra^Fuf<S^!hWE!W?S3q3D/ZC,^-=:'$Yru44-ol=;u#OJ`QM>ddgOLU:"pbdg8h'8K?#W[q=8eCq\SVaVe=]5;X:m,p>KgNpL7k"
%gZ@G\ZN\7LIT2ASg9\K*fm:3@G,d[mXLs!HI7Ei(D'>6chgA\b/8dYIic:;#'g5VQB23;jZ#uqI1^ff<_PR,I$YAVJ/#mrs^2hRl
%?S(9h['P`,[@(0BOahVeiaf>nX(RhrqJ'npqcWC+qD7sY1\3iql$5.MSmEsIdo45PhpUc>@tU/XR89`Q^M9O?;uVHp5PdL-T&4hf
%4oK'9IDj>^As[E*=7=pWr&)/O=*KmYXQ)uciC.P]gqd&00R7t&4Z3+^.6[WSFXR,Q><#@'fX-NKTC/.M"V6raNV)#tb/a/Pg-In#
%kk/sS^$oV`Q[\l+bM..$e(V9Qp,"Rt?9Bl*9e4c-2ef[2QdY_Pqa"ES**Husp;sABom$=+g/_"<C$3IDSp&_FQg(?AoU#2jJbMX1
%T?\M4l"A=KmA?MjI<qK6;,\:Z\YVfsl28TdPP!RFo0I\Nn,&%8bF-AJo]C%$3rM+g=\3OW1FMFXk6pnG]if,,rT83uS3GT\2UY+<
%];,#QcF9eF]DCQqoS8X.(T?KF]-BE9j\=i8qWjjN3.:XHrubTpf6EB@.mD][?duc4qJoV^RBA0Us.6C^AiJ/q$ch/RmDmr(WV!(>
%R@8$S[\m_Ye$Dto([mB](@oe:WD%*il]e^B/PkWrG*T(q1;>ESRW<Qmc:olDeNQ\jHg!V\HI7-?I4B`OIk\;0jg?hNq0B;%[IreG
%maQ,ogR-]u]W"UG[GN$#]iV/*:Fh^0WKVu,ajb$iW]jYDe>CAY<'YT;nTh.>kA6l]p;8+jHKq1!@!^CKIPEum5!>L_**=kl<W0Te
%D9hDSdgesnkpKi)c_b(9J,:q5](9Z\qW3:65.u)dq/grOdi2fnnCuF9o_[nKLXVmO`mhB)k;B/1k6KQ%DqaMq<6]N%5CYEDRU%q'
%0X^fUm(pT[q==h!?T'MX.*Jg/4YY>TeHbN?POB$R]l'VfjB'le%pnNOR0VISa6&$Qa/u6MNjD@t%mDSZh0\'39n.P0[f-'^_<'9L
%k<YlVOe#&sGFh\i1UHOn[Up:9%mS=;4'ldDC9K244P?-N2Nq(b%V@UOhH\9@^OA4.F'rWfbe0Q_^RP$s\bnWir)U7<^7BZ-Rq\B-
%WjCraB?WQP/A@Osc;kmjL-;q,]<nJbS:+7@RA4M/2lsKlB=Hc(en,G*+$Z=pn7L^&el0`2m!6_N3*TTMcH^Sgo>_AS>K<.eRF:*,
%LW8)pfn[ahQ9ROV]ri:b2g5di&,/7NHiENE4P+iQV/rp?nB?3nn?BL3H1J1fq;OE]nDU^Ol+-/Kqej]"XeiS+hjjDqgA:BP\S]4)
%\\m.;m+eL7?=C#3Wj+E_aXPeG484&9raDs/Qs\&jm*49h>L2H(Iq`KW2nlK(k4c0J`VF_]o#L?/lfm$mj_'@IB)[.r0d"ZAIU@>a
%Sc(PHaSNRGrR(5'`oWt^qLd4k2m[YqdJJ7SbG3ODpZ^(:q=DWsmJ=rFL&(Q9cO61?5?V*;3H_p;qGfO[fQk,5=ZG8ef3IgB=u-QD
%[[lbOHYVH8C*(]l9]mI4l^KtsT4I4/+0W*'bE$iTXm*mp5O[it$X`S7a48Y^j31Kin1p2qH+&g>QSL(ZQ(@BaRFd_1HKM@*8^De_
%FM+0TbjJhK3p.TLlpC.#G1N*FX^kdD1f-p?p"R%;m+\Wi&$k'XUR0ZVX'0(SlBV?Z0seWE]''j+c,G(njd3sBV7+,5iTSgY7:Jc.
%nb_10;e9iajb]]R9j]Br9lF<_e_ZcrhO^nl/#R<-;lNX5lHJDG(0.-047eBqdt@H(Fjj9teYB^XWMaLFY1?qI^"$`/QWH$2l,*\l
%=adEH^!;+QYJ#:Ih9_%U"'bZ:2>p@D?Tk@PQ8/D>c^S:&oK>;19)n6AGbKWA3d6O^j'@A=0c&O>"lnh\He*H7IUUBDpZOot.(t,W
%10XO,QFUu1W,9,dp6<+Mcd.tKMnARm+`jfRh]G(gX[eFmcRhZcqU/Qn/KS#LqZeM"Bk=GVI<XSpg5eE8QL2s6f-0*2^:\o-^O;tb
%g;R\&OkhKRfPL!t4&91sCcJWi3Q([^CjF&M^OG^tS_edg\Q\7jSsu3tgMl&O>s*,AQ6+DqGFgp'H;o@nAnbt-.S]F*Ht2Dhl(YF^
%5('q6eLWq0?)]Irq2P(/e^]GWjhoWp>Kb"G<tCYPSoX`sR@?+,]Z>RQ5M<XsCd.BZ:\.ArT7-M22"UWnropaZ`VHDnhF6DfakI'(
%T/L#DqQn3]YFEk0Y+C)k[e'@Ck-L6^gL,SFNH/P&Gp\`iI/[r[q>'i(@r(PD\,LXFH*cJ?0,Aaj(14/qqSO*SF#3%s`Th#E-2lrs
%jbiJS/?c,ihk.(lT-']-I!b'_j;pLqr0DE]FK2n'%AfKiP1uAL24B4&W[=@oH)0V)[&n!:K6I,lrp4aemHT=JS`6Z_]@0r3[@>FD
%IQkJJ=`&QB5$2$ZI9'[t3KN=SN]s:@f#j&Rn(/X&Iqu/>04)0S4/L,qp!_`?CEpMLs)c0&3+"R%kBBbI`oic,p;Zi\q;t>hI@Yku
%]%=TBq<h_ZfurZUb5(2[_q33m=6A\\D'"*Vj>Xia)pMIU*GsuiZdSK_X+S<Jc`\tXQCbd]g\ocNrUe!o\$*nUEX=kOmB&CHq0qYo
%M2'9J>6b[?*c52qrV15V?;82jITFbU[h"PBg@i#2EdDB75/5`QZ.;,,*1PD=44P^N<d1n)lcZo@?PIAOj&G43me=-4LO7a/2nc]r
%r)77sV#@.g-N3bAo>Xq::VGG(k@UZ]2eNNLr;PL2T!JB$s(:`7FV^V<=*K[2*A!LgNt+&`pJ2=6m*7O"do2kS%\:N#:Cd,bk&q9]
%gLmESNs]g'O)c=L0-,I#Gk'ppH+87tf)5)<ICjptD#<VQm+Sr/q:pNeeJtc_T,er%E+Yu-RqL'uhH;KrIs\Z:0XpuJr,TF=Ic9Sp
%qu,gCUXSt05AJK!Zr]HgY]R/Cr57LRV>>u4gAKMlorRiMj(nVkbK&V/dq><8T,,kInh]A<T0Af(Spa@`cH]<FT9jbf:-Ti63S=15
%5HNLE%*tCAZCCi4p8)Ri3]bA(*NblKcDgM/iSDJif6Ll4o/0lR0>Du3fIhCZ2GZP_cX4=Jp--.A47G;#HZ)ZGp\4AVh\P,;SMhR\
%mMDCap04PoE6qKI(@&(^]qY2pr*/\c6"q+8Da2O6N)tm>g3`Z>=/t>JpWrJuh[=)/a6u'%QY.uDF'[6RcZ]n3:X1Utp%3t;VRClW
%[oe'*;7UL$bJpIUjmnn9V2s`lc5%,CDq86'o@q*ZL$H.eq<$.!GICD^I(Qt!?ad[+]ZQGG2brI_7kI`=hGp1J?T^?I<ki>6YA+U2
%gkW;FL[(d@@8V;RIr&cPoiEg>j8-aZZR62Vfq!$I*LqLoe/-Q:W1*2#f4X7?j%XHlRF\^@k)8Th\':+,p-rhHk03e=B;&b:C68\d
%B+:_=3G1Vpri.,Eb;&b6%TUW-'&49k!*]`:OMM@S4::Gt[XF2WhXG9"6!^K8C-q`GV93,DGuj3gF7r(u=8:f^`N,7.Re5?W3;60O
%V=O`(/Cb_?GNd->I[%9&Q$0]8.>8uXkEq+t:AA*sN:J>3iMbC5>sAXY(,d\.%e"_I2j(X9c-CYFOhX^F[H<5[A=t(1#CDGbho^)Y
%[u+-Xl:9/CpY7nUgchg"h&m0#f<l?;F6N&'6G_[<E\6cL7;hOb]/=I1qu-*Y)TFUU5\[)QFEf;.-JnAA08-#pi1.o\#NcLLBOXnH
%P=Fo5PU_RHri&p05l>n)Whin9q<ZX0R/VA[c=__C01E'u0?&bc<)Mj"c#Rd&buM-hF'StLWcq>M=rOAd/QEGM`6AjISpTR&Wa$4`
%V'O?5S>(nY!bsR=WHK9c'hYHGRiY.HWJW'pqZYlYf+:5&GZ.g+[DP?7R;DlnGqCL>eEkdW4OBd&f?^/qQ!:4_m1Ld^AES_D-^@qM
%Q5d-940+de=R31oY&8U2b@<P_4DHL$"[^bP0%Yuu(C<$ZVLqZ@+>/ItLnf6E5:3BNM\=llBsVt`mr?ed>26fBP@<ck"0:0lQOYZ0
%e^KsgY4RH5LQ-'78rJdCNB!$1A>_XXDU9Z1&jM0c"/Ipo?BK_Za=jNY@D2.DNt/"ba&V7'o3?%)qbm'9(irLWNQ*AWmN&:?3j#Iq
%'?JK>[(TWtb/bIS@B\3F/tK^.Q[W8/77H4_Q#Amg2m1L=L=i$J$jE+Um-]MO.H0E8^"2&\cs0/Z;>II*1oqa-+.9)5gc@9sCnt<m
%LDJD[0X=c<pg$>)==H)mVd=_nqc.BkcmM:q$$&E_^:dU+ZjfC,m<Ym@\7jHoV'1J67HjNKU$A2A2dIBB1sNZoa)S>3jg6(HB"<ef
%JeZ"(gK29=%'t\j3q5t;FW)l1kC1tgPen11Hd>tps,(D9G(&UB=*!*6I8fcB)Vo"fL9,c'%WcE?:K'2roZbh>a)+_@3`V#F57^dd
%A0F:sMi?fG'(1Xfa2Uq6a%-^)aR;k%I^a4e)c(WKLLF*'?X'o[,5\oT\de%@ccYN_(ONrF?Su8==K;\.b:CbJru'*]l0n>r[Ere:
%RenMtlm_0)\i;l*e16e^Th"i\-@:&]>qg(Y]]"b1CtrQ`4]Z:)Z\@hl?Q>'_XBh]Bi)iTD?63d[PNmJAQcdZjqW"9#"W\:>8Ho-X
%^(dU#+Ig)?2G/&3F@iqWWkSV!</\<YIuS9Fe):'"M3I7[W_(HEZ^!,mORXo:NW%%`mgHY<2,%q^lCk8_WY1:d>aO["!\`$2&Ga3O
%ol$+d!jRZODT2%hSj]CU[The)HC6(;)2a2s7RLFsHuJaU`Mt8=Ahf4G&J_L3rA!Y.0(9RTD#N]OHRe&[/2Zqr<N(ne^Cgk#/)5R,
%UKbe5XskBI3+V$[)br;7i">8/oJ$%hWVKW*],`YH4S8.!iWM/Rlghi?2FrRf,9qEn1gXF8TUR1mm'BkW>HBZMBD!l9iMZd=M]FPU
%hs.-,E]Y7kGSQ'98@*5g>bPs#Th$B)!#"o\ZF44\Ch4!:]GZ/C#n;EF"?H"CDm_+K7\a(f(J>KW"58j+KkXg3DSFS=Al$V;Wn6H)
%PZXM#fZdaPr>-RII;p_==Gu&MEg>X5Fqkh>.WcW-if9BMFJm2$1O4\paUm7L6ZhT8cQr-)<uYKE8<aG(oibg0YLY9CldQM`(ps>u
%pk8C$MgFue?j,g^2qFI0d`9"_-3I@B^^kGD&ELcX^4Z.E2[WS+etktp)fEYWjjRcGQQ/bOI)n\,n\SAYm09sEOQqgOPUbPDhoMWP
%fCG6m>#qMIgL?eH;niZq(RcS%!p_CDX]?MRS:$fn]\sc"]i",)f?gPFT"%lSWZcI4$-iab2ZS7B?Er!2NBkpL>$s#M.(lD@XplE!
%(',Ftf28;l.RedjXdW:a;3;lh",(I]4?H6o@eA\Cn^/166?V>1CPBu-]MA<00m3=C[Fum+^H$f\;=k,#+nXbh/_kjf5G)Ca]LjX&
%#ieaJ3!`0j>T;fG&OdFLXeBfrWG5krhc8DgF=(Zq=(A[cp5;*poJ&a;FPZ[1Se.@2&bEgp>mM.V=G*/^kr-]iXG:!DghTDm`!fQ+
%>+O-9;h6*0O,VTl$f]3gR>2ABJh'*H!Iu<[B9"K1kb$:>`fDsP7*H5F]bBXgW6qnrUiAitFCB,rdrPpC[1_7DS+[J<nuZ\S#A!hc
%9%Z.onnLUu4$V"D/+!DS6bC(qq4Pq&/:#CU4#`U7&K1Zd0DsqF`HSd`9<E#:V,8HQ6.g]rV]+48IMMm#i>Q'N/"BJI?>!6`0_!*J
%]^I$!n+%%42fk=?h.u]n^_MSuDEL.)`O<CX>!4p'!.j/soFekg%P?9kCh/1+[RG$?;DQ,\DRtl1^d,%F<jU6A!)\&40OVK0r[`h\
%0mc\ukaR?Pf'R>f2UICr;>3,-Dj%'&[mbf+p&_b20$=]%<GPZ6<P;"9#^5.7AdRn^;S?3Ql:$n0oQkOn"p8:Q-g;i<UL=h]"o6G0
%9nl9rZgg8u]3"Z("Q<q!>E0S+l#dn-mn]=e)]4YEosaQ/#EHl^QZK,)]0,T;G#PF'UbpPr5>4n_:B1</Npk!Mg8u8h1bjI:M$pTC
%&&j0>b:RPXn(s!_m");YEBMUqjsmX#BZCFe6O])t64Gp^=!*1T"L%4N(R2T0q=e5:ks,3--s(k9M<:1.eT(8Hjr.A-Vm9>hUsGoJ
%7)TEED(Fr9Q:)uK198l"8lsNDm[@Dq2f#?eWds8[R]XpA8Ba[BdE1[6Y,0"pD3^!&/><9L#UoqV]chBRLp!?"<)k,WY+)h!dn8:3
%22tci;p[AGjO-AhY%JbJ7Ha#f@V6]KN/MD$?mo/VYuT0YIeO.+bp:3PFtE'lWR1T3c5O,c%pDTVe`eU=dB\e4E.t`k<F)Uo<ToWa
%-p/?TQF.,)7-_%R>@u%+Z3hN/;f!gm;Q5s'5"J+=Bc0pWZ94#C688n5Q;Mdgk/Rgti]=&tC04V=[mY9hqC88/DUp[=?$&_<>u@2i
%B2qBE7IR51FJD8,c=>$bj>\nd)G6F_%lmYLA1bdJU3Rmp<JO?n.?A+9po@,'!kBP1QIWKldGr_8>Gkm;q*l_,r)N4kJZ457>qI$7
%TB^K6<(Y0^;/8Kr_/H(tGUlr3;&?(LK7VAh[*e7fToGAg4^sjG4GJKi.pZ-1b*n'c9&ll78ldYt<>ro>,VP1>=HO@h8.<$mX<F;@
%/Wgi>f]YpDdI1=>IY\A[QpRY2:4^<(7l;^J`RK1++;pV.T;(jVkUF;e``;M_+l.)g>CpZ;Prf58AP<1^8%b?H/19asQ:'P<3k86C
%c*ftJq6%k!44Gr&9Z%li\#Nkr;C?L=h^CU2V8@AL)*0?KP^S96E]FQE8cp_H;H-iAFFR>2?.ZO\Kh8XP?$%si3j])KnQmTp_CM6l
%VJX63[je:^i#VqK5sgmgUCR2;Hqr]C'";Bq/S##<OP5j>O!RDZT+)EiUX*PGhWS*GFePquQ'[e-Y.$u8W0EU6ng1gChXt'14a4$d
%J,VTc@V$9I1BuW\/D4@0PLX=`#Me!Tp5No%(9!a`3i&>88$k'ZDj!l/:[HnO/M.,2K?S2`IX%-\QQu2d\*q*"%uG3t9BmT_VuKf`
%Zn'`PT'NO(0G8\Lh5lkR%=Q^qTKi/GnV9"nm8]X%n&DD-I[25)eo*ENrN3LVIlIU]qV7];`h,Dj6qTH,_BDh_(EU<Do9ruCFCKG/
%d8RFEcq?-8/#?j%(.?b;h9'N/-URQ)#l%u\$AgNQkq8[&95@H1W-G'/pjW@Q84V/<G>POXe=*&]"LXC]/^gF(8*N=AJCoQZL4`RW
%38FQL99^L4e#5^$^f=4SK'@%9c31O%W&6lCCIG;"^]/=QF7ZATa1d1f%F?^P;Rc"oAiaJrl7NKJh#O`L<5UBr!m"!ilCs_ZefYu%
%2]Xl4Cm`%beohd`&IpH%Q:PudBI[7XL*Mf]QC;Dr<>Q.?OIX^?/SdDU'3-9@K(a/W+ZXB:<]A\T6ek\?po#CmJ\eH*.B-#b/SM.m
%>)#H-;AG`R7(oW(ZC8*X+?ZFRYl,<CMe8rAF1*_!>QG_F"2iZ*+Y5s[VIj,dgJL+Qg?>R(VP4i[UokjMWEg_u4W]Q;VN^XLB^d:1
%iFWgWSN[\6FK+5R4DYq\]ktlD(/UqYiLC-00MB2"!A3B(Yk3_a2'SauD2el03YYRA%0q[r4k)>-\o).4=0\Q626'n)2@BaPU')-^
%dK3l7M-F98@(O5o,-D2Ud`#87\raHP>!UKqd>A@B2eJ37#J8M[6\AT;0b')@P%(V`UMIGV`d$#b`Q>]GB$gjP=G%qm!IG["H6WX@
%9Zut^C5ubme6j3'ptHffTl*\@_Q2f8D@A2Rp>'I.$<Q0tG>,X'X-TDCbttBe//[$*2GuT/jM<(b$WD9*XJWQqb;7\M@l)3Z=iGC6
%%#ohPMEf'<*4HMLp&M(eVd^4H&<"i!/h/j!d@=088J`?>0O-nI-5!ZFY7mfAgNn-N?9A.\E7k'F^OG7/,*nXlVIGj#hhpefhelCl
%bcGR&=@^_0.]3KCZNaJe4L[.-=W@:7WHOSR_P5']C_28^2JZ26kcj>c=[f#'WEe%/N>,!+F]-G7a;2#khbHh7^9VUE,F=1hT*WKI
%MUgi#d;lQGZsZU^)k<2p.Q:@2L):.g=7d1HqPNMhfa.tAku0'kQ:bsB_IGE1[RH7W/o_8Ra/3bib=rT*d%FPT`M*-%.[4F[4tWNC
%a4^_p.pZ*^5qR`/hkG+s9SOOX36_UNCNPo?$\kr<h%HjUUS:.Y0S[H*_^B?N^_4\&3lD@@NiCL+`2k8iBS@*>m%KOZ5c`Y5o`L/R
%qU3_G2,,95Fd&drY-*F/k*HZUQ&>A2<gB)C<Fookel@\qk)X=Y&bN'"43/l,AQ:aHkU9i`M,cF<W[:csoiY8s/1JG;JdI"V/s6C<
%50^;U)I\bZ:onD%1m1ik8I,B-8$S$2:D<8$NGSom6GQ?*7bB[D#r7,)&<\ZSA&F8R8UBXJ\d=0m,9id#d`)t?;<<=aP#MmJL%M=D
%>(lUP&X=tGr$J)DJ/GY89;2T\i=$(6M)sBM9#D?G;^erOM4eUVa=<Y<`.`si03qMo^hR"VF.bXqVALY4Fa,cC@`c&4iJ!3#Q/j[J
%,Ffl1b[QqY4L!>jaAQjXbZ2,VF+q?hE*jlNkpKqB8^`cbBuiE3A1a:h>f8K`To3i:=uYVt`*db**P/!tE<%FHNim,&g]K!DF!cX[
%4g<^p2@qVbKJDX=KY/1",45bo').'dTMqrgCD-C6O&#94j&fI/erc#dP,9LZWeZ('-r+0-\9f7[UI_TQk+?)$k!g.+b<_i-,DO*I
%YB6Q@@7i(ZYE3oq7&uYfOGW@<&Q'q$[@i?Hj>grk`C/`[[UfOb9qFXSZRF%q@IdCmL/^j<CIaBMDsim&:Y1P=p/EI:")!Z'+l[B7
%`DHJEM_R,AWIn6MR7>D[AH'qXl_J-99q48C83N?KJOPGVl`jNPn:;iSOeb@2Df1mu>oP(eaYG(4'A<A\_:<B/7nLPC;NopUnUq#O
%&OMqF#SPNlZ1su-`5:K5`WqLpaWs9qW3dOYNB1@,5ZH#0P(8-T%[(TQOWou5</@Ic/4@F\CLi80)_(-%h]Q2P0P$8-,T>R"$oWYn
%fp/]ZIl!L6AAL;"5\Ps&3-U(.A&0>Fi0bg"fH?YMQh6tVDP^1n<;5]aS,[kQ8%9s=9BZGFLaiL!7^YhYWOghW<QL+*":V4Hi0pZ8
%0G>$BPR2"9a98:=A#O'[JtkhqMeVYQTSu3;?kQ]p(l0f?Z#,lK!^^C7VDbJoij`uA1SEq3EJ>8MM`M/!6QC@D"W7Te%)@QL;D`)W
%9ndYH%8G$GX>tu6eqZh%l2[<8$D2kN2Zf*u,hf6R1kdK$dV`2%Kk-B46,af5[^rD.8@/deV$dM=<DG61eK!%/)$F<X#tLeJ,X,N/
%gdjB%cTj)2K#<Cp$k:f>GV`#dadN@F9[X@U<;MeHZs[$5D6Q5f7P(a#%MI0_*eI#/,)JrMMiMCC855:9,!rDdB$2InL;EUr6Eq'C
%lje*pd07"7j:&=LC&L%i2,$qNE=X#,V38ck-9G,c[sYLGdUJ*F8MhIJVb*YG6,#6+oih+"AMhT';,VLMKJT&gJB.ZVE$Agr0P0%<
%OR,cIlF[$@3\pl.m@$Je`Bk)%V@h))\nEYcaQbK3Q9l59ATUYmM@A7D!<+,3G]eX.89+$7U8:0>MGb\)Toif#LmWW-h12A^nVHHc
%8B%uR#.ga9+Yhl^E^DO+aJ?qce?6CmJlP^H9XuX@(,QDq7c^3U>M[f%^J[M:\ATr\+c&`WRh=1_"pgB<*=]3QN(`F^P9Od%YZ)Y(
%fUD`"@;C>8aIja;K_RW"lNO<;9m6I5[]'p-4+RkXPcbNMh%'%&LR4%V%RO7G\?6Br(i$qoLRJPZJQ%.kgPJ?o,$u:2C/FnY%luSe
%k^uXT(^?P`(%J3S$2n=LfEmhL%m+L,:b(][1mS,+@Qqh1\YHOa73n?,e[?/rN/-N[Y->%%#P#UWR^=)&,R@hRL<@gUQ*b//L^Eei
%N?O`UfX2GLY;%CSp1p$p+3@SYQtS>1E;*ur"5,T0n;]$;n(?#S<3jI_qApVbF+h=a3?eeF`.WH=K4N?=fK>b:NZ\M$[ft*hksnhb
%]#3G=?$[LL+.?Chj)$,'Um%I7O@1\Gg;pV_OD$m*^9j!3WJMfD1<h[(jb$%Y%bTK8*Rk2-^abtZOn,9*]bP4CU8qa':u<8AiQ'&d
%@F7>:M+Q/&7]BDm3YXu`a\N$=Hm+*_+*.8kmBR2+IS>nZd'@2N71;b!E0hb(1UJWD;C:]fL(PRji\\]B'XYZ[pBJgnia+C^on<i1
%`<`$:!<$V:H#Z5cd7*Jc'd37n$C\&3O;3ERE<qm)Z*Fc%Y]sF'Q,9Qj>n@BabU0&.3_ATi(.q!EfeEU@^tQ8>RTYKC_GTFa%Q'$B
%A)ESeM/[)qop;&Kfa)b@L5AXE06L'GPL]"D+Y%(I53]Qi'i?\h-m[2OW^],6E'd3"M+mJEK+]DDd.0dF2<^c(jVY_tc6!<%LMEh4
%Of1ZJ_bN,1llJW`d=g*Aj"TCk':CDG'&/R@dPsiuBcL]ahaJ9!U*F=g%Kq0p%TFKp(uY_N%@QFl`Z<+`*a0T]FP*uAN\"Y>_MoQE
%Cd^ST7&W0kU*F+l@n6sH<4*jTD.uZD5)uUbO(cP0KkY_8CB`iK8RR_LW^P.JTrr+FT<Jrr-4QtKQ:A9?*(U(^LDGg0E#?[qGE>U.
%FcU>CDFD?6]mCU<5h&>/d'^"h>UVV4d8cAuMjRHj93`s1_qo-I2VO$NW#:ap,bqsU&>eYAjI'oYN%8.Q*:B.cLc"FZ=(Rg_XqI.U
%3-@l1YD^KO?rB9M$\CRQOH(31E*DZ^97E4<V_4+C#9Y:1F\S/q%N.tfL-.+&UG^QoI(9#aC4oeHQ*Y.'<bDML"i>g-`W.*9e-Nt0
%r^Wc'U^Am07nZ@H"VY`TXIRDf*s:gR2ZW\46*G.`OJ^qdi,EVuY"3;hAl3bh;$Cb<dT6^AiVDfMhf^UI?>/cA;06\HdF"%tPqK[p
%h#UgpqX78dK<iY^KC,mo5Z1"j:-r-u%S9c24Xai*:eQr'ifHn>6]VHmejCW98)b+@k,=dL.cqQN*l\b4eBRu[,B`-@0h7h2<O@gX
%#/Cj^3N9*7846nmUf@HZF][[h.jP,2]84_\,)o&g=JI/C-5&oSNHK,J%;5qH9gcpf*tI>J,D+eU=9Lh4d%Kb%qZR*/RtMC-7@omI
%nKb-eC`Z8tn97(UO+9Wp!8CJn#YAH3K4727:j"s>PXJEoUEbVVPDa'/8':AGJ1#7dSgd'i*7&.fD`j5>&ncs+TMnpMB*PGo#1@P?
%\l_lT#2E^mSKTd+oL)b+DM>0Klq%g&C):fg%KJtbQrpc$O[CoMerM3kH\OqF5=8Vq8_>*P&jc`6(3Wbgd68IA:M@.noO-&3T]hI[
%0kpZ478+VS*eP*+ER@^df)DVE*8#q%h\Z6U,GJTHA#kM)7T91/Y.]D>r1FU=8<gpoIMfud!?Bmn846Ed]"2RGBjc![7%pju*kdY)
%A*W"MM_0e*"&In]7Zh:[=+Z"i)d1"n8%l(-^:6HSs7kB458Spd&N/s:)g97;Te:JC+Eb"P0%gt!N=B[C"@%7.UaWK$TZZ-O^:7rP
%Cpl9U/&ucYo]ZhkZQe$<1QIB^#4R7'fXgBj_2h"Vi?8<tP,V'`Os(716G"NgRnBiW\6Z2)JU3tm1/uY?+^l';^T\'%'L>P`PqXU1
%#"Sd<c%\7jn7UBfM.-9p*+DF4X!p1KoK=`d+@mX)5ACc9N=)N)Pp8TJ#24a<6`cC_VhRi!U'(ji7jT8^.sn=dkQ:gI$rMR4ni"-k
%1;`,6k&jJTNQ6OZm8o;IpA(?5(*a4&U*XUn66HF)=\/-AB:B59C!_HKZFN[G9+@pN+B\-3L<;;CL5iQd7h)h<6"?_kg9X/[+X;kd
%+W$VcW'$!f\WG`bch,P@Lk57.2'O<O$;;s5-p.:[Y<PjS)'MC([j4ku'kkmKs+R$2)l6E*oF*M6<K2s4E8QMKCAl-mIF`)/aT1\P
%QK'^*e?"42Ob.sDAEMO';gnCPORQ'@C5%dlC^2(%F_JV%d07FWNf=EP-=%6RS!kHEW_O'LK$_DkWmf:M9Y9>DfO_pfUtHZHRT9",
%J7B3eh6O9""0jV@US\;-Yh"SSP\!5s@DJkBTgprsJ28205.HK43><5M&juhTq8O+`"<jA2qt?MP_&>VDM=aeO)h8Qbn2hB/])QD,
%iXMO>>Ak?$T+^iR/2O"'2<Xj,-k],O-?OOPoAd:YnGKeDh"bqoIsQQK55(p0(+BH8@3eP-UW-PFbs[/0c$GpUf!e6k9[H&^M+sNj
%U6@2=#6J0fH=D:g)^*+YM$+85LeJW&n"qY!>6Z%BQBjs]e?VUf.LJ\;5]_#dRYue#f]XZ7bU3Y,2\IX>*"K"6:dA^*1kRe(7[Bm7
%E2<`%eU:(!\NgKrSEV5JA(nT/M;M,;<)]H!7MHg%D2Jh>`sGhA:6O>MWE*4YO]R-,8-<3BbRSgR,4;>^-3GDgO@6)#TiOVET<?&$
%'*h3BTQ]7@2>U(!fs`7L//E(Em5]_k!7%4-5UN-jSB49Y=a29#2==.%Wl;uG.L'Db2MkQnbbT@5(;(?=K9390'Eb+DLjLt'_6@/F
%*fBt?[FIt(*3(j6K=]/P!^]/H."m(%SUJ[h$gcE>Q)DDPl*>CfCkX\dK`4]o6:p8`$;-t+C_;oJ8UXF,D+#[%_GXCc#j#a6D3GEU
%<JXe5Q9H]JiE/ZO$"'YM)f\_B`.g:nB_#km16LVA>"%Ff=%gAH%+8n70o>_`3@7Up&i!B_!`_S`PXBC[in@ItOaO(ROP&338)jZS
%[&F-D=T)a3=If'9pO#Do9C"ME%jlE+.1'"2KQ&X(L`b1kd6q.A_A3D.g]$Gbh,!oZ7_?W>iLY8(i5dJbOXlTgJ_2lcJg32(`Kh\t
%kk&VmHu,K,%VX>l"E;M(=($k8XN5/_8[IZ<83QTb(&Ot9\-l.99a(CM&Q-=g]X"b?jdTa0q]U.R3S5COo'Ng"Brni_5V7]G'G25^
%2pK^[7]7Dr`?-K/+U8Kmo0.6P=,A>j/*[KaO/Y]iMJ;nN%,<gJ*.\@IZoRCuG+-lFJ/M@qH8J%)@0G$b)6V^M#-_Z!<(U'GY0-aV
%Sgo3abQRkJ68aD(OX)l%T;*BUo/tFb@817\b!rut,mm?[qbhq=VNG;.GBs(A_O1X^pT,:."Q[,`JXS=Dq9)21.#A'cQPR"ZZ7RjN
%,4S!g!EIcU,)P`F)\K:sR-$jTL_k*G!)>4I@#s:)(Q1e8'EF<*,4aVmO5C!JkDkG;.<QGT(./+`*%aD0-``b9Jf.D`,R;c/Tg/P7
%+pd(">EE"=,#s`sF,d;9DR!blGcne:+6&t!Ltk(GMD,Ir"jP.P"qRWo+5<_m?O3$!UloMD0p>uRM,3%b(S=r*G_m<5cn$!PW2?b9
%oMjlB"EI*C(r`;GAi3[$(^AoQDYg=l,doG?1b_mm`TraRq1hN*=4**<TaTZ\oPpjm%]AFh]YUcL2$?hXS(Q_:"WB3"a6Q\b^l%fC
%;@UnA]tubmQ>j\UHd-9HCLRL0R`)`>L'\)?U3Plc.7&F&JnnRc.^#YA%15KN4"HC,@pn'p-gCsr1)W%V-5TmnKk^cuLLU^(`"$Ql
%9[028\f%tBDfnK@&4mC6k;:\Ug3cA?Qo7>F$MN8m>67:0>#mMq&@(gE3k`ctTVDuNfFKAK$=%b+ET&jc<RtVqf+`q%]n-sB\;C>*
%7Vu5/JBLMd$7U`.ri3`a9W6[^=/(S75e*(k7Z<#G3CA1p`gO5D"fo_L_W-@m6]7p8ZiT#q;qD25^dZ1oi*m"3hNJ"J[t3r;d&Ti8
%RDK:cThbRuc<opU@5>]EVSW,"at6IML("T3?T%fo^idU>Ingh*0]istNQ5`7(3YtL]?,Ut!+K,&Z[b7GrO9&F*"B:jK\2DM#J#e'
%+o#3XKgb1/`313(Ls:p7E-2I@`<7;jc#R>MnN3E^,Edd[@Asqq!<hIE4/Z0i;#)XG,ZInt2rNq3(lG:A>S&f<`W`6tTF]3YlN,$O
%>695#19Ce++P;7AE-U(DecS$X@M6a#Tt:38%G)1I7c=FgoMf(,rc1i>NEfn?!!<XT"%eKsqODgMO]@FqZaAcNKuG9f2+dSd]iMAu
%Oa0?SECE22bRGBV\@@Da'A-<XU2;mfb@U2D7h'*",J:0?#X3g_3*FbjSJJ"+X2q`f!XgDUSr6Pb34,HmH:moh'R1EOBJC:^/quUl
%*1Y:<R3@]i*k<KqB^1fk9+oqbZHdD+#uPQ0Pt]>W@>!%F]C7C=.IX=R?[>O)*9Ip9F%6gJjt&<RFd%oGU]]?cndmn`&V.h*`ChKN
%)R-2?cE%0#Mc7;4,7Qh6Y.l<u%6EiYQDh/Ua9$M'fhPp==L&PW5oebA,ZpW4NC<oom%D1'Fs+fVE>0DHAar&Y]NAupB&dXs<reHi
%7r7o$L?[]Z@M1rU"AW`amDI'QnZ6J]!.Y0JgCdBjQF3Q1&--1m_S!3\B`t94SEn[3OjA=B>a_+XW9BU*7lZ<\pFK(]=3u2]rP^gV
%01J6r=%a-G&S/1nH""QiJ6H?=(n??(Kp)DT2I:;jJUV3m)Tm>/]NT0k5H3>SG#'6j9,qgFB;?c#S]a:<!Oc4:L;rJ38-^?M$^G&>
%9dhfHWMUO4ri1>S0]5o=^`].H&M:dP:ldJ7X;)Xpf-P.,ZKB3@`K2:m&I<nLH"I0orX[YD#.B/g&"`,\!^HhmJb2qTYTa^s9M@3'
%RY3ZO?m.hn!n&Th+"?1tXD;O=d&W7]VHH7F^g1NfX+nQ"n;IgoQNjG(Jj9`3fn?AWr+qO_,)?Es%cUh@^.;=L7Au(T#XKLJ\I#h_
%LgV7;KT(aE(11dPQ,4\*LP'`*QLrbef+#3?i],qVE!'hjCP-G:\e6l16]9lm8K6rG_);KHLW#q&@X.9R1k7tRo9N0V,Q9M;./W98
%jr7'8LXY<-5YOg]&*WM.E_8IlTu^gGcEOQ^.]tIp1#GCL=nJ3A&bu>^jKPs!7#?.O6@T^N_ipdiJ42n]P[aHdA^[:a&OWQhfJdam
%E"H"0CcFVfP76H7fPLV\$GW?Olc`K[;&-ZiD]Sh'\&#I3N.s.HLc^8i9#,<NRVo\T44b0ASMY1/gp>4TNTI+/Q"hOu$($U/c.n>O
%9W:?#M5_Xp3tZi#]Q^phXBcQY'br2^;b;a2^(7k5d"gT31_kM]OZn>%L`%.Y-:FGVK3/sbZAV+42q;8&0]I$bBtTgP8.\7RLYP/-
%".U$fiHWF!laSEkPl*8VedW'$J,l-"S69-+)/aOZh-Z<%H'g!@+NcPRmLt]kc-h\6#E0nh>IU7N=9(ilI\?H[d2uT*9Lc.G"Og#!
%f,>8f]!8FO?dp=+kR&%:)^"]K__>q-%%mg28`cVU(jZo?$;62$C*ib(Cgnn24qJ^_j9ePIL)S'F9GO;bd(0ZbkOT&N"UeK.qq-E!
%O(d2;X1R#k.ZQPh74A'=*`i5B#9URHL84K[BO7d,U2&]]^+'3_d`(Hu1m\\,"t>UBedYCNf-P/9E=HfG"8<hs/aJ^g0D,Y3TL<7=
%$4m^UbotFg=Wd%7,ar]VqrRWnh%b:%fT'V10ViHRWQ$hQr:i5elA*H@dVP8L(*$Do)Q#+]4G3%H(3K#48jr'&1cq_Tq`%8N=Sa@d
%0EUd+#$Xr7--:gjA6d*rL5pud/A/k=('ImjiDY.nk<nRlJ:eQ]"3&doS/WHfeCb0QW8]CmG[gsg(.<JM.hW(XbRsp`Y9CPq(17s!
%,[fpAS!AE@qlEM_i+#3[Z%s)-iFT>-,G:Xe]`l!,N$sC^E]8]c64U)2Q+^KR-p#;6L^9G[6`;729H20A!3WMM^KMF%9HBlS8H#g'
%\$3beGXbAC:EfTt"f9GiW?6A7#3cZ"]-=[KAq69n4b_r7Ne&GNBu=jZH8P11E6_X*q-oTI[F\ZA&&a)NNbX:C_[Cbl'$ua/^qN.?
%N8W+!mPbgQZRnpf+Ti,8lB.M:B6/"%4qH-+Rs6HD#^A=;cCt]mG"@:`C['3]M7[aS)u*K%6.d5KJ;Nb$HTBFYerUK1l7:Wp$t9TB
%!E'\<$`<&JM6JQ=M,jWhTla?:^r!BWU!\I=M23RaK>81KUY*Fqi\=/\)Ysg8QOE<t%a1VYL^fBW>"FFfYn[;]E^Wg&$]_H5*`n#;
%C`5bZne8Y'Gk7G^Ece,@iS?cT"U>*c>3mFRP"*Q4*Ik16>YI81'r&P]8DIXiT#Zt,Nj(P%GpF.M)KspSi+#28KM[o0!X/B-%ic&`
%0\]?bW$(1ep&,?dkV\`@i,HC=@R^oJL5h$'jq`=U"u[bo+4,7F,N<]&rXN@CN-TpCI^SgG!qXbAkW;,iaH1"J)2&&6>1dMD`sn8G
%Ei_qcZja'HZBh^%F;Q:UlUSTS.u/4](MM5uGbF3_d,,h3&;Ud$=S*S"7+;K?7>&7ZOAA59QgMYs1k]G`#XPI7Tc]LAN>J>rV;>)-
%T7]#M=+4Pu,P;9:<JE*NJRpj"BGH@0$ci7/-HIPQ.QB=#YtG=+c&jMhJVc`$#Gu3@JU=3IHHR+DKT0D"g>%5`WsLSFet(i_C$6C9
%gBK#XddfjW+tG*)Z+RE+&;]t!*-RFLYWELY\HY_G!i!DlrJheTSg6Z#9hA?iY=_7W<(Q)fhJEC4/V(:)#O2GK8S"m-Ygl<hTP9/3
%A7;qu#P`V'&+!ktmQpH*)73,ipZ1p0$U#]>b8pY!,MC0O:<O(D?Q=)R>fC5j%AF\fj(*;rrI*f%q?gop_aL`?>m2B/neAm-D.:J+
%3=7;sW,Z?Vj<q1Y<BeF2^Cn;)`&9/+!=VAmJI&n+OOR'mc\W+0\ci0Ug(I'h>o2oX*)LAoPYK.)X_7t`h.D5r$@C'?+DCX&$'f/O
%"PBOZp:"H'#^Za(.*_tU6l-HZ6c5VR^e\hB_$a6_e7a_Vj!5.hCBN4'M,FXn=aTS;.;/h#)a[V[n%n`uZ1lT&&/iOnC^iQNg4gV6
%,ATQ@oV4D0W2=NQ!KL/DT,OC.Mnt>\>X`04p=CSDi36D1hF.l7Qg/(hD/8M:+=*\aUBF5G)KA`aN^*Z?=IR+SJUka#kL_Mc8]:Th
%ILJ6-F"[(=VpunC`ar3S:-#_1:CD?Z/&Z[/0K%f_7:6R2*JFGdhkQ1HX"E1fk#d4"1(HWQ]]g!E>\DN\Vi##sJ?<1Ib0^hpja8"U
%8:f[O.`6P?(/cQ2R>0b:[E]%0G8npV%M>X!qZ-Qq`3ECqilrlT.]/AVU:l*=cF_E\T2]pkIR"s;/TQ@N]]P<Cd)@=UPL%=sE4Rjk
%!"Q)>hOOma(QRiNfE>]U!Rd?k7eToFC^3ojA7VlSF>hN_hkC5f_n&.X"KP().#&V7+d2$pI2$!C<S,/,!,Na-CY1_i_%rNh7/CXh
%[L:`*_XTEA<#KkZir!*qG=G!=FqM6(O@c689*H-r85QTP*h]8'E!om?Y3E1(@&Nio:Up'-15.^Gm6FHGr9tG0[g6aS<,C0n*0DES
%1KQuP22>d2m-hEFksV;)^b+eS=@;R;_?1WR8[?$[*bb,,2)k\g\&VI%='Kflo,'"o7haPW=^17]5_BfYdm]eJ<@&9U<FMJD#=*ND
%Ik:ueWe6XiqAt"91'1R?.ci.W7"p!:j_[K>p>BE#14/OoLM(hC"_3B069)9*UJFFg0LQnbVil_bZiR'J!_oo5(#bfaq=JDd.8Mqu
%#TORm-d\Ha!oY*:Na1>dpddkh\':mPAH'1<TE?dS^\ibQ$#oqYB>^Ll()_XO+9D=$NB'lS9m/sHWhYR8$MP2Hc@5P>#Z;/jh1@;G
%6QHr*.?JDf5u@+:f%s"3?J'N$%qfoj):AjKK\qS+4fl"=GjC-0K*CKeS3DR9<ad+cHuKuS_=3iVE/PoVDX7:IE(2=SL4gENj%UF'
%+,hH29JXQ.gbV7%F\Z_-gX"is@g-N>^_VK9a>/B!8e1\I_UHd"0Us-;;f9J=6h"a)\BA:/N@p_Oa<&k?VAU0+[fH^VOrcD1<rF.7
%L9md0hXbORMa:Udi`Kt/cAqn@PARtX\,hKq3eS>kj<SJ$P71u<')NX;k^d^oh^[&_G.R&&ZIn\cLb&R/DD_'k$[N.T)KQIV@>b/s
%&\]HB6s!-n#`'s8T+3r[Tb///Mnn:4Hn#^J%VRXa.aIaG*pY=>BuIiRAi9\c]`E#TB*l,sXt'ukZUA>%_qC?3aDd`1lhD?8aI%M$
%0E]SL<B7AjTHnp.aJ:Q0WA;0[,hiuc(rZD;Kbkj*"8`j%=>M('E+_3Ud#*2u2D@ibN.g=hXDOhR!0/QB??#<DS?@::-d5#`Kaj&h
%nS>u>pkB)ok@94!RGr1g\RTXA-F+tlcu<A#"p1]G_K!fg\_u(&F'KG@&5XdPP(\r>l#Pds64UkN_@HtFeo^$c7.]Bi6QQ[g<^(:1
%m1mF?^j*<`oKRs4)/6j]+DFq/S@iGWXWs^'A32MlB58mi:[DobakjEVmLVnaOF>$iM)8.r4X0um:N<YmI:-PD[*)m#M2$s@?#3i+
%a=]P[r*=LYeKeX_Nu3`=ED7_+n6?2-$:tEP.56^HeTIbja#i:h;Mc"1Y<22')M/kcFK:0:p*m'kl?_n1'h08&8lMZM>.EgU('WX%
%J('g$$GJjh4AM_L`7"1rM)0dkn,uetVfA,D*Q?iofBp@>C^0d^&C<[sl`d\4,@$"jNT&jJq/gI;KAo]'RbH"JY]I%8,T8mJ[Z)ob
%O[p,FKN+@X,%<OR@20A-KMC^j)G:kQ8CEJW%8SdlGU=V+//&Z.3(BVH>m]g&qqF%\f?,`P#E/-:@2Ba*4npknDC4%q@#&M+iKi>`
%6Y73>E]gO=S64]mYmNQ_OkLJqFDUS:nl.T[&gcP$O=7A*6jokL/3TO#YRN@KBK/G;1D0a5CN$5s+V?#0OH:g\LICbr&/HA[Z#:bf
%P<%-3<4[@-?p]M/1[\;ajcHDuKJRq4eYE)D",i.OMk4F7TZ3s%b33:JA/;57KYQ.j^op!2LKU?>HkI&<5)EqrT7k1=*"XtpjqJPc
%BQ8K#F<a,SMIX`H7AP`B,,3:51=bh`<(G<erZSgIL;@,QiTXbfh@aV(Z*u48n#tsO@#!nt2Ir0u`=B`s*1^SAh&PEp'!OK5ibe&Q
%a@;DM6UINc+V?;rd]ds&8qLYs@0rjLX'IZ!#Zu%h;,EcNMDuk*arDU("$d1YL_-D,8?N\**60.m*Y-"e-ln0BEVK$A6$NkE@nKP-
%dH`?<PT.pnE*o*).ja]k]\t>%Do-L8i)e@fZ&L.DO+]oX7j;+rWF>=Z*!r)Xo*DdA3#jl8DH%X4%@K^3OsG'7@[G<$W.EG,lNeeP
%hiM(jO0GgWa.e>ZE4E*0X^/4+,&^Jj#.$j=Yp##6.sA;TM0k(E@YXu,Rq?+Ji'@t(@-Va5M-/I[hDC`>hXo,&)p+WL5'PD;O;,U&
%\pbCV'R"aTGPWZrO6029DG<Y/Anr,mQss8Vf4Q4OV:n@,:7d"Qp`_hU9`^d?WS0N6oLZ.Vl,\%S,qAU#41lps/5@Amp%"IT<#Z;m
%dm$MlU+.A!/ZQb?%<2H8eB`YE&-la&Ak+e7SI:@>8UeAKfWg8p$BIW/fu&"bf:9o]j'DF)jJLkI*kCO-U)5OCS]FXF0S_6Bq+_2Q
%q)0"9VQ<lk,`1h2Wm#T@[7bD[9<<V:,bDo>.$HSQauh%K6RLb:_+g?\j??0uV]Z+O8jq`\X+i(0S4&NB/u$K>-W:,5$gJ!88a<.j
%ED`L+)oJgIV+IJ=j8OOB=0NmZ%0c2.q[\%A@tQ@9Z@,E8%0Qlu6ggY91n-`d)eP6>q>7\e4m>,/4kgFV<nh@\/kbcaX3sbhlnGSL
%[OU=IerIkG>`^UfHuOlrY(E6b#.BHcQlMCf`On<mIPHlkD_L8'6aU(B$g6q[c)5foS8VPcKWa]`Z"'=l.o3D>&Ji\RhbI\;80`IW
%70JdO\KP6I4Qd((:sM>f81hRhagKJMc73WHen/'!%Pl&koZHS=f6g[NiS"hFVOC^D#2rc&@h?B1$o7>6Dh8C/^1i0-1#<BqkbQp%
%)0AWe'kKq@%l8;@.`0n,mcMt*gAH_?WL5$6EK4ML*1$h\Jrhk='!N-_Lne&U4iJCC8YP7X6*2uhO(kH!2Mm_8fc4a_RmO<)@u"?<
%:f$<*#<Pks-e^!Xl_C"c\Tg3k.9(0$Samp"E+b.(KKI`aZ&<f5e*`$9-=<6*Z5o%Y/ZKi32MW'.^k<iJON!%:gM)=&5Y)HLV]c[J
%(*4#u`>R_rB;d2K8!PRt-^@K1SW7npD7d#1cAH\);/`@Np:)Ih&4<pS]@s)irkoi31s3R^S#.0lGfMuWX]&u2)@lH[28&RANLFm@
%A%,C34M5=)-8h(BV'>J(`[Qie(EHc6_nF9>%%_"Dac;BPo87>TNPVEQ'S_@(%eGW9\=o^R$]45BN,,T<Ss<?+GA1ol/(.jdQodHB
%b^@`-rp&^\k1^^7;mboI((n_8WN[+jqJ+#9:_sX;.aLEsfntFs3\a"r)Q-T@]dn\(#?n"@7'N=@1CD4/?/;mnB__]2C\9>#<3!eJ
%$X.=oC!gdJPUu$SKSNPkD_hg^pqIKt\LR6I0=.IH(K;rWeCi)a+.9Qf_hO8J[R_lIKa,WqbMK1lnBtE[.C#U<`a]2moOIAM6Z?S:
%#47Wti)rR&Sk:o[P21iONJgd,C%SkFoR%2IO$#t)6@ha?8>h'jDL?9JN#W51Y^oQgG9[/TE+#[O$A9iC18l_uW:E<3O5(tQpZh,E
%^_!UR8h4;uJJBa7LZ;)rDS&\"8:9mB7u$m$JmBcV`t#.YJO/'kb+@i8VuUTea?_qGH0Q9E`1qW:0@j_`_Nm;AUg*M>78GohTb#5T
%X5M&uKcsXY%acag8_,^aKTu`Ii@Z0>Mt"6DD`J6/]9$V?1[Xa<GL;s!rcjH=aSZl!qkr4Bl`@T5dgU4aX.\XD"-j&2=^T2%FU4eo
%gK.$a=;E;;=`VD8,i2&Dl;]N/1j67s*F^S#TP'[Db-HO;X6BF*E2^["9<R"NP`J?qBkR]*/_7u8eeS%Z/7Ur"C=nX=n=IRNLLA"V
%"-j>M>DV'Sca@274=`=#_^Sm\rb0pgR:B]T6+tn4K0n\#)<)T$l>N9EP$p?]q_fLWZI"-HO8<gh@O67sb7&#./G7_tGu./I'&hl_
%MuEYR@]bd,j;OEbqu:r76FAKlM[HBONCd)2GY02D:q,OR%Z<r*O_b:fXah+k2cWq]8Q>(6f7bJqSS:`N/8iV4qXPr##pKEr?A#p'
%RMG[hX`06PY+78p#_-<X`aqW8E"tGD#dhHB\`s1@/;-Alc6,6]NEkjC5H:[lA?dr`0a[/dUgVUaDPb?`"lE^]a,smNALf?1%Qtb]
%=#8gK$1=P%BN>!3L<gX;;Y2Y:W%dab(+a=YM"hhX$^X<Y2W7=HSeHYl!n7#.29FMl,E=Fe.f$$?L('[Z5(TtpXg'Y*R##A8it%!,
%KE4q6aE!#81/19!-l@J[S0*J"7)s>0V`2E\k.:Jc8lt!F,>W2X_b4UKASHdm5sn;.\VSu'!R9V.&K#Id>dfb($["MBB.7\Nk.*/D
%=>X[3A=o'GJLXnnV'ieA!7_kq(-)(G_!3MM2#Vs_kC@IR%bh[t@FX>m1/Y/ASQGh5a#hV&G]0;QLuYSOq_A'Gq>%M?e%b(4_dNWg
%IQi0?s714,j)TVEpu0E^l0\E5o_aXV^@RuO:YS-XIf8TubPBWQmpH(qJt)$7%hG:^qVgIirrC))SH&~>
%AI9_PrivateDataEnd
